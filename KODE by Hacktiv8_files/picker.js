function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof2(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _wrapNativeSuper(e){var n="function"==typeof Map?new Map:void 0;return(_wrapNativeSuper=function(e){if(null===e||!_isNativeFunction(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(e))return n.get(e);n.set(e,t)}function t(){return _construct(e,arguments,_getPrototypeOf(this).constructor)}return t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(t,e)})(e)}function isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}function _construct(e,t,n){return(_construct=isNativeReflectConstruct()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var i=new(Function.bind.apply(e,r));return n&&_setPrototypeOf(i,n.prototype),i}).apply(null,arguments)}function _isNativeFunction(e){return-1!==Function.toString.call(e).indexOf("[native code]")}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}function ownKeys(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function _objectSpread(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ownKeys(n,!0).forEach(function(e){_defineProperty(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ownKeys(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _typeof2(e){return(_typeof2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}this.filestack=this.filestack||{},this.filestack.pick=function(){var i={css:{main:"https://static.filestackapi.com/picker/1.12.0/main.css"},vendor:{opentok:"https://static.filestackapi.com/picker/1.12.0/assets/scripts/opentok.js",fabric:"https://static.filestackapi.com/picker/1.12.0/assets/scripts/fabric.js",cropper:"https://static.filestackapi.com/picker/1.12.0/assets/scripts/cropper.js"},sentryDSN:"https://2ff7cfad202f431eb03930e4cc9e5696@sentry.io/210196"},g=Object.freeze({});function U(e){return null==e}function L(e){return null!=e}function F(e){return!0===e}function I(e){return"string"==typeof e||"number"==typeof e||"symbol"===_typeof2(e)||"boolean"==typeof e}function P(e){return null!==e&&"object"===_typeof2(e)}var r=Object.prototype.toString;function c(e){return"[object Object]"===r.call(e)}function o(e){var t=parseFloat(String(e));return 0<=t&&Math.floor(t)===t&&isFinite(e)}function y(e){return L(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function t(e){return null==e?"":Array.isArray(e)||c(e)&&e.toString===r?JSON.stringify(e,null,2):String(e)}function j(e){var t=parseFloat(e);return isNaN(t)?e:t}function l(e,t){for(var n=Object.create(null),r=e.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}l("slot,component",!0);var u=l("key,ref,slot,slot-scope,is");function _(e,t){if(e.length){var n=e.indexOf(t);if(-1<n)return e.splice(n,1)}}var n=Object.prototype.hasOwnProperty;function d(e,t){return n.call(e,t)}function e(t){var n=Object.create(null);return function(e){return n[e]||(n[e]=t(e))}}var a=/-(\w)/g,p=e(function(e){return e.replace(a,function(e,t){return t?t.toUpperCase():""})}),s=e(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),f=/\B([A-Z])/g,b=e(function(e){return e.replace(f,"-$1").toLowerCase()});var h=Function.prototype.bind?function(e,t){return e.bind(t)}:function(n,r){function e(e){var t=arguments.length;return t?1<t?n.apply(r,arguments):n.call(r,e):n.call(r)}return e._length=n.length,e};function m(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function v(e,t){for(var n in t)e[n]=t[n];return e}function w(e){for(var t={},n=0;n<e.length;n++)e[n]&&v(t,e[n]);return t}function A(e,t,n){}function C(){return!1}var S=function(e){return e};function E(t,n){if(t===n)return!0;var e=P(t),r=P(n);if(!e||!r)return!e&&!r&&String(t)===String(n);try{var i=Array.isArray(t),o=Array.isArray(n);if(i&&o)return t.length===n.length&&t.every(function(e,t){return E(e,n[t])});if(t instanceof Date&&n instanceof Date)return t.getTime()===n.getTime();if(i||o)return!1;var a=Object.keys(t),s=Object.keys(n);return a.length===s.length&&a.every(function(e){return E(t[e],n[e])})}catch(e){return!1}}function k(e,t){for(var n=0;n<e.length;n++)if(E(e[n],t))return n;return-1}function M(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var T="data-server-rendered",x=["component","directive","filter"],O=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],N={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:C,isReservedAttr:C,isUnknownElement:C,getTagNamespace:A,parsePlatformTagName:S,mustUseProp:C,async:!0,_lifecycleHooks:O};function R(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var D=new RegExp("[^"+/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/.source+".$_\\d]");var B,z="__proto__"in{},$="undefined"!=typeof window,W="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,G=W&&WXEnvironment.platform.toLowerCase(),H=$&&window.navigator.userAgent.toLowerCase(),V=H&&/msie|trident/.test(H),Q=H&&0<H.indexOf("msie 9.0"),q=H&&0<H.indexOf("edge/"),Y=(H&&H.indexOf("android"),H&&/iphone|ipad|ipod|ios/.test(H)||"ios"===G),K=(H&&/chrome\/\d+/.test(H),H&&/phantomjs/.test(H),H&&H.match(/firefox\/(\d+)/)),X={}.watch,Z=!1;if($)try{var J={};Object.defineProperty(J,"passive",{get:function(){Z=!0}}),window.addEventListener("test-passive",null,J)}catch(e){}var ee=function(){return void 0===B&&(B=!$&&!W&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),B},te=$&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ne(e){return"function"==typeof e&&/native code/.test(e.toString())}var re,ie="undefined"!=typeof Symbol&&ne(Symbol)&&"undefined"!=typeof Reflect&&ne(Reflect.ownKeys);re="undefined"!=typeof Set&&ne(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var oe=A,ae=0,se=function(){this.id=ae++,this.subs=[]};se.prototype.addSub=function(e){this.subs.push(e)},se.prototype.removeSub=function(e){_(this.subs,e)},se.prototype.depend=function(){se.target&&se.target.addDep(this)},se.prototype.notify=function(){for(var e=this.subs.slice(),t=0,n=e.length;t<n;t++)e[t].update()},se.target=null;var ce=[];function le(e){ce.push(e),se.target=e}function ue(){ce.pop(),se.target=ce[ce.length-1]}var de=function(e,t,n,r,i,o,a,s){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},pe={child:{configurable:!0}};pe.child.get=function(){return this.componentInstance},Object.defineProperties(de.prototype,pe);var fe=function(e){void 0===e&&(e="");var t=new de;return t.text=e,t.isComment=!0,t};function he(e){return new de(void 0,void 0,void 0,String(e))}function me(e){var t=new de(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var ve=Array.prototype,ge=Object.create(ve);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(o){var a=ve[o];R(ge,o,function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n,r=a.apply(this,e),i=this.__ob__;switch(o){case"push":case"unshift":n=e;break;case"splice":n=e.slice(2)}return n&&i.observeArray(n),i.dep.notify(),r})});var ye=Object.getOwnPropertyNames(ge),_e=!0;function be(e){_e=e}var we=function(e){var t;this.value=e,this.dep=new se,this.vmCount=0,R(e,"__ob__",this),Array.isArray(e)?(z?(t=ge,e.__proto__=t):function(e,t,n){for(var r=0,i=n.length;r<i;r++){var o=n[r];R(e,o,t[o])}}(e,ge,ye),this.observeArray(e)):this.walk(e)};function Ae(e,t){var n;if(P(e)&&!(e instanceof de))return d(e,"__ob__")&&e.__ob__ instanceof we?n=e.__ob__:_e&&!ee()&&(Array.isArray(e)||c(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new we(e)),t&&n&&n.vmCount++,n}function Ce(n,e,r,t,i){var o=new se,a=Object.getOwnPropertyDescriptor(n,e);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(r=n[e]);var l=!i&&Ae(r);Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(n):r;return se.target&&(o.depend(),l&&(l.dep.depend(),Array.isArray(e)&&function e(t){for(var n=void 0,r=0,i=t.length;r<i;r++)(n=t[r])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&e(n)}(e))),e},set:function(e){var t=s?s.call(n):r;e===t||e!=e&&t!=t||s&&!c||(c?c.call(n,e):r=e,l=!i&&Ae(e),o.notify())}})}}function Se(e,t,n){if(Array.isArray(e)&&o(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n;var r=e.__ob__;return e._isVue||r&&r.vmCount?n:r?(Ce(r.value,t,n),r.dep.notify(),n):e[t]=n}function Ee(e,t){if(Array.isArray(e)&&o(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount||d(e,t)&&(delete e[t],n&&n.dep.notify())}}we.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)Ce(e,t[n])},we.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)Ae(e[t])};var ke=N.optionMergeStrategies;function xe(e,t){if(!t)return e;for(var n,r,i,o=ie?Reflect.ownKeys(t):Object.keys(t),a=0;a<o.length;a++)"__ob__"!==(n=o[a])&&(r=e[n],i=t[n],d(e,n)?r!==i&&c(r)&&c(i)&&xe(r,i):Se(e,n,i));return e}function Fe(n,r,i){return i?function(){var e="function"==typeof r?r.call(i,i):r,t="function"==typeof n?n.call(i,i):n;return e?xe(e,t):t}:r?n?function(){return xe("function"==typeof r?r.call(this,this):r,"function"==typeof n?n.call(this,this):n)}:r:n}function Ie(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function Te(e,t,n,r){var i=Object.create(e||null);return t?v(i,t):i}ke.data=function(e,t,n){return n?Fe(e,t,n):t&&"function"!=typeof t?e:Fe(e,t)},O.forEach(function(e){ke[e]=Ie}),x.forEach(function(e){ke[e+"s"]=Te}),ke.watch=function(e,t,n,r){if(e===X&&(e=void 0),t===X&&(t=void 0),!t)return Object.create(e||null);if(!e)return t;var i={};for(var o in v(i,e),t){var a=i[o],s=t[o];a&&!Array.isArray(a)&&(a=[a]),i[o]=a?a.concat(s):Array.isArray(s)?s:[s]}return i},ke.props=ke.methods=ke.inject=ke.computed=function(e,t,n,r){if(0,!e)return t;var i=Object.create(null);return v(i,e),t&&v(i,t),i},ke.provide=Fe;var Oe=function(e,t){return void 0===t?e:t};function Ne(n,r,i){if("function"==typeof r&&(r=r.options),function(e){var t=e.props;if(t){var n,r,i={};if(Array.isArray(t))for(n=t.length;n--;)"string"==typeof(r=t[n])&&(i[p(r)]={type:null});else if(c(t))for(var o in t)r=t[o],i[p(o)]=c(r)?r:{type:r};e.props=i}}(r),function(e){var t=e.inject;if(t){var n=e.inject={};if(Array.isArray(t))for(var r=0;r<t.length;r++)n[t[r]]={from:t[r]};else if(c(t))for(var i in t){var o=t[i];n[i]=c(o)?v({from:i},o):{from:o}}}}(r),function(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}(r),!r._base&&(r.extends&&(n=Ne(n,r.extends,i)),r.mixins))for(var e=0,t=r.mixins.length;e<t;e++)n=Ne(n,r.mixins[e],i);var o,a={};for(o in n)s(o);for(o in r)d(n,o)||s(o);function s(e){var t=ke[e]||Oe;a[e]=t(n[e],r[e],i,e)}return a}function Re(e,t,n){if("string"==typeof n){var r=e[t];if(d(r,n))return r[n];var i=p(n);if(d(r,i))return r[i];var o=s(i);return d(r,o)?r[o]:r[n]||r[i]||r[o]}}function De(e,t,n,r){var i=t[e],o=!d(n,e),a=n[e],s=Pe(Boolean,i.type);if(-1<s)if(o&&!d(i,"default"))a=!1;else if(""===a||a===b(e)){var c=Pe(String,i.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=function(e,t,n){if(!d(t,"default"))return;var r=t.default;if(e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n])return e._props[n];return"function"==typeof r&&"Function"!==Ue(t.type)?r.call(e):r}(r,i,e);var l=_e;be(!0),Ae(a),be(l)}return a}function Ue(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function Le(e,t){return Ue(e)===Ue(t)}function Pe(e,t){if(!Array.isArray(t))return Le(t,e)?0:-1;for(var n=0,r=t.length;n<r;n++)if(Le(t[n],e))return n;return-1}function je(e,t,n){le();try{if(t)for(var r=t;r=r.$parent;){var i=r.$options.errorCaptured;if(i)for(var o=0;o<i.length;o++)try{if(!1===i[o].call(r,e,t,n))return}catch(e){Be(e,r,"errorCaptured hook")}}Be(e,t,n)}finally{ue()}}function Me(e,t,n,r,i){var o;try{(o=n?e.apply(t,n):e.call(t))&&!o._isVue&&y(o)&&!o._handled&&(o.catch(function(e){return je(e,r,i+" (Promise/async)")}),o._handled=!0)}catch(e){je(e,r,i)}return o}function Be(t,e,n){if(N.errorHandler)try{return N.errorHandler.call(null,t,e,n)}catch(e){e!==t&&ze(e)}ze(t)}function ze(e){if(!$&&!W||"undefined"==typeof console)throw e;console.error(e)}var $e,We=!1,Ge=[],He=!1;function Ve(){He=!1;for(var e=Ge.slice(0),t=Ge.length=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&ne(Promise)){var Qe=Promise.resolve();$e=function(){Qe.then(Ve),Y&&setTimeout(A)},We=!0}else if(V||"undefined"==typeof MutationObserver||!ne(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())$e="undefined"!=typeof setImmediate&&ne(setImmediate)?function(){setImmediate(Ve)}:function(){setTimeout(Ve,0)};else{var qe=1,Ye=new MutationObserver(Ve),Ke=document.createTextNode(String(qe));Ye.observe(Ke,{characterData:!0}),$e=function(){qe=(qe+1)%2,Ke.data=String(qe)},We=!0}function Xe(e,t){var n;if(Ge.push(function(){if(e)try{e.call(t)}catch(e){je(e,t,"nextTick")}else n&&n(t)}),He||(He=!0,$e()),!e&&"undefined"!=typeof Promise)return new Promise(function(e){n=e})}var Ze=new re;function Je(e){!function e(t,n){var r,i;var o=Array.isArray(t);if(!o&&!P(t)||Object.isFrozen(t)||t instanceof de)return;if(t.__ob__){var a=t.__ob__.dep.id;if(n.has(a))return;n.add(a)}if(o)for(r=t.length;r--;)e(t[r],n);else for(i=Object.keys(t),r=i.length;r--;)e(t[i[r]],n)}(e,Ze),Ze.clear()}var et=e(function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),r="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=r?e.slice(1):e,once:n,capture:r,passive:t}});function tt(e,i){function o(){var e=arguments,t=o.fns;if(!Array.isArray(t))return Me(t,null,arguments,i,"v-on handler");for(var n=t.slice(),r=0;r<n.length;r++)Me(n[r],null,e,i,"v-on handler")}return o.fns=e,o}function nt(e,t,n,r,i,o){var a,s,c,l;for(a in e)s=e[a],c=t[a],l=et(a),U(s)||(U(c)?(U(s.fns)&&(s=e[a]=tt(s,o)),F(l.once)&&(s=e[a]=i(l.name,s,l.capture)),n(l.name,s,l.capture,l.passive,l.params)):s!==c&&(c.fns=s,e[a]=c));for(a in t)U(e[a])&&r((l=et(a)).name,t[a],l.capture)}function rt(e,t,n){var r;e instanceof de&&(e=e.data.hook||(e.data.hook={}));var i=e[t];function o(){n.apply(this,arguments),_(r.fns,o)}U(i)?r=tt([o]):L(i.fns)&&F(i.merged)?(r=i).fns.push(o):r=tt([i,o]),r.merged=!0,e[t]=r}function it(e,t,n,r,i){if(L(t)){if(d(t,n))return e[n]=t[n],i||delete t[n],1;if(d(t,r))return e[n]=t[r],i||delete t[r],1}}function ot(e){return I(e)?[he(e)]:Array.isArray(e)?function e(t,n){var r=[];var i,o,a,s;for(i=0;i<t.length;i++)U(o=t[i])||"boolean"==typeof o||(a=r.length-1,s=r[a],Array.isArray(o)?0<o.length&&(at((o=e(o,(n||"")+"_"+i))[0])&&at(s)&&(r[a]=he(s.text+o[0].text),o.shift()),r.push.apply(r,o)):I(o)?at(s)?r[a]=he(s.text+o):""!==o&&r.push(he(o)):at(o)&&at(s)?r[a]=he(s.text+o.text):(F(t._isVList)&&L(o.tag)&&U(o.key)&&L(n)&&(o.key="__vlist"+n+"_"+i+"__"),r.push(o)));return r}(e):void 0}function at(e){return L(e)&&L(e.text)&&!1===e.isComment}function st(e,t){if(e){for(var n=Object.create(null),r=ie?Reflect.ownKeys(e):Object.keys(e),i=0;i<r.length;i++){var o=r[i];if("__ob__"!==o){for(var a=e[o].from,s=t;s;){if(s._provided&&d(s._provided,a)){n[o]=s._provided[a];break}s=s.$parent}if(!s&&"default"in e[o]){var c=e[o].default;n[o]="function"==typeof c?c.call(t):c}}}return n}}function ct(e,t){if(!e||!e.length)return{};for(var n={},r=0,i=e.length;r<i;r++){var o=e[r],a=o.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,o.context!==t&&o.fnContext!==t||!a||null==a.slot)(n.default||(n.default=[])).push(o);else{var s=a.slot,c=n[s]||(n[s]=[]);"template"===o.tag?c.push.apply(c,o.children||[]):c.push(o)}}for(var l in n)n[l].every(lt)&&delete n[l];return n}function lt(e){return e.isComment&&!e.asyncFactory||" "===e.text}function ut(e,t,n){var r,i=0<Object.keys(t).length,o=e?!!e.$stable:!i,a=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(o&&n&&n!==g&&a===n.$key&&!i&&!n.$hasNormal)return n;for(var s in r={},e)e[s]&&"$"!==s[0]&&(r[s]=dt(t,s,e[s]))}else r={};for(var c in t)c in r||(r[c]=pt(t,c));return e&&Object.isExtensible(e)&&(e._normalized=r),R(r,"$stable",o),R(r,"$key",a),R(r,"$hasNormal",i),r}function dt(e,t,n){function r(){var e=arguments.length?n.apply(null,arguments):n({});return(e=e&&"object"===_typeof2(e)&&!Array.isArray(e)?[e]:ot(e))&&(0===e.length||1===e.length&&e[0].isComment)?void 0:e}return n.proxy&&Object.defineProperty(e,t,{get:r,enumerable:!0,configurable:!0}),r}function pt(e,t){return function(){return e[t]}}function ft(e,t){var n,r,i,o,a;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),r=0,i=e.length;r<i;r++)n[r]=t(e[r],r);else if("number"==typeof e)for(n=new Array(e),r=0;r<e;r++)n[r]=t(r+1,r);else if(P(e))if(ie&&e[Symbol.iterator]){n=[];for(var s=e[Symbol.iterator](),c=s.next();!c.done;)n.push(t(c.value,n.length)),c=s.next()}else for(o=Object.keys(e),n=new Array(o.length),r=0,i=o.length;r<i;r++)a=o[r],n[r]=t(e[a],a,r);return L(n)||(n=[]),n._isVList=!0,n}function ht(e,t,n,r){var i,o=this.$scopedSlots[e];i=o?(n=n||{},r&&(n=v(v({},r),n)),o(n)||t):this.$slots[e]||t;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},i):i}function mt(e){return Re(this.$options,"filters",e)||S}function vt(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function gt(e,t,n,r,i){var o=N.keyCodes[t]||n;return i&&r&&!N.keyCodes[t]?vt(i,r):o?vt(o,e):r?b(r)!==t:void 0}function yt(i,o,a,s,c){if(a)if(P(a)){var l;Array.isArray(a)&&(a=w(a));function e(t){if("class"===t||"style"===t||u(t))l=i;else{var e=i.attrs&&i.attrs.type;l=s||N.mustUseProp(o,e,t)?i.domProps||(i.domProps={}):i.attrs||(i.attrs={})}var n=p(t),r=b(t);n in l||r in l||(l[t]=a[t],c&&((i.on||(i.on={}))["update:"+t]=function(e){a[t]=e}))}for(var t in a)e(t)}else;return i}function _t(e,t){var n=this._staticTrees||(this._staticTrees=[]),r=n[e];return r&&!t||wt(r=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),r}function bt(e,t,n){return wt(e,"__once__"+t+(n?"_"+n:""),!0),e}function wt(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&At(e[r],t+"_"+r,n);else At(e,t,n)}function At(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function Ct(e,t){if(t)if(c(t)){var n=e.on=e.on?v({},e.on):{};for(var r in t){var i=n[r],o=t[r];n[r]=i?[].concat(i,o):o}}else;return e}function St(e,t,n,r){t=t||{$stable:!n};for(var i=0;i<e.length;i++){var o=e[i];Array.isArray(o)?St(o,t,n):o&&(o.proxy&&(o.fn.proxy=!0),t[o.key]=o.fn)}return r&&(t.$key=r),t}function Et(e,t){for(var n=0;n<t.length;n+=2){var r=t[n];"string"==typeof r&&r&&(e[t[n]]=t[n+1])}return e}function kt(e,t){return"string"==typeof e?t+e:e}function xt(e){e._o=bt,e._n=j,e._s=t,e._l=ft,e._t=ht,e._q=E,e._i=k,e._m=_t,e._f=mt,e._k=gt,e._b=yt,e._v=he,e._e=fe,e._u=St,e._g=Ct,e._d=Et,e._p=kt}function Ft(e,t,n,o,r){var a,i=this,s=r.options;d(o,"_uid")?(a=Object.create(o))._original=o:o=(a=o)._original;var c=F(s._compiled),l=!c;this.data=e,this.props=t,this.children=n,this.parent=o,this.listeners=e.on||g,this.injections=st(s.inject,o),this.slots=function(){return i.$slots||ut(e.scopedSlots,i.$slots=ct(n,o)),i.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ut(e.scopedSlots,this.slots())}}),c&&(this.$options=s,this.$slots=this.slots(),this.$scopedSlots=ut(e.scopedSlots,this.$slots)),s._scopeId?this._c=function(e,t,n,r){var i=Pt(a,e,t,n,r,l);return i&&!Array.isArray(i)&&(i.fnScopeId=s._scopeId,i.fnContext=o),i}:this._c=function(e,t,n,r){return Pt(a,e,t,n,r,l)}}function It(e,t,n,r){var i=me(e);return i.fnContext=n,i.fnOptions=r,t.slot&&((i.data||(i.data={})).slot=t.slot),i}function Tt(e,t){for(var n in t)e[p(n)]=t[n]}xt(Ft.prototype);var Ot={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){Ot.prepatch(e,e)}else{(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},r=e.data.inlineTemplate;L(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns);return new e.componentOptions.Ctor(n)}(e,Qt)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions;!function(e,t,n,r,i){var o=r.data.scopedSlots,a=e.$scopedSlots,s=!!(o&&!o.$stable||a!==g&&!a.$stable||o&&e.$scopedSlots.$key!==o.$key),c=!!(i||e.$options._renderChildren||s);e.$options._parentVnode=r,e.$vnode=r,e._vnode&&(e._vnode.parent=r);if(e.$options._renderChildren=i,e.$attrs=r.data.attrs||g,e.$listeners=n||g,t&&e.$options.props){be(!1);for(var l=e._props,u=e.$options._propKeys||[],d=0;d<u.length;d++){var p=u[d],f=e.$options.props;l[p]=De(p,f,t,e)}be(!0),e.$options.propsData=t}n=n||g;var h=e.$options._parentListeners;e.$options._parentListeners=n,Vt(e,n,h),c&&(e.$slots=ct(i,r.context),e.$forceUpdate())}(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t,n=e.context,r=e.componentInstance;r._isMounted||(r._isMounted=!0,Xt(r,"mounted")),e.data.keepAlive&&(n._isMounted?((t=r)._inactive=!1,Jt.push(t)):Kt(r,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?function e(t,n){if(n&&(t._directInactive=!0,Yt(t)))return;if(!t._inactive){t._inactive=!0;for(var r=0;r<t.$children.length;r++)e(t.$children[r]);Xt(t,"deactivated")}}(t,!0):t.$destroy())}},Nt=Object.keys(Ot);function Rt(e,t,n,r,i){if(!U(e)){var o=n.$options._base;if(P(e)&&(e=o.extend(e)),"function"==typeof e){var a,s,c,l,u,d,p;if(U(e.cid)&&void 0===(e=function(t,n){if(F(t.error)&&L(t.errorComp))return t.errorComp;if(L(t.resolved))return t.resolved;var e=Mt;e&&L(t.owners)&&-1===t.owners.indexOf(e)&&t.owners.push(e);if(F(t.loading)&&L(t.loadingComp))return t.loadingComp;if(e&&!L(t.owners)){var r=t.owners=[e],i=!0,o=null,a=null;e.$on("hook:destroyed",function(){return _(r,e)});function s(e){for(var t=0,n=r.length;t<n;t++)r[t].$forceUpdate();e&&(r.length=0,null!==o&&(clearTimeout(o),o=null),null!==a&&(clearTimeout(a),a=null))}var c=M(function(e){t.resolved=Bt(e,n),i?r.length=0:s(!0)}),l=M(function(e){L(t.errorComp)&&(t.error=!0,s(!0))}),u=t(c,l);return P(u)&&(y(u)?U(t.resolved)&&u.then(c,l):y(u.component)&&(u.component.then(c,l),L(u.error)&&(t.errorComp=Bt(u.error,n)),L(u.loading)&&(t.loadingComp=Bt(u.loading,n),0===u.delay?t.loading=!0:o=setTimeout(function(){o=null,U(t.resolved)&&U(t.error)&&(t.loading=!0,s(!1))},u.delay||200)),L(u.timeout)&&(a=setTimeout(function(){a=null,U(t.resolved)&&l(null)},u.timeout)))),i=!1,t.loading?t.loadingComp:t.resolved}}(a=e,o)))return s=a,c=t,l=n,u=r,d=i,(p=fe()).asyncFactory=s,p.asyncMeta={data:c,context:l,children:u,tag:d},p;t=t||{},xn(e),L(t.model)&&function(e,t){var n=e.model&&e.model.prop||"value",r=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var i=t.on||(t.on={}),o=i[r],a=t.model.callback;L(o)?(Array.isArray(o)?-1===o.indexOf(a):o!==a)&&(i[r]=[a].concat(o)):i[r]=a}(e.options,t);var f=function(e,t){var n=t.options.props;if(!U(n)){var r={},i=e.attrs,o=e.props;if(L(i)||L(o))for(var a in n){var s=b(a);it(r,o,a,s,!0)||it(r,i,a,s,!1)}return r}}(t,e);if(F(e.options.functional))return function(e,t,n,r,i){var o=e.options,a={},s=o.props;if(L(s))for(var c in s)a[c]=De(c,s,t||g);else L(n.attrs)&&Tt(a,n.attrs),L(n.props)&&Tt(a,n.props);var l=new Ft(n,a,i,r,e),u=o.render.call(null,l._c,l);if(u instanceof de)return It(u,n,l.parent,o);if(Array.isArray(u)){for(var d=ot(u)||[],p=new Array(d.length),f=0;f<d.length;f++)p[f]=It(d[f],n,l.parent,o);return p}}(e,f,t,n,r);var h=t.on;if(t.on=t.nativeOn,F(e.options.abstract)){var m=t.slot;t={},m&&(t.slot=m)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<Nt.length;n++){var r=Nt[n],i=t[r],o=Ot[r];i===o||i&&i._merged||(t[r]=i?Dt(o,i):o)}}(t);var v=e.options.name||i;return new de("vue-component-"+e.cid+(v?"-"+v:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:f,listeners:h,tag:i,children:r},a)}}}function Dt(n,r){function e(e,t){n(e,t),r(e,t)}return e._merged=!0,e}var Ut=1,Lt=2;function Pt(e,t,n,r,i,o){return(Array.isArray(n)||I(n))&&(i=r,r=n,n=void 0),F(o)&&(i=Lt),function(e,t,n,r,i){if(L(n)&&L(n.__ob__))return fe();L(n)&&L(n.is)&&(t=n.is);if(!t)return fe();Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0);i===Lt?r=ot(r):i===Ut&&(r=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(r));var o,a;if("string"==typeof t){var s;a=e.$vnode&&e.$vnode.ns||N.getTagNamespace(t),o=N.isReservedTag(t)?new de(N.parsePlatformTagName(t),n,r,void 0,void 0,e):n&&n.pre||!L(s=Re(e.$options,"components",t))?new de(t,n,r,void 0,void 0,e):Rt(s,n,e,r,t)}else o=Rt(t,n,e,r);return Array.isArray(o)?o:L(o)?(L(a)&&function e(t,n,r){t.ns=n;"foreignObject"===t.tag&&(r=!(n=void 0));if(L(t.children))for(var i=0,o=t.children.length;i<o;i++){var a=t.children[i];L(a.tag)&&(U(a.ns)||F(r)&&"svg"!==a.tag)&&e(a,n,r)}}(o,a),L(n)&&function(e){P(e.style)&&Je(e.style);P(e.class)&&Je(e.class)}(n),o):fe()}(e,t,n,r,i)}var jt,Mt=null;function Bt(e,t){return(e.__esModule||ie&&"Module"===e[Symbol.toStringTag])&&(e=e.default),P(e)?t.extend(e):e}function zt(e){return e.isComment&&e.asyncFactory}function $t(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(L(n)&&(L(n.componentOptions)||zt(n)))return n}}function Wt(e,t){jt.$on(e,t)}function Gt(e,t){jt.$off(e,t)}function Ht(t,n){var r=jt;return function e(){null!==n.apply(null,arguments)&&r.$off(t,e)}}function Vt(e,t,n){nt(t,n||{},Wt,Gt,Ht,jt=e),jt=void 0}var Qt=null;function qt(e){var t=Qt;return Qt=e,function(){Qt=t}}function Yt(e){for(;e=e&&e.$parent;)if(e._inactive)return 1}function Kt(e,t){if(t){if(e._directInactive=!1,Yt(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)Kt(e.$children[n]);Xt(e,"activated")}}function Xt(e,t){le();var n=e.$options[t],r=t+" hook";if(n)for(var i=0,o=n.length;i<o;i++)Me(n[i],e,null,e,r);e._hasHookEvent&&e.$emit("hook:"+t),ue()}var Zt=[],Jt=[],en={},tn=!1,nn=!1,rn=0;var on=0,an=Date.now;if($&&!V){var sn=window.performance;sn&&"function"==typeof sn.now&&an()>document.createEvent("Event").timeStamp&&(an=function(){return sn.now()})}function cn(){var e,t;for(on=an(),nn=!0,Zt.sort(function(e,t){return e.id-t.id}),rn=0;rn<Zt.length;rn++)(e=Zt[rn]).before&&e.before(),t=e.id,en[t]=null,e.run();var n=Jt.slice(),r=Zt.slice();rn=Zt.length=Jt.length=0,tn=nn=!(en={}),function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,Kt(e[t],!0)}(n),function(e){var t=e.length;for(;t--;){var n=e[t],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&Xt(r,"updated")}}(r),te&&N.devtools&&te.emit("flush")}var ln=0,un=function(e,t,n,r,i){this.vm=e,i&&(e._watcher=this),e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++ln,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new re,this.newDepIds=new re,this.expression="","function"==typeof t?this.getter=t:(this.getter=function(e){if(!D.test(e)){var n=e.split(".");return function(e){for(var t=0;t<n.length;t++){if(!e)return;e=e[n[t]]}return e}}}(t),this.getter||(this.getter=A)),this.value=this.lazy?void 0:this.get()};un.prototype.get=function(){var e;le(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;je(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Je(e),ue(),this.cleanupDeps()}return e},un.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},un.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},un.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==en[t]){if(en[t]=!0,nn){for(var n=Zt.length-1;rn<n&&Zt[n].id>e.id;)n--;Zt.splice(n+1,0,e)}else Zt.push(e);tn||(tn=!0,Xe(cn))}}(this)},un.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||P(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){je(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},un.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},un.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},un.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||_(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var dn={enumerable:!0,configurable:!0,get:A,set:A};function pn(e,t,n){dn.get=function(){return this[t][n]},dn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,dn)}function fn(e){e._watchers=[];var t=e.$options;t.props&&function(n,r){var i=n.$options.propsData||{},o=n._props={},a=n.$options._propKeys=[];n.$parent&&be(!1);function e(e){a.push(e);var t=De(e,r,i,n);Ce(o,e,t),e in n||pn(n,"_props",e)}for(var t in r)e(t);be(!0)}(e,t.props),t.methods&&function(e,t){e.$options.props;for(var n in t)e[n]="function"!=typeof t[n]?A:h(t[n],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;c(t=e._data="function"==typeof t?function(e,t){le();try{return e.call(t,t)}catch(e){return je(e,t,"data()"),{}}finally{ue()}}(t,e):t||{})||(t={});var n=Object.keys(t),r=e.$options.props,i=(e.$options.methods,n.length);for(;i--;){var o=n[i];r&&d(r,o)||36!==(a=(o+"").charCodeAt(0))&&95!==a&&pn(e,"_data",o)}var a;Ae(t,!0)}(e):Ae(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),r=ee();for(var i in t){var o=t[i],a="function"==typeof o?o:o.get;r||(n[i]=new un(e,a||A,A,hn)),i in e||mn(e,i,o)}}(e,t.computed),t.watch&&t.watch!==X&&function(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)yn(e,n,r[i]);else yn(e,n,r)}}(e,t.watch)}var hn={lazy:!0};function mn(e,t,n){var r=!ee();"function"==typeof n?(dn.get=r?vn(t):gn(n),dn.set=A):(dn.get=n.get?r&&!1!==n.cache?vn(t):gn(n.get):A,dn.set=n.set||A),Object.defineProperty(e,t,dn)}function vn(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),se.target&&e.depend(),e.value}}function gn(e){return function(){return e.call(this,this)}}function yn(e,t,n,r){return c(n)&&(n=(r=n).handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}var _n,bn,wn,An,Cn,Sn,En,kn=0;function xn(e){var t=e.options;if(e.super){var n=xn(e.super);if(n!==e.superOptions){e.superOptions=n;var r=function(e){var t,n=e.options,r=e.sealedOptions;for(var i in n)n[i]!==r[i]&&((t=t||{})[i]=n[i]);return t}(e);r&&v(e.extendOptions,r),(t=e.options=Ne(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function Fn(e){this._init(e)}function In(e){e.cid=0;var a=1;e.extend=function(e){e=e||{};var t=this,n=t.cid,r=e._Ctor||(e._Ctor={});if(r[n])return r[n];function i(e){this._init(e)}var o=e.name||t.options.name;return((i.prototype=Object.create(t.prototype)).constructor=i).cid=a++,i.options=Ne(t.options,e),i.super=t,i.options.props&&function(e){var t=e.options.props;for(var n in t)pn(e.prototype,"_props",n)}(i),i.options.computed&&function(e){var t=e.options.computed;for(var n in t)mn(e.prototype,n,t[n])}(i),i.extend=t.extend,i.mixin=t.mixin,i.use=t.use,x.forEach(function(e){i[e]=t[e]}),o&&(i.options.components[o]=i),i.superOptions=t.options,i.extendOptions=e,i.sealedOptions=v({},i.options),r[n]=i}}function Tn(e){return e&&(e.Ctor.options.name||e.tag)}function On(e,t){return Array.isArray(e)?-1<e.indexOf(t):"string"==typeof e?-1<e.split(",").indexOf(t):(n=e,"[object RegExp]"===r.call(n)&&e.test(t));var n}function Nn(e,t){var n=e.cache,r=e.keys,i=e._vnode;for(var o in n){var a=n[o];if(a){var s=Tn(a.componentOptions);s&&!t(s)&&Rn(n,o,r,i)}}}function Rn(e,t,n,r){var i=e[t];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),e[t]=null,_(n,t)}Fn.prototype._init=function(e){var t,n,r,i,o=this;o._uid=kn++,o._isVue=!0,e&&e._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),r=t._parentVnode;n.parent=t.parent;var i=(n._parentVnode=r).componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(o,e):o.$options=Ne(xn(o.constructor),e||{},o),function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}((o._renderProxy=o)._self=o),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&Vt(e,t)}(o),function(i){i._vnode=null,i._staticTrees=null;var e=i.$options,t=i.$vnode=e._parentVnode,n=t&&t.context;i.$slots=ct(e._renderChildren,n),i.$scopedSlots=g,i._c=function(e,t,n,r){return Pt(i,e,t,n,r,!1)},i.$createElement=function(e,t,n,r){return Pt(i,e,t,n,r,!0)};var r=t&&t.data;Ce(i,"$attrs",r&&r.attrs||g,null,!0),Ce(i,"$listeners",e._parentListeners||g,null,!0)}(o),Xt(o,"beforeCreate"),(n=st((t=o).$options.inject,t))&&(be(!1),Object.keys(n).forEach(function(e){Ce(t,e,n[e])}),be(!0)),fn(o),(i=(r=o).$options.provide)&&(r._provided="function"==typeof i?i.call(r):i),Xt(o,"created"),o.$options.el&&o.$mount(o.$options.el)},_n=Fn,bn={get:function(){return this._data}},wn={get:function(){return this._props}},Object.defineProperty(_n.prototype,"$data",bn),Object.defineProperty(_n.prototype,"$props",wn),_n.prototype.$set=Se,_n.prototype.$delete=Ee,_n.prototype.$watch=function(e,t,n){if(c(t))return yn(this,e,t,n);(n=n||{}).user=!0;var r=new un(this,e,t,n);if(n.immediate)try{t.call(this,r.value)}catch(e){je(e,this,'callback for immediate watcher "'+r.expression+'"')}return function(){r.teardown()}},Cn=/^hook:/,(An=Fn).prototype.$on=function(e,t){var n=this;if(Array.isArray(e))for(var r=0,i=e.length;r<i;r++)n.$on(e[r],t);else(n._events[e]||(n._events[e]=[])).push(t),Cn.test(e)&&(n._hasHookEvent=!0);return n},An.prototype.$once=function(e,t){var n=this;function r(){n.$off(e,r),t.apply(n,arguments)}return r.fn=t,n.$on(e,r),n},An.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var r=0,i=e.length;r<i;r++)n.$off(e[r],t);return n}var o,a=n._events[e];if(!a)return n;if(!t)return n._events[e]=null,n;for(var s=a.length;s--;)if((o=a[s])===t||o.fn===t){a.splice(s,1);break}return n},An.prototype.$emit=function(e){var t=this._events[e];if(t){t=1<t.length?m(t):t;for(var n=m(arguments,1),r='event handler for "'+e+'"',i=0,o=t.length;i<o;i++)Me(t[i],this,n,this,r)}return this},(Sn=Fn).prototype._update=function(e,t){var n=this,r=n.$el,i=n._vnode,o=qt(n);n._vnode=e,n.$el=i?n.__patch__(i,e):n.__patch__(n.$el,e,t,!1),o(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},Sn.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},Sn.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){Xt(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||_(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),Xt(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}},xt((En=Fn).prototype),En.prototype.$nextTick=function(e){return Xe(e,this)},En.prototype._render=function(){var t,n=this,e=n.$options,r=e.render,i=e._parentVnode;i&&(n.$scopedSlots=ut(i.data.scopedSlots,n.$slots,n.$scopedSlots)),n.$vnode=i;try{Mt=n,t=r.call(n._renderProxy,n.$createElement)}catch(e){je(e,n,"render"),t=n._vnode}finally{Mt=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof de||(t=fe()),t.parent=i,t};var Dn,Un,Ln,Pn=[String,RegExp,Array],jn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Pn,exclude:Pn,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Rn(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",function(t){Nn(e,function(e){return On(t,e)})}),this.$watch("exclude",function(t){Nn(e,function(e){return!On(t,e)})})},render:function(){var e=this.$slots.default,t=$t(e),n=t&&t.componentOptions;if(n){var r=Tn(n),i=this.include,o=this.exclude;if(i&&(!r||!On(i,r))||o&&r&&On(o,r))return t;var a=this.cache,s=this.keys,c=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;a[c]?(t.componentInstance=a[c].componentInstance,_(s,c),s.push(c)):(a[c]=t,s.push(c),this.max&&s.length>parseInt(this.max)&&Rn(a,s[0],s,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}}};Dn=Fn,Ln={get:function(){return N}},Object.defineProperty(Dn,"config",Ln),Dn.util={warn:oe,extend:v,mergeOptions:Ne,defineReactive:Ce},Dn.set=Se,Dn.delete=Ee,Dn.nextTick=Xe,Dn.observable=function(e){return Ae(e),e},Dn.options=Object.create(null),x.forEach(function(e){Dn.options[e+"s"]=Object.create(null)}),v((Dn.options._base=Dn).options.components,jn),Dn.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(-1<t.indexOf(e))return this;var n=m(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this},Dn.mixin=function(e){return this.options=Ne(this.options,e),this},In(Dn),Un=Dn,x.forEach(function(n){Un[n]=function(e,t){return t?("component"===n&&c(t)&&(t.name=t.name||e,t=this.options._base.extend(t)),"directive"===n&&"function"==typeof t&&(t={bind:t,update:t}),this.options[n+"s"][e]=t):this.options[n+"s"][e]}}),Object.defineProperty(Fn.prototype,"$isServer",{get:ee}),Object.defineProperty(Fn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Fn,"FunctionalRenderContext",{value:Ft}),Fn.version="2.6.10";var Mn=l("style,class"),Bn=l("input,textarea,option,select,progress"),zn=l("contenteditable,draggable,spellcheck"),$n=l("events,caret,typing,plaintext-only"),Wn=function(e,t){return qn(t)||"false"===t?"false":"contenteditable"===e&&$n(t)?t:"true"},Gn=l("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Hn="http://www.w3.org/1999/xlink",Vn=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Qn=function(e){return Vn(e)?e.slice(6,e.length):""},qn=function(e){return null==e||!1===e};function Yn(e){for(var t=e.data,n=e,r=e;L(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(t=Kn(r.data,t));for(;L(n=n.parent);)n&&n.data&&(t=Kn(t,n.data));return function(e,t){if(L(e)||L(t))return Xn(e,Zn(t));return""}(t.staticClass,t.class)}function Kn(e,t){return{staticClass:Xn(e.staticClass,t.staticClass),class:L(e.class)?[e.class,t.class]:t.class}}function Xn(e,t){return e?t?e+" "+t:e:t||""}function Zn(e){return Array.isArray(e)?function(e){for(var t,n="",r=0,i=e.length;r<i;r++)L(t=Zn(e[r]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):P(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}function Jn(e){return tr(e)||nr(e)}var er={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},tr=l("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),nr=l("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0);var rr=Object.create(null);var ir=l("text,number,password,search,email,tel,url");var or=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(e,t){return document.createElementNS(er[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),ar={create:function(e,t){sr(t)},update:function(e,t){e.data.ref!==t.data.ref&&(sr(e,!0),sr(t))},destroy:function(e){sr(e,!0)}};function sr(e,t){var n=e.data.ref;if(L(n)){var r=e.context,i=e.componentInstance||e.elm,o=r.$refs;t?Array.isArray(o[n])?_(o[n],i):o[n]===i&&(o[n]=void 0):e.data.refInFor?Array.isArray(o[n])?o[n].indexOf(i)<0&&o[n].push(i):o[n]=[i]:o[n]=i}}var cr=new de("",{},[]),lr=["create","activate","update","remove","destroy"];function ur(e,t){return e.key===t.key&&(e.tag===t.tag&&e.isComment===t.isComment&&L(e.data)===L(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,r=L(n=e.data)&&L(n=n.attrs)&&n.type,i=L(n=t.data)&&L(n=n.attrs)&&n.type;return r===i||ir(r)&&ir(i)}(e,t)||F(e.isAsyncPlaceholder)&&e.asyncFactory===t.asyncFactory&&U(t.asyncFactory.error))}function dr(e,t,n){var r,i,o={};for(r=t;r<=n;++r)L(i=e[r].key)&&(o[i]=r);return o}var pr={create:fr,update:fr,destroy:function(e){fr(e,cr)}};function fr(e,t){(e.data.directives||t.data.directives)&&function(t,n){var e,r,i,o=t===cr,a=n===cr,s=mr(t.data.directives,t.context),c=mr(n.data.directives,n.context),l=[],u=[];for(e in c)r=s[e],i=c[e],r?(i.oldValue=r.value,i.oldArg=r.arg,vr(i,"update",n,t),i.def&&i.def.componentUpdated&&u.push(i)):(vr(i,"bind",n,t),i.def&&i.def.inserted&&l.push(i));if(l.length){function d(){for(var e=0;e<l.length;e++)vr(l[e],"inserted",n,t)}o?rt(n,"insert",d):d()}u.length&&rt(n,"postpatch",function(){for(var e=0;e<u.length;e++)vr(u[e],"componentUpdated",n,t)});if(!o)for(e in s)c[e]||vr(s[e],"unbind",t,t,a)}(e,t)}var hr=Object.create(null);function mr(e,t){var n,r,i,o=Object.create(null);if(!e)return o;for(n=0;n<e.length;n++)(r=e[n]).modifiers||(r.modifiers=hr),(o[(i=r).rawName||i.name+"."+Object.keys(i.modifiers||{}).join(".")]=r).def=Re(t.$options,"directives",r.name);return o}function vr(t,n,r,e,i){var o=t.def&&t.def[n];if(o)try{o(r.elm,t,r,e,i)}catch(e){je(e,r.context,"directive "+t.name+" "+n+" hook")}}var gr=[ar,pr];function yr(e,t){var n=t.componentOptions;if(!(L(n)&&!1===n.Ctor.options.inheritAttrs||U(e.data.attrs)&&U(t.data.attrs))){var r,i,o=t.elm,a=e.data.attrs||{},s=t.data.attrs||{};for(r in L(s.__ob__)&&(s=t.data.attrs=v({},s)),s)i=s[r],a[r]!==i&&_r(o,r,i);for(r in(V||q)&&s.value!==a.value&&_r(o,"value",s.value),a)U(s[r])&&(Vn(r)?o.removeAttributeNS(Hn,Qn(r)):zn(r)||o.removeAttribute(r))}}function _r(e,t,n){-1<e.tagName.indexOf("-")?br(e,t,n):Gn(t)?qn(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):zn(t)?e.setAttribute(t,Wn(t,n)):Vn(t)?qn(n)?e.removeAttributeNS(Hn,Qn(t)):e.setAttributeNS(Hn,t,n):br(e,t,n)}function br(n,e,t){if(qn(t))n.removeAttribute(e);else{if(V&&!Q&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){n.addEventListener("input",function e(t){t.stopImmediatePropagation(),n.removeEventListener("input",e)}),n.__ieph=!0}n.setAttribute(e,t)}}var wr={create:yr,update:yr};function Ar(e,t){var n=t.elm,r=t.data,i=e.data;if(!(U(r.staticClass)&&U(r.class)&&(U(i)||U(i.staticClass)&&U(i.class)))){var o=Yn(t),a=n._transitionClasses;L(a)&&(o=Xn(o,Zn(a))),o!==n._prevClass&&(n.setAttribute("class",o),n._prevClass=o)}}var Cr,Sr={create:Ar,update:Ar},Er="__r",kr="__c";function xr(t,n,r){var i=Cr;return function e(){null!==n.apply(null,arguments)&&Tr(t,e,r,i)}}var Fr=We&&!(K&&Number(K[1])<=53);function Ir(e,t,n,r){if(Fr){var i=on,o=t;t=o._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=i||e.timeStamp<=0||e.target.ownerDocument!==document)return o.apply(this,arguments)}}Cr.addEventListener(e,t,Z?{capture:n,passive:r}:n)}function Tr(e,t,n,r){(r||Cr).removeEventListener(e,t._wrapper||t,n)}function Or(e,t){if(!U(e.data.on)||!U(t.data.on)){var n=t.data.on||{},r=e.data.on||{};Cr=t.elm,function(e){if(L(e[Er])){var t=V?"change":"input";e[t]=[].concat(e[Er],e[t]||[]),delete e[Er]}L(e[kr])&&(e.change=[].concat(e[kr],e.change||[]),delete e[kr])}(n),nt(n,r,Ir,Tr,xr,t.context),Cr=void 0}}var Nr,Rr={create:Or,update:Or};function Dr(e,t){if(!U(e.data.domProps)||!U(t.data.domProps)){var n,r,i,o,a=t.elm,s=e.data.domProps||{},c=t.data.domProps||{};for(n in L(c.__ob__)&&(c=t.data.domProps=v({},c)),s)n in c||(a[n]="");for(n in c){if(r=c[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),r===s[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===n&&"PROGRESS"!==a.tagName){var l=U(a._value=r)?"":String(r);o=l,(i=a).composing||"OPTION"!==i.tagName&&!function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(i,o)&&!function(e,t){var n=e.value,r=e._vModifiers;if(L(r)){if(r.number)return j(n)!==j(t);if(r.trim)return n.trim()!==t.trim()}return n!==t}(i,o)||(a.value=l)}else if("innerHTML"===n&&nr(a.tagName)&&U(a.innerHTML)){(Nr=Nr||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var u=Nr.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;u.firstChild;)a.appendChild(u.firstChild)}else if(r!==s[n])try{a[n]=r}catch(e){}}}}var Ur={create:Dr,update:Dr},Lr=e(function(e){var n={},r=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach(function(e){if(e){var t=e.split(r);1<t.length&&(n[t[0].trim()]=t[1].trim())}}),n});function Pr(e){var t=jr(e.style);return e.staticStyle?v(e.staticStyle,t):t}function jr(e){return Array.isArray(e)?w(e):"string"==typeof e?Lr(e):e}function Mr(e,t,n){if(zr.test(t))e.style.setProperty(t,n);else if($r.test(n))e.style.setProperty(b(t),n.replace($r,""),"important");else{var r=Gr(t);if(Array.isArray(n))for(var i=0,o=n.length;i<o;i++)e.style[r]=n[i];else e.style[r]=n}}var Br,zr=/^--/,$r=/\s*!important$/,Wr=["Webkit","Moz","ms"],Gr=e(function(e){if(Br=Br||document.createElement("div").style,"filter"!==(e=p(e))&&e in Br)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<Wr.length;n++){var r=Wr[n]+t;if(r in Br)return r}});function Hr(e,t){var n=t.data,r=e.data;if(!(U(n.staticStyle)&&U(n.style)&&U(r.staticStyle)&&U(r.style))){var i,o,a=t.elm,s=r.staticStyle,c=r.normalizedStyle||r.style||{},l=s||c,u=jr(t.data.style)||{};t.data.normalizedStyle=L(u.__ob__)?v({},u):u;var d=function(e,t){var n,r={};if(t)for(var i=e;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=Pr(i.data))&&v(r,n);(n=Pr(e.data))&&v(r,n);for(var o=e;o=o.parent;)o.data&&(n=Pr(o.data))&&v(r,n);return r}(t,!0);for(o in l)U(d[o])&&Mr(a,o,"");for(o in d)(i=d[o])!==l[o]&&Mr(a,o,null==i?"":i)}}var Vr={create:Hr,update:Hr},Qr=/\s+/;function qr(t,e){if(e=e&&e.trim())if(t.classList)-1<e.indexOf(" ")?e.split(Qr).forEach(function(e){return t.classList.add(e)}):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function Yr(t,e){if(e=e&&e.trim())if(t.classList)-1<e.indexOf(" ")?e.split(Qr).forEach(function(e){return t.classList.remove(e)}):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";0<=n.indexOf(r);)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function Kr(e){if(e){if("object"!==_typeof2(e))return"string"==typeof e?Xr(e):void 0;var t={};return!1!==e.css&&v(t,Xr(e.name||"v")),v(t,e),t}}var Xr=e(function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}}),Zr=$&&!Q,Jr="transition",ei="animation",ti="transition",ni="transitionend",ri="animation",ii="animationend";Zr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ti="WebkitTransition",ni="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(ri="WebkitAnimation",ii="webkitAnimationEnd"));var oi=$?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function ai(e){oi(function(){oi(e)})}function si(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),qr(e,t))}function ci(e,t){e._transitionClasses&&_(e._transitionClasses,t),Yr(e,t)}function li(t,e,n){var r=di(t,e),i=r.type,o=r.timeout,a=r.propCount;if(!i)return n();function s(){t.removeEventListener(c,u),n()}var c=i===Jr?ni:ii,l=0,u=function(e){e.target===t&&++l>=a&&s()};setTimeout(function(){l<a&&s()},o+1),t.addEventListener(c,u)}var ui=/\b(transform|all)(,|$)/;function di(e,t){var n,r=window.getComputedStyle(e),i=(r[ti+"Delay"]||"").split(", "),o=(r[ti+"Duration"]||"").split(", "),a=pi(i,o),s=(r[ri+"Delay"]||"").split(", "),c=(r[ri+"Duration"]||"").split(", "),l=pi(s,c),u=0,d=0;return t===Jr?0<a&&(n=Jr,u=a,d=o.length):t===ei?0<l&&(n=ei,u=l,d=c.length):d=(n=0<(u=Math.max(a,l))?l<a?Jr:ei:null)?n===Jr?o.length:c.length:0,{type:n,timeout:u,propCount:d,hasTransform:n===Jr&&ui.test(r[ti+"Property"])}}function pi(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map(function(e,t){return fi(e)+fi(n[t])}))}function fi(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function hi(n,e){var r=n.elm;L(r._leaveCb)&&(r._leaveCb.cancelled=!0,r._leaveCb());var t=Kr(n.data.transition);if(!U(t)&&!L(r._enterCb)&&1===r.nodeType){for(var i=t.css,o=t.type,a=t.enterClass,s=t.enterToClass,c=t.enterActiveClass,l=t.appearClass,u=t.appearToClass,d=t.appearActiveClass,p=t.beforeEnter,f=t.enter,h=t.afterEnter,m=t.enterCancelled,v=t.beforeAppear,g=t.appear,y=t.afterAppear,_=t.appearCancelled,b=t.duration,w=Qt,A=Qt.$vnode;A&&A.parent;)w=A.context,A=A.parent;var C=!w._isMounted||!n.isRootInsert;if(!C||g||""===g){var S=C&&l?l:a,E=C&&d?d:c,k=C&&u?u:s,x=C&&v||p,F=C&&"function"==typeof g?g:f,I=C&&y||h,T=C&&_||m,O=j(P(b)?b.enter:b),N=!1!==i&&!Q,R=gi(F),D=r._enterCb=M(function(){N&&(ci(r,k),ci(r,E)),D.cancelled?(N&&ci(r,S),T&&T(r)):I&&I(r),r._enterCb=null});n.data.show||rt(n,"insert",function(){var e=r.parentNode,t=e&&e._pending&&e._pending[n.key];t&&t.tag===n.tag&&t.elm._leaveCb&&t.elm._leaveCb(),F&&F(r,D)}),x&&x(r),N&&(si(r,S),si(r,E),ai(function(){ci(r,S),D.cancelled||(si(r,k),R||(vi(O)?setTimeout(D,O):li(r,o,D)))})),n.data.show&&(e&&e(),F&&F(r,D)),N||R||D()}}}function mi(e,t){var n=e.elm;L(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=Kr(e.data.transition);if(U(r)||1!==n.nodeType)return t();if(!L(n._leaveCb)){var i=r.css,o=r.type,a=r.leaveClass,s=r.leaveToClass,c=r.leaveActiveClass,l=r.beforeLeave,u=r.leave,d=r.afterLeave,p=r.leaveCancelled,f=r.delayLeave,h=r.duration,m=!1!==i&&!Q,v=gi(u),g=j(P(h)?h.leave:h),y=n._leaveCb=M(function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),m&&(ci(n,s),ci(n,c)),y.cancelled?(m&&ci(n,a),p&&p(n)):(t(),d&&d(n)),n._leaveCb=null});f?f(_):_()}function _(){y.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),l&&l(n),m&&(si(n,a),si(n,c),ai(function(){ci(n,a),y.cancelled||(si(n,s),v||(vi(g)?setTimeout(y,g):li(n,o,y)))})),u&&u(n,y),m||v||y())}}function vi(e){return"number"==typeof e&&!isNaN(e)}function gi(e){if(U(e))return!1;var t=e.fns;return L(t)?gi(Array.isArray(t)?t[0]:t):1<(e._length||e.length)}function yi(e,t){!0!==t.data.show&&hi(t)}var _i=function(e){var r,t,v={},n=e.modules,g=e.nodeOps;for(r=0;r<lr.length;++r)for(v[lr[r]]=[],t=0;t<n.length;++t)L(n[t][lr[r]])&&v[lr[r]].push(n[t][lr[r]]);function a(e){var t=g.parentNode(e);L(t)&&g.removeChild(t,e)}function y(e,t,n,r,i,o,a){if(L(e.elm)&&L(o)&&(e=o[a]=me(e)),e.isRootInsert=!i,!function(e,t,n,r){var i=e.data;if(L(i)){var o=L(e.componentInstance)&&i.keepAlive;if(L(i=i.hook)&&L(i=i.init)&&i(e,!1),L(e.componentInstance))return f(e,t),u(n,e.elm,r),F(o)&&function(e,t,n,r){var i,o=e;for(;o.componentInstance;)if(o=o.componentInstance._vnode,L(i=o.data)&&L(i=i.transition)){for(i=0;i<v.activate.length;++i)v.activate[i](cr,o);t.push(o);break}u(n,e.elm,r)}(e,t,n,r),1}}(e,t,n,r)){var s=e.data,c=e.children,l=e.tag;L(l)?(e.elm=e.ns?g.createElementNS(e.ns,l):g.createElement(l,e),d(e),h(e,c,t),L(s)&&m(e,t)):F(e.isComment)?e.elm=g.createComment(e.text):e.elm=g.createTextNode(e.text),u(n,e.elm,r)}}function f(e,t){L(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,_(e)?(m(e,t),d(e)):(sr(e),t.push(e))}function u(e,t,n){L(e)&&(L(n)?g.parentNode(n)===e&&g.insertBefore(e,t,n):g.appendChild(e,t))}function h(e,t,n){if(Array.isArray(t))for(var r=0;r<t.length;++r)y(t[r],n,e.elm,null,!0,t,r);else I(e.text)&&g.appendChild(e.elm,g.createTextNode(String(e.text)))}function _(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return L(e.tag)}function m(e,t){for(var n=0;n<v.create.length;++n)v.create[n](cr,e);L(r=e.data.hook)&&(L(r.create)&&r.create(cr,e),L(r.insert)&&t.push(e))}function d(e){var t;if(L(t=e.fnScopeId))g.setStyleScope(e.elm,t);else for(var n=e;n;)L(t=n.context)&&L(t=t.$options._scopeId)&&g.setStyleScope(e.elm,t),n=n.parent;L(t=Qt)&&t!==e.context&&t!==e.fnContext&&L(t=t.$options._scopeId)&&g.setStyleScope(e.elm,t)}function b(e,t,n,r,i,o){for(;r<=i;++r)y(n[r],o,e,t,!1,n,r)}function w(e){var t,n,r=e.data;if(L(r))for(L(t=r.hook)&&L(t=t.destroy)&&t(e),t=0;t<v.destroy.length;++t)v.destroy[t](e);if(L(t=e.children))for(n=0;n<e.children.length;++n)w(e.children[n])}function A(e,t,n,r){for(;n<=r;++n){var i=t[n];L(i)&&(L(i.tag)?(s(i),w(i)):a(i.elm))}}function s(e,t){if(L(t)||L(e.data)){var n,r=v.remove.length+1;for(L(t)?t.listeners+=r:(o=e.elm,i.listeners=r,t=i),L(n=e.componentInstance)&&L(n=n._vnode)&&L(n.data)&&s(n,t),n=0;n<v.remove.length;++n)v.remove[n](e,t);L(n=e.data.hook)&&L(n=n.remove)?n(e,t):t()}else a(e.elm);function i(){0==--i.listeners&&a(o)}var o}function C(e,t,n,r){for(var i=n;i<r;i++){var o=t[i];if(L(o)&&ur(e,o))return i}}function S(e,t,n,r,i,o){if(e!==t){L(t.elm)&&L(r)&&(t=r[i]=me(t));var a=t.elm=e.elm;if(F(e.isAsyncPlaceholder))L(t.asyncFactory.resolved)?x(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(F(t.isStatic)&&F(e.isStatic)&&t.key===e.key&&(F(t.isCloned)||F(t.isOnce)))t.componentInstance=e.componentInstance;else{var s,c=t.data;L(c)&&L(s=c.hook)&&L(s=s.prepatch)&&s(e,t);var l=e.children,u=t.children;if(L(c)&&_(t)){for(s=0;s<v.update.length;++s)v.update[s](e,t);L(s=c.hook)&&L(s=s.update)&&s(e,t)}U(t.text)?L(l)&&L(u)?l!==u&&function(e,t,n,r,i){for(var o,a,s,c=0,l=0,u=t.length-1,d=t[0],p=t[u],f=n.length-1,h=n[0],m=n[f],v=!i;c<=u&&l<=f;)U(d)?d=t[++c]:U(p)?p=t[--u]:ur(d,h)?(S(d,h,r,n,l),d=t[++c],h=n[++l]):ur(p,m)?(S(p,m,r,n,f),p=t[--u],m=n[--f]):ur(d,m)?(S(d,m,r,n,f),v&&g.insertBefore(e,d.elm,g.nextSibling(p.elm)),d=t[++c],m=n[--f]):h=(ur(p,h)?(S(p,h,r,n,l),v&&g.insertBefore(e,p.elm,d.elm),p=t[--u]):(U(o)&&(o=dr(t,c,u)),U(a=L(h.key)?o[h.key]:C(h,t,c,u))?y(h,r,e,d.elm,!1,n,l):ur(s=t[a],h)?(S(s,h,r,n,l),t[a]=void 0,v&&g.insertBefore(e,s.elm,d.elm)):y(h,r,e,d.elm,!1,n,l)),n[++l]);u<c?b(e,U(n[f+1])?null:n[f+1].elm,n,l,f,r):f<l&&A(0,t,c,u)}(a,l,u,n,o):L(u)?(L(e.text)&&g.setTextContent(a,""),b(a,null,u,0,u.length-1,n)):L(l)?A(0,l,0,l.length-1):L(e.text)&&g.setTextContent(a,""):e.text!==t.text&&g.setTextContent(a,t.text),L(c)&&L(s=c.hook)&&L(s=s.postpatch)&&s(e,t)}}}function E(e,t,n){if(F(n)&&L(e.parent))e.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}var k=l("attrs,class,staticClass,staticStyle,key");function x(e,t,n,r){var i,o=t.tag,a=t.data,s=t.children;if(r=r||a&&a.pre,t.elm=e,F(t.isComment)&&L(t.asyncFactory))return t.isAsyncPlaceholder=!0;if(L(a)&&(L(i=a.hook)&&L(i=i.init)&&i(t,!0),L(i=t.componentInstance)))return f(t,n),1;if(L(o)){if(L(s))if(e.hasChildNodes())if(L(i=a)&&L(i=i.domProps)&&L(i=i.innerHTML)){if(i!==e.innerHTML)return}else{for(var c=!0,l=e.firstChild,u=0;u<s.length;u++){if(!l||!x(l,s[u],n,r)){c=!1;break}l=l.nextSibling}if(!c||l)return}else h(t,s,n);if(L(a)){var d=!1;for(var p in a)if(!k(p)){d=!0,m(t,n);break}!d&&a.class&&Je(a.class)}}else e.data!==t.text&&(e.data=t.text);return 1}return function(e,t,n,r){if(!U(t)){var i,o=!1,a=[];if(U(e))o=!0,y(t,a);else{var s=L(e.nodeType);if(!s&&ur(e,t))S(e,t,a,null,null,r);else{if(s){if(1===e.nodeType&&e.hasAttribute(T)&&(e.removeAttribute(T),n=!0),F(n)&&x(e,t,a))return E(t,a,!0),e;i=e,e=new de(g.tagName(i).toLowerCase(),{},[],void 0,i)}var c=e.elm,l=g.parentNode(c);if(y(t,a,c._leaveCb?null:l,g.nextSibling(c)),L(t.parent))for(var u=t.parent,d=_(t);u;){for(var p=0;p<v.destroy.length;++p)v.destroy[p](u);if(u.elm=t.elm,d){for(var f=0;f<v.create.length;++f)v.create[f](cr,u);var h=u.data.hook.insert;if(h.merged)for(var m=1;m<h.fns.length;m++)h.fns[m]()}else sr(u);u=u.parent}L(l)?A(0,[e],0,0):L(e.tag)&&w(e)}}return E(t,a,o),t.elm}L(e)&&w(e)}}({nodeOps:or,modules:[wr,Sr,Rr,Ur,Vr,$?{create:yi,activate:yi,remove:function(e,t){!0!==e.data.show?mi(e,t):t()}}:{}].concat(gr)});Q&&document.addEventListener("selectionchange",function(){var e=document.activeElement;e&&e.vmodel&&xi(e,"input")});var bi={inserted:function(e,t,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?rt(n,"postpatch",function(){bi.componentUpdated(e,t,n)}):wi(e,t,n.context),e._vOptions=[].map.call(e.options,Si)):"textarea"!==n.tag&&!ir(e.type)||(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",Ei),e.addEventListener("compositionend",ki),e.addEventListener("change",ki),Q&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){wi(e,t,n.context);var r=e._vOptions,i=e._vOptions=[].map.call(e.options,Si);if(i.some(function(e,t){return!E(e,r[t])}))(e.multiple?t.value.some(function(e){return Ci(e,i)}):t.value!==t.oldValue&&Ci(t.value,i))&&xi(e,"change")}}};function wi(e,t){Ai(e,t),(V||q)&&setTimeout(function(){Ai(e,t)},0)}function Ai(e,t){var n=t.value,r=e.multiple;if(!r||Array.isArray(n)){for(var i,o,a=0,s=e.options.length;a<s;a++)if(o=e.options[a],r)i=-1<k(n,Si(o)),o.selected!==i&&(o.selected=i);else if(E(Si(o),n))return void(e.selectedIndex!==a&&(e.selectedIndex=a));r||(e.selectedIndex=-1)}}function Ci(t,e){return e.every(function(e){return!E(e,t)})}function Si(e){return"_value"in e?e._value:e.value}function Ei(e){e.target.composing=!0}function ki(e){e.target.composing&&(e.target.composing=!1,xi(e.target,"input"))}function xi(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function Fi(e){return!e.componentInstance||e.data&&e.data.transition?e:Fi(e.componentInstance._vnode)}var Ii={model:bi,show:{bind:function(e,t,n){var r=t.value,i=(n=Fi(n)).data&&n.data.transition,o=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&i?(n.data.show=!0,hi(n,function(){e.style.display=o})):e.style.display=r?o:"none"},update:function(e,t,n){var r=t.value;!r!=!t.oldValue&&((n=Fi(n)).data&&n.data.transition?(n.data.show=!0,r?hi(n,function(){e.style.display=e.__vOriginalDisplay}):mi(n,function(){e.style.display="none"})):e.style.display=r?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,r,i){i||(e.style.display=e.__vOriginalDisplay)}}},Ti={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Oi(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?Oi($t(t.children)):e}function Ni(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var i=n._parentListeners;for(var o in i)t[p(o)]=i[o];return t}function Ri(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}function Di(e){return e.tag||zt(e)}function Ui(e){return"show"===e.name}var Li={name:"transition",props:Ti,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(Di)).length){var r=this.mode,i=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return 1}(this.$vnode))return i;var o=Oi(i);if(!o)return i;if(this._leaving)return Ri(e,i);var a="__transition-"+this._uid+"-";o.key=null==o.key?o.isComment?a+"comment":a+o.tag:I(o.key)?0===String(o.key).indexOf(a)?o.key:a+o.key:o.key;var s,c,l=(o.data||(o.data={})).transition=Ni(this),u=this._vnode,d=Oi(u);if(o.data.directives&&o.data.directives.some(Ui)&&(o.data.show=!0),d&&d.data&&(s=o,(c=d).key!==s.key||c.tag!==s.tag)&&!zt(d)&&(!d.componentInstance||!d.componentInstance._vnode.isComment)){var p=d.data.transition=v({},l);if("out-in"===r)return this._leaving=!0,rt(p,"afterLeave",function(){t._leaving=!1,t.$forceUpdate()}),Ri(e,i);if("in-out"===r){if(zt(o))return u;function f(){h()}var h;rt(l,"afterEnter",f),rt(l,"enterCancelled",f),rt(p,"delayLeave",function(e){h=e})}}return i}}},Pi=v({tag:String,moveClass:String},Ti);function ji(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Mi(e){e.data.newPos=e.elm.getBoundingClientRect()}function Bi(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,i=t.top-n.top;if(r||i){e.data.moved=!0;var o=e.elm.style;o.transform=o.WebkitTransform="translate("+r+"px,"+i+"px)",o.transitionDuration="0s"}}delete Pi.mode;var zi={Transition:Li,TransitionGroup:{props:Pi,beforeMount:function(){var r=this,i=this._update;this._update=function(e,t){var n=qt(r);r.__patch__(r._vnode,r.kept,!1,!0),r._vnode=r.kept,n(),i.call(r,e,t)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],o=this.children=[],a=Ni(this),s=0;s<i.length;s++){var c=i[s];c.tag&&null!=c.key&&0!==String(c.key).indexOf("__vlist")&&(o.push(c),((n[c.key]=c).data||(c.data={})).transition=a)}if(r){for(var l=[],u=[],d=0;d<r.length;d++){var p=r[d];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?l.push(p):u.push(p)}this.kept=e(t,null,l),this.removed=u}return e(t,null,o)},updated:function(){var e=this.prevChildren,r=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,r)&&(e.forEach(ji),e.forEach(Mi),e.forEach(Bi),this._reflow=document.body.offsetHeight,e.forEach(function(e){if(e.data.moved){var n=e.elm,t=n.style;si(n,r),t.transform=t.WebkitTransform=t.transitionDuration="",n.addEventListener(ni,n._moveCb=function e(t){t&&t.target!==n||t&&!/transform$/.test(t.propertyName)||(n.removeEventListener(ni,e),n._moveCb=null,ci(n,r))})}}))},methods:{hasMove:function(e,t){if(!Zr)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach(function(e){Yr(n,e)}),qr(n,t),n.style.display="none",this.$el.appendChild(n);var r=di(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};Fn.config.mustUseProp=function(e,t,n){return"value"===n&&Bn(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},Fn.config.isReservedTag=Jn,Fn.config.isReservedAttr=Mn,Fn.config.getTagNamespace=function(e){return nr(e)?"svg":"math"===e?"math":void 0},Fn.config.isUnknownElement=function(e){if(!$)return!0;if(Jn(e))return!1;if(e=e.toLowerCase(),null!=rr[e])return rr[e];var t=document.createElement(e);return-1<e.indexOf("-")?rr[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:rr[e]=/HTMLUnknownElement/.test(t.toString())},v(Fn.options.directives,Ii),v(Fn.options.components,zi),Fn.prototype.__patch__=$?_i:A,Fn.prototype.$mount=function(e,t){return e=e&&$?function(e){if("string"!=typeof e)return e;var t=document.querySelector(e);return t||document.createElement("div")}(e):void 0,r=e,i=t,(n=this).$el=r,n.$options.render||(n.$options.render=fe),Xt(n,"beforeMount"),o=function(){n._update(n._render(),i)},new un(n,o,A,{before:function(){n._isMounted&&!n._isDestroyed&&Xt(n,"beforeUpdate")}},!0),i=!1,null==n.$vnode&&(n._isMounted=!0,Xt(n,"mounted")),n;var n,r,i,o},$&&setTimeout(function(){N.devtools&&te&&te.emit("init",Fn)},0);function $i(r,i){var o=Qi[r];if(o||(Qi[r]={},o=Qi[r]),o.instance)return Promise.resolve(o.instance);if(o.promise)return o.promise;var e=new Promise(function(t,n){!function e(){"complete"===document.readyState?function(){o.resolvePromise=t;var e=document.createElement("script");e.src=r,e.onerror=n,i&&(e.id=i),document.body.appendChild(e)}():setTimeout(e,50)}()});return o.promise=e}var Wi,Gi,Hi="function"==typeof Symbol&&"symbol"===_typeof2(Symbol.iterator)?function(e){return _typeof2(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":_typeof2(e)},Vi=(Wi=void 0,"object"===("undefined"==typeof window?"undefined":Hi(window))&&((Wi=window.filestackInternals)||(Wi={},window.filestackInternals=Wi),Wi.loader||(Wi.loader={modules:{}})),Wi),Qi=Vi&&Vi.loader.modules,qi={init:function(){window.filestackInternals.logger.working=!1},isWorking:function(){return window.filestackInternals.logger.working},on:function(){window.filestackInternals.logger.working=!0},off:function(){window.filestackInternals.logger.working=!1}},Yi="function"==typeof Symbol&&"symbol"===_typeof2(Symbol.iterator)?function(e){return _typeof2(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":_typeof2(e)},Ki=function t(o,a){function e(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r,i=[].concat(t).map(function(e){return"object"===(void 0===e?"undefined":Yi(e))?JSON.stringify(e,function(e,t){if("function"!=typeof t)return t instanceof File?"[File name: "+t.name+", mimetype: "+t.type+", size: "+t.size+"]":t;if("json"===e)try{return t()}catch(e){}return"[Function]"},2):e});a.isWorking()&&(r=console).log.apply(r,["["+o+"]"].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(i)))}return e.context=function(e){return t(o+"]["+e,a)},e.on=a.on,e.off=a.off,e}("filestack",qi);Gi=void 0,"object"===("undefined"==typeof window?"undefined":Yi(window))&&((Gi=window.filestackInternals)||(Gi={},window.filestackInternals=Gi),Gi.logger||(Gi.logger=Ki,qi.init()));var Xi="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function Zi(){throw new Error("Dynamic requires are not currently supported by rollup-plugin-commonjs")}function Ji(e,t){return e(t={exports:{}},t.exports),t.exports}var eo,to=Ji(function(e,t){e.exports=function(n){function r(e){if(i[e])return i[e].exports;var t=i[e]={exports:{},id:e,loaded:!1};return n[e].call(t.exports,t,t.exports,r),t.loaded=!0,t.exports}var i={};return r.m=n,r.c=i,r.p="",r(0)}([function(e,t,n){function r(e){return e&&e.__esModule?e:{default:e}}var i=n(2),o=r(i),a=n(1),s=r(a);window.sessionStorage||(window.sessionStorage=s.default);var c={install:function(e,t){e.prototype.$session=new o.default}};e.exports=c},function(e,t){e.exports=function(){this.data={},this.setItem=function(e,t){this.data[e]=t},this.getItem=function(e){return this.data[e]}}},function(e,t){e.exports=function(){this.key=null,this.__getRandomString=function(){for(var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:10,t="";e--;)t+=String.fromCharCode(48+~~(42*Math.random()));return t},this.__getKey=function(){var e=window.sessionStorage.getItem("sessionKey");e||(e=this.__getRandomString(),window.sessionStorage.setItem("sessionKey",e)),this.key=e},this.__get=function(){return this.key||this.__getKey(),JSON.parse(window.sessionStorage.getItem(this.key))||{}},this.get=function(e){return this.__get()[e]},this.__set=function(e){this.key||this.__getKey(),window.sessionStorage.setItem(this.key,JSON.stringify(e))},this.set=function(e,t){var n=this.__get();n[e]=t,this.__set(n)},this.exists=function(e){return e in this.__get()},this.remove=function(e){var t=this.__get();delete t[e],this.__set(t)},this.clear=function(){this.__set({})}}}])}),no=(eo=to)&&eo.__esModule&&Object.prototype.hasOwnProperty.call(eo,"default")?eo.default:eo,ro=(to.VueSessionStorage,/<%=([\s\S]+?)%>/g),io=1/0,oo="[object Null]",ao="[object Symbol]",so="[object Undefined]",co=/[&<>"']/g,lo=RegExp(co.source),uo="object"==_typeof2(Xi)&&Xi&&Xi.Object===Object&&Xi,po="object"==("undefined"==typeof self?"undefined":_typeof2(self))&&self&&self.Object===Object&&self,fo=uo||po||Function("return this")();var ho,mo=(ho={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},function(e){return null==ho?void 0:ho[e]}),vo=Object.prototype,go=vo.hasOwnProperty,yo=vo.toString,_o=fo.Symbol,bo=_o?_o.toStringTag:void 0,wo=_o?_o.prototype:void 0,Ao=wo?wo.toString:void 0,Co={escape:/<%-([\s\S]+?)%>/g,evaluate:/<%([\s\S]+?)%>/g,interpolate:ro,variable:"",imports:{_:{escape:function(e){return(e=function(e){return null==e?"":Eo(e)}(e))&&lo.test(e)?e.replace(co,mo):e}}}};function So(e){return null==e?void 0===e?so:oo:bo&&bo in Object(e)?function(e){var t=go.call(e,bo),n=e[bo];try{var r=!(e[bo]=void 0)}catch(e){}var i=yo.call(e);r&&(t?e[bo]=n:delete e[bo]);return i}(e):(t=e,yo.call(t));var t}function Eo(e){if("string"==typeof e)return e;if(ko(e))return function(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i}(e,Eo)+"";if("symbol"==_typeof2(t=e)||function(e){return null!=e&&"object"==_typeof2(e)}(t)&&So(t)==ao)return Ao?Ao.call(e):"";var t,n=e+"";return"0"==n&&1/e==-io?"-0":n}var ko=Array.isArray;var xo=Co,Fo=Ji(function(e,t){var r=1/0,i=9007199254740991,n="[object Arguments]",o="[object AsyncFunction]",a="[object DOMException]",s="[object Error]",c="[object Function]",l="[object GeneratorFunction]",u="[object Null]",d="[object Object]",p="[object Proxy]",f="[object Symbol]",h="[object Undefined]",y=/\b__p \+= '';/g,_=/\b(__p \+=) '' \+/g,b=/(__e\(.*?\)|\b__t\)) \+\n'';/g,w=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,m=/^\[object .+?Constructor\]$/,v=/^(?:0|[1-9]\d*)$/,A=/($^)/,C=/['\n\r\u2028\u2029\\]/g,g={};g["[object Float32Array]"]=g["[object Float64Array]"]=g["[object Int8Array]"]=g["[object Int16Array]"]=g["[object Int32Array]"]=g["[object Uint8Array]"]=g["[object Uint8ClampedArray]"]=g["[object Uint16Array]"]=g["[object Uint32Array]"]=!0,g[n]=g["[object Array]"]=g["[object ArrayBuffer]"]=g["[object Boolean]"]=g["[object DataView]"]=g["[object Date]"]=g[s]=g[c]=g["[object Map]"]=g["[object Number]"]=g[d]=g["[object RegExp]"]=g["[object Set]"]=g["[object String]"]=g["[object WeakMap]"]=!1;var S={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},E="object"==_typeof2(Xi)&&Xi&&Xi.Object===Object&&Xi,k="object"==("undefined"==typeof self?"undefined":_typeof2(self))&&self&&self.Object===Object&&self,x=E||k||Function("return this")(),F=t&&!t.nodeType&&t,I=F&&e&&!e.nodeType&&e,T=I&&I.exports===F,O=T&&E.process,N=function(){try{var e=I&&I.require&&I.require("util").types;return e?e:O&&O.binding&&O.binding("util")}catch(e){}}(),R=N&&N.isTypedArray;function D(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function U(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i}function L(e){return"\\"+S[e]}function P(t,n){return function(e){return t(n(e))}}var j,M=Function.prototype,B=Object.prototype,z=x["__core-js_shared__"],$=M.toString,W=B.hasOwnProperty,G=(j=/[^.]+$/.exec(z&&z.keys&&z.keys.IE_PROTO||""))?"Symbol(src)_1."+j:"",H=B.toString,V=$.call(Object),Q=RegExp("^"+$.call(W).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),q=T?x.Buffer:void 0,Y=x.Symbol,K=P(Object.getPrototypeOf,Object),X=B.propertyIsEnumerable,Z=Y?Y.toStringTag:void 0,J=function(){try{var e=(t=Object,function(e){return Ie(e)&&!function(e){return G&&G in e}(e)&&(xe(e)?Q:m).test(function(e){if(null!=e){try{return $.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}(n=function(e,t){return null==e?void 0:e[t]}(t,"defineProperty"))?n:void 0);return e({},"",{}),e}catch(e){}var t,n}(),ee=q?q.isBuffer:void 0,te=P(Object.keys,Object),ne=Math.max,re=Date.now,ie=Y?Y.prototype:void 0,oe=ie?ie.toString:void 0;function ae(e,t){var n=Ce(e),r=!n&&Ae(e),i=!n&&!r&&Ee(e),o=!n&&!r&&!i&&Ne(e),a=n||r||i||o,s=a?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],c=s.length;for(var l in e)!t&&!W.call(e,l)||a&&("length"==l||i&&("offset"==l||"parent"==l)||o&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||he(l,c))||s.push(l);return s}function se(e,t,n){"__proto__"==t&&J?J(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function ce(e){return null==e?void 0===e?h:u:Z&&Z in Object(e)?function(e){var t=W.call(e,Z),n=e[Z];try{var r=!(e[Z]=void 0)}catch(e){}var i=H.call(e);r&&(t?e[Z]=n:delete e[Z]);return i}(e):(t=e,H.call(t));var t}function le(e){return Te(e)&&ce(e)==n}function ue(e){if(!Ie(e))return function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}(e);var t=ve(e),n=[];for(var r in e)("constructor"!=r||!t&&W.call(e,r))&&n.push(r);return n}function de(e,t){return be((o=e,s=Pe,a=ne(void 0===(a=t)?o.length-1:a,0),function(){for(var e=arguments,t=-1,n=ne(e.length-a,0),r=Array(n);++t<n;)r[t]=e[a+t];t=-1;for(var i=Array(a+1);++t<a;)i[t]=e[t];return i[a]=s(r),D(o,this,i)}),e+"");var o,a,s}function pe(e){if("string"==typeof e)return e;if(Ce(e))return U(e,pe)+"";if("symbol"==_typeof2(t=e)||Te(t)&&ce(t)==f)return oe?oe.call(e):"";var t,n=e+"";return"0"==n&&1/e==-r?"-0":n}function fe(e,t,n,r){return void 0===e||we(e,B[n])&&!W.call(r,n)?t:e}function he(e,t){var n=_typeof2(e);return(t=null==t?i:t)&&("number"==n||"symbol"!=n&&v.test(e))&&-1<e&&e%1==0&&e<t}function me(e,t,n){if(Ie(n)){var r=_typeof2(t);return("number"==r?Se(n)&&he(t,n.length):"string"==r&&t in n)&&we(n[t],e)}}function ve(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||B)}var ge,ye,_e,be=(ge=J?function(e,t){return J(e,"toString",{configurable:!0,enumerable:!1,value:(n=t,function(){return n}),writable:!0});var n}:Pe,_e=ye=0,function(){var e=re(),t=16-(e-_e);if(_e=e,0<t){if(800<=++ye)return arguments[0]}else ye=0;return ge.apply(void 0,arguments)});function we(e,t){return e===t||e!=e&&t!=t}var Ae=le(function(){return arguments}())?le:function(e){return Te(e)&&W.call(e,"callee")&&!X.call(e,"callee")},Ce=Array.isArray;function Se(e){return null!=e&&Fe(e.length)&&!xe(e)}var Ee=ee||function(){return!1};function ke(e){if(Te(e)){var t=ce(e);return t==s||t==a||"string"==typeof e.message&&"string"==typeof e.name&&!function(e){if(!Te(e)||ce(e)!=d)return;var t=K(e);if(null===t)return 1;var n=W.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&$.call(n)==V}(e)}}function xe(e){if(Ie(e)){var t=ce(e);return t==c||t==l||t==o||t==p}}function Fe(e){return"number"==typeof e&&-1<e&&e%1==0&&e<=i}function Ie(e){var t=_typeof2(e);return null!=e&&("object"==t||"function"==t)}function Te(e){return null!=e&&"object"==_typeof2(e)}var Oe,Ne=R?(Oe=R,function(e){return Oe(e)}):function(e){return Te(e)&&Fe(e.length)&&!!g[ce(e)]};var Re,De=(Re=function(e,t,n,r){var i;!function(e,t,n,r){var i=!n;n=n||{};for(var o,a,s,c,l=-1,u=t.length;++l<u;){var d=t[l],p=r?r(n[d],e[d],d,n,e):void 0;void 0===p&&(p=e[d]),i?se(n,d,p):(s=p,c=(o=n)[a=d],W.call(o,a)&&we(c,s)&&(void 0!==s||a in o)||se(o,a,s))}}(t,Se(i=t)?ae(i,!0):ue(i),e,r)},de(function(e,t){var n=-1,r=t.length,i=1<r?t[r-1]:void 0,o=2<r?t[2]:void 0;for(i=3<Re.length&&"function"==typeof i?(r--,i):void 0,o&&me(t[0],t[1],o)&&(i=r<3?void 0:i,r=1),e=Object(e);++n<r;){var a=t[n];a&&Re(e,a,n,i)}return e}));function Ue(e){return(Se(e)?ae:function(e){if(!ve(e))return te(e);var t=[];for(var n in Object(e))W.call(e,n)&&"constructor"!=n&&t.push(n);return t})(e)}var Le=de(function(e,t){try{return D(e,void 0,t)}catch(e){return ke(e)?e:new Error(e)}});function Pe(e){return e}e.exports=function(a,e,t){var n,r=xo.imports._.templateSettings||xo;t&&me(a,e,t)&&(e=void 0),a=null==(n=a)?"":pe(n),e=De({},e,r,fe);var i,s,c,o=De({},e.imports,r.imports,fe),l=Ue(o),u=(i=o,U(l,function(e){return i[e]})),d=0,p=e.interpolate||A,f="__p += '",h=RegExp((e.escape||A).source+"|"+p.source+"|"+(p===ro?w:A).source+"|"+(e.evaluate||A).source+"|$","g"),m=W.call(e,"sourceURL")?"//# sourceURL="+(e.sourceURL+"").replace(/[\r\n]/g," ")+"\n":"";a.replace(h,function(e,t,n,r,i,o){return n=n||r,f+=a.slice(d,o).replace(C,L),t&&(s=!0,f+="' +\n__e("+t+") +\n'"),i&&(c=!0,f+="';\n"+i+";\n__p += '"),n&&(f+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),d=o+e.length,e}),f+="';\n";var v=W.call(e,"variable")&&e.variable;v||(f="with (obj) {\n"+f+"\n}\n"),f=(c?f.replace(y,""):f).replace(_,"$1").replace(b,"$1;"),f="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(s?", __e = _.escape":"")+(c?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+f+"return __p\n}";var g=Le(function(){return Function(l,m+"return "+f).apply(void 0,u)});if(g.source=f,ke(g))throw g;return g}}),Io=null,To={install:function(r){var e,t=r.version[0];Io||(Io=new r({data:function(){return{current:"",locales:{}}},computed:{lang:function(){return this.current},locale:function(){return this.locales[this.current]?this.locales[this.current]:null}},methods:{setLang:function(e){this.current!==e&&(""===this.current?this.$emit("language:init",e):this.$emit("language:changed",e)),this.current=e,this.$emit("language:modified",e)},setLocales:function(e){if(e){var t=Object.create(this.locales);for(var n in e)e.hasOwnProperty(n)&&(t[n]||(t[n]={}),r.util.extend(t[n],e[n]));this.locales=Object.create(t),this.$emit("locales:loaded",e)}},text:function(e,t){return t?Fo(this.locale[e]||e,{interpolate:/{([\s\S]+?)}/g})(t):this.locale[e]||e}}}),r.prototype.$translate=Io),r.mixin((_defineProperty(e={},"1"===t?"init":"beforeCreate",function(){this.$translate.setLocales(this.$options.locales)}),_defineProperty(e,"methods",{t:function(e,t){return this.$translate.text(e,t)}}),_defineProperty(e,"directives",{translate:function(e){e.$translateKey||(e.$translateKey=e.innerText);var t=this.$translate.text(e.$translateKey);e.innerText=t}.bind(Io)}),e)),r.locales=function(e){Io.$translate.setLocales(e)},r.lang=function(e){Io.$translate.setLang(e)}}};var Oo=("undefined"!=typeof window?window:"undefined"!=typeof global?global:{}).__VUE_DEVTOOLS_GLOBAL_HOOK__;function No(t,n){Object.keys(t).forEach(function(e){return n(t[e],e)})}function Ro(e){return null!==e&&"object"===_typeof2(e)}function Do(e,t){this.runtime=t,this._children=Object.create(null);var n=(this._rawModule=e).state;this.state=("function"==typeof n?n():n)||{}}var Uo={namespaced:{configurable:!0}};Uo.namespaced.get=function(){return!!this._rawModule.namespaced},Do.prototype.addChild=function(e,t){this._children[e]=t},Do.prototype.removeChild=function(e){delete this._children[e]},Do.prototype.getChild=function(e){return this._children[e]},Do.prototype.update=function(e){this._rawModule.namespaced=e.namespaced,e.actions&&(this._rawModule.actions=e.actions),e.mutations&&(this._rawModule.mutations=e.mutations),e.getters&&(this._rawModule.getters=e.getters)},Do.prototype.forEachChild=function(e){No(this._children,e)},Do.prototype.forEachGetter=function(e){this._rawModule.getters&&No(this._rawModule.getters,e)},Do.prototype.forEachAction=function(e){this._rawModule.actions&&No(this._rawModule.actions,e)},Do.prototype.forEachMutation=function(e){this._rawModule.mutations&&No(this._rawModule.mutations,e)},Object.defineProperties(Do.prototype,Uo);function Lo(e){this.register([],e,!1)}var Po;Lo.prototype.get=function(e){return e.reduce(function(e,t){return e.getChild(t)},this.root)},Lo.prototype.getNamespace=function(e){var n=this.root;return e.reduce(function(e,t){return e+((n=n.getChild(t)).namespaced?t+"/":"")},"")},Lo.prototype.update=function(e){!function e(t,n,r){n.update(r);if(r.modules)for(var i in r.modules){if(!n.getChild(i))return;e(t.concat(i),n.getChild(i),r.modules[i])}}([],this.root,e)},Lo.prototype.register=function(n,e,r){var i=this;void 0===r&&(r=!0);var t=new Do(e,r);0===n.length?this.root=t:this.get(n.slice(0,-1)).addChild(n[n.length-1],t);e.modules&&No(e.modules,function(e,t){i.register(n.concat(t),e,r)})},Lo.prototype.unregister=function(e){var t=this.get(e.slice(0,-1)),n=e[e.length-1];t.getChild(n).runtime&&t.removeChild(n)};function jo(e){var t=this;void 0===e&&(e={}),!Po&&"undefined"!=typeof window&&window.Vue&&Vo(window.Vue);var n=e.plugins;void 0===n&&(n=[]);var r=e.strict;void 0===r&&(r=!1),this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new Lo(e),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._watcherVM=new Po,this._makeLocalGettersCache=Object.create(null);var i=this,o=this.dispatch,a=this.commit;this.dispatch=function(e,t){return o.call(i,e,t)},this.commit=function(e,t,n){return a.call(i,e,t,n)},this.strict=r;var s,c=this._modules.root.state;Wo(this,c,[],this._modules.root),$o(this,c),n.forEach(function(e){return e(t)}),(void 0!==e.devtools?e.devtools:Po.config.devtools)&&(s=this,Oo&&((s._devtoolHook=Oo).emit("vuex:init",s),Oo.on("vuex:travel-to-state",function(e){s.replaceState(e)}),s.subscribe(function(e,t){Oo.emit("vuex:mutation",e,t)})))}var Mo={state:{configurable:!0}};function Bo(t,n){return n.indexOf(t)<0&&n.push(t),function(){var e=n.indexOf(t);-1<e&&n.splice(e,1)}}function zo(e,t){e._actions=Object.create(null),e._mutations=Object.create(null),e._wrappedGetters=Object.create(null),e._modulesNamespaceMap=Object.create(null);var n=e.state;Wo(e,n,[],e._modules.root,!0),$o(e,n,t)}function $o(i,e,t){var n=i._vm;i.getters={},i._makeLocalGettersCache=Object.create(null);var r=i._wrappedGetters,o={};No(r,function(e,t){var n,r;o[t]=(n=e,r=i,function(){return n(r)}),Object.defineProperty(i.getters,t,{get:function(){return i._vm[t]},enumerable:!0})});var a=Po.config.silent;Po.config.silent=!0,i._vm=new Po({data:{$$state:e},computed:o}),Po.config.silent=a,i.strict&&i._vm.$watch(function(){return this._data.$$state},function(){},{deep:!0,sync:!0}),n&&(t&&i._withCommit(function(){n._data.$$state=null}),Po.nextTick(function(){return n.$destroy()}))}function Wo(c,n,r,e,i){var t=!r.length,l=c._modules.getNamespace(r);if(e.namespaced&&(c._modulesNamespaceMap[l],c._modulesNamespaceMap[l]=e),!t&&!i){var o=Go(n,r.slice(0,-1)),a=r[r.length-1];c._withCommit(function(){Po.set(o,a,e.state)})}var s,u,d,p,f,h=e.context=(s=c,d=r,f={dispatch:(p=""===(u=l))?s.dispatch:function(e,t,n){var r=Ho(e,t,n),i=r.payload,o=r.options,a=r.type;return o&&o.root||(a=u+a),s.dispatch(a,i)},commit:p?s.commit:function(e,t,n){var r=Ho(e,t,n),i=r.payload,o=r.options,a=r.type;o&&o.root||(a=u+a),s.commit(a,i,o)}},Object.defineProperties(f,{getters:{get:p?function(){return s.getters}:function(){return function(n,r){if(!n._makeLocalGettersCache[r]){var i={},o=r.length;Object.keys(n.getters).forEach(function(e){if(e.slice(0,o)===r){var t=e.slice(o);Object.defineProperty(i,t,{get:function(){return n.getters[e]},enumerable:!0})}}),n._makeLocalGettersCache[r]=i}return n._makeLocalGettersCache[r]}(s,u)}},state:{get:function(){return Go(s.state,d)}}}),f);e.forEachMutation(function(e,t){var n,r,i,o;r=l+t,i=e,o=h,((n=c)._mutations[r]||(n._mutations[r]=[])).push(function(e){i.call(n,o.state,e)})}),e.forEachAction(function(e,t){var r,n,i,o,a=e.root?t:l+t,s=e.handler||e;n=a,i=s,o=h,((r=c)._actions[n]||(r._actions[n]=[])).push(function(e){var t,n=i.call(r,{dispatch:o.dispatch,commit:o.commit,getters:o.getters,state:o.state,rootGetters:r.getters,rootState:r.state},e);return(t=n)&&"function"==typeof t.then||(n=Promise.resolve(n)),r._devtoolHook?n.catch(function(e){throw r._devtoolHook.emit("vuex:error",e),e}):n})}),e.forEachGetter(function(e,t){!function(e,t,n,r){if(e._wrappedGetters[t])return;e._wrappedGetters[t]=function(e){return n(r.state,r.getters,e.state,e.getters)}}(c,l+t,e,h)}),e.forEachChild(function(e,t){Wo(c,n,r.concat(t),e,i)})}function Go(e,t){return t.length?t.reduce(function(e,t){return e[t]},e):e}function Ho(e,t,n){return Ro(e)&&e.type&&(n=t,e=(t=e).type),{type:e,payload:t,options:n}}function Vo(e){Po&&e===Po||function(e){if(2<=Number(e.version.split(".")[0]))e.mixin({beforeCreate:n});else{var t=e.prototype._init;e.prototype._init=function(e){void 0===e&&(e={}),e.init=e.init?[n].concat(e.init):n,t.call(this,e)}}function n(){var e=this.$options;e.store?this.$store="function"==typeof e.store?e.store():e.store:e.parent&&e.parent.$store&&(this.$store=e.parent.$store)}}(Po=e)}Mo.state.get=function(){return this._vm._data.$$state},Mo.state.set=function(e){},jo.prototype.commit=function(e,t,n){var r=this,i=Ho(e,t,n),o=i.type,a=i.payload,s={type:o,payload:a},c=this._mutations[o];c&&(this._withCommit(function(){c.forEach(function(e){e(a)})}),this._subscribers.forEach(function(e){return e(s,r.state)}))},jo.prototype.dispatch=function(e,t){var n=this,r=Ho(e,t),i=r.type,o=r.payload,a={type:i,payload:o},s=this._actions[i];if(s){try{this._actionSubscribers.filter(function(e){return e.before}).forEach(function(e){return e.before(a,n.state)})}catch(e){}return(1<s.length?Promise.all(s.map(function(e){return e(o)})):s[0](o)).then(function(e){try{n._actionSubscribers.filter(function(e){return e.after}).forEach(function(e){return e.after(a,n.state)})}catch(e){}return e})}},jo.prototype.subscribe=function(e){return Bo(e,this._subscribers)},jo.prototype.subscribeAction=function(e){return Bo("function"==typeof e?{before:e}:e,this._actionSubscribers)},jo.prototype.watch=function(e,t,n){var r=this;return this._watcherVM.$watch(function(){return e(r.state,r.getters)},t,n)},jo.prototype.replaceState=function(e){var t=this;this._withCommit(function(){t._vm._data.$$state=e})},jo.prototype.registerModule=function(e,t,n){void 0===n&&(n={}),"string"==typeof e&&(e=[e]),this._modules.register(e,t),Wo(this,this.state,e,this._modules.get(e),n.preserveState),$o(this,this.state)},jo.prototype.unregisterModule=function(t){var n=this;"string"==typeof t&&(t=[t]),this._modules.unregister(t),this._withCommit(function(){var e=Go(n.state,t.slice(0,-1));Po.delete(e,t[t.length-1])}),zo(this)},jo.prototype.hotUpdate=function(e){this._modules.update(e),zo(this,!0)},jo.prototype._withCommit=function(e){var t=this._committing;this._committing=!0,e(),this._committing=t},Object.defineProperties(jo.prototype,Mo);var Qo=Zo(function(i,e){var n={};return Xo(e).forEach(function(e){var t=e.key,r=e.val;n[t]=function(){var e=this.$store.state,t=this.$store.getters;if(i){var n=Jo(this.$store,"mapState",i);if(!n)return;e=n.context.state,t=n.context.getters}return"function"==typeof r?r.call(this,e,t):e[r]},n[t].vuex=!0}),n}),qo=Zo(function(o,e){var n={};return Xo(e).forEach(function(e){var t=e.key,i=e.val;n[t]=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=this.$store.commit;if(o){var r=Jo(this.$store,"mapMutations",o);if(!r)return;n=r.context.commit}return"function"==typeof i?i.apply(this,[n].concat(e)):n.apply(this.$store,[i].concat(e))}}),n}),Yo=Zo(function(r,e){var i={};return Xo(e).forEach(function(e){var t=e.key,n=e.val;n=r+n,i[t]=function(){if(!r||Jo(this.$store,"mapGetters",r))return this.$store.getters[n]},i[t].vuex=!0}),i}),Ko=Zo(function(o,e){var n={};return Xo(e).forEach(function(e){var t=e.key,i=e.val;n[t]=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=this.$store.dispatch;if(o){var r=Jo(this.$store,"mapActions",o);if(!r)return;n=r.context.dispatch}return"function"==typeof i?i.apply(this,[n].concat(e)):n.apply(this.$store,[i].concat(e))}}),n});function Xo(t){return e=t,Array.isArray(e)||Ro(e)?Array.isArray(t)?t.map(function(e){return{key:e,val:e}}):Object.keys(t).map(function(e){return{key:e,val:t[e]}}):[];var e}function Zo(n){return function(e,t){return"string"!=typeof e?(t=e,e=""):"/"!==e.charAt(e.length-1)&&(e+="/"),n(e,t)}}function Jo(e,t,n){return e._modulesNamespaceMap[n]}function ea(e,t){return"".concat(e,"/").concat(t)}function ta(e){function a(r,e){var i=1<arguments.length&&void 0!==e?e:"",o=[];return new Promise(function(n){if(r.isDirectory){var e=r.createReader();!function t(){e.readEntries(function(e){e.forEach(function(e){o.push(a(e,ea(i,r.name)))}),e.length?t():Promise.all(o).then(n)})}()}else r.isFile&&r.file(function(e){var t;t=e.name,-1===[".DS_Store"].indexOf(t)&&(e.path=ea(i,e.name),s.push(e)),n()})})}function t(e){return new Promise(function(t){e.getAsString(function(e){s.push({url:e,source:"dragged-from-web"}),t()})})}for(var n,s=[],r=[],i=0;i<e.length;i+=1){var o=e[i];if("file"===o.kind&&o.type&&"application/x-moz-file"!==o.type){var c=o.getAsFile();c&&(s.push(c),r.push(Promise.resolve()))}else if("file"===o.kind){var l="function"==typeof(n=o).getAsEntry?n.getAsEntry():"function"==typeof n.webkitGetAsEntry?n.webkitGetAsEntry():void 0;l&&r.push(a(l))}else"string"===o.kind&&"text/uri-list"===o.type&&r.push(t(o))}return Promise.all(r).then(function(){return s})}function na(e){return e?e.items?ta(e.items):e.files?(r=e.files,new Promise(function(e){for(var t=[],n=0;n<r.length;n+=1)t.push(r[n]);e(t)})):Promise.resolve([]):Promise.resolve([]);var r}var ra={Store:jo,install:Vo,version:"3.1.2",mapState:Qo,mapMutations:qo,mapGetters:Yo,mapActions:Ko,createNamespacedHelpers:function(e){return{mapState:Qo.bind(null,e),mapGetters:Yo.bind(null,e),mapMutations:qo.bind(null,e),mapActions:Ko.bind(null,e)}}},ia={data:function(){return{fileAboutToBeDropped:!1}},methods:_objectSpread({},ra.mapActions(["addFile","updateSelectLabelActive"]),{dragenter:function(e){e.preventDefault(),this.fileAboutToBeDropped=!0,this.updateSelectLabelActive(!0)},dragover:function(e){e.preventDefault()},dragleave:function(){this.fileAboutToBeDropped=!1,this.updateSelectLabelActive(!1)},drop:function(e){var t=this;e.preventDefault(),this.fileAboutToBeDropped=!1,na(e.dataTransfer).then(function(e){e.forEach(function(e){t.addFile(e)})})},paste:function(e){var t=this;na(e.clipboardData).then(function(e){e.forEach(function(e){e.name="pasted file",t.addFile(e)})})}}),mounted:function(){var e=this.$root.$el,t=this.$refs.dropZone;e.addEventListener("dragenter",this.dragenter,!1),e.addEventListener("paste",this.paste,!1),t.addEventListener("dragover",this.dragover,!1),t.addEventListener("dragleave",this.dragleave,!1),t.addEventListener("drop",this.drop,!1)},beforeDestroy:function(){var e=this.$root.$el;e.removeEventListener("dragenter",this.dragenter),e.removeEventListener("paste",this.paste)}};function oa(e,t,n,r,i,o,a,s,c,l){"boolean"!=typeof a&&(c=s,s=a,a=!1);var u,d="function"==typeof n?n.options:n;if(e&&e.render&&(d.render=e.render,d.staticRenderFns=e.staticRenderFns,d._compiled=!0,i&&(d.functional=!0)),r&&(d._scopeId=r),o?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),t&&t.call(this,c(e)),e&&e._registeredComponents&&e._registeredComponents.add(o)},d._ssrRegister=u):t&&(u=a?function(e){t.call(this,l(e,this.$root.$options.shadowRoot))}:function(e){t.call(this,s(e))}),u)if(d.functional){var p=d.render;d.render=function(e,t){return u.call(t),p(e,t)}}else{var f=d.beforeCreate;d.beforeCreate=f?[].concat(f,u):[u]}return n}"undefined"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());function aa(){var e=this.$createElement,t=this._self._c||e;return t("div",{directives:[{name:"show",rawName:"v-show",value:this.fileAboutToBeDropped,expression:"fileAboutToBeDropped"}],ref:"dropZone",staticClass:"fsp-dropzone-overlay"},[t("div",{staticClass:"fsp-dropzone-overlay__text"})])}var sa=ia;aa._withStripped=!0;function ca(){var e=this,t=e.$createElement;return(e._self._c||t)("div",{staticClass:"fsp-mobile-menu",on:{click:function(){return e.toggleNav()}}})}var la=oa({render:aa,staticRenderFns:[]},void 0,sa,void 0,!1,void 0,!1,void 0,void 0,void 0),ua={computed:_objectSpread({},ra.mapGetters(["mobileNavActive"])),methods:_objectSpread({},ra.mapActions(["updateMobileNavActive"]),{toggleNav:function(){this.updateMobileNavActive(!this.mobileNavActive)}})};ca._withStripped=!0;function da(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"fsp-header",class:{"fsp-header--hide":e.hideHeader}},[e.source&&!e.mobileNavActive?n("span",{staticClass:"fsp-header-icon",class:"fsp-navbar--"+e.source.name,attrs:{title:e.t(e.source.label)}}):e._e(),e._v(" "),e.source&&e.isCustomSource&&!e.mobileNavActive?n("span",{staticClass:"fsp-header-text--visible"},[e._v(" "+e._s(e.t(e.customSourceLabel))+" ")]):e._e(),e._v(" "),e.mobileNavActive?n("span",{staticClass:"fsp-header-text"},[e._v(" "+e._s(e.t("Select From"))+" ")]):e._e(),e._v(" "),e.mobileNavActive?e._e():e._t("default"),e._v(" "),e.hideMenu||e.cropFiles?e._e():n("mobile-menu-button")],2)}var pa=oa({render:ca,staticRenderFns:[]},void 0,ua,void 0,!1,void 0,!1,void 0,void 0,void 0),fa={computed:_objectSpread({},ra.mapGetters(["cropFiles","customSourceName","fromSources","mobileNavActive"]),{customSourceLabel:function(){return this.customSourceName||"Custom Source"},isCustomSource:function(){return"customsource"===this.source.name}}),components:{MobileMenuButton:pa},props:["source","hideHeader","hideMenu"]};da._withStripped=!0;var ha=oa({render:da,staticRenderFns:[]},void 0,fa,void 0,!1,void 0,!1,void 0,void 0,void 0),ma="Expected a function",va=NaN,ga="[object Symbol]",ya=/^\s+|\s+$/g,_a=/^[-+]0x[0-9a-f]+$/i,ba=/^0b[01]+$/i,wa=/^0o[0-7]+$/i,Aa=parseInt,Ca="object"==_typeof2(Xi)&&Xi&&Xi.Object===Object&&Xi,Sa="object"==("undefined"==typeof self?"undefined":_typeof2(self))&&self&&self.Object===Object&&self,Ea=Ca||Sa||Function("return this")(),ka=Object.prototype.toString,xa=Math.max,Fa=Math.min,Ia=function(){return Ea.Date.now()};function Ta(r,i,e){var o,a,s,c,l,u,d=0,p=!1,f=!1,t=!0;if("function"!=typeof r)throw new TypeError(ma);function h(e){var t=o,n=a;return o=a=void 0,d=e,c=r.apply(n,t)}function m(e){var t=e-u;return void 0===u||i<=t||t<0||f&&s<=e-d}function v(){var e,t,n=Ia();if(m(n))return g(n);l=setTimeout(v,(t=i-((e=n)-u),f?Fa(t,s-(e-d)):t))}function g(e){return l=void 0,t&&o?h(e):(o=a=void 0,c)}function n(){var e,t=Ia(),n=m(t);if(o=arguments,a=this,u=t,n){if(void 0===l)return d=e=u,l=setTimeout(v,i),p?h(e):c;if(f)return l=setTimeout(v,i),h(u)}return void 0===l&&(l=setTimeout(v,i)),c}return i=Ra(i)||0,Oa(e)&&(p=!!e.leading,s=(f="maxWait"in e)?xa(Ra(e.maxWait)||0,i):s,t="trailing"in e?!!e.trailing:t),n.cancel=function(){void 0!==l&&clearTimeout(l),o=u=a=l=void(d=0)},n.flush=function(){return void 0===l?c:g(Ia())},n}function Oa(e){var t=_typeof2(e);return e&&("object"==t||"function"==t)}function Na(e){return"symbol"==_typeof2(e)||(t=e)&&"object"==_typeof2(t)&&ka.call(e)==ga;var t}function Ra(e){if("number"==typeof e)return e;if(Na(e))return va;if(Oa(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Oa(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(ya,"");var n=ba.test(e);return n||wa.test(e)?Aa(e.slice(2),n?2:8):_a.test(e)?va:+e}function Da(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:t.itemClasses,attrs:{title:t.t(t.itemLabel),tabindex:"0"},on:{keyup:function(e){return!e.type.indexOf("key")&&t._k(e.keyCode,"enter",13,e.key,"Enter")?null:t.onNavClick(t.sourceName)},click:function(){return t.onNavClick(t.sourceName)}}},[t.sourceSelectedCount?n("span",{staticClass:"fsp-badge--source"},[t._v(t._s(t.sourceSelectedCount))]):t._e(),t._v(" "),n("span",{staticClass:"fsp-source-list__icon fsp-icon",class:"fsp-icon--"+t.sourceName}),t._v(" "),n("span",{staticClass:"fsp-source-list__label"},[t._v(t._s(t.t(t.itemLabel)))]),t._v(" "),t.isAuthorized?n("span",{staticClass:"fsp-source-list__logout",on:{click:function(e){return e.stopPropagation(),t.logout(t.sourceName)}}},[t._v(" "+t._s(t.t("Sign Out")))]):t._e(),t._v(" "),t.isMobileLocal?n("input",{ref:"mobileLocaInput",staticClass:"fsp-local-source__fileinput",attrs:{type:"file",accept:t.acceptStr,multiple:t.multiple,disabled:!t.canAddMoreFiles},on:{change:function(e){return t.onFilesSelected(e)},click:function(e){return t.clearEvent(e)}}}):t._e()])}var Ua=function(e,t,n){var r=!0,i=!0;if("function"!=typeof e)throw new TypeError(ma);return Oa(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),Ta(e,t,{leading:r,maxWait:t,trailing:i})},La=Ji(function(e){var t,n;t=Xi,n=function(){var S=!0;function a(n){function e(e){var t=n.match(e);return t&&1<t.length&&t[1]||""}function t(e){var t=n.match(e);return t&&1<t.length&&t[2]||""}var r,i=e(/(ipod|iphone|ipad)/i).toLowerCase(),o=!/like android/i.test(n)&&/android/i.test(n),a=/nexus\s*[0-6]\s*/i.test(n),s=!a&&/nexus\s*[0-9]+/i.test(n),c=/CrOS/.test(n),l=/silk/i.test(n),u=/sailfish/i.test(n),d=/tizen/i.test(n),p=/(web|hpw)(o|0)s/i.test(n),f=/windows phone/i.test(n),h=(/SamsungBrowser/i.test(n),!f&&/windows/i.test(n)),m=!i&&!l&&/macintosh/i.test(n),v=!o&&!u&&!d&&!p&&/linux/i.test(n),g=t(/edg([ea]|ios)\/(\d+(\.\d+)?)/i),y=e(/version\/(\d+(\.\d+)?)/i),_=/tablet/i.test(n)&&!/tablet pc/i.test(n),b=!_&&/[^-]mobi/i.test(n),w=/xbox/i.test(n);/opera/i.test(n)?r={name:"Opera",opera:S,version:y||e(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)}:/opr\/|opios/i.test(n)?r={name:"Opera",opera:S,version:e(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i)||y}:/SamsungBrowser/i.test(n)?r={name:"Samsung Internet for Android",samsungBrowser:S,version:y||e(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)}:/Whale/i.test(n)?r={name:"NAVER Whale browser",whale:S,version:e(/(?:whale)[\s\/](\d+(?:\.\d+)+)/i)}:/MZBrowser/i.test(n)?r={name:"MZ Browser",mzbrowser:S,version:e(/(?:MZBrowser)[\s\/](\d+(?:\.\d+)+)/i)}:/coast/i.test(n)?r={name:"Opera Coast",coast:S,version:y||e(/(?:coast)[\s\/](\d+(\.\d+)?)/i)}:/focus/i.test(n)?r={name:"Focus",focus:S,version:e(/(?:focus)[\s\/](\d+(?:\.\d+)+)/i)}:/yabrowser/i.test(n)?r={name:"Yandex Browser",yandexbrowser:S,version:y||e(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)}:/ucbrowser/i.test(n)?r={name:"UC Browser",ucbrowser:S,version:e(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)}:/mxios/i.test(n)?r={name:"Maxthon",maxthon:S,version:e(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)}:/epiphany/i.test(n)?r={name:"Epiphany",epiphany:S,version:e(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)}:/puffin/i.test(n)?r={name:"Puffin",puffin:S,version:e(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)}:/sleipnir/i.test(n)?r={name:"Sleipnir",sleipnir:S,version:e(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)}:/k-meleon/i.test(n)?r={name:"K-Meleon",kMeleon:S,version:e(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)}:f?(r={name:"Windows Phone",osname:"Windows Phone",windowsphone:S},g?(r.msedge=S,r.version=g):(r.msie=S,r.version=e(/iemobile\/(\d+(\.\d+)?)/i))):/msie|trident/i.test(n)?r={name:"Internet Explorer",msie:S,version:e(/(?:msie |rv:)(\d+(\.\d+)?)/i)}:c?r={name:"Chrome",osname:"Chrome OS",chromeos:S,chromeBook:S,chrome:S,version:e(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)}:/edg([ea]|ios)/i.test(n)?r={name:"Microsoft Edge",msedge:S,version:g}:/vivaldi/i.test(n)?r={name:"Vivaldi",vivaldi:S,version:e(/vivaldi\/(\d+(\.\d+)?)/i)||y}:u?r={name:"Sailfish",osname:"Sailfish OS",sailfish:S,version:e(/sailfish\s?browser\/(\d+(\.\d+)?)/i)}:/seamonkey\//i.test(n)?r={name:"SeaMonkey",seamonkey:S,version:e(/seamonkey\/(\d+(\.\d+)?)/i)}:/firefox|iceweasel|fxios/i.test(n)?(r={name:"Firefox",firefox:S,version:e(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)},/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(n)&&(r.firefoxos=S,r.osname="Firefox OS")):l?r={name:"Amazon Silk",silk:S,version:e(/silk\/(\d+(\.\d+)?)/i)}:/phantom/i.test(n)?r={name:"PhantomJS",phantom:S,version:e(/phantomjs\/(\d+(\.\d+)?)/i)}:/slimerjs/i.test(n)?r={name:"SlimerJS",slimer:S,version:e(/slimerjs\/(\d+(\.\d+)?)/i)}:/blackberry|\bbb\d+/i.test(n)||/rim\stablet/i.test(n)?r={name:"BlackBerry",osname:"BlackBerry OS",blackberry:S,version:y||e(/blackberry[\d]+\/(\d+(\.\d+)?)/i)}:p?(r={name:"WebOS",osname:"WebOS",webos:S,version:y||e(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)},/touchpad\//i.test(n)&&(r.touchpad=S)):/bada/i.test(n)?r={name:"Bada",osname:"Bada",bada:S,version:e(/dolfin\/(\d+(\.\d+)?)/i)}:d?r={name:"Tizen",osname:"Tizen",tizen:S,version:e(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i)||y}:/qupzilla/i.test(n)?r={name:"QupZilla",qupzilla:S,version:e(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i)||y}:/chromium/i.test(n)?r={name:"Chromium",chromium:S,version:e(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i)||y}:/chrome|crios|crmo/i.test(n)?r={name:"Chrome",chrome:S,version:e(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)}:o?r={name:"Android",version:y}:/safari|applewebkit/i.test(n)?(r={name:"Safari",safari:S},y&&(r.version=y)):i?(r={name:"iphone"==i?"iPhone":"ipad"==i?"iPad":"iPod"},y&&(r.version=y)):r=/googlebot/i.test(n)?{name:"Googlebot",googlebot:S,version:e(/googlebot\/(\d+(\.\d+))/i)||y}:{name:e(/^(.*)\/(.*) /),version:t(/^(.*)\/(.*) /)},!r.msedge&&/(apple)?webkit/i.test(n)?(/(apple)?webkit\/537\.36/i.test(n)?(r.name=r.name||"Blink",r.blink=S):(r.name=r.name||"Webkit",r.webkit=S),!r.version&&y&&(r.version=y)):!r.opera&&/gecko\//i.test(n)&&(r.name=r.name||"Gecko",r.gecko=S,r.version=r.version||e(/gecko\/(\d+(\.\d+)?)/i)),r.windowsphone||!o&&!r.silk?!r.windowsphone&&i?(r[i]=S,r.ios=S,r.osname="iOS"):m?(r.mac=S,r.osname="macOS"):w?(r.xbox=S,r.osname="Xbox"):h?(r.windows=S,r.osname="Windows"):v&&(r.linux=S,r.osname="Linux"):(r.android=S,r.osname="Android");var A="";r.windows?A=function(e){switch(e){case"NT":return"NT";case"XP":return"XP";case"NT 5.0":return"2000";case"NT 5.1":return"XP";case"NT 5.2":return"2003";case"NT 6.0":return"Vista";case"NT 6.1":return"7";case"NT 6.2":return"8";case"NT 6.3":return"8.1";case"NT 10.0":return"10";default:return}}(e(/Windows ((NT|XP)( \d\d?.\d)?)/i)):r.windowsphone?A=e(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i):r.mac?A=(A=e(/Mac OS X (\d+([_\.\s]\d+)*)/i)).replace(/[_\s]/g,"."):i?A=(A=e(/os (\d+([_\s]\d+)*) like mac os x/i)).replace(/[_\s]/g,"."):o?A=e(/android[ \/-](\d+(\.\d+)*)/i):r.webos?A=e(/(?:web|hpw)os\/(\d+(\.\d+)*)/i):r.blackberry?A=e(/rim\stablet\sos\s(\d+(\.\d+)*)/i):r.bada?A=e(/bada\/(\d+(\.\d+)*)/i):r.tizen&&(A=e(/tizen[\/\s](\d+(\.\d+)*)/i)),A&&(r.osversion=A);var C=!r.windows&&A.split(".")[0];return _||s||"ipad"==i||o&&(3==C||4<=C&&!b)||r.silk?r.tablet=S:(b||"iphone"==i||"ipod"==i||o||a||r.blackberry||r.webos||r.bada)&&(r.mobile=S),r.msedge||r.msie&&10<=r.version||r.yandexbrowser&&15<=r.version||r.vivaldi&&1<=r.version||r.chrome&&20<=r.version||r.samsungBrowser&&4<=r.version||r.whale&&1===E([r.version,"1.0"])||r.mzbrowser&&1===E([r.version,"6.0"])||r.focus&&1===E([r.version,"1.0"])||r.firefox&&20<=r.version||r.safari&&6<=r.version||r.opera&&10<=r.version||r.ios&&r.osversion&&6<=r.osversion.split(".")[0]||r.blackberry&&10.1<=r.version||r.chromium&&20<=r.version?r.a=S:r.msie&&r.version<10||r.chrome&&r.version<20||r.firefox&&r.version<20||r.safari&&r.version<6||r.opera&&r.version<10||r.ios&&r.osversion&&r.osversion.split(".")[0]<6||r.chromium&&r.version<20?r.c=S:r.x=S,r}var s=a("undefined"!=typeof navigator&&navigator.userAgent||"");function r(e){return e.split(".").length}function i(e,t){var n,r=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(n=0;n<e.length;n++)r.push(t(e[n]));return r}function E(e){for(var n=Math.max(r(e[0]),r(e[1])),t=i(e,function(e){var t=n-r(e);return i((e+=new Array(1+t).join(".0")).split("."),function(e){return new Array(20-e.length).join("0")+e}).reverse()});0<=--n;){if(t[0][n]>t[1][n])return 1;if(t[0][n]!==t[1][n])return-1;if(0===n)return 0}}function o(e,t,n){var r=s;"string"==typeof t&&(n=t,t=void 0),void 0===t&&(t=!1),n&&(r=a(n));var i=""+r.version;for(var o in e)if(e.hasOwnProperty(o)&&r[o]){if("string"!=typeof e[o])throw new Error("Browser version in the minVersion map should be a string: "+o+": "+String(e));return E([i,e[o]])<0}return t}return s.test=function(e){for(var t=0;t<e.length;++t){var n=e[t];if("string"==typeof n&&n in s)return!0}return!1},s.isUnsupportedBrowser=o,s.compareVersions=E,s.check=function(e,t,n){return!o(e,t,n)},s._detect=a,s.detect=a,s},e.exports?e.exports=n():t.bowser=n()}),Pa={props:["sourceName","sourceLabel"],computed:_objectSpread({},ra.mapGetters(["accept","canAddMoreFiles","clouds","customSourceName","filesWaiting","route","maxFiles","mobileNavActive","uploadStarted"]),{acceptStr:function(){if(this.accept)return this.accept.join(",")},itemClasses:function(){return{"fsp-source-list__item":!0,"fsp-source-list__item--active":this.isSelectedSource,"fsp-source-list__item--disabled":this.uploadStarted}},itemLabel:function(){return"customsource"===this.sourceName?this.customSourceName||"Custom Source":this.sourceLabel},isSelectedSource:function(){return"summary"!==this.route[0]&&(1<this.route.length?this.route[1]:"local_file_system")===this.sourceName},isAuthorized:function(){if("customsource"===this.sourceName)return!1;var e=this.clouds[this.sourceName];return e&&"ready"===e.status},isMobileLocal:function(){return!(!La.mobile||!this.mobileNavActive)&&("local_file_system"===this.sourceName||"video"===this.sourceName||"audio"===this.sourceName||"webcam"===this.sourceName)},multiple:function(){return 1<this.maxFiles},sourceSelectedCount:function(){var t=this;return this.filesWaiting.filter(function(e){return e.source===t.sourceName}).length}}),methods:_objectSpread({},ra.mapActions(["updateMobileNavActive","addFile","logout"]),{clearEvent:function(e){e.target.value=null},onNavClick:function(e){this.isMobileLocal?this.openSelectFile():(this.updateMobileNavActive(!1),this.$store.dispatch("goToLastPath",e))},openSelectFile:function(){this.$refs.mobileLocaInput.click()},onFilesSelected:function(e){for(var t=e.target.files,n=0;n<t.length;n+=1)this.addFile(t[n])}})};Da._withStripped=!0;function ja(){var e=this.$createElement,t=this._self._c||e;return this.cropFiles||this.isSidebarHidden?this._e():t("div",{class:this.sidebarClasses},[t("div",{staticClass:"fsp-source-list"},this._l(this.fromSources,function(e){return t("source-nav-item",{key:e.name,attrs:{"source-name":e.name,"source-label":e.label}})}),1)])}var Ma={components:{SourceNavItem:oa({render:Da,staticRenderFns:[]},void 0,Pa,void 0,!1,void 0,!1,void 0,void 0,void 0)},computed:_objectSpread({},ra.mapGetters(["isSidebarHidden","cropFiles","fromSources","mobileNavActive"]),{sidebarClasses:function(){return{"fsp-modal__sidebar--mobile":this.mobileNavActive,"fsp-modal__sidebar":!0}}})};ja._withStripped=!0;function Ba(){var e=this.$createElement,t=this._self._c||e;return this.isInlineDisplay?this._e():t("div",{staticClass:"fsp-picker__brand-container"},[t("transition",{attrs:{name:"fsp-picker-fade"}},[t("div",{directives:[{name:"show",rawName:"v-show",value:!this.isInlineDisplay&&!this.whitelabel,expression:"!isInlineDisplay && !whitelabel"}],staticClass:"fsp-picker__brand"},[this._v("\n      Powered by "),t("span",{staticClass:"fsp-icon--filestack"}),this._v(" Filestack\n    ")])])],1)}var za=oa({render:ja,staticRenderFns:[]},void 0,Ma,void 0,!1,void 0,!1,void 0,void 0,void 0),$a={computed:_objectSpread({},ra.mapGetters(["isInlineDisplay","whitelabel"]))};Ba._withStripped=!0;function Wa(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"fsp-picker"},[n("div",{staticClass:"fsp-modal"},[n("span",{staticClass:"fsp-picker__close-button fsp-icon--close-modal",attrs:{tabindex:"0",title:t.t("Click here or hit ESC to close picker")},on:{click:t.closePicker,keyup:function(e){return!e.type.indexOf("key")&&t._k(e.keyCode,"enter",13,e.key,"Enter")?null:t.closePicker(e)}}}),t._v(" "),t._t("sidebar"),t._v(" "),n("div",{staticClass:"fsp-modal__body",class:t.getModalClasses},[t._t("header"),t._v(" "),n("div",{ref:"content",staticClass:"fsp-content",class:t.getContentClasses,on:{scroll:t.handleScroll}},[t._t("body")],2),t._v(" "),t._t("footer")],2)],2),t._v(" "),n("branding")],1)}var Ga={components:{Branding:oa({render:Ba,staticRenderFns:[]},void 0,$a,void 0,!1,void 0,!1,void 0,void 0,void 0),Sidebar:za},computed:_objectSpread({},ra.mapGetters(["cropFiles","currentCloud","filesWaiting","isInlineDisplay","isSidebarHidden","route","uploadStarted"]),{isCloud:function(){return 0<Object.keys(this.currentCloud).length},isLocal:function(){return"local_file_system"===this.route[1]},isWebcam:function(){return["webcam","audio","video"].indexOf(-1!==this.route[1])},isTransformer:function(){return"transform"===this.route[0]},getContentClasses:function(){return{"fsp-content--selected-items":this.isTransformer||!this.isLocal&&!this.isWebcam&&(0<this.filesWaiting.length||this.uploadStarted),"fsp-content--transformer":this.isTransformer}},getModalClasses:function(){return{"fsp-modal__body--full-width":this.isSidebarHidden&&!this.isTransformer,"fsp-modal__body--transformer":this.isTransformer,"fsp-modal__body--sidebar-disabled":!this.isTransformer&&this.cropFiles}}}),methods:{closePicker:function(){this.$store.dispatch("cancelPick"),this.$root.$destroy()},handleScroll:function(){var e=this,t=this.$refs.content;if(t&&this.isCloud){var n=t.scrollHeight-Math.round(t.scrollTop,10),r=-1!==[t.clientHeight,t.clientHeight-1,t.clientHeight+1].indexOf(n);this.getNext=this.getNext||Ua(function(){e.isCloud&&e.$store.dispatch("fetchCloudPath",{name:e.currentCloud.name,path:e.currentCloud.lastPath,next:e.currentCloud.next,load:!1})},3e3),r&&this.currentCloud.next&&!this.currentCloud.isLoading&&this.getNext()}}}};Wa._withStripped=!0;function Ha(){var e=this,t=e.$createElement,n=e._self._c||t;return n("modal",[n("content-header",{attrs:{slot:"header","hide-menu":!0},slot:"header"},[n("span",{staticClass:"fsp-header-text--visible"},[e._v(e._s(e.t(e.headerText)))])]),e._v(" "),n("div",{staticClass:"fsp-blocked__container",attrs:{slot:"body"},slot:"body"},[n("div",{staticClass:"fsp-blocked__icon"}),e._v(" "),n("div",{staticClass:"fsp-blocked__title"},[e._v(e._s(e.t(e.titleText)))]),e._v(" "),n("div",{staticClass:"fsp-text__subheader"},[e._v(e._s(e.t(e.subheaderText)))]),e._v(" "),n("div",{staticClass:"fsp-text__subheader"},[e._v("\n      Please contact the owner of this page.\n    ")])])],1)}var Va=oa({render:Wa,staticRenderFns:[]},void 0,Ga,void 0,!1,void 0,!1,void 0,void 0,void 0),Qa={components:{ContentHeader:ha,Modal:Va},computed:_objectSpread({},ra.mapGetters(["isBlocked"]),{headerText:function(){return this.isBlocked?"Application Blocked":"Application Unavailable"},titleText:function(){return this.isBlocked?"This application is blocked":"This application is unavailable"},subheaderText:function(){return this.isBlocked?"For some reason this application is blocked.":"For some reason this application is unavailable."}})};Ha._withStripped=!0;function qa(){var e=this,t=e.$createElement,n=e._self._c||t;return 0<e.notifications.length?n("div",{staticClass:"fsp-notifications__container",class:e.getClasses},[n("div",{staticClass:"fsp-notifications__message"},[e._v("\n     "+e._s(e.t(e.mostRecentNotification.message,e.mostRecentNotification.params))+"\n  ")]),e._v(" "),n("span",{staticClass:"fsp-icon fsp-notifications__close-button",on:{click:e.removeAllNotifications}})]):e._e()}var Ya=oa({render:Ha,staticRenderFns:[]},void 0,Qa,void 0,!1,void 0,!1,void 0,void 0,void 0),Ka={computed:_objectSpread({},ra.mapGetters(["notifications"]),{getClasses:function(){return{"fsp-notifications__success":!!this.mostRecentNotification.success}},mostRecentNotification:function(){return this.notifications[this.notifications.length-1]}}),methods:_objectSpread({},ra.mapActions(["removeAllNotifications"]))};qa._withStripped=!0;function Xa(t){var n;if(is.forEach(function(e){e.name===t&&(n=e)}),!n)throw new Error('Unknown source "'.concat(t,'"'));return n.deprecated&&console.warn("Source ".concat(n.name," is deprecated")),n}function Za(e,t){var n=function(e){if(e.folder)return e.path;var t=e.path.split("/").map(function(e){return e.toLowerCase()});return t.pop(),"".concat(t.join("/"),"/")}(e),r=t.path.split("/").map(function(e){return e.toLowerCase()}).join("/"),i="".concat(r,"/");return n===r||n===i}function Ja(e){var t=e.mimetype||e.type;return t&&-1!==t.indexOf("image/")}function es(e){var t=e.name&&e.name.split(".").pop().toLowerCase(),n=e.type||e.mimetype,r=0<=["bmp","jpg","jpeg","png","gif","svg"].indexOf(t),i=0<=["image/jpeg","image/jpg","image/png","image/bmp","image/gif","image/svg","image/svg+xml"].indexOf(n);return r||i}function ts(e){var t=e.mimetype||e.type;return t&&-1!==t.indexOf("audio/")}function ns(){var n=this,e=n.$createElement,r=n._self._c||e;return 0<n.files.length?r("div",{staticClass:"fsp-grid",class:"fps-grid__type-"+n.viewType},[n._l(n.onlyFolders,function(t){return r("div",{key:t.path,staticClass:"fsp-grid__cell",class:{"fsp-grid__cell--selected":n.isSelected(t)},attrs:{title:t.name,tabindex:"0"},on:{click:function(e){return n.handleFolderClick(e,t)},keyup:function(e){return!e.type.indexOf("key")&&n._k(e.keyCode,"enter",13,e.key,"Enter")?null:n.handleFolderClick(e,t)}}},[n.isSelected(t)?r("span",{staticClass:"fsp-badge fsp-badge--bright fsp-badge--file"},[n._v("\n      "+n._s(n.getFileCount(t))+"\n    ")]):n._e(),n._v(" "),n.isSelected(t)&&"grid"!==n.viewType?n._e():r("span",{staticClass:"fsp-grid__icon",class:n.getIconClass("fsp-grid__icon-folder",t)}),n._v(" "),r("span",{staticClass:"fsp-grid__text",class:{"fsp-grid__text--selected":n.isSelected(t)}},[n._v(n._s(t.name))]),n._v(" "),n.isSelected(t)?r("span",{staticClass:"fsp-grid__icon--selected",attrs:{title:"Deselect folder"},on:{click:function(e){return e.stopPropagation(),n.deselectFolder(t)}}}):n._e(),n._v(" "),n.isLoading(t)||n.isSelected(t)?n._e():r("span",{staticClass:"fsp-grid__icon-folder-add",attrs:{title:"Add folder"},on:{click:function(e){return e.stopPropagation(),n.addFile(t)}}}),n._v(" "),n.isLoading(t)?r("div",{staticClass:"fsp-loading--folder"}):n._e()])}),n._v(" "),n._l(n.onlyFiles,function(t){return r("div",{key:t.path,staticClass:"fsp-grid__cell",class:{"fsp-grid__cell--selected":n.isSelected(t),"fsp-grid__cell--thumbnail":n.isImage(t)},attrs:{tabindex:"0",title:t.name},on:{keyup:function(e){return!e.type.indexOf("key")&&n._k(e.keyCode,"enter",13,e.key,"Enter")?null:n.handleClickFile(e,t)},click:function(e){return n.handleClickFile(e,t)}}},[n.isAudio(t)?r("span",{staticClass:"fsp-grid__icon",class:n.getIconClass("fsp-grid__icon-audio",t)}):n.isImage(t)?r("img",{staticClass:"fsp-grid__icon fsp-grid__thumbnail",attrs:{src:t.thumbnail,alt:t.name}}):"application/pdf"===t.mimetype?r("span",{staticClass:"fsp-grid__icon",class:n.getIconClass("fsp-grid__icon-pdf",t)}):"application/zip"===t.mimetype?r("span",{staticClass:"fsp-grid__icon",class:n.getIconClass("fsp-grid__icon-zip",t)}):r("span",{staticClass:"fsp-grid__icon",class:n.getIconClass("fsp-grid__icon-file",t)}),n._v(" "),r("span",{staticClass:"fsp-grid__text",class:{"fsp-grid__text--selected":n.isSelected(t)}},[n._v(n._s(n.getName(t)))]),n._v(" "),n.isSelected(t)?r("span",{staticClass:"fsp-grid__icon--selected"}):n._e(),n._v(" "),r("div",{staticClass:"fsp-grid__cell--dark"})])})],2):n._e()}var rs=oa({render:qa,staticRenderFns:[]},void 0,Ka,void 0,!1,void 0,!1,void 0,void 0,void 0),is=[{name:"local_file_system",label:"My Device",ui:"local"},{name:"webcam",label:"Take Photo",ui:"webcam"},{name:"video",label:"Record Video",ui:"opentok"},{name:"audio",label:"Record Audio",ui:"opentok"},{name:"customsource",label:"Custom Source",ui:"cloud",layout:"list"},{name:"dropbox",label:"Dropbox",ui:"cloud",layout:"list"},{name:"facebook",label:"Facebook",ui:"cloud",layout:"hybrid"},{name:"instagram",label:"Instagram",ui:"cloud",layout:"grid"},{name:"box",label:"Box",ui:"cloud",layout:"list"},{name:"googledrive",label:"Google Drive",ui:"cloud",layout:"list"},{name:"github",label:"Github",ui:"cloud",layout:"list"},{name:"gmail",label:"Gmail",ui:"cloud",layout:"list"},{name:"picasa",label:"Google Photos",ui:"cloud",layout:"hybrid"},{name:"onedrive",label:"OneDrive",ui:"cloud",layout:"list"},{name:"onedriveforbusiness",label:"OneDrive Business",ui:"cloud",layout:"list"},{name:"clouddrive",label:"Cloud Drive",ui:"cloud",layout:"list",deprecated:!0},{name:"imagesearch",label:"Web Search",ui:"imagesearch"},{name:"url",label:"Link (URL)",ui:"url"},{name:"tint",label:"TINT",ui:"cloud"}],os={props:["files"],data:function(){return{lastClicked:null}},computed:_objectSpread({},ra.mapGetters(["cloudFolders","filesWaiting","viewType"]),{onlyFolders:function(){return this.files.filter(function(e){return e.folder})},onlyFiles:function(){return this.files.filter(function(e){return!e.folder})}}),methods:_objectSpread({},ra.mapActions(["setViewType","addFile","deselectFolder","goToDirectory"]),{getName:function(e){return e.display_name&&e.display_name.length?e.display_name:e.name},handleClickFile:function(e,t){if(this.lastClicked||(this.lastClicked=t),e.shiftKey){for(var n=this.files.indexOf(t),r=this.files.indexOf(this.lastClicked),i=Math.min(n,r),o=Math.max(n,r)+1,a=i;a<o;a+=1)this.files[a]&&this.files[a]!==this.lastClicked&&this.files[a].state!==this.lastClicked.state&&this.addFile(this.files[a]);this.lastClicked=t}else this.lastClicked=t,this.addFile(t)},handleFolderClick:function(e,t){e.shiftKey?this.handleClickFile(e,t):this.goToDirectory(t)},getIconClass:function(e,t){var n;return _defineProperty(n={},e,!this.isSelected(t)),_defineProperty(n,"".concat(e,"--selected"),this.isSelected(t)),n},isAudio:function(e){return ts(e)},isImage:function(e){return Ja(e)},isLoading:function(e){return!!e.folder&&(this.cloudFolders[e.path]&&this.cloudFolders[e.path].loading)},isSelected:function(e){return e.folder?0<this.getFileCount(e):e.state},getFileCount:function(t){return this.filesWaiting.filter(function(e){return Za(e,t)}).length}})};ns._withStripped=!0;function as(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"fsp-empty"},[n("div",{staticClass:"fsp-empty__message"},[e._v(e._s(e.t("This folder is empty.")))]),e._v(" "),n("span",{staticClass:"fsp-empty__back-button",on:{click:e.goBack}},[e._v(e._s(e.t("Go back")))])])}var ss=oa({render:ns,staticRenderFns:[]},void 0,os,void 0,!1,void 0,!1,void 0,void 0,void 0),cs={methods:{goBack:function(){this.$store.commit("GO_BACK_WITH_ROUTE")}}};as._withStripped=!0;function ls(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"fsp-cloud__folder-view"},[this.folderIsEmpty?t("empty-folder"):t("grid-array",{attrs:{files:this.files}})],1)}var us={props:["files"],components:{GridArray:ss,EmptyFolder:oa({render:as,staticRenderFns:[]},void 0,cs,void 0,!1,void 0,!1,void 0,void 0,void 0)},computed:{folderIsEmpty:function(){return!this.$store.getters.currentCloud.isLoading&&!this.$store.getters.currentCloud.isErrored&&!this.$store.getters.currentCloudFiles.length}}};ls._withStripped=!0;function ds(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"fsp-breadcrumb__container"},[t.crumbs.length<=3?n("span",{staticStyle:{display:"flex"}},t._l(t.crumbs,function(e){return n("span",{key:e.path,staticClass:"fsp-breadcrumb__label",on:{click:function(){return t.handleClick(e)}}},[t._v("\n      "+t._s(e.label)+"\n    ")])}),0):n("span",{staticStyle:{display:"flex"}},t._l(t.truncateCrumbs(t.crumbs),function(e){return n("span",{key:e.path,staticClass:"fsp-breadcrumb__label",on:{click:function(){return t.handleClick(e)}}},[t._v("\n      "+t._s(e.label)+"\n    ")])}),0)])}var ps=oa({render:ls,staticRenderFns:[]},void 0,us,void 0,!1,void 0,!1,void 0,void 0,void 0),fs={props:["crumbs","onClick"],methods:{truncateCrumbs:function(n){var e=[].concat(n[0]),t=n.filter(function(e,t){return t>=n.length-2});return e.push.apply(e,[{path:"",label:"..."}].concat(_toConsumableArray(t))),e},handleClick:function(e){e.path&&e.label&&this.onClick(e)}}};ds._withStripped=!0;function hs(){var e=this.$createElement,t=this._self._c||e;return t("transition",{attrs:{name:"fsp-loading--fade"}},[t("div",{staticClass:"fsp-loading"})])}var ms=oa({render:ds,staticRenderFns:[]},void 0,fs,void 0,!1,void 0,!1,void 0,void 0,void 0),vs={};hs._withStripped=!0;function gs(){var e=this,t=e.$createElement,n=e._self._c||t;return n("button",{staticClass:"fsp-button--authgoogle",attrs:{type:"button",tabindex:"0"},on:{click:e.clickFn}},[n("svg",{staticClass:"svg-icon native iconGoogle",attrs:{"aria-hidden":"true",width:"20",height:"20",viewBox:"0 0 18 18"}},[n("path",{attrs:{d:"M16.51 8H8.98v3h4.3c-.18 1-.74 1.48-1.6 2.04v2.01h2.6a7.8 7.8 0 0 0 2.38-5.88c0-.57-.05-.66-.15-1.18z",fill:"#4285F4"}}),e._v(" "),n("path",{attrs:{d:"M8.98 17c2.16 0 3.97-.72 5.3-1.94l-2.6-2a4.8 4.8 0 0 1-7.18-2.54H1.83v2.07A8 8 0 0 0 8.98 17z",fill:"#34A853"}}),e._v(" "),n("path",{attrs:{d:"M4.5 10.52a4.8 4.8 0 0 1 0-3.04V5.41H1.83a8 8 0 0 0 0 7.18l2.67-2.07z",fill:"#FBBC05"}}),e._v(" "),n("path",{attrs:{d:"M8.98 4.18c1.17 0 2.23.4 3.06 1.2l2.3-2.3A8 8 0 0 0 1.83 5.4L4.5 7.49a4.77 4.77 0 0 1 4.48-3.3z",fill:"#EA4335"}})]),e._v(" "),n("span",[e._v("\n    "+e._s(e.t("Sign in with Google"))+"\n  ")])])}var ys=oa({render:hs,staticRenderFns:[]},void 0,vs,void 0,!1,void 0,!1,void 0,void 0,void 0),_s={props:{clickFn:Function}};gs._withStripped=!0;function bs(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"fsp-cloud__container"},[t.currentCloud.isLoading?n("loading"):t._e(),t._v(" "),t.currentCloud.isErrored?n("div",{staticClass:"fsp-cloud-error"},[n("div",{staticClass:"fsp-cloud-error__text"},[t._v("Something went wrong.")]),t._v(" "),n("div",{key:"retryCall",staticClass:"fsp-button fsp-button--outline",attrs:{tabindex:"0"},on:{click:t.tryAgain,keyup:function(e){return!e.type.indexOf("key")&&t._k(e.keyCode,"enter",13,e.key,"Enter")?null:t.tryAgain(e)}}},[t._v("\n      Retry\n    ")])]):t.currentCloud.isUnauthorized?n("div",{staticClass:"fsp-source-auth__wrapper"},[n("span",{staticClass:"fsp-icon fsp-icon--auth fsp-source-auth__el",class:"fsp-icon--"+t.currentCloud.name}),t._v(" "),n("div",{staticClass:"fsp-text__title fsp-source-auth__el"},[t._v("\n      "+t._s(t.t("Select Files from {providerName}").replace("{providerName}",t.currentDisplay.label))+"\n    ")]),t._v(" "),n("div",{staticClass:"fsp-source-auth__el"},[t.customAuthTextTop?t._l(t.customAuthTextTop,function(e){return n("div",{key:e,staticClass:"fsp-custom-auth-top__container"},[n("div",{staticClass:"fsp-text__subheader"},[t._v("\n            "+t._s(e)+"\n          ")])])}):[n("div"),t._v(" "),n("div",{staticClass:"fsp-text__subheader"},[t._v("\n          "+t._s(t.t("You need to authenticate with {providerName}.").replace("{providerName}",t.currentDisplay.label))+"\n        ")]),t._v(" "),n("div",{staticClass:"fsp-text__subheader"},[t._v("\n          "+t._s(t.t("We only extract images and never modify or delete them."))+"\n        ")])]],2),t._v(" "),t.shouldUseGoogleSignIn()?n("GoogleSignInButton",{attrs:{clickFn:t.authorize}}):n("button",{staticClass:"fsp-button fsp-button--auth fsp-source-auth__el",attrs:{type:"button",tabindex:"0"},on:{click:t.authorize}},[t._v("\n      "+t._s(t.t("Connect {providerName}").replace("{providerName}",t.currentDisplay.label))+"\n    ")]),t._v(" "),n("div",{staticClass:"fsp-source-auth__el"},[t.customAuthTextBottom?t._l(t.customAuthTextBottom,function(e){return n("div",{key:e,staticClass:"fsp-custom-auth-bottom__container"},[n("div",{staticClass:"fsp-text__subheader"},[t._v("\n            "+t._s(e)+"\n          ")])])}):[n("div",{staticClass:"fsp-text__subheader"},[t._v("\n          "+t._s(t.t("A new page will open to connect your account."))+"\n        ")]),t._v(" "),n("div",{staticClass:"fsp-text__subheader"},[t._v("\n          "+t._s(t.t('To disconnect from {providerName} click "Sign out" button in the menu.').replace("{providerName}",t.currentDisplay.label))+"\n        ")])]],2)],1):t.currentCloud.isLoading?t._e():n("div",{staticClass:"fsp-cloud__files-container"},[n("div",{staticClass:"fsp-cloud__breadcrumbs"},["grid"!==t.currentDisplay.layout?n("breadcrumbs",{attrs:{crumbs:t.currentCrumbs,"on-click":t.updatePath}}):t._e(),t._v(" "),n("div",{staticClass:"fsp-cloud_view-type",on:{click:function(e){return e.preventDefault(),t.toogleViewType()}}},[n("span",{staticClass:"fsp-cloud_view-type-icon",class:this.getViewTypeIconClass()})])],1),t._v(" "),n("cloud-grid",{attrs:{files:t.currentCloudFiles}})],1)],1)}var ws={components:{CloudGrid:ps,Breadcrumbs:ms,Loading:ys,GoogleSignInButton:oa({render:gs,staticRenderFns:[]},void 0,_s,void 0,!1,void 0,!1,void 0,void 0,void 0)},data:function(){return{googleSources:["googledrive","gmail","picasa"]}},computed:_objectSpread({},ra.mapGetters(["apiClient","cloudFolders","currentCloud","currentCloudFiles","customSourceName","viewType"]),{currentDisplay:function(){return Xa(this.currentCloud.name)},currentLabel:function(){return"customsource"===this.currentCloud.name?this.customSourceName||"Custom Source":this.currentDisplay.label},currentCrumbs:function(){var t=this;return this.currentCloud.path.map(function(e){return"/"===e?{label:t.currentLabel,path:e}:{label:t.cloudFolders[e].name,path:e}})},currentSource:function(){return this.$store.getters.currentCloud&&Object.keys(this.$store.getters.currentCloud).length?Xa(this.$store.getters.currentCloud.name):null},customAuthTextTop:function(){var e=this.currentSource.name,t=this.$store.getters.config.customAuthText;return t?t[e]&&t[e].top?t[e].top:t.default&&t.default.top?t.default.top:null:null},customAuthTextBottom:function(){var e=this.currentSource.name,t=this.$store.getters.config.customAuthText;return t?t[e]&&t[e].bottom?t[e].bottom:t.default&&t.default.bottom?t.default.bottom:null:null}}),methods:_objectSpread({},ra.mapActions(["fetchCloudPath","setViewType"]),{toogleViewType:function(){var e="list"===this.viewType?"grid":"list";this.$session.set("cloud-grid-view",e),this.setViewType(e)},getViewTypeIconClass:function(){return"fsp-cloud_view-type-icon-".concat("list"===this.viewType?"grid":"list")},authorize:function(){var t=this,e=this.currentCloud.redirect,n=window.open(e,"_blank");!function e(){setTimeout(function(){n&&!0!==n.closed?setTimeout(e,100):setTimeout(function(){t.fetchCloudPath({name:t.currentCloud.name})},100)},1e3)}()},tryAgain:function(){return this.fetchCloudPath({name:this.currentCloud.name})},updatePath:function(e){var n=this.currentCloud.path.indexOf(e.path);if(n!==this.currentCloud.path.length-1){var t=this.currentCloud.path.filter(function(e,t){return t<=n}),r=["source",this.currentCloud.name];"/"===e.path||r.push(t),this.$store.commit("CHANGE_ROUTE",r)}},shouldUseGoogleSignIn:function(){return!!this.currentSource.name&&-1<this.googleSources.indexOf(this.currentSource.name)}}),mounted:function(){var e=this.$session.get("cloud-grid-view");e&&this.setViewType(e)}};bs._withStripped=!0;function As(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"fsp-footer",class:{"fsp-footer--appeared":this.isVisible}},[t("div",{staticClass:"fsp-footer__nav"},[t("span",{staticClass:"fsp-footer__nav--left"},[this._t("nav-left")],2),this._v(" "),t("span",{staticClass:"fsp-footer__nav--center",style:{width:this.fullWidth?"100%":null}},[this._t("nav-center")],2),this._v(" "),t("span",{staticClass:"fsp-footer__nav--right"},[this._t("nav-right")],2)])])}var Cs=oa({render:bs,staticRenderFns:[]},void 0,ws,void 0,!1,void 0,!1,void 0,void 0,void 0),Ss={props:["isVisible","fullWidth"]};As._withStripped=!0;function Es(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"fsp-image-search"},[t.isSearching?n("loading"):t._e(),t._v(" "),n("div",{staticClass:"fsp-image-search__form-container",class:{"fsp-image-search__form-container--results":t.resultsFound}},[n("form",{staticClass:"fsp-url-source__form",on:{submit:function(e){return e.preventDefault(),t.fetch(e)}}},[n("input",{ref:"searchInput",staticClass:"fsp-url-source__input",attrs:{placeholder:t.placeholderText,disabled:t.isSearching,tabindex:"0"},domProps:{value:t.imageSearchInput},on:{input:t.updateInput}}),t._v(" "),t._m(0)])]),t._v(" "),n("div",{staticClass:"fsp-image-search__results",class:{"fsp-content--selected-items":t.resultsFound&&t.filesWaiting.length}},[t.resultsFound?n("grid-array",{staticStyle:{"padding-top":"0px"},attrs:{files:t.imageSearchResults}}):t._e()],1)],1)}var ks=oa({render:As,staticRenderFns:[]},void 0,Ss,void 0,!1,void 0,!1,void 0,void 0,void 0),xs={components:{GridArray:ss,Loading:ys},computed:_objectSpread({},ra.mapGetters(["isSearching","noResultsFound","resultsFound","imageSearchInput","imageSearchResults","filesWaiting","viewType"]),{placeholderText:function(){return"".concat(this.t("Search images"),"...")}}),mounted:function(){this.oldViewType=this.viewType,this.setViewType("grid"),this.$store.commit("CLEAR_IMAGES_STORE")},destroyed:function(){this.setViewType(this.oldViewType)},methods:_objectSpread({},ra.mapActions(["updateSearchInput","fetchImages","setViewType"]),{fetch:function(){this.fetchImages(),this.$refs.searchInput.blur()},updateInput:function(e){this.updateSearchInput(e.target.value)},clearSearch:function(){this.updateSearchInput("")}})};Es._withStripped=!0;function Fs(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"fsp-select-labels",class:{"fsp-select-labels--active":e.selectLabelIsActive}},[n("div",{staticClass:"fsp-drop-area__title fsp-text__title"},[e._v("\n      "+e._s(e.t("Select Files to Upload"))+"\n  ")]),e._v(" "),n("div",{staticClass:"fsp-drop-area__subtitle fsp-text__subheader"},[e._v("\n      "+e._s(e.t("or Drag and Drop, Copy and Paste Files"))+"\n  ")])])}var Is=oa({render:Es,staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("button",{staticClass:"fsp-button fsp-url-source__submit-button",attrs:{type:"submit",tabindex:"0"}},[t("div",{staticClass:"fsp-icon fsp-image-search__submit-icon"})])}]},void 0,xs,void 0,!1,void 0,!1,void 0,void 0,void 0),Ts={computed:_objectSpread({},ra.mapGetters(["selectLabelIsActive"]))};Fs._withStripped=!0;function Os(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"fsp-drop-area-container"},[n("div",{ref:"dropArea",staticClass:"fsp-drop-area",attrs:{tabindex:"0"},on:{click:t.openSelectFile,keyup:function(e){return!e.type.indexOf("key")&&t._k(e.keyCode,"enter",13,e.key,"Enter")?null:t.openSelectFile(e)}}},[n("select-files-label"),t._v(" "),n("input",{ref:"fileUploadInput",staticClass:"fsp-local-source__fileinput",attrs:{type:"file",id:"fsp-fileUpload",accept:t.acceptStr,multiple:t.multiple,disabled:!t.canAddMoreFiles},on:{change:function(e){return t.onFilesSelected(e)},click:function(e){return t.clearEvent(e)}}})],1)])}var Ns={components:{SelectFilesLabel:oa({render:Fs,staticRenderFns:[]},void 0,Ts,void 0,!1,void 0,!1,void 0,void 0,void 0)},computed:_objectSpread({},ra.mapGetters(["accept","canAddMoreFiles","maxFiles"]),{acceptStr:function(){if(this.accept)return this.accept.join(",")},multiple:function(){return 1<this.maxFiles}}),methods:_objectSpread({},ra.mapActions(["addFile","updateSelectLabelActive"]),{clearEvent:function(e){e.target.value=null},onMouseover:function(){this.updateSelectLabelActive(!0)},onMouseout:function(){this.updateSelectLabelActive(!1)},onFilesSelected:function(t){try{var e=t.target.files;if(!e.length)return;for(var n=0;n<e.length;n+=1)this.addFile(e[n])}catch(e){throw console.error(t.target.files),e}},openSelectFile:function(){this.$refs.fileUploadInput.click()}}),mounted:function(){var e=this.$refs.dropArea;e&&(e.addEventListener("mouseover",this.onMouseover),e.addEventListener("mouseout",this.onMouseout))}};Os._withStripped=!0;function Rs(r){return new Promise(function(e,t){if(!r)return t();var n=new FileReader;return n.onloadend=function(){e(n.result)},n.onerror=function(e){t(e)},n.readAsArrayBuffer(r)})}function Ds(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"fsp-webcam__container"},[e.webCamError?n("div",["disabled"===e.webCamError?n("div",{staticClass:"fsp-source-auth__wrapper"},[n("span",{staticClass:"fsp-icon fsp-icon--auth fsp-source-auth__el fsp-icon--webcam-disabled"}),e._v(" "),n("div",{staticClass:"fsp-text__title fsp-source-auth__el"},[e._v(e._s(e.t("Webcam Disabled")))]),e._v(" "),n("div",{staticClass:"fsp-source-auth__el"},[n("span",{staticClass:"fsp-text__subheader"},[e._v("\n          "+e._s(e.t("Please enable your webcam to take a photo."))+"\n        ")])])]):e._e(),e._v(" "),"browser"===e.webCamError?n("div",{staticClass:"fsp-source-auth__wrapper"},[n("span",{staticClass:"fsp-icon fsp-icon--auth fsp-source-auth__el fsp-icon--webcam-disabled"}),e._v(" "),n("div",{staticClass:"fsp-text__title fsp-source-auth__el"},[e._v(e._s(e.t("Webcam Not Supported")))]),e._v(" "),n("div",{staticClass:"fsp-source-auth__el"},[n("span",{staticClass:"fsp-text__subheader"},[e._v("\n          "+e._s(e.t("Your current browser does not support webcam functionality."))+"\n        ")]),e._v(" "),n("br"),e._v(" "),n("span",{staticClass:"fsp-text__subheader"},[e._v("\n          "+e._s(e.t("We suggest using Chrome or Firefox."))+"\n        ")])])]):e._e()]):e._e(),e._v(" "),e.webCamError?e._e():n("div",{staticClass:"fsp-webcam"},[n("img",{directives:[{name:"show",rawName:"v-show",value:e.pictureTaken,expression:"pictureTaken"}],ref:"photo",staticClass:"fsp-webcam__image",attrs:{src:e.imgSrc}}),e._v(" "),n("video",{directives:[{name:"show",rawName:"v-show",value:!e.pictureTaken,expression:"!pictureTaken"}],ref:"video",staticClass:"fsp-webcam__video",attrs:{src:e.src}})]),e._v(" "),e.webCamError?e._e():n("footer-nav",{attrs:{slot:"footer","is-visible":!0},slot:"footer"},[n("span",{attrs:{slot:"nav-center"},slot:"nav-center"},[e.pictureTaken?e._e():n("span",{staticClass:"fsp-button fsp-button--primary fsp-button--webcam",on:{click:e.getPhoto}},[n("span",{staticClass:"fsp-icon--webcam-start"})]),e._v(" "),e.pictureTaken?n("span",{staticClass:"fsp-button fsp-button--cancel fsp-button--webcam",on:{click:e.clearPhoto}},[n("span",{staticClass:"fsp-icon--webcam-stop"})]):e._e()]),e._v(" "),e.pictureTaken?n("span",{staticClass:"fsp-button fsp-button--primary",attrs:{slot:"nav-right",title:"Next"},on:{click:e.addPhoto},slot:"nav-right"},[e._v("\n          "+e._s(e.t("Next"))+"\n    ")]):e._e()])],1)}var Us=oa({render:Os,staticRenderFns:[]},void 0,Ns,void 0,!1,void 0,!1,void 0,void 0,void 0),Ls={components:{FooterNav:ks},data:function(){return{src:null,imgSrc:null,pictureTaken:!1,webCamImageSrc:"",webCamError:"",hasUserMedia:!1}},methods:_objectSpread({},ra.mapActions(["addFile"]),{webCamReady:function(){var t=this;navigator&&navigator.mediaDevices?navigator.mediaDevices.getUserMedia({video:!0,audio:!1}).then(function(e){t.$refs.video.srcObject=e,t.$refs.video.play(),t.hasUserMedia=!0}).catch(function(){t.webCamError="disabled"}):this.webCamError="disabled"},turnWebCamOff:function(){this.$refs.video&&this.$refs.video.srcObject&&this.$refs.video.srcObject.getTracks().forEach(function(e){e.stop()})},clearPhoto:function(){var e=document.createElement("canvas");e.getContext("2d").fillRect(0,0,e.width,e.height),this.webCamImageSrc="",this.pictureTaken=!1,this.webCamReady()},getPhoto:function(){if(!this.hasUserMedia)return null;var e=this.$refs.video,t=document.createElement("canvas"),n=t.getContext("2d");return t.height=e.clientHeight,t.width=e.clientWidth,n.drawImage(e,0,0),this.webCamImageSrc=function(e){for(var t=e.split(",")[0].split(":")[1].split(";")[0],n=atob(e.split(",")[1]),r=[],i=0;i<n.length;i++)r.push(n.charCodeAt(i));return URL.createObjectURL(new Blob([new Uint8Array(r)],{type:t}))}(t.toDataURL()),this.imgSrc=this.webCamImageSrc,this.canvas=t,this.pictureTaken=!0,this.turnWebCamOff(),t},addPhoto:function(){var t=this,n=this.$store.getters.lang;this.canvas.toBlob(function(e){e.name="webcam-".concat((new Date).toLocaleString(n),".png"),t.addFile(e)})}}),beforeMount:function(){navigator.mediaDevices?this.webCamReady():this.webCamError="browser",this.pictureTaken=!1},beforeDestroy:function(){this.turnWebCamOff()}};Ds._withStripped=!0;function Ps(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"fsp-url-source"},[t.isUrlFetching?n("loading"):t._e(),t._v(" "),n("div",{staticClass:"fsp-url-source__container"},[n("form",{staticClass:"fsp-url-source__form",on:{submit:function(e){return e.preventDefault(),t.fetchUrl(e)}}},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.url,expression:"url"}],staticClass:"fsp-url-source__input",attrs:{type:"url",placeholder:t.t("Enter a URL"),tabindex:"0"},domProps:{value:t.url},on:{input:function(e){e.target.composing||(t.url=e.target.value)}}}),t._v(" "),t._m(0)])])],1)}var js=oa({render:Ds,staticRenderFns:[]},void 0,Ls,void 0,!1,void 0,!1,void 0,void 0,void 0),Ms={components:{Loading:ys},data:function(){return{url:""}},computed:{isUrlFetching:function(){return this.$store.getters.isUrlFetching}},methods:{fetchUrl:function(){var t=this;this.url&&this.$store.dispatch("fetchUrl",this.url).then(function(e){e&&1<t.$store.getters.maxFiles&&t.$store.commit("CHANGE_ROUTE",["summary"])})}}};Ps._withStripped=!0;function Bs(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"fsp-video"},[0<e.filesList.length?n("div",{staticClass:"fsp-summary__go-back",attrs:{title:"Go to summary"},on:{click:e.goToSummary}}):e._e(),e._v(" "),"connecting"===e.state?n("loading"):"accessDenied"===e.state?n("div",{staticClass:"fsp-source-auth__wrapper"},[n("span",{staticClass:"fsp-icon fsp-icon--auth fsp-source-auth__el fsp-icon--video-disabled"}),e._v(" "),n("div",{staticClass:"fsp-text__title fsp-source-auth__el"},[e._v(e._s(e.t("Webcam Disabled")))]),e._v(" "),n("div",{staticClass:"fsp-source-auth__el"},[n("span",{staticClass:"fsp-text__subheader"},[e._v(e._s(e.t("Please enable your webcam to record video or audio.")))])]),e._v(" "),n("div",{key:"retryCam",staticClass:"fsp-button fsp-button--outline",on:{click:e.reset}},[e._v("Retry")])]):"scripterror"===e.state?n("div",{staticClass:"fsp-source-auth__wrapper"},[n("span",{staticClass:"fsp-icon fsp-icon--auth fsp-source-auth__el fsp-icon--video-disabled"}),e._v(" "),n("div",{staticClass:"fsp-text__title fsp-source-auth__el"},[e._v(e._s("Failed to load "+e.type))]),e._v(" "),n("div",{staticClass:"fsp-source-auth__el"},[n("div",{key:"retryCall",staticClass:"fsp-button fsp-button--outline",on:{click:e.reset}},[e._v("Retry")])])]):"browsererror"===e.state?n("div",{staticClass:"fsp-source-auth__wrapper"},[n("span",{staticClass:"fsp-icon fsp-icon--auth fsp-source-auth__el fsp-icon--webcam-disabled"}),e._v(" "),n("div",{staticClass:"fsp-text__title fsp-source-auth__el"},[e._v(e._s(e.t("Webcam Not Supported")))]),e._v(" "),n("div",{staticClass:"fsp-source-auth__el"},[n("span",{staticClass:"fsp-text__subheader"},[e._v(e._s(e.t("Your current browser does not support webcam functionality.")))]),e._v(" "),n("br"),e._v(" "),n("span",{staticClass:"fsp-text__subheader"},[e._v(e._s(e.t("We suggest using Chrome or Firefox.")))])])]):e._e(),e._v(" "),n("div",{ref:"video",staticClass:"fsp-video__container"}),e._v(" "),n("footer-nav",{attrs:{slot:"footer","is-visible":"connecting"!==e.state&&!e.isErrored},slot:"footer"},[n("span",{attrs:{slot:"nav-left"},slot:"nav-left"}),e._v(" "),n("span",{attrs:{slot:"nav-center"},slot:"nav-center"},["ready"===e.state?n("span",{staticClass:"fsp-button fsp-button--primary fsp-button--video",class:{"fsp-button--disabled":!e.startButtonInit},attrs:{title:"Start"},on:{click:e.start}},[n("span",{staticClass:"fsp-icon--video-start"})]):e._e(),e._v(" "),"recording"===e.state?n("span",{staticClass:"fsp-button fsp-button--cancel fsp-button--video",attrs:{title:"Stop"},on:{click:e.stop}},[n("span",{staticClass:"fsp-icon--video-stop"})]):e._e()])])],1)}var zs=oa({render:Ps,staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("button",{staticClass:"fsp-button fsp-url-source__submit-button",attrs:{type:"submit",tabindex:"0"}},[t("div",{staticClass:"fsp-icon fsp-url-source__submit-icon"})])}]},void 0,Ms,void 0,!1,void 0,!1,void 0,void 0,void 0),$s={props:{type:String},components:{FooterNav:ks,Loading:ys},computed:_objectSpread({},ra.mapGetters(["getModuleUrl"]),{client:function(){return this.$store.getters.cloudClient},filesList:function(){return this.$store.getters.filesList},maxFiles:function(){return this.$store.getters.maxFiles},routesHistory:function(){return this.$store.getters.routesHistory},isErrored:function(){return-1!==["browsererror","scripterror","accessDenied"].indexOf(this.state)}}),data:function(){return{archiveId:null,pendingRequest:!1,attempt:0,state:"connecting",startButtonInit:!1,publisher:null,session:null,otSession:{key:null,ot_session_id:null,ot_token:null},publisherOptions:{insertMode:"append",width:"100%",height:"100%"}}},methods:_objectSpread({},ra.mapActions(["addFile"]),{goToSummary:function(){this.$store.commit("CHANGE_ROUTE",["summary"]),this.$store.dispatch("updateMobileNavActive",!1)},loadOpenTok:function(){var e=this;return this.state="connecting",$i("".concat(this.getModuleUrl("fs-opentok"),"?").concat(this.attempt),"fs-opentok").catch(function(){e.state="scripterror"})},reset:function(){var t=this;this.session&&(this.publisher&&this.session.unpublish(this.publisher),this.session.disconnect()),this.attempt+=1,this.loadOpenTok().then(function(e){t.initialize(e)})},initialize:function(n){var r=this;n?this.client.tokInit(this.$props.type).then(function(e){r.otSession=e;var t=_objectSpread({},r.publisherOptions,{mirror:!1,resolution:r.$store.getters.videoResolution,publishVideo:"video"===r.$props.type});r.session=n.initSession(r.otSession.key,r.otSession.ot_session_id),r.session.connect(r.otSession.ot_token,function(e){!e&&r.$refs&&r.$refs.video?(r.publisher=n.initPublisher(r.$refs.video,t),r.session.publish(r.publisher),r.publisher.on("accessAllowed",function(){r.state="ready",r.startButtonInit=!0}),r.publisher.on("accessDenied",function(){r.state="accessDenied"})):(r.state="errored",console.warn("OT_ERROR",e))}),r.session.on("archiveStarted",function(e){r.archiveId=e.id,r.state="recording"}),r.session.on("archiveStopped",function(e){r.archiveId=e.id})}).catch(function(){r.state="errored"}):console.error("Cannot initialize opentok")},start:function(){var t=this;this.startButtonInit&&!this.pendingRequest&&(this.pendingRequest=!0,this.client.tokStart(this.$props.type,this.otSession.key,this.otSession.ot_session_id).then(function(){t.pendingRequest=!1}).catch(function(e){t.pendingRequest=!1,t.state="errored",console.error(e)}))},stop:function(){var i=this;this.archiveId&&!this.pendingRequest&&(this.pendingRequest=!0,this.client.tokStop(this.$props.type,this.otSession.key,this.otSession.ot_session_id,this.archiveId).then(function(){i.pendingRequest=!1,i.state="ready";var e=i.$store.getters.lang,t=(new Date).toLocaleString(e,{month:"short",day:"numeric",hour:"numeric",minute:"numeric",year:"numeric"}),n="audio"===i.$props.type?"mp3":"mp4",r="audio"===i.$props.type?"audio/mp3":"video/mp4";i.addFile({source:i.$props.type,sourceKind:"cloud",path:"/".concat(i.archiveId,"/recording-").concat(t,".").concat(n),name:"recording-".concat(t,".").concat(n),mimetype:r}),1<i.maxFiles&&i.goToSummary()}).catch(function(e){i.pendingRequest=!1,i.state="errored",console.error(e)}))}}),beforeMount:function(){navigator.mediaDevices||(this.state="browsererror")},mounted:function(){var t=this;"browsererror"!==this.state&&this.loadOpenTok().then(function(e){t.initialize(e)})},destroyed:function(){this.session&&(this.publisher&&this.session.unpublish(this.publisher),this.session.disconnect())},watch:{type:function(){var t=this;this.session&&(this.publisher&&this.session.unpublish(this.publisher),this.session.disconnect(),this.loadOpenTok().then(function(e){t.initialize(e)}))}}};Bs._withStripped=!0;function Ws(){var t=this,e=t.$createElement,n=t._self._c||e;return n("modal",[n("div",{attrs:{slot:"header"},slot:"header"},[t.isInsideCloudFolder?n("div",{staticClass:"fsp-summary__go-back",attrs:{title:t.t("Go back")},on:{click:t.goBack}}):t._e(),t._v(" "),n("content-header",{attrs:{source:t.currentSource}})],1),t._v(" "),n("sidebar",{attrs:{slot:"sidebar"},slot:"sidebar"}),t._v(" "),"local"===t.currentSource.ui?n("local",{attrs:{slot:"body"},slot:"body"}):t._e(),t._v(" "),"cloud"===t.currentSource.ui?n("cloud",{attrs:{slot:"body"},slot:"body"}):t._e(),t._v(" "),"webcam"===t.currentSource.ui?n("webcam",{attrs:{slot:"body"},slot:"body"}):t._e(),t._v(" "),"opentok"===t.currentSource.ui?n("open-tok",{attrs:{slot:"body",type:t.currentSource.name},slot:"body"}):t._e(),t._v(" "),"imagesearch"===t.currentSource.ui?n("image-search",{attrs:{slot:"body"},slot:"body"}):t._e(),t._v(" "),"url"===t.currentSource.ui?n("url",{attrs:{slot:"body"},slot:"body"}):t._e(),t._v(" "),n("footer-nav",{attrs:{slot:"footer","is-visible":0<t.filesWaiting.length&&"webcam"!==t.currentSource.ui&&"opentok"!==t.currentSource.ui},slot:"footer"},[n("span",{staticClass:"fsp-footer-text",attrs:{slot:"nav-left"},slot:"nav-left"},[n("span",[t._v(t._s(t.t("Selected Files"))+": "+t._s(t.filesWaiting.length))])]),t._v(" "),n("span",{staticClass:"fsp-button fsp-button--primary",class:{"fsp-button--disabled":!t.canStartUpload},attrs:{slot:"nav-right",title:"Next",tabindex:"0"},on:{click:t.goToSummary,keyup:function(e){return!e.type.indexOf("key")&&t._k(e.keyCode,"enter",13,e.key,"Enter")?null:t.goToSummary(e)}},slot:"nav-right"},[t.canStartUpload||0===t.filesWaiting.length?n("span",[t._v(t._s(t.t("View/Edit Selected")))]):n("span",[t._v("\n        "+t._s(t.minFilesMessage)+"\n      ")])])])],1)}var Gs={components:{Cloud:Cs,ContentHeader:ha,FooterNav:ks,ImageSearch:Is,Local:Us,Modal:Va,OpenTok:oa({render:Bs,staticRenderFns:[]},void 0,$s,void 0,!1,void 0,!1,void 0,void 0,void 0),Sidebar:za,Url:zs,Webcam:js},computed:_objectSpread({},ra.mapGetters(["canStartUpload","filesNeededCount","filesWaiting","mobileNavActive","minFiles","route"]),{currentSource:function(){var e=this.route[1];return Xa(e)},minFilesMessage:function(){return 1===this.filesNeededCount?"".concat(this.t("Add")," 1 ").concat(this.t("more file")):1<this.filesNeededCount?"".concat(this.t("Add")," ").concat(this.filesNeededCount," ").concat(this.t("more files")):null},isInsideCloudFolder:function(){return"cloud"===this.currentSource.ui&&!this.mobileNavActive&&this.route[2]&&this.route[2].length}}),methods:_objectSpread({},ra.mapActions(["deselectAllFiles","updateMobileNavActive"]),{goBack:function(){this.$store.commit("GO_BACK_WITH_ROUTE_CURRENT_TYPE")},goToSummary:function(){this.canStartUpload&&(this.$store.commit("CHANGE_ROUTE",["summary"]),this.updateMobileNavActive(!1))}})};Ws._withStripped=!0;function Hs(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"fsp-progress-bar"},[t("div",{staticClass:"fsp-progress-bar__container"},[t("div",{ref:"bar",staticClass:"fsp-progress-bar__bar",staticStyle:{width:"0"}})])])}var Vs=oa({render:Ws,staticRenderFns:[]},void 0,Gs,void 0,!1,void 0,!1,void 0,void 0,void 0),Qs=(Ji(function(e){var t,i,u,d,p,f,o;t=window,i=t.HTMLCanvasElement&&t.HTMLCanvasElement.prototype,u=t.Blob&&function(){try{return Boolean(new Blob)}catch(e){return!1}}(),d=u&&t.Uint8Array&&function(){try{return 100===new Blob([new Uint8Array(100)]).size}catch(e){return!1}}(),p=t.BlobBuilder||t.WebKitBlobBuilder||t.MozBlobBuilder||t.MSBlobBuilder,f=/^data:((.*?)(;charset=.*?)?)(;base64)?,/,o=(u||p)&&t.atob&&t.ArrayBuffer&&t.Uint8Array&&function(e){var t,n,r,i,o,a,s,c,l;if(!(t=e.match(f)))throw new Error("invalid data URI");for(n=t[2]?t[1]:"text/plain"+(t[3]||";charset=US-ASCII"),r=!!t[4],i=e.slice(t[0].length),o=(r?atob:decodeURIComponent)(i),a=new ArrayBuffer(o.length),s=new Uint8Array(a),c=0;c<o.length;c+=1)s[c]=o.charCodeAt(c);return u?new Blob([d?s:a],{type:n}):((l=new p).append(a),l.getBlob(n))},t.HTMLCanvasElement&&!i.toBlob&&(i.mozGetAsFile?i.toBlob=function(e,t,n){var r=this;setTimeout(function(){n&&i.toDataURL&&o?e(o(r.toDataURL(t,n))):e(r.mozGetAsFile("blob",t))})}:i.toDataURL&&o&&(i.toBlob=function(e,t,n){var r=this;setTimeout(function(){e(o(r.toDataURL(t,n)))})})),e.exports?e.exports=o:t.dataURLtoBlob=o}),{watch:{progress:function(e){this.$refs.bar.style.width="".concat(e,"%")}},props:["progress"]});Hs._withStripped=!0;function qs(e){var t,n,r,i=new DataView(e),o=e.byteLength,a={},s=2;if(255===i.getUint8(0)&&216===i.getUint8(1))for(;s<o;){if(255!==i.getUint8(s))return;if(t=i.getUint8(s+1),r=(n=s)+2+i.getUint16(s+2),225<=t&&t<=239)void 0===a.startOffset&&(a.startOffset=n),a.endOffset=r;else{if(void 0!==a.startOffset)return a;if(218===t)return}s=r}}function Ys(e){for(var t=new DataView(e),n=t.byteLength,r=2;r<n;){if(t.getUint16(r+2,!1)<=8)return!1;var i=t.getUint16(r,!1);if(r+=2,65505===i){if(r+=2,1165519206!==t.getUint32(r,!1))return!1;var o=18761===t.getUint16(r+=6,!1);r+=t.getUint32(r+4,o);var a=t.getUint16(r,o);r+=2;for(var s=0;s<a;s++)if(274===t.getUint16(r+12*s,o))return{offset:r+12*s+8,endian:o}}else{if(65280!=(65280&i))break;r+=t.getUint16(r,!1)}}return!1}var Ks=oa({render:Hs,staticRenderFns:[]},void 0,Qs,void 0,!1,void 0,!1,void 0,void 0,void 0),Xs=function(e,t){var n=qs(e);if(!(n=n||function(e){for(var t,n,r,i=new DataView(e),o=e.byteLength,a=2;a<o;){if(t=i.getUint8(a+1),n=a+2+i.getUint16(a+2),192===t||194===t||224===t){r={startOffset:n,endOffset:n};break}a=n}return r}(e)))return e;var r=e.slice(0,n.startOffset),i=e.slice(n.endOffset),o=new Uint8Array(r.byteLength+t.byteLength+i.byteLength);return o.set(new Uint8Array(r),0),o.set(new Uint8Array(t),r.byteLength),o.set(new Uint8Array(i),r.byteLength+t.byteLength),o.buffer},Zs=function(e){var t=new DataView(e),n=Ys(e);return!!n&&t.getUint16(n.offset,n.endian)},Js=function(e){for(var t=0<arguments.length&&void 0!==e?e:1,n="ffe100004578696600004d4d002a0000000800010112000300000001000000000000",r=new Uint8Array(n.length/2),i=0;i<n.length;i+=2)r[i/2]=parseInt(n.substring(i,i+2),16);var o=new DataView(r.buffer);return o.setUint16(o.byteLength-6,t),o.setUint16(2,o.byteLength-2),o.buffer},ec=9007199254740991,tc="[object Arguments]",nc="[object Function]",rc="[object GeneratorFunction]",ic=/^(?:0|[1-9]\d*)$/;function oc(t,e){return function(e,t){for(var n=-1,r=e?e.length:0,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i}(e,function(e){return t[e]})}var ac,sc,cc=Object.prototype,lc=cc.hasOwnProperty,uc=cc.toString,dc=cc.propertyIsEnumerable,pc=(ac=Object.keys,sc=Object,function(e){return ac(sc(e))});function fc(e,t){var n,r=vc(e)||function(e){return function(e){return e&&"object"==_typeof2(e)}(e)&&gc(e)}(n=e)&&lc.call(n,"callee")&&(!dc.call(n,"callee")||uc.call(n)==tc)?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],i=r.length,o=!!i;for(var a in e)!t&&!lc.call(e,a)||o&&("length"==a||mc(a,i))||r.push(a);return r}function hc(e){if(n=(t=e)&&t.constructor,r="function"==typeof n&&n.prototype||cc,t!==r)return pc(e);var t,n,r,i=[];for(var o in Object(e))lc.call(e,o)&&"constructor"!=o&&i.push(o);return i}function mc(e,t){return(t=null==t?ec:t)&&("number"==typeof e||ic.test(e))&&-1<e&&e%1==0&&e<t}var vc=Array.isArray;function gc(e){return null!=e&&("number"==typeof(r=e.length)&&-1<r&&r%1==0&&r<=ec)&&!((n=function(e){var t=_typeof2(e);return e&&("object"==t||"function"==t)}(t=e)?uc.call(t):"")==nc||n==rc);var t,n,r}function yc(e){return e.replace(".","").toLowerCase()}function _c(s,e){return void 0===e||e.some(function(e){return-1!==e.indexOf("/")?(n=e,(t=s).mimetype&&"image/*"===n?-1!==t.mimetype.indexOf("image/"):t.mimetype&&"video/*"===n?-1!==t.mimetype.indexOf("video/"):t.mimetype&&"audio/*"===n?-1!==t.mimetype.indexOf("audio/"):t.mimetype&&"application/*"===n?-1!==t.mimetype.indexOf("application/"):t.mimetype&&"text/*"===n?-1!==t.mimetype.indexOf("text/"):t.mimetype===n):(r=e,i=s.name,a=(o=/\.\w+$/.exec(i))&&o.length&&o[0]||"",yc(a)===yc(r));var t,n,r,i,o,a})}function bc(e,t){var n=t.exposeOriginalFile,r={filename:e.name,handle:e.handle,mimetype:e.mimetype||e.type,originalPath:e.originalPath||e.path,size:e.size,source:e.source,url:e.url,uploadId:e.uploadId};return e.originalFile&&(r.originalFile=n?e.originalFile:{name:e.originalFile.name,type:e.originalFile.type,size:e.originalFile.size}),e.status&&(r.status=e.status),e.key&&(r.key=e.key),e.container&&(r.container=e.container),e.cropData&&(r.cropped=JSON.parse(JSON.stringify(e.cropData))),e.rotated&&(r.rotated=JSON.parse(JSON.stringify(e.rotated))),e.workflows&&(r.workflows=JSON.parse(JSON.stringify(e.workflows))),r}function wc(e,t){return e.map(function(e){return bc(e,t)})}function Ac(e){if(0===e)return"0.00B";var t=Math.floor(Math.log(e)/Math.log(1024));return"".concat((e/Math.pow(1024,t)).toFixed(2)," ").concat(" KMGTP".charAt(t),"B")}function Cc(e){if(e.name.length<45)return e.name;var t=e.name.split(".");if(2===t.length){var n="".concat(t[0].substring(0,42),".."),r=t[1];return"".concat(n,".").concat(r)}if(2<t.length){var i="".concat(e.name.substring(0,42),".."),o=t[t.length-1];return"".concat(i,".").concat(o)}return"".concat(e.name.substring(0,42),"...")}function Sc(e,t){function n(e){return r[e]||e}var r=_objectSpread({},kc[0<arguments.length&&void 0!==e?e:"en"],{},1<arguments.length&&void 0!==t?t:{});return{ERROR_FILE_NOT_ACCEPTABLE:n("File {displayName} is not an accepted file type. The accepted file types are {types}"),ERROR_FILE_TOO_BIG:n("File {displayName} is too big. The accepted file size is less than {roundFileSize}"),ERROR_FILES_TOO_BIG:n("Files [{displayName}] are too big. The accepted file size is {maxSize}"),ERROR_MAX_FILES_REACHED:n("Our file upload limit is {maxFiles} {filesText}")}}var Ec=function(e){return e?oc(e,(gc(t=e)?fc:hc)(t)):[];var t},kc={ar:{Upload:"تحميل","Upload more":"تحميل المزيد","Deselect All":"إلغاء تحديد الكل","View/Edit Selected":"شاهد / قم بتحرير ما تم اختياره","Sign Out":"تسجيل الخروج","My Device":"جهازي","Web Search":"البحث في شبكة الويب","Take Photo":"إلتقط صورة","Link (URL)":"رابط عنوان الموقع الالكتروني","Record Video":"تسجيل فيديو","Record Audio":"تسجيل صوت","Custom Source":"مصدر مخصص",Add:"قم بإضافة","more file":"المزيد من الملفات","more files":"ملفات أخرى","Connect {providerName}":"قم بتوصيل {providerName}","Select Files from {providerName}":"حدد الملفات من {providerName}","You need to authenticate with {providerName}.":"تحتاج إلى المصادقة مع {providerName}.","A new page will open to connect your account.":".سيتم فتح صفحة جديدة للإتصال بحسابك","We only extract images and never modify or delete them.":".نقوم فقط بإستخراج الصور ولن نقوم بالتعديل أو الحذف",'To disconnect from {providerName} click "Sign out" button in the menu.':'لقطع الاتصال بـ {providerName} ، انقر فوق الزر "تسجيل الخروج" في القائمة.',"Sign in with Google":"الدخول مع جوجل","Go back":"عد","This folder is empty.":"Dieser Ordner ist leer.",Files:"ملفات",Images:"صور",Uploaded:"تم الرفع / التحميل",Uploading:"يتم الرفع / التحميل",Completed:"تمت العملية",Filter:"قم بتصفية","Cropped Images":"الصور المقصوصة","Edited Images":"الصور المحررة","Selected Files":"الملفات المختارة","Crop is required on images":"مطلوب المحاصيل على الصور",Crop:"قم بإقتصاص",Circle:"قم بإقتصاص الصورة بشكل دائري / قطع دائري",Rotate:"قم بتدوير",Mask:"قم بحجب",Revert:"تراجع",Edit:"قم بتحرير",Reset:"إعد ضبط",Done:"إانتهى",Save:"حفظ",Next:"التالى","Edit Image":"قم بتحرير الصورة","This image cannot be edited":"لا يمكن تحرير هذه الصورة","Connection Lost":"تم قطع الإتصال","Failed While Uploading":"حصل خطأ أثناء التحميل","Retrying in":"سيتم إعادة المحاولة بعد","Try again":"حاول مرة أخرى","Try now":"أعد المحاولة","Drag and Drop, Copy and Paste Files":"سحب وإسقاط الملفات ، نسخ ولصق الملفات","or Drag and Drop, Copy and Paste Files":"أو إسحب و أترك، إنسخ و ألصق الملفات","Select Files to Upload":"اختر الملفات للتحميل","Select From":"إختر من","Drop your files anywhere":"إسقاط الملفات الخاصة بك في أي مكان","Enter a URL":"URL أدخل","Search images":"إبحث عن الصور","Webcam Disabled":"كاميرا الويب معطلة","Webcam Not Supported":"كاميرا الويب غير مدعمة","Please enable your webcam to take a photo.":"الرجاء تفيل كاميرا الويب لأخذ صورة","Your current browser does not support webcam functionality.":"متصفح الويب المستخدم حاليا لا يدعم خاصية كاميرا الويب","We suggest using Chrome or Firefox.":"Firefox أو Chrome نقترح استخدام متصفح","File {displayName} is not an accepted file type. The accepted file types are {types}":"{types} ليس من أنواع الملفات المقبولة ، أنواع الملفات المقبولة هي {displayName} ملف","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"{roundFileSize} أكبر من الحد المسموح ، الحد المسموح أقل من{displayName} الملف","Our file upload limit is {maxFiles} {filesText}":"{maxFiles} {filesText} الحد الأعلى المسموح به لتحميل الملفات هو",'No search results found for "{search}"':'لم يتم العثور على نتائج بحث لـ "{search}"',"An error occurred. Please try again.":"حدث خطأ. حاول مرة اخرى.","Files [{displayName}] are too big. The accepted file size is {maxSize}":"الملفات [{displayName}] كبيرة جدًا. حجم الملف المقبول هو {maxSize}","Click here or hit ESC to close picker":"انقر هنا أو اضغط على ESC للإغلاق"},ca:{Upload:"Carrega","Upload more":"Carregar mais","Deselect All":"Desfés tota la selecció","View/Edit Selected":"Visualitza/Edita les seleccionades","Sign Out":"Surt","My Device":"El meu dispositiu","Web Search":"Cerca al web","Take Photo":"Fes una foto","Link (URL)":"URL","Record Video":"Grava vídeo","Record Audio":"Grava l'àudio","Custom Source":"Origen personalitzada",Add:"Afegeix","more file":"més arxiu","more files":"més arxius","Connect {providerName}":"Connecteu {providerName}","Select Files from {providerName}":"Seleccioneu Fitxers de {providerName}","You need to authenticate with {providerName}.":"Heu d’autenticar-vos amb {providerName}.","A new page will open to connect your account.":"S'obrirà una nova pàgina per a connectar-te al teu compte","We only extract images and never modify or delete them.":"Tan sols agafem les imatges, però mai les modifiquem o eliminem.",'To disconnect from {providerName} click "Sign out" button in the menu.':'Per desconnectar-vos de {providerName}, feu clic al botó "Surt" al menú.',"Sign in with Google":"Inicieu la sessió amb Google","Go back":"Torna","This folder is empty.":"Dieser Ordner ist leer.",Files:"Arxius",Images:"Imatges",Uploaded:"Carregada",Uploading:"Carregant",Completed:"Finalitzat",Filter:"Filtra","Cropped Images":"Imatges escapçades","Edited Images":"Imatges editades","Selected Files":"Arxius seleccionats","Crop is required on images":"Es requereix un cultiu a les imatges",Crop:"Escapça",Circle:"Cercle",Rotate:"Gira",Mask:"Emmascara",Revert:"Reverteix",Edit:"Edita",Reset:"Reinicia",Done:"Fet",Save:"Guardar",Next:"Pròxim","Edit Image":"Edita la imatge","This image cannot be edited":"Aquesta imatge no es pot editar","Connection Lost":"S'ha perdut la connexió","Failed While Uploading":"Error de càrrega","Retrying in":"Reintentant en","Try again":"Torna-ho a intentar","Try now":"Prova-ho ara","Drag and Drop, Copy and Paste Files":"Arrossegueu i deixeu anar els fitxers, copieu i enganxeu fitxers","or Drag and Drop, Copy and Paste Files":"o arrosega, copia i enganxa els arxius","Select Files to Upload":"Selecciona els arxius a carregar","Select From":"Selecciona de","Drop your files anywhere":"Deixeu anar els fitxers en qualsevol lloc","Enter a URL":"Introduïu un URL","Search images":"Cerca imatges","Webcam Disabled":"Webcam inhabilitada","Webcam Not Supported":"Webcam no admesa","Please enable your webcam to take a photo.":"Sisplau, habilita la webcam per a fer la foto","Your current browser does not support webcam functionality.":"El teu navegador no admet la funcionalitat de webcam","We suggest using Chrome or Firefox.":"Recomanem utilitzar Chrome o Firefox.","File {displayName} is not an accepted file type. The accepted file types are {types}":"L'arxiu {displayName} no té un format vàlid. Els formats acceptats són {types}","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"L'arxiu {displayName} és massa gran. El tamany màxim acceptat és {roundFileSize}","Our file upload limit is {maxFiles} {filesText}":"El límit de càrrega és {maxFiles} {filesText}",'No search results found for "{search}"':'No s’han trobat resultats per a "{search}"',"An error occurred. Please try again.":"Hi ha hagut un error. Siusplau torna-ho a provar.","Files [{displayName}] are too big. The accepted file size is {maxSize}":"Els fitxers [{displayName}] són massa grans. La mida del fitxer acceptada és {maxSize}","Click here or hit ESC to close picker":"Feu clic aquí o premeu ESC per tancar"},da:{Upload:"Upload","Upload more":"Upload flere","Deselect All":"Fravælg alle","View/Edit Selected":"Vis/rediger valgte","Sign Out":"Log ud","My Device":"Min enhed","Web Search":"Søgning på internettet","Take Photo":"Tag billede","Link (URL)":"Link (URL)","Record Video":"Optag video","Record Audio":"Optag lyd","Custom Source":"Brugerdefineret Kilde",Add:"Tilføj","more file":"fil mere","more files":"flere filer","Connect {providerName}":"Tilslut {providerName}","Select Files from {providerName}":"Vælg filer fra {providerName}","You need to authenticate with {providerName}.":"Du skal godkende med {providerName}.","A new page will open to connect your account.":"En ny side vil åbne for at forbinde med din konto","We only extract images and never modify or delete them.":"Vi hiver kun billeder og modificerer eller sletter dem aldrig",'To disconnect from {providerName} click "Sign out" button in the menu.':'For at afbryde forbindelsen fra {providerName} skal du klikke på knappen "Log ud" i menuen.',"Sign in with Google":"Log ind med Google","Go back":"Gå tilbage","This folder is empty.":"Dieser Ordner ist leer.",Files:"Filer",Images:"Billeder",Uploaded:"Uploaded",Uploading:"Uploader",Completed:"Fuldført",Filter:"Filtrer","Cropped Images":"Beskærede billeder","Edited Images":"Redigerede filer","Selected Files":"Valgte filer","Crop is required on images":"Beskæring er påkrævet",Crop:"Klippe",Circle:"Cirkel",Rotate:"Rotere",Mask:"Form",Revert:"Gør om",Edit:"Rediger",Reset:"Nulstil",Done:"Færdig",Save:"Gemme",Next:"Næste","Edit Image":"Rediger billede","This image cannot be edited":"","Connection Lost":"Forbindelse tabt","Failed While Uploading":"Mislykkedes under upload","Retrying in":"Prøver igen om","Try again":"Prøv igen","Try now":"Prøv nu","Drag and Drop, Copy and Paste Files":"Træk og slip filer, kopier og indsæt filer","or Drag and Drop, Copy and Paste Files":"Eller træk og slip, kopier og indsæt filer","Select Files to Upload":"Vælg filer til upload","Select From":"Vælg fra","Drop your files anywhere":"Drop dine filer overalt","Enter a URL":"Skriv en webadresse","Search images":"Søg billeder","Webcam Disabled":"Webkamera deaktiveret","Webcam Not Supported":"Webkamera understøttes ikke","Please enable your webcam to take a photo.":"Aktivér dit webcam for at tage et billede","Your current browser does not support webcam functionality.":"Din nuværende browser understøtter ikke webcam","We suggest using Chrome or Firefox.":"Vi foreslår at bruge Chrome eller Firefox","File {displayName} is not an accepted file type. The accepted file types are {types}":"Filen {displayName} er ikke i et acceptabelt format. De accepterede formater er {types}","File {displayName} is too big. The accepted file size is less than {roundFileSize}":" Filen {displayName} er for stor. Den accepterede filstørrelse er {roundFileSize}","Our file upload limit is {maxFiles} {filesText}":" Vores filstørrelse er begrænset til {maxFiles} {filesText}",'No search results found for "{search}"':'Ingen søgeresultater fundet for "{search}"',"An error occurred. Please try again.":"En fejl opstod. Prøv igen.","Files [{displayName}] are too big. The accepted file size is {maxSize}":"Filer [{displayName}] er for store. Den accepterede filstørrelse er {maxSize}","Click here or hit ESC to close picker":"Klik her eller tryk ESC for at lukke"},de:{Upload:"Hochladen","Upload more":"Mehr hochladen","Deselect All":"Deaktivieren Sie alle","View/Edit Selected":"Anzeigen/Bearbeiten ausgewählt","Sign Out":"Abmelden","My Device":"Mein Gerät","Web Search":"Internetsuche","Take Photo":"Foto machen","Link (URL)":"URL-Adresse","Record Video":"Ein Video aufnehmen","Record Audio":"Ton aufnehmen","Custom Source":"Benutzerdefinierte Quelle",Add:"Hinzufügen","more file":"weitere Datei","more files":"weitere Dateien","Connect {providerName}":"Verbinden mit {providerName}","Select Files from {providerName}":"Wählen Sie Dateien aus {providerName}","You need to authenticate with {providerName}.":"Sie müssen sich mit {providerName} anmelden","A new page will open to connect your account.":"Eine neue Seite wird geöffnet, um Ihr Konto zu verbinden","We only extract images and never modify or delete them.":"Wir extrahieren Bilder nur und modifizieren oder löschen sie niemals",'To disconnect from {providerName} click "Sign out" button in the menu.':'Um die Verbindung zu {providerName} zu trennen, klicken Sie im Menü auf "Abmelden".',"Sign in with Google":"Anmeldung mit Google","Go back":"Zurück","This folder is empty.":"Dieser Ordner ist leer.",Files:"Dateien",Images:"Bilder",Uploaded:"Hochgeladen",Uploading:"Wird hochgeladen",Completed:"Abgeschlossen",Filter:"Filtern","Cropped Images":"Freigestellte Bilder","Edited Images":"Bearbeitete Bilder","Selected Files":"Ausgewählten Dateien","Crop is required on images":"Zuschneiden ist für Bilder erforderlich",Crop:"Zuschneiden",Circle:"Kreis",Rotate:"Rotieren",Mask:"Verdecken",Revert:"Rückgängig",Edit:"Bearbeiten",Reset:"Zurück",Done:"Fertig",Save:"Speichern",Next:"Nächster","Edit Image":"Bild bearbeiten","This image cannot be edited":"Dieses Bild kann nicht bearbeitet werden","Connection Lost":"Keine Verbindung","Failed While Uploading":"Beim Hochladen fehlgeschlagen","Retrying in":"Wiederholen in","Try again":"Versuch es noch einmal","Try now":"Versuche es jetzt","Drag and Drop, Copy and Paste Files":"Dateien ziehen und ablegen, Dateien kopieren und einfügen","or Drag and Drop, Copy and Paste Files":"oder per Drag&Drop einfügen","Select Files to Upload":"Datei auswählen","Select From":"Wählen Sie aus","Drop your files anywhere":"Legen Sie Ihre Dateien überall ab","Enter a URL":"Geben Sie eine URL ein","Search images":"Suche bilder","Webcam Disabled":"Webcam ausgeschaltet","Webcam Not Supported":"Webcam nicht unterstützt","Please enable your webcam to take a photo.":"Bitte aktivieren Sie Ihre Webcam, um ein Foto zu machen","Your current browser does not support webcam functionality.":"Ihr aktueller Browser unterstützt keine Webcam-Funktionen.","We suggest using Chrome or Firefox.":"Wir empfehlen, mit Chrome oder Firefox.","File {displayName} is not an accepted file type. The accepted file types are {types}":"Datei-{displayName} ist keine anerkannte Dateityp. Die akzeptierten Dateitypen sind {types}","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"{displayName} Datei ist zu groß. Die akzeptierten Dateigröße beträgt {roundFileSize}","Our file upload limit is {maxFiles} {filesText}":"Unser Dateigrößenlimit ist {maxFiles} {filesText}",'No search results found for "{search}"':'Keine Suchergebnisse für "{search}" gefunden',"An error occurred. Please try again.":"Ein Fehler ist aufgetreten. Bitte versuche es erneut.","Files [{displayName}] are too big. The accepted file size is {maxSize}":"Dateien [{displayName}] sind zu groß. Die akzeptierte Dateigröße ist {maxSize}","Click here or hit ESC to close picker":"Klicken Sie hier um zurückzukehren oder drücken Sie Esc"},en:{"File {displayName} is not an accepted file type. The accepted file types are {types}":"File {displayName} is not an accepted file type. The accepted file types are {types}","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"File {displayName} is too big. The accepted file size is less than {roundFileSize}","Our file upload limit is {maxFiles} {filesText}":"Our file upload limit is {maxFiles} {filesText}",'No search results found for "{search}"':'No search results found for "{search}"',"An error occurred. Please try again.":"An error occurred. Please try again."},es:{Upload:"Subir","Upload more":"Subir más","Deselect All":"Deseleccionar Todo","View/Edit Selected":"Ver/Editar Seleccionado","Sign Out":"Desconectar","My Device":"Mi Dispositivo","Web Search":"Búsqueda de Internet","Take Photo":"Tomar la foto","Link (URL)":"Dirección URL","Record Video":"Grabar video","Record Audio":"Grabar audio","Custom Source":"Fuente personalizada",Add:"Añadir","more file":"el archivo más","more files":"el archivo más","Connect {providerName}":"Conectar {providerName}","Select Files from {providerName}":"Seleccione Archivos de {providerName}","You need to authenticate with {providerName}.":"Necesitas autenticarte con {providerName}.","A new page will open to connect your account.":"Se abrirá una nueva página para conectar tu cuenta.","We only extract images and never modify or delete them.":"Sólo extraemos imágenes y nunca las modificamos o eliminamos",'To disconnect from {providerName} click "Sign out" button in the menu.':'Desconectarse de Instagram, haga clic en el botón "Desconectar" en el menú.',"Sign in with Google":"Inicia sesión con Google","Go back":"Volver","This folder is empty.":"Dieser Ordner ist leer.",Files:"Archivos",Images:"Imágenes",Uploaded:"Subido",Uploading:"Subiendo",Completed:"Completado",Filter:"Filtrar","Cropped Images":"Imágenes recortadas","Edited Images":"Imágenes editadas","Selected Files":"Archivos seleccionados","Crop is required on images":"Se requiere cultivo en las imágenes",Crop:"Recortar",Circle:"Circulo",Rotate:"Rotar",Mask:"Encubrir",Revert:"Deshacer",Edit:"Editar",Reset:"Restablecer",Done:"Terminado",Save:"Guardar",Next:"Siguiente","Edit Image":"Editar imagen","This image cannot be edited":"Esta imagen no puede ser editada","Connection Lost":"Se ha perdido la conexión","Failed While Uploading":"Error durante la subida","Retrying in":"Volver a intentar en","Try again":"Inténtalo de nuevo","Try now":"Probar ahora","Drag and Drop, Copy and Paste Files":"Arrastrar y soltar archivos, copiar y pegar archivos","or Drag and Drop, Copy and Paste Files":"O arrastra y suéltalos, o copia y pégalos","Select Files to Upload":"Selecciona los archivos a subir","Select From":"Seleccione de","Drop your files anywhere":"Deja tus archivos en cualquier lugar","Enter a URL":"Ingresa una URL","Search images":"Búsqueda de imágenes","Webcam Disabled":"Webcam deshabilitada","Webcam Not Supported":"Webcam no soportada","Please enable your webcam to take a photo.":"Por favor, habilite su webcam para tomar una foto","Your current browser does not support webcam functionality.":"Su navegador actual no admite la funcionalidad de webcam","We suggest using Chrome or Firefox.":"Sugerimos usar Chrome o Firefox","File {displayName} is not an accepted file type. The accepted file types are {types}":"Archivo {displayName} no es un tipo de archivo aceptado. Los tipos de archivo aceptados son {types}","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"{displayName} De archivo es demasiado grande. El tamaño aceptado es {roundFileSize}","Our file upload limit is {maxFiles} {filesText}":"Nuestro límite de upload de archivo es {maxFiles} {filesText}",'No search results found for "{search}"':'No se han encontrado resultados de búsqueda para "{search}"',"An error occurred. Please try again.":"Ocurrió un error. Inténtalo de nuevo.","Files [{displayName}] are too big. The accepted file size is {maxSize}":"Los archivos [{displayName}] son demasiado grandes. El tamaño de archivo aceptado es {maxSize}","Click here or hit ESC to close picker":"Presiona aquí o la tecla ESC para cerrar"},fr:{Upload:"Ajouter","Upload more":"Ajouter plus","Deselect All":"Tout déselectionner","View/Edit Selected":"AVoir/Modifier la sélection","Sign Out":"Se déconnecter","My Device":"Mon appareil","Web Search":"Recherche Internet","Take Photo":"Prendre une Photo","Link (URL)":"Adresse URL","Record Video":"Enregistrer une vidéo","Record Audio":"Enregistrement audio","Custom Source":"Source personnalisée",Add:"Ajouter","more file":"plus de fichier","more files":"plus de fichiers","Connect {providerName}":"Se connecter avec {providerName}","Select Files from {providerName}":"Sélectionner des fichiers dans {providerName}","You need to authenticate with {providerName}.":"Vous devez vous authentifier avec {providerName}.","A new page will open to connect your account.":"Une nouvelle page s'ouvrira pour connecter votre compte.","We only extract images and never modify or delete them.":"Nous utilisons les images sans les modifier, ni les supprimer",'To disconnect from {providerName} click "Sign out" button in the menu.':'Pour vous déconnecter {providerName}, cliquez sur le bouton "Se déconnecter" du menu.',"Sign in with Google":"Connectez-vous avec Google","Go back":"Retourner","This folder is empty.":"Dieser Ordner ist leer.",Files:"Fichiers",Images:"Images",Uploaded:"Ajouté",Uploading:"Ajouté",Completed:"Terminé",Filter:"Filtrer","Cropped Images":"Images Rognées","Edited Images":"Images Éditées","Selected Files":"Fichiers sélectionnés","Crop is required on images":"La culture est requise sur les images",Crop:"Rogner",Circle:"Rond",Rotate:"Pivoter",Mask:"Cache",Revert:"Annuler",Edit:"Modifier",Reset:"Annuler",Done:"Fini",Save:"Appliquer",Next:"Prochain","Edit Image":"Image Éditer","This image cannot be edited":"Cette image ne peut pas être modifiée","Connection Lost":"Connexion perdue","Failed While Uploading":"Échec du chargement","Retrying in":"Réessayer dans","Try again":"Réessayer","Try now":"Essayez maintenant","Drag and Drop, Copy and Paste Files":"Glisser et déposer des fichiers, copier et coller des fichiers","or Drag and Drop, Copy and Paste Files":"ou faites glisser, copier et coller des fichiers","Select Files to Upload":"Sélectionnez des fichiers à ajouter","Select From":"Sélectionnez depuis","Drop your files anywhere":"Déposez vos fichiers n'importe où","Enter a URL":"Entrez une URL","Search images":"Rechercher des images","Webcam Disabled":"Webcam désactivé","Webcam Not Supported":"Webcam non prise en charge","Please enable your webcam to take a photo.":"S'il vous plaît activer votre webcam pour prendre une photo","Your current browser does not support webcam functionality.":"Votre navigateur actuel ne prend pas en charge la fonctionnalité webcam","We suggest using Chrome or Firefox.":"Nous vous suggérons d'utiliser Chrome ou Firefox.","File {displayName} is not an accepted file type. The accepted file types are {types}":"{displayName} De fichier n’est pas un type de fichier accepté. Les types de fichiers acceptés sont {types}","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"Le fichier {displayName} est trop grand. La taille de fichier acceptée est {roundFileSize}","Our file upload limit is {maxFiles} {filesText}":"Notre limite de téléchargement de fichier est {maxFiles} {filesText}",'No search results found for "{search}"':'Aucun résultat de recherche trouvé pour "{search}"',"An error occurred. Please try again.":"Une erreur est survenue. Veuillez réessayer.","Files [{displayName}] are too big. The accepted file size is {maxSize}":"Les fichiers [{displayName}] sont trop gros. La taille du fichier accepté est {maxSize}","Click here or hit ESC to close picker":"Cliquez ici ou appuyez sur ESC pour fermer"},he:{Upload:"העלה","Upload more":"העלה עוד","Deselect All":"בטל בחירה","View/Edit Selected":"צפה/ערוך בחירה","Sign Out":"התנתק","My Device":"המכשיר שלי","Web Search":"חיפוש תמונות","Take Photo":"לצלם","Link (URL)":"כתובת אתר","Record Video":"להקליט סרטון","Record Audio":"הקלט שמע","Custom Source":"מקור מותאם אישית",Add:"הוסף","more file":"עוד קובץ","more files":"עוד קבצים","Connect {providerName}":"חבר {providerName}","Select Files from {providerName}":"בחר קבצים מ- {providerName}","You need to authenticate with {providerName}.":"אתה צריך לאמת עם {providerName}.","A new page will open to connect your account.":"עמוד חדש יפתח על מנת לחבר את חשבונך","We only extract images and never modify or delete them.":"לעולם לא נשנה או נמחק את התמונות",'To disconnect from {providerName} click "Sign out" button in the menu.':'כדי להתנתק מ {providerName} לחץ על הלחצן "התנתק" בתפריט.',"Sign in with Google":"היכנס באמצעות Google","Go back":"תחזור","This folder is empty.":"Dieser Ordner ist leer.",Files:"קבצים",Images:"תמונות",Uploaded:"הועלו",Uploading:"מעלה",Completed:"הושלם",Filter:"סנן","Cropped Images":"תמונות חתוכות","Edited Images":"תמונות ערוכות","Selected Files":"קבצים שנבחרו","Crop is required on images":"חיתוך נדרש בתמונות",Crop:"לִגזוֹם",Circle:"חוּג",Rotate:"לְהִסְתוֹבֵב",Mask:"לְכַסוֹת בְּמַסֵכָה",Revert:"בטל שינויים",Edit:"ערוך",Reset:"לְאַתחֵל",Done:"בוצע",Save:"להציל",Next:"הַבָּא","Edit Image":"ערוך תמונה","This image cannot be edited":"לא ניתן לערוך תמונה זו","Connection Lost":"חיבור נעלם","Failed While Uploading":"נכשל בעת העלאה","Retrying in":"מנסה שוב בעוד","Try again":"נסה שוב","Try now":"נסה עכשיו","Drag and Drop, Copy and Paste Files":"גרור ושחרר קבצים, העתק והדבק קבצים","or Drag and Drop, Copy and Paste Files":"או גרור / העתק והדבק את הקבצים","Select Files to Upload":"בחר קבצים להעלות","Select From":"בחר מ-","Drop your files anywhere":"זרוק את הקבצים שלך בכל מקום","Enter a URL":"הזן כתובת אתר","Search images":"חיפוש תמונות","Webcam Disabled":"מצלמה מכובת","Webcam Not Supported":"מצלמה לא נתמכת","Please enable your webcam to take a photo.":"נא הדלק את המצלמה על מנת לצלם","Your current browser does not support webcam functionality.":"הדפדפן בו אתה משתמש אינו תומך בשימוש במצלמה","We suggest using Chrome or Firefox.":"אנו ממליצים על דפדפן פיירפוקס או כרום","File {displayName} is not an accepted file type. The accepted file types are {types}":"{types} הוא לא מסוג שנוכל לקבל.סוגי הקבצים המותר הם {displayName} הקובץ","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"{roundFileSize} גדול מדי. הגודל המותר הו א {displayName} הקובץ","Our file upload limit is {maxFiles} {filesText}":"{filesText} {maxFiles} מגבלת גודל הקובץ היא",'No search results found for "{search}"':'לא נמצאו תוצאות חיפוש עבור "{search}"',"An error occurred. Please try again.":"התרחשה שגיאה. בבקשה נסה שוב.","Files [{displayName}] are too big. The accepted file size is {maxSize}":"הקבצים [{displayName}] גדולים מדי. גודל הקובץ המקובל הוא {maxSize}","Click here or hit ESC to close picker":"לחץ כאן או לחץ על ESC כדי לסגור"},it:{Upload:"Caricare","Upload more":"Carica di più","Deselect All":"Deselezionare tutto","View/Edit Selected":"Visualizza/Modifica selezionato","Sign Out":"Esci","My Device":"Il mio dispositivo","Web Search":"Ricerca sul Web","Take Photo":"Fare una foto","Link (URL)":"Indirizzo URL","Record Video":"Registra video","Record Audio":"Registra audio","Custom Source":"Fonte personalizzata",Add:"Aggiungere","more file":"più file","more files":"più file","Connect {providerName}":"Connetti {providerName}","Select Files from {providerName}":"Seleziona File da {providerName}","You need to authenticate with {providerName}.":"Devi autenticarti con {providerName}.","A new page will open to connect your account.":"Si aprirà una nuova pagina per collegare il tuo account","We only extract images and never modify or delete them.":"Abbiamo estratto solo immagini e non modificarli o cancellarli.",'To disconnect from {providerName} click "Sign out" button in the menu.':'Per disconnettersi da {providerName} fai clic sul pulsante "Esci" nel menu.',"Sign in with Google":"Accedi con Google","Go back":"Torna indietro","This folder is empty.":"Questa cartella è vuota.",Files:"File",Images:"Immagini",Uploaded:"Caricato",Uploading:"Caricamento",Completed:"Completato",Filter:"Filtrare","Cropped Images":"Immagini Ritagliate","Edited Images":"Immagini Modificate","Selected Files":"File selezionati","Crop is required on images":"Il ritaglio è richiesto sulle immagini",Crop:"Ritaglia",Circle:"Circolo",Rotate:"Ruotare",Mask:"Mascherare",Revert:"Annulla",Edit:"Modifica",Reset:"Reset",Done:"Finito",Save:"Salvare",Next:"Il prossimo","Edit Image":"Modifica Immagine","This image cannot be edited":"Questa immagine non può essere modificata","Connection Lost":"Connessione Persa","Failed While Uploading":"Errore Durante il Caricamento","Retrying in":"Riprovare tra","Try again":"Riprova","Try now":"Prova ora","Drag and Drop, Copy and Paste Files":"Trascina e rilascia i file, copia e incolla i file","or Drag and Drop, Copy and Paste Files":"o trascinare, copiare e incollare file","Select Files to Upload":"Selezionare i file da caricare","Select From":"Selezionare da","Drop your files anywhere":"Rilascia i tuoi file ovunque","Enter a URL":"Inserisci un URL","Search images":"Ricerca immagini","Webcam Disabled":"Webcam spenta","Webcam Not Supported":"Webcam non supportato","Please enable your webcam to take a photo.":"Si prega di attivare la webcam per scattare una foto.","Your current browser does not support webcam functionality.":"Il browser corrente non supporta la funzionalità webcam.","We suggest using Chrome or Firefox.":"Suggeriamo usando Chrome o Firefox.","File {displayName} is not an accepted file type. The accepted file types are {types}":"{displayName} File non è un tipo di file accettato. I tipi di file accettati sono {types}","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"{displayName} Il file è molto grande. La dimensione massima accettata per i file è {roundFileSize}","Our file upload limit is {maxFiles} {filesText}":"È il nostro limite di upload di file {maxFiles} {filesText}",'No search results found for "{search}"':'Nessun risultato di ricerca trovato per "{search}"',"An error occurred. Please try again.":"Si è verificato un errore. Per favore riprova.","Files [{displayName}] are too big. The accepted file size is {maxSize}":"I file [{displayName}] sono troppo grandi. La dimensione del file accettata è {maxSize}","Click here or hit ESC to close picker":"Clicca qui o premi ESC per chiudere"},ja:{Upload:"アップロード","Upload more":"もっとアップロードする","Deselect All":"選択を全て解除","View/Edit Selected":"選択したファイルを閲覧/編集","Sign Out":"サインアウト","My Device":"マイデバイス","Web Search":"ウェブ検索","Take Photo":"写真を撮る","Link (URL)":"URLアドレス","Record Video":"録画映像","Record Audio":"レコードオーディオ","Custom Source":"カスタムソース",Add:"追加","more file":"追加ファイル","more files":"追加ファイル","Connect {providerName}":"{providerName}に接続","Select Files from {providerName}":"{providerName}からファイルを選択","You need to authenticate with {providerName}.":"{providerName}を認証してください","A new page will open to connect your account.":"マイページに移動します","We only extract images and never modify or delete them.":"画像の抽出だけを行い、修正や削除をすることはありません",'To disconnect from {providerName} click "Sign out" button in the menu.':"{providerName}を切断するには[サインアウト]ボタンをクリックしてください","Sign in with Google":"Googleでサインイン","Go back":"戻る","This folder is empty.":"このフォルダーは空です。",Files:"ファイル",Images:"画像",Uploaded:"アップロード完了",Uploading:"アップロード中",Completed:"完了",Filter:"フィルター","Failed While Uploading":"アップロード中に失敗しました","Cropped Images":"切り抜かれた画像","Edited Images":"編集された画像","Selected Files":"選択済のファイル","Crop is required on images":"画像に作物が必要です","This image cannot be edited":"この画像は編集できません",Crop:"剪る",Circle:"円型",Rotate:"廻る",Mask:"覆う",Revert:"元に戻す",Edit:"編集",Reset:"セットをしなおす",Done:"終えた",Save:"適用する",Next:"次","Edit Image":"画像編集","Connection Lost":"接続が切断されました","Retrying in":"以下で再試行：","Try again":"再試行する","Try now":"今すぐやってみて下さい","Drag and Drop, Copy and Paste Files":"ファイルのドラッグアンドドロップ、ファイルのコピーと貼り付け","or Drag and Drop, Copy and Paste Files":"または、ファイルをドラッグ・アンド・ドロップ、コピー・アンド・ペーストする","Select Files to Upload":"アップロードするファイルを選択","Select From":"から選択","Drop your files anywhere":"どこにでもファイルをドロップする","Enter a URL":"URLを入力","Search images":"画像を検索","Webcam Disabled":"ウェブカメラはオフ","Webcam Not Supported":"ウェブカメラはサポートされません","Please enable your webcam to take a photo.":"写真を撮るためにウェブカメラを有効にしてください。","Your current browser does not support webcam functionality.":"現在のブラウザはウェブカメラ機能をサポートしていません。","We suggest using Chrome or Firefox.":"私達は firefox を使用することを提案する。","File {displayName} is not an accepted file type. The accepted file types are {types}":"ファイル名{displayName}は、送受信可能なファイル形式ではありません。受け入れ可能なファイル形式は{types}です","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"ファイル名{displayName}の容量が大きすぎます。送受信可能なファイルのサイズは{roundFileSize}です","Our file upload limit is {maxFiles} {filesText}":"一度にアップロードできるファイルの上限は {maxFiles} {filesText}",'No search results found for "{search}"':'"{search}"に該当するものはありません',"An error occurred. Please try again.":"エラーが発生しました。 もう一度やり直してください。","Files [{displayName}] are too big. The accepted file size is {maxSize}":"ファイル[{displayName}]は大きすぎます。 受け入れられるファイルサイズは{maxSize}です","Click here or hit ESC to close picker":"ここをクリックするかESCを押すと閉じます"},ko:{Upload:"업로드하기","Upload more":"더 업로드","Deselect All":"모두 취소하기","View/Edit Selected":"선택한 파일들 보기/수정하기","Sign Out":"로그아웃","My Device":"내 기기","Web Search":"웹 검색","Take Photo":"사진을 찍어","Link (URL)":"링크","Record Video":"비디오 녹화","Record Audio":"오디오 녹음",Facebook:"페이스북",Instagram:"인스타그램",Dropbox:"드랍박스","Google Photos":"구글 포토","Google Drive":"구글 드라이브","Custom Source":"맞춤 소스",Add:"추가","more file":"다른 파일","more files":"다른 파일들","Connect {providerName}":"{providerName} 연결","Select Files from {providerName}":"{providerName}에서 파일 선택","You need to authenticate with {providerName}.":"{providerName}로 인증해야합니다.","A new page will open to connect your account.":"계정에 연결하기 위해 새로운 창이 열립니다","We only extract images and never modify or delete them.":"이미지를 수정 또는 삭제하지 않고 불러들입니다",'To disconnect from {providerName} click "Sign out" button in the menu.':'{providerName}에서 연결을 끊으려면 메뉴에서 "로그 아웃"버튼을 클릭하십시오.',"Sign in with Google":"Google로 로그인","Go back":"돌아 가기","This folder is empty.":"이 폴더는 비어 있습니다.",Files:"파일들",Images:"이미지",Uploaded:"업로드되었습니다",Uploading:"업로드 중",Completed:"완료 됨",Filter:"필터","Cropped Images":"자른 이미지","Edited Images":"수정된 파일","Selected Files":"선택된 파일","Crop is required on images":"이미지에 자르기가 필요합니다.",Crop:"수확고",Circle:"원",Rotate:"회전하다",Mask:"감추다",Revert:"복원",Edit:"수정",Reset:"다시 놓기",Done:"끝난",Save:"구하다",Next:"다음 것","Edit Image":"이미지 편집","This image cannot be edited":"이 이미지는 편집 할 수 없습니다.","Connection Lost":"연결이 끊어짐","Failed While Uploading":"업로드하는 동안 실패했습니다","Retrying in":"에서 다시 시도","Try again":"다시 시도해보십시오","Try now":"지금 시도","Drag and Drop, Copy and Paste Files":"파일 드래그 앤 드롭, 파일 복사 및 붙여 넣기","or Drag and Drop, Copy and Paste Files":"또는 파일을 이곳에 끌어다 놓거나, 복사 붙여넣기를 할 수 있습니다","Select Files to Upload":"클릭해서 업로드할 파일을 선택해주세요","Select From":"선택부터","Drop your files anywhere":"어디서나 파일 놓기","Enter a URL":"URL 입력","Search images":"이미지 검색하기","Webcam Disabled":"웹캠 기능이 비활성화되었습니다","Webcam Not Supported":"웹캠이 지원되지 않는 기기입니다","Please enable your webcam to take a photo.":"사진을 찍으려면 웹캠 기능을 활성화해주세요","Your current browser does not support webcam functionality.":"현재 브라우저는 웹캠 기능을 지원하지 않습니다","We suggest using Chrome or Firefox.":"크롬 또는 파이어폭스를 이용해주세요","File {displayName} is not an accepted file type. The accepted file types are {types}":"{displayName}: 업로드 가능한 파일 형식({types})이 아니라 업로드할 수 없습니다","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"{displayName}: 업로드 가능한 파일 사이즈({roundFileSize})보다 커서 업로드할 수 없습니다","Our file upload limit is {maxFiles} {filesText}":"최대 {maxFiles}개 파일을 업로드할 수 있습니다 ({filesText})",'No search results found for "{search}"':'"{search}"에 대한 검색 결과가 없습니다.',"An error occurred. Please try again.":"오류가 발생했습니다. 다시 시도하십시오.","Files [{displayName}] are too big. The accepted file size is {maxSize}":"[{displayName}] 파일이 너무 큽니다. 허용되는 파일 크기는 {maxSize}입니다.","Click here or hit ESC to close picker":"여기를 클릭하거나 Esc 키를 눌러 닫습니다."},nl:{Upload:"Uploaden","Upload more":"Upload meer","Deselect All":"Deselecteer alles","View/Edit Selected":"Selectie bekijken/aanpassen","Sign Out":"Afmelden","My Device":"Mijn apparaat","Web Search":"Zoeken op het web","Take Photo":"Foto nemen","Link (URL)":"Link (URL)","Record Video":"Video opnemen","Record Audio":"Geluid opnemen","Custom Source":"Aangepaste bron",Add:"Toevoegen","more file":"meer bestand","more files":"meer bestanden","Connect {providerName}":"Verbind {providerName}","Select Files from {providerName}":"Selecteer bestanden op {providerName}","You need to authenticate with {providerName}.":"U moet verifiëren met {providerName}.","A new page will open to connect your account.":"Een nieuwe pagina wordt geopend om verbinding te maken met uw account","We only extract images and never modify or delete them.":"We halen alleen uw afbeeldingen op en zullen deze nooit aanpassen of verwijderen",'To disconnect from {providerName} click "Sign out" button in the menu.':'Om de verbinding met {providerName} te verbreken, klik je op "Afmelden" in het menu.',"Sign in with Google":"Log in met Google","Go back":"Ga terug","This folder is empty.":"Deze map is leeg.",Files:"Bestanden",Images:"Afbeeldingen",Uploaded:"Geüpload",Uploading:"Aan het uploaden",Completed:"Voltooid",Filter:"Zoeken","Cropped Images":"Bijgesneden afbeeldingen","Edited Images":"Bewerkte afbeeldingen","Selected Files":"Geselecteerde bestanden","Crop is required on images":"Uitsnede is vereist op afbeeldingen",Crop:"Verkleinen",Circle:"Cirkel",Rotate:"Draaien",Mask:"Maskeren",Revert:"Ongedaan maken",Edit:"Bewerken",Reset:"Opnieuw zetten",Done:"Gedaan",Save:"Opslaan",Next:"Volgende","Edit Image":"Bewerk afbeelding","This image cannot be edited":"Deze afbeelding kan niet worden bewerkt","Connection Lost":"Verbinding verbroken","Failed While Uploading":"Mislukt tijdens het uploaden","Retrying in":"Opnieuw proberen over","Try again":"Probeer het nog eens","Try now":"Probeer nu","Drag and Drop, Copy and Paste Files":"Sleep bestanden en zet ze neer, kopieer en plak bestanden","or Drag and Drop, Copy and Paste Files":"of slepen, kopiëren en plakken van bestanden","Select Files to Upload":"Selecteer bestanden om te uploaden","Select From":"Selecteren","Drop your files anywhere":"Zet je bestanden overal neer","Enter a URL":"Voer een URL in","Search images":"Zoek beelden","Webcam Disabled":"Webcam uitgeschakeld","Webcam Not Supported":"Webcam niet ondersteund","Please enable your webcam to take a photo.":"Schakel de webcam in om een foto te maken","Your current browser does not support webcam functionality.":"Deze browser heeft geen ondersteuning voor een webcam","We suggest using Chrome or Firefox.":"Wij raden aan om Chrome of Firefox te gebruiken.","File {displayName} is not an accepted file type. The accepted file types are {types}":"Het bestandstype van {displayName} wordt niet geaccepteerd. Wel toegestane bestandstypen zijn: {types}","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"Het {displayName} is te groot. De maximaal toegestane bestandsgrootte is: {roundFileSize}","Our file upload limit is {maxFiles} {filesText}":"Het maximaal aantal, te uploaden, bestanden is {maxFiles} {filesText}",'No search results found for "{search}"':'Geen zoekresultaten gevonden voor "{search}"',"An error occurred. Please try again.":"Er is een fout opgetreden. Probeer het opnieuw.","Files [{displayName}] are too big. The accepted file size is {maxSize}":"Bestanden [{displayName}] zijn te groot. De geaccepteerde bestandsgrootte is {maxSize}","Click here or hit ESC to close picker":"Klik hier of druk op ESC om te sluiten"},no:{Upload:"Last opp","Upload more":"Last opp mer","Deselect All":"Opphev alle","View/Edit Selected":"Vis/ rediger valgte","Sign Out":"Logg ut","My Device":"Min enhet","Web Search":"Nettsøk","Take Photo":"Ta bilde","Link (URL)":"Link (URL)","Record Video":"Ta opp video","Record Audio":"Ta opp lyd","Custom Source":"Egendefinert kilde",Add:"Legg til","more file":"flere filer","more files":"flere filer","Connect {providerName}":"Koble {providerName}","Select Files from {providerName}":"Velg filer fra {providerName}","You need to authenticate with {providerName}.":"Du må autentisere med {providerName}.","A new page will open to connect your account.":"En ny side vil åpnes for å koble til din konto","We only extract images and never modify or delete them.":"Vi trekker kun ut bilder og vil aldri endre eller slette dem",'To disconnect from {providerName} click "Sign out" button in the menu.':'For å koble fra {providerName} klikker du på "Logg ut" -knappen i menyen.',"Sign in with Google":"Logg på med Google","Go back":"Gå tilbake","This folder is empty.":"Denne mappen er tom.",Files:"Filer",Images:"Bilder",Uploaded:"Lastet opp",Uploading:"Laster opp",Completed:"Fullført",Filter:"Filtrer","Cropped Images":"Filer og mapper","Edited Images":"Redigerte bilder","Selected Files":"Valgte filer","Crop is required on images":"Beskjæring er påkrevd for bilder",Crop:"Beskjær",Circle:"Sirkel",Rotate:"Rotere",Mask:"Maske",Revert:"Tilbakestill",Edit:"Rediger",Reset:"Tilbakestill",Done:"Ferdig",Save:"Lagre",Next:"Neste","Edit Image":"Rediger bilde ","This image cannot be edited":"Dette bildet kan ikke redigeres","Connection Lost":"Forbindelse mistet","Failed While Uploading":"Mislyktes under opplasting","Retrying in":"Prøver på nytt om","Try again":"Prøv igjen","Try now":"Prøv nå","Drag and Drop, Copy and Paste Files":"Dra og slipp, kopier og lim inn filer","or Drag and Drop, Copy and Paste Files":"eller dra og slipp, kopier og lim inn filer","Select Files to Upload":"Velg filer som skal lastes opp","Select From":"Velg fra","Drop your files anywhere":"Slett filene dine hvor som helst","Enter a URL":"Skriv inn URL","Search images":"Søk bilder","Webcam Disabled":"Webkamera deaktivert","Webcam Not Supported":"Webkamera ikke støttet","Please enable your webcam to take a photo.":"Vennligst aktiver ditt webkamera for å ta et bilde.","Your current browser does not support webcam functionality.":"Din nåværende nettleser støtter ikke webkamera funksjonalitet.","We suggest using Chrome or Firefox.":"Vi foreslår Chrome eller Firefox","File {displayName} is not an accepted file type. The accepted file types are {types}":"Filen {displayName} er ikke en akseptert filtype. De godkjente filtyper er {types}","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"Filen {displayName} er for stor. Akseptert filstørrelse er {roundFileSize}","Our file upload limit is {maxFiles} {filesText}":"Vår filopplastingsgrense er {maxFiles} {filesText}",'No search results found for "{search}"':'Ingen søkeresultater funnet for "{search}"',"An error occurred. Please try again.":"En feil oppstod. Vær så snill, prøv på nytt.","Files [{displayName}] are too big. The accepted file size is {maxSize}":"Filene [{displayName}] er for store. Den aksepterte filstørrelsen er {maxSize}","Click here or hit ESC to close picker":"Klikk her eller trykk ESC for å lukke"},pl:{Upload:"Prześlij pliki","Upload more":"Prześlij więcej","Deselect All":"Odznacz wszystko","View/Edit Selected":"Wyświetl/Edytuj zaznaczone","Sign Out":"Wyloguj się","My Device":"Moje urządzenie","Web Search":"Grafika z internetu","Take Photo":"Zrób zdjęcie","Link (URL)":"Adres URL","Record Video":"Nagrać wideo","Record Audio":"Nagrać dźwięk","Custom Source":"Niestandardowe źródło",Add:"Dodaj","more file":"więcej plików","more files":"więcej plików","Connect {providerName}":"Połącz z {providerName}","Select Files from {providerName}":"Wybierz pliki z {providerName}","You need to authenticate with {providerName}.":"Musisz zostać zautoryzowany przez {providerName}.","A new page will open to connect your account.":"Nowa strona zostanie otwarta w celu połączenia z Twoim kontem.","We only extract images and never modify or delete them.":"Mamy tylko wyodrębnić obrazy i nigdy zmodyfikować lub usunąć je",'To disconnect from {providerName} click "Sign out" button in the menu.':'Aby rozłączyć się z {providerName} kliknij "Wyloguj się" w menu.',"Sign in with Google":"Zaloguj się do Google","Go back":"Wróć","This folder is empty.":"Ten folder jest pusty.",Files:"Pliki",Images:"Obrazy",Uploaded:"Przesłany",Uploading:"Przesyłanie danych",Completed:"Ukończono",Filter:"Szukaj","Cropped Images":"Przycięte obrazy","Edited Images":"Edytowane obrazy","Selected Files":"Wybrane pliki","Crop is required on images":"Przycinanie jest wymagane na obrazach",Crop:"przytnij",Circle:"przytnij w kształcie koła",Rotate:"obróć",Mask:"dodaj warstwę",Revert:"Cofnij",Edit:"Edytuj",Reset:"przywróć oryginał",Done:"Gotowe",Save:"Zapisać",Next:"Kolejny","Edit Image":"Edytuj zdjęcie","This image cannot be edited":"Tego obrazu nie można edytować","Connection Lost":"Utracono połączenie","Failed While Uploading":"Wystąpił błąd podczas przesyłania","Retrying in":"Ponawiam próbę","Try again":"Spróbuj ponownie","Try now":"Spróbuj teraz","Drag and Drop, Copy and Paste Files":"Przeciągnij i upuść pliki","or Drag and Drop, Copy and Paste Files":"lub przeciągnij i upuść, kopiować i wklejać pliki","Select Files to Upload":"Wybierz pliki do przesłania","Select From":"Wybierz z","Drop your files anywhere":"Upuść swoje pliki w dowolnym miejscu","Enter a URL":"Wprowadź adres URL","Search images":"Szukaj obrazów","Webcam Disabled":"Kamera jest wyłączona","Webcam Not Supported":"Kamera nie jest obsługiwana","Please enable your webcam to take a photo.":"Proszę włączyć kamerę internetową, aby zrobić zdjęcie","Your current browser does not support webcam functionality.":"Twoja przeglądarka obecnie nie obsługuje funkcji kamery internetowej.","We suggest using Chrome or Firefox.":"Zalecamy użycie Chrome lub Firefox","File {displayName} is not an accepted file type. The accepted file types are {types}":"{displayName} Plik nie jest typem plików akceptowane. Typy plików akceptowane są {types}","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"{displayName} Plik jest zbyt duże. Rozmiar plików akceptowane jest {roundFileSize}","Our file upload limit is {maxFiles} {filesText}":"Nasz limit uploadu pliku jest {maxFiles} {filesText}",'No search results found for "{search}"':'Nie znaleziono wynikow dla "{search}"',"An error occurred. Please try again.":"Wystąpił błąd. Spróbuj ponownie.","Files [{displayName}] are too big. The accepted file size is {maxSize}":"Pliki [{displayName}] są za duże. Akceptowany rozmiar pliku to {maxSize}","Click here or hit ESC to close picker":"Kliknij tutaj lub naciśnij ESC, aby zamknąć"},pt:{Upload:"Carregar","Upload more":"Carregar mais","Deselect All":"Desmarcar todos","View/Edit Selected":"Exibir/Editar selecionada","Sign Out":"Desconectar","My Device":"Meu dispositivo","Web Search":"Buscar imagens na Web","Take Photo":"Tirar Foto","Link (URL)":"Link (URL)","Record Video":"Gravar vídeo","Record Audio":"Gravar audio","Custom Source":"Fonte Personalizada",Add:"Adicionar","more file":"arquivo mais","more files":"mais arquivos","Connect {providerName}":"Conecte o {providerName}","Select Files from {providerName}":"Selecione arquivos do {providerName}","You need to authenticate with {providerName}.":"Você precisa se autenticar com o {providerName}.","A new page will open to connect your account.":"Uma nova página será aberta para conectar a sua conta.","We only extract images and never modify or delete them.":"Nós apenas extraímos os arquivos selecionados e nunca os modificamos ou os removemos.",'To disconnect from {providerName} click "Sign out" button in the menu.':'Para desconectar do {providerName}, clique no botão "Desconectar" no menu.',"Sign in with Google":"Faça login no Google","Go back":"Volte","This folder is empty.":"Esta pasta está vazia.",Files:"Ficheiros",Images:"Imagens",Uploaded:"Carregado",Uploading:"A Enviar",Completed:"Concluído",Filter:"Ordenar","Cropped Images":"Imagens Cortadas","Edited Images":"Imagens Editadas","Selected Files":"Arquivos selecionados","Crop is required on images":"A colheita é necessária em imagens",Crop:"Cortar",Circle:"Círculo",Rotate:"Rodar",Mask:"Mascarar",Revert:"Desfazer",Edit:"Editar",Reset:"Recompor",Done:"Feito",Save:"Salve",Next:"Próximo","Edit Image":"Editar Imagem","This image cannot be edited":"Esta imagem não pode ser editada","Failed While Uploading":"Falha ao enviar","Retrying in":"A Tentar Novamente em","Connection Lost":"Ligação perdida","Try again":"Tente novamente","Try now":"Tente agora","Drag and Drop, Copy and Paste Files":"Arraste e solte, copie e cole arquivos","or Drag and Drop, Copy and Paste Files":"ou arrastar, copiar e colar arquivos","Select Files to Upload":"Selecionar arquivos para upload","Select From":"Selecione de","Drop your files anywhere":"Solte seus arquivos em qualquer lugar","Enter a URL":"Insira um URL","Search images":"Procurar fotos","Webcam Disabled":"Webcam Desativada","Webcam Not Supported":"Webcam Não Suportada","Please enable your webcam to take a photo.":"Por favor, ative sua webcam para tirar uma foto","Your current browser does not support webcam functionality.":"Seu navegador atual não suporta conexão com a webcam.","We suggest using Chrome or Firefox.":"Nós sugerimos Chrome ou Firefox.","File {displayName} is not an accepted file type. The accepted file types are {types}":" Arquivo {displayName} não é um tipo de arquivo aceitos. Os tipos de arquivo aceitos são {types}","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"{displayName} Arquivo é muito grande. O tamanho de arquivo aceito é {roundFileSize}","Our file upload limit is {maxFiles} {filesText}":"É o nosso limite de upload de arquivo {maxFiles} {filesText}",'No search results found for "{search}"':'Nenhum resultado de pesquisa encontrado para "{search}"',"An error occurred. Please try again.":"Um erro ocorreu. Por favor, tente novamente.","Files [{displayName}] are too big. The accepted file size is {maxSize}":"Os arquivos [{displayName}] são muito grandes. O tamanho do arquivo aceito é {maxSize}","Click here or hit ESC to close picker":"Clique aqui ou pressione ESC para fechar"},ru:{Upload:"загрузить","Upload more":"Загрузить больше","Deselect All":"отмена","View/Edit Selected":"просмотреть/редактировать","Sign Out":"выйти","My Device":"Моё устройство","Web Search":"Поиск изображений в сети","Take Photo":"Фотографировать","Link (URL)":"URL-адрес","Record Video":"Запись видео","Record Audio":"Запись аудио","Custom Source":"Пользовательский источник",Add:"Добавить","more file":"более файла","more files":"больше файлов","Connect {providerName}":"Подключите {providerName}","Select Files from {providerName}":"Выбрать файлы из {providerName}","You need to authenticate with {providerName}.":"Вам нужно пройти аутентификацию с помощью {providerName}.","A new page will open to connect your account.":"Новая страница открывается чтобы подключить ваш аккаунт","We only extract images and never modify or delete them.":"Мы просто извлекаем фото, а никогда не их изменяем или удалим",'To disconnect from {providerName} click "Sign out" button in the menu.':"Чтобы отключиться от {providerName}, нажмите кнопку «Выйти» в меню.","Sign in with Google":"Войти через Google","Go back":"Вернитесь","This folder is empty.":"Эта папка пуста.",Files:"файлы",Images:"фото",Uploaded:"загружены",Uploading:"Загружается",Completed:"Завершено",Filter:"сортировать по дате","Cropped Images":"Обрезанные изображения","Edited Images":"Отредактированные изображения","Selected Files":"Выбранные файлы","Crop is required on images":"Урожай требуется для изображений",Crop:"отделка",Circle:"круг",Rotate:"вращаться",Mask:"скрывать",Revert:"Отменить",Edit:"Изменить",Reset:"сброс",Done:"законченный",Save:"Сохранить",Next:"Следующий","Edit Image":"редактировать изображение","This image cannot be edited":"Это изображение нельзя отредактировать","Connection Lost":"Соединение потеряно","Failed While Uploading":"Ошибка при загрузке","Retrying in":"Повторная попытка через","Try again":"Попробуй еще раз","Try now":"Попробуй","Drag and Drop, Copy and Paste Files":"Перетаскивание, копирование и вставка файлов","or Drag and Drop, Copy and Paste Files":"или перетаскивать, копировать и вставлять файлы","Select Files to Upload":"Выберите файлы для загрузки","Select From":"выбрать в...","Drop your files anywhere":"Перетащите свои файлы куда угодно","Enter a URL":"Введите URL-адрес","Search images":"поиск фото","Webcam Disabled":"Веб-камера отключена","Webcam Not Supported":"Веб-камера не поддерживается","Please enable your webcam to take a photo.":"Пожалуйста, включите фотокамеру, чтобы сделать фотографию","Your current browser does not support webcam functionality.":"Текущий браузер не поддерживает функциональность веб-камеры","We suggest using Chrome or Firefox.":"Мы предлагаем использовать Firefox","File {displayName} is not an accepted file type. The accepted file types are {types}":"{displayName} Файлов не является типом прикладываемых файлов. Типы прикладываемых файлов являются {types}","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"{displayName} Файл слишком большой. Признанных файл имеет размер {roundFileSize}","Our file upload limit is {maxFiles} {filesText}":"Наш предел загрузки файлов {maxFiles} {filesText}",'No search results found for "{search}"':'По запросу "{search}" ничего не найдено',"An error occurred. Please try again.":"Произошла ошибка. Пожалуйста, попробуйте еще раз.","Files [{displayName}] are too big. The accepted file size is {maxSize}":"Файлы [{displayName}] слишком велики. Принятый размер файла: {maxSize}","Click here or hit ESC to close picker":"Нажмите здесь или нажмите ESC, чтобы закрыть"},sv:{Upload:"Ladda upp","Upload more":"Ladda upp mer","Deselect All":"Avmarkera Alla","View/Edit Selected":"Visa/Editera Valda","Sign Out":"Logga ut","My Device":"Min enhet","Web Search":"Webbsökning","Take Photo":"Ta Ett Foto","Link (URL)":"URL-adress","Record Video":"Spela in video","Record Audio":"Spela in ljud","Custom Source":"Anpassad källa",Add:"Lägg till","more file":"more fil","more files":"fler filer","Connect {providerName}":"Anslut {providerName}","Select Files from {providerName}":"Välj filer från {providerName}","You need to authenticate with {providerName}.":"Du måste verifiera med google-enheten {providerName}.","A new page will open to connect your account.":"En ny sida öppnas för att ansluta ditt konto","We only extract images and never modify or delete them.":"Vi använder bara bildern och ändrar aldrig eller tar bort dem",'To disconnect from {providerName} click "Sign out" button in the menu.':'För att koppla från {providerName}, klicka på "Logga ut" -knappen i menyn.',"Sign in with Google":"Logga in med Google","Go back":"Gå tillbaka","This folder is empty.":"Denna mapp är tom.",Files:"Filer",Images:"Bilder",Uploaded:"Uppladdade",Uploading:"Uppladdning",Completed:"Avslutad",Filter:"Filter","Cropped Images":"Beskurna Bilder","Edited Images":"Redigerad Bild","Selected Files":"Valda filer","Crop is required on images":"Beskär krävs på bilder",Crop:"Beskära",Circle:"Cirkel",Rotate:"Rotera",Mask:"Maskera",Revert:"Invertera",Edit:"Editera",Reset:"Återställ",Done:"Gjort",Save:"Spara",Next:"Nästa","Edit Image":"Redigera Bild","This image cannot be edited":"Den här bilden kan inte redigeras","Connection Lost":"Anslutning förlorad","Failed While Uploading":"Misslyckades Vid Uppladdning","Retrying in":"Försöker Igen","Try again":"Försök Igen","Try now":"Prova nu","Drag and Drop, Copy and Paste Files":"Dra och släpp, kopiera och klistra in filer","or Drag and Drop, Copy and Paste Files":"Eller dra och släpp, kopiera och klistra in filer","Select Files to Upload":"Välj dina filer för att ladda upp","Select From":"Välj från","Drop your files anywhere":"Släpp dina filer var som helst","Enter a URL":"Ange en webbadress","Search images":"Sök bilder","Webcam Disabled":"Webkameran Avaktiverad","Webcam Not Supported":"Webkameran är inte kompatibel","Please enable your webcam to take a photo.":"Vänligen aktivera din webkamera för att ta ett foto","Your current browser does not support webcam functionality.":"Din nuvarande webbläsare stöder inte webbkamera","We suggest using Chrome or Firefox.":"Vi föreslår att du använder Chrome eller Firefox.","File {displayName} is not an accepted file type. The accepted file types are {types}":"Fil {displayName} är inte en accepterad filtyp. De accepterade filtyperna är {types}","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"Fil {displayName} är för stor. Den accepterade filstorleken är mindre än {roundFileSize}","Our file upload limit is {maxFiles} {filesText}":"Vår Filöverföringsgräns är {maxFiles} {filesText}",'No search results found for "{search}"':'Inga sökresultat funna för "{search}"',"An error occurred. Please try again.":"Ett fel uppstod. Var god försök igen.","Files [{displayName}] are too big. The accepted file size is {maxSize}":"Filer [{displayName}] är för stora. Den accepterade filstorleken är {maxSize}","Click here or hit ESC to close picker":"Klicka här eller tryck ESC för att stänga"},tr:{Upload:"Resimleri Yükle","Deselect All":"Seçimi Kaldır","View/Edit Selected":"Görüntüle/Düzenle","Sign Out":"Çıkış Yap","Upload more":"Daha fazla ekle","My Device":"Bilgisayarım","Web Search":"Web Arama","Take Photo":"Fotoğraf Çek","Link (URL)":"Link","Record Video":"Video kaydetmek","Record Audio":"Ses kaydı","Custom Source":"Özel kaynak",Add:"Ekle","more file":"Daha Fazla","more files":"Daha Fazla","Connect {providerName}":"{providerName} bağlayın","Select Files from {providerName}":"{providerName} Dosyaları Seç","You need to authenticate with {providerName}.":"{providerName} sürücü ile kimlik doğrulaması yapmanız gerekir.","A new page will open to connect your account.":"Giriş yapman için yeni sayfa açılacak","We only extract images and never modify or delete them.":"Biz sadece resimlerinizi görüntüleriz, düzenleme ve silme işlemi yapmayız.",'To disconnect from {providerName} click "Sign out" button in the menu.':'{providerName} ile bağlantısını kesmek için menüdeki "Çıkış Yap" butonuna tıklayın.',"Sign in with Google":"Google ile giriş yap","Go back":"Geri dön","This folder is empty.":"Bu klasör boş.",Files:"Dosyalar",Images:"Resimler",Uploaded:"Yüklendi",Uploading:"Yükleniyor",Completed:"Tamamlandı",Filter:"Filtre","Cropped Images":"Kesilen resimler","Edited Images":"Düzenlenen resimler","Selected Files":"Seçilen resimler","Crop is required on images":"Kesim işlemi resimlerde zorunludur",Crop:"Kes",Circle:"Yuvarlak",Rotate:"Döndür",Mask:"Maskele",Revert:"Geri Al",Edit:"Düzenle",Reset:"Sıfırla",Done:"Tamam",Save:"Kaydet",Next:"Sonraki","Edit Image":"Resmi düzenle","This image cannot be edited":"Bu resim düzenlenemez","Connection Lost":"İletişim koptu","Failed While Uploading":"Yüklenirken hata oluştu","Retrying in":"Tekrar denenecek: ","Try again":"Tekrar dene","Try now":"Şimdi tekrar dene","Drag and Drop, Copy and Paste Files":"Sürükle ve Bırak, Dosyaları Kopyala ve Yapıştır","or Drag and Drop, Copy and Paste Files":"veya sürükle bırak ya da buraya kopyala/yapıştır","Select Files to Upload":"Fotoğrafları yüklemek için seçin","Select From":"Seçiminizi yapın: ","Drop your files anywhere":"Resimlerinizi herhangi bir yere sürükleyin","Enter a URL":"Link girin","Search images":"Resim ara","Webcam Disabled":"Webcam Devre Dışı","Webcam Not Supported":"Webcam Desteklenmiyor","Please enable your webcam to take a photo.":"Lütfen web kameranızın fotoğraf çekmesini sağlayın.","Your current browser does not support webcam functionality.":"Mevcut tarayıcınız web kamerası işlevini desteklemiyor.","We suggest using Chrome or Firefox.":"Chrome veya Firefox kullanmanızı öneririz.","File {displayName} is not an accepted file type. The accepted file types are {types}":"{displayName} isimli dosyanın tipi kabul edilmiyor. Kabul edilen dosya tipleri: {types}","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"{displayName} isimli resim dosyasının boyutu çok büyük. Kabul edilen en yüksek dosya boyutu: {roundFileSize}","Our file upload limit is {maxFiles} {filesText}":"Resim yükleme limiti {maxFiles} adet.",'No search results found for "{search}"':'Arama sonucu "{search}"',"An error occurred. Please try again.":"Bir hata oluştu. Lütfen tekrar deneyin.","Files [{displayName}] are too big. The accepted file size is {maxSize}":"[{DisplayName}] dosyaları çok büyük. Kabul edilen dosya boyutu: {maxSize}","Click here or hit ESC to close picker":"Buraya tıklayın veya kapatmak için ESC basın."},vi:{Upload:"Tải lên","Upload more":"Tải lên nhiều hơn","Deselect All":"Bỏ chọn tất cả","View/Edit Selected":"Xem/Chỉnh sửa tập tin đã chọn","Sign Out":"Đăng xuất","My Device":"Thiết bị của tôi","Web Search":"Tìm kiếm trên web","Take Photo":"Chụp ảnh","Link (URL)":"Địa chỉ URL","Record Video":"Quay video","Record Audio":"Ghi âm","Custom Source":"Nguồn tùy chỉnh",Add:"Thêm","more file":"Thêm tập tin","more files":"Thêm tập tin","Connect {providerName}":"Kết nối {providerName}","Select Files from {providerName}":"Chọn tệp từ {providerName}","You need to authenticate with {providerName}.":"Bạn cần xác thực với {providerName}.","A new page will open to connect your account.":"Một trang kết nối với tài khoản của bạn sẽ được mở","We only extract images and never modify or delete them.":"Chúng tôi chỉ trích xuất hình ảnh và không bao giờ sửa đổi hoặc xóa chúng",'To disconnect from {providerName} click "Sign out" button in the menu.':'Để ngắt kết nối khỏi {providerName}, nhấp vào nút "Đăng xuất" trong menu.',"Sign in with Google":"Đăng nhập bằng Google","Go back":"Quay lại","This folder is empty.":"Thư mục này trống.",Files:"Các tập tin",Images:"Hình ảnh",Uploaded:"Đã tải lên",Uploading:"Tải lên",Completed:"Đã hoàn thành",Filter:"Bộ lọc","Cropped Images":"Hình ảnh bị cắt","Edited Images":"Chỉnh sửa hình ảnh","Selected Files":"Tập tin đã được chọn","Crop is required on images":"Cây trồng được yêu cầu trên hình ảnh",Crop:"Cắt",Circle:"Giới",Rotate:"Quay",Mask:"Mặt nạ",Revert:"Quay lại",Edit:"Chỉnh sửa",Reset:"Cài lại",Done:"Hoàn tất",Save:"Tiết kiệm",Next:"Kế tiếp","Edit Image":"Chỉnh sửa hình ảnh","This image cannot be edited":"Không thể chỉnh sửa hình ảnh này","Connection Lost":"Kết nối bị mất","Failed While Uploading":"Không thể tải lên","Retrying in":"Đang thử lại","Try again":"Thử lại","Try now":"Thử ngay bây giờ","Drag and Drop, Copy and Paste Files":"Kéo và thả, sao chép và dán tập tin","or Drag and Drop, Copy and Paste Files":"hoặc Kéo và Thả, Sao chép và Dán Tập tin","Select Files to Upload":"Chọn tập tin để tải lên","Select From":"Chọn từ","Drop your files anywhere":"Thả tập tin của bạn bất cứ nơi nào","Enter a URL":"Nhập URL","Search images":"Tìm kiểm hình ảnh","Webcam Disabled":"Webcam bị vô hiệu hóa","Webcam Not Supported":"Webcam không được hỗ trợ","Please enable your webcam to take a photo.":"Hãy kích hoạt webcam của bạn để chụp ảnh.","Your current browser does not support webcam functionality.":"Trình duyệt hiện tại của bạn không hỗ trợ chức năng webcam.","We suggest using Chrome or Firefox.":"Chúng tôi khuyên bạn sử dụng Chrome hoặc Firefox.","File {displayName} is not an accepted file type. The accepted file types are {types}":"Tập tin {displayName} không phải là loại tập tin được chấp nhận. Các loại tập tin được chấp nhận là {types}","File {displayName} is too big. The accepted file size is less than {roundFileSize}":"Tập tin {displayName} quá lớn. Kích thước tập tin được chấp nhận là {roundFileSize}","Our file upload limit is {maxFiles} {filesText}":"Giới hạn tập tin tải lên là {maxFiles} {filesText}",'No search results found for "{search}"':'Không tìm thấy kết quả tìm kiếm cho "{search}"',"An error occurred. Please try again.":"Xảy ra lỗi Vui lòng thử lại.","Files [{displayName}] are too big. The accepted file size is {maxSize}":"Tệp [{displayName}] quá lớn. Kích thước tệp được chấp nhận là {maxSize}","Click here or hit ESC to close picker":"Nhấn vào đây hoặc nhấn ESC để đóng"},zh:{Upload:"上传","Upload more":"上传更多","Deselect All":"取消选择全部","View/Edit Selected":"查看/编辑所选项","Sign Out":"登出","My Device":"我的设备","Web Search":"为图片搜索网络","Take Photo":"拍照","Link (URL)":"网址","Record Video":"录视频","Record Audio":"录制音频","Custom Source":"自定义来源",Add:"再添加","more file":"更多文件","more files":"更多文件","Connect {providerName}":"连接{providerName}","Select Files from {providerName}":"从{providerName}中选择文件","You need to authenticate with {providerName}.":"您需要使用{providerName}驱动器进行身份验证。","A new page will open to connect your account.":"一个新页面会打开以关联您的帐户","We only extract images and never modify or delete them.":"我们只提取图像，从不修改或删除它们",'To disconnect from {providerName} click "Sign out" button in the menu.':"要断开与{providerName}的连接，请单击菜单中的“登出”按钮。","Sign in with Google":"使用Google登录","Go back":"回去","This folder is empty.":"这个文件夹是空的。",Files:"文件",Images:"图片",Uploaded:"已上传",Uploading:"正在上传",Completed:"已完成",Filter:"过滤","Cropped Images":"裁剪图片","Edited Images":"编辑的图像","Selected Files":"所选文件","Crop is required on images":"图像上需要裁剪",Crop:"剪",Circle:"圆",Rotate:"回转",Mask:"重新盖上",Revert:"还原",Edit:"编辑",Reset:"重启",Done:"毕",Save:"保存",Next:"下一个","Edit Image":"编辑图像","This image cannot be edited":"此图像无法编辑","Connection Lost":"连接中断","Failed While Uploading":"上传失败","Retrying in":"重试倒计时","Try again":"再试一次","Try now":"现在试试","Drag and Drop, Copy and Paste Files":"拖放，复制和粘贴文件","or Drag and Drop, Copy and Paste Files":"或拖放，复制和粘贴文件","Select Files to Upload":"选择要上传的文件","Select From":"选择自","Drop your files anywhere":"将文件放在任何地方","Enter a URL":"输入一个网址","Search images":"搜索图像","Webcam Disabled":"摄像头关闭","Webcam Not Supported":"不支持摄像头","Please enable your webcam to take a photo.":"请打开摄像头","Your current browser does not support webcam functionality.":"您的浏览器不支持网络摄像头功能。","We suggest using Chrome or Firefox.":"我们建议使用火狐。","File {displayName} is not an accepted file type. The accepted file types are {types}":" 文件{displayName}不是可接受的文件类型。 可接受的文件类型为{types}","File {displayName} is too big. The accepted file size is less than {roundFileSize}":" 文件{displayName}太大。 可接受的文件大小为{roundFileSize}","Our file upload limit is {maxFiles} {filesText}":"我们的文件上传限制为 {maxFiles} {filesText}",'No search results found for "{search}"':"未找到{search}的搜索结果","An error occurred. Please try again.":"发生错误。 请再试一次。","Files [{displayName}] are too big. The accepted file size is {maxSize}":"文件[{displayName}]太大。 可接受的文件大小为{maxSize}","Click here or hit ESC to close picker":"单击此处或按ESC键关闭"}},xc=Ji(function(e,t){e.exports=function o(a,s,c){function l(n,e){if(!s[n]){if(!a[n]){var t=Zi;if(!e&&t)return t(n,!0);if(u)return u(n,!0);var r=new Error("Cannot find module '"+n+"'");throw r.code="MODULE_NOT_FOUND",r}var i=s[n]={exports:{}};a[n][0].call(i.exports,function(e){var t=a[n][1][e];return l(t||e)},i,i.exports,o,a,s,c)}return s[n].exports}for(var u=Zi,e=0;e<c.length;e++)l(c[e]);return l}({1:[function(e,t,n){var r=e("inherits"),i=e("multimath"),o=e("multimath/lib/unsharp_mask"),a=e("./mm_resize");function s(e){var t=e||[],n={js:0<=t.indexOf("js"),wasm:0<=t.indexOf("wasm")};i.call(this,n),this.features={js:n.js,wasm:n.wasm&&this.has_wasm},this.use(o),this.use(a)}r(s,i),s.prototype.resizeAndUnsharp=function(e,t){var n=this.resize(e,t);return e.unsharpAmount&&this.unsharp_mask(n,e.toWidth,e.toHeight,e.unsharpAmount,e.unsharpRadius,e.unsharpThreshold),n},t.exports=s},{"./mm_resize":4,inherits:15,multimath:16,"multimath/lib/unsharp_mask":19}],2:[function(e,t,n){function _(e){return e<0?0:255<e?255:e}t.exports={convolveHorizontally:function(e,t,n,r,i,o){var a,s,c,l,u,d,p,f,h,m,v,g=0,y=0;for(h=0;h<r;h++){for(m=u=0;m<i;m++){for(d=o[u++],p=o[u++],f=g+4*d|0,a=s=c=l=0;0<p;p--)v=o[u++],l=l+v*e[f+3]|0,c=c+v*e[f+2]|0,s=s+v*e[f+1]|0,a=a+v*e[f]|0,f=f+4|0;t[y+3]=_(l+8192>>14),t[y+2]=_(c+8192>>14),t[y+1]=_(s+8192>>14),t[y]=_(a+8192>>14),y=y+4*r|0}y=4*(h+1)|0,g=(h+1)*n*4|0}},convolveVertically:function(e,t,n,r,i,o){var a,s,c,l,u,d,p,f,h,m,v,g=0,y=0;for(h=0;h<r;h++){for(m=u=0;m<i;m++){for(d=o[u++],p=o[u++],f=g+4*d|0,a=s=c=l=0;0<p;p--)v=o[u++],l=l+v*e[f+3]|0,c=c+v*e[f+2]|0,s=s+v*e[f+1]|0,a=a+v*e[f]|0,f=f+4|0;t[y+3]=_(l+8192>>14),t[y+2]=_(c+8192>>14),t[y+1]=_(s+8192>>14),t[y]=_(a+8192>>14),y=y+4*r|0}y=4*(h+1)|0,g=(h+1)*n*4|0}}}},{}],3:[function(e,t,n){t.exports="AGFzbQEAAAABFAJgBn9/f39/fwBgB39/f39/f38AAg8BA2VudgZtZW1vcnkCAAEDAwIAAQQEAXAAAAcZAghjb252b2x2ZQAACmNvbnZvbHZlSFYAAQkBAArmAwLBAwEQfwJAIANFDQAgBEUNACAFQQRqIRVBACEMQQAhDQNAIA0hDkEAIRFBACEHA0AgB0ECaiESAn8gBSAHQQF0IgdqIgZBAmouAQAiEwRAQQAhCEEAIBNrIRQgFSAHaiEPIAAgDCAGLgEAakECdGohEEEAIQlBACEKQQAhCwNAIBAoAgAiB0EYdiAPLgEAIgZsIAtqIQsgB0H/AXEgBmwgCGohCCAHQRB2Qf8BcSAGbCAKaiEKIAdBCHZB/wFxIAZsIAlqIQkgD0ECaiEPIBBBBGohECAUQQFqIhQNAAsgEiATagwBC0EAIQtBACEKQQAhCUEAIQggEgshByABIA5BAnRqIApBgMAAakEOdSIGQf8BIAZB/wFIG0EQdEGAgPwHcUEAIAZBAEobIAtBgMAAakEOdSIGQf8BIAZB/wFIG0EYdEEAIAZBAEobciAJQYDAAGpBDnUiBkH/ASAGQf8BSBtBCHRBgP4DcUEAIAZBAEobciAIQYDAAGpBDnUiBkH/ASAGQf8BSBtB/wFxQQAgBkEAShtyNgIAIA4gA2ohDiARQQFqIhEgBEcNAAsgDCACaiEMIA1BAWoiDSADRw0ACwsLIQACQEEAIAIgAyAEIAUgABAAIAJBACAEIAUgBiABEAALCw=="},{}],4:[function(e,t,n){t.exports={name:"resize",fn:e("./resize"),wasm_fn:e("./resize_wasm"),wasm_src:e("./convolve_wasm_base64")}},{"./convolve_wasm_base64":3,"./resize":5,"./resize_wasm":8}],5:[function(e,t,n){var v=e("./resize_filter_gen"),g=e("./convolve").convolveHorizontally,y=e("./convolve").convolveVertically;t.exports=function(e){var t=e.src,n=e.width,r=e.height,i=e.toWidth,o=e.toHeight,a=e.scaleX||e.toWidth/e.width,s=e.scaleY||e.toHeight/e.height,c=e.offsetX||0,l=e.offsetY||0,u=e.dest||new Uint8Array(i*o*4),d=void 0===e.quality?3:e.quality,p=e.alpha||!1,f=v(d,n,i,a,c),h=v(d,r,o,s,l),m=new Uint8Array(i*r*4);return g(t,m,n,r,i,f),y(m,u,r,i,o,h),p||function(e,t,n){var r=3,i=t*n*4|0;for(;r<i;)e[r]=255,r=r+4|0}(u,i,o),u}},{"./convolve":2,"./resize_filter_gen":6}],6:[function(e,t,n){var T=e("./resize_filter_info"),r=14;function O(e){return Math.round(e*((1<<r)-1))}t.exports=function(e,t,n,r,i){var o,a,s,c,l,u,d,p,f,h,m,v,g,y,_,b,w,A=T[e].filter,C=1/r,S=Math.min(1,r),E=T[e].win/S,k=Math.floor(2*(1+E)),x=new Int16Array((k+2)*n),F=0,I=!x.subarray||!x.set;for(o=0;o<n;o++){for(a=(o+.5)*C+i,s=Math.max(0,Math.floor(a-E)),c=Math.min(t-1,Math.ceil(a+E)),l=c-s+1,u=new Float32Array(l),d=new Int16Array(l),f=s,h=p=0;f<=c;f++,h++)m=A((f+.5-a)*S),p+=m,u[h]=m;for(h=v=0;h<u.length;h++)g=u[h]/p,v+=g,d[h]=O(g);for(d[n>>1]+=O(1-v),y=0;y<d.length&&0===d[y];)y++;if(y<d.length){for(_=d.length-1;0<_&&0===d[_];)_--;if(b=s+y,w=_-y+1,x[F++]=b,x[F++]=w,I)for(h=y;h<=_;h++)x[F++]=d[h];else x.set(d.subarray(y,_+1),F),F+=w}else x[F++]=0,x[F++]=0}return x}},{"./resize_filter_info":7}],7:[function(e,t,n){t.exports=[{win:.5,filter:function(e){return-.5<=e&&e<.5?1:0}},{win:1,filter:function(e){if(e<=-1||1<=e)return 0;if(-1.1920929e-7<e&&e<1.1920929e-7)return 1;var t=e*Math.PI;return Math.sin(t)/t*(.54+.46*Math.cos(t))}},{win:2,filter:function(e){if(e<=-2||2<=e)return 0;if(-1.1920929e-7<e&&e<1.1920929e-7)return 1;var t=e*Math.PI;return Math.sin(t)/t*Math.sin(t/2)/(t/2)}},{win:3,filter:function(e){if(e<=-3||3<=e)return 0;if(-1.1920929e-7<e&&e<1.1920929e-7)return 1;var t=e*Math.PI;return Math.sin(t)/t*Math.sin(t/3)/(t/3)}}]},{}],8:[function(e,t,n){var E=e("./resize_filter_gen");var a=!0;try{a=1===new Uint32Array(new Uint8Array([1,0,0,0]).buffer)[0]}catch(e){}function k(e,t,n){if(a)t.set(function(e){return new Uint8Array(e.buffer,0,e.byteLength)}(e),n);else for(var r=n,i=0;i<e.length;i++){var o=e[i];t[r++]=255&o,t[r++]=o>>8&255}}t.exports=function(e){var t=e.src,n=e.width,r=e.height,i=e.toWidth,o=e.toHeight,a=e.scaleX||e.toWidth/e.width,s=e.scaleY||e.toHeight/e.height,c=e.offsetX||0,l=e.offsetY||0,u=e.dest||new Uint8Array(i*o*4),d=void 0===e.quality?3:e.quality,p=e.alpha||!1,f=E(d,n,i,a,c),h=E(d,r,o,s,l),m=this.__align(0+Math.max(t.byteLength,u.byteLength)),v=this.__align(m+r*i*4),g=this.__align(v+f.byteLength),y=g+h.byteLength,_=this.__instance("resize",y),b=new Uint8Array(this.__memory.buffer),w=new Uint32Array(this.__memory.buffer),A=new Uint32Array(t.buffer);w.set(A),k(f,b,v),k(h,b,g);var C=_.exports.convolveHV||_.exports._convolveHV;C(v,g,m,n,r,i,o);var S=new Uint32Array(u.buffer);return S.set(new Uint32Array(this.__memory.buffer,0,o*i)),p||function(e,t,n){var r=3,i=t*n*4|0;for(;r<i;)e[r]=255,r=r+4|0}(u,i,o),u}},{"./resize_filter_gen":6}],9:[function(e,t,n){function r(e,t){this.create=e,this.available=[],this.acquired={},this.lastId=1,this.timeoutId=0,this.idle=t||2e3}r.prototype.acquire=function(){var e=this,t=void 0;return 0!==this.available.length?t=this.available.pop():((t=this.create()).id=this.lastId++,t.release=function(){return e.release(t)}),this.acquired[t.id]=t},r.prototype.release=function(e){var t=this;delete this.acquired[e.id],e.lastUsed=Date.now(),this.available.push(e),0===this.timeoutId&&(this.timeoutId=setTimeout(function(){return t.gc()},100))},r.prototype.gc=function(){var t=this,n=Date.now();this.available=this.available.filter(function(e){return!(n-e.lastUsed>t.idle)||(e.destroy(),!1)}),0!==this.available.length?this.timeoutId=setTimeout(function(){return t.gc()},100):this.timeoutId=0},t.exports=r},{}],10:[function(e,t,n){t.exports=function(e,t,n,r,i,o){var a=n/e,s=r/t,c=(2*o+2+1)/i;if(.5<c)return[[n,r]];var l=Math.ceil(Math.log(Math.min(a,s))/Math.log(c));if(l<=1)return[[n,r]];for(var u=[],d=0;d<l;d++){var p=Math.round(Math.pow(Math.pow(e,l-d-1)*Math.pow(n,d+1),1/l)),f=Math.round(Math.pow(Math.pow(t,l-d-1)*Math.pow(r,d+1),1/l));u.push([p,f])}return u}},{}],11:[function(e,t,n){var r=1e-5;function f(e){var t=Math.round(e);return Math.abs(e-t)<r?t:Math.floor(e)}function h(e){var t=Math.round(e);return Math.abs(e-t)<r?t:Math.ceil(e)}t.exports=function(e){var t,n,r,i,o,a,s=e.toWidth/e.width,c=e.toHeight/e.height,l=f(e.srcTileSize*s)-2*e.destTileBorder,u=f(e.srcTileSize*c)-2*e.destTileBorder;if(l<1||u<1)throw new Error("Internal error in pica: target tile width/height is too small.");var d,p=[];for(i=0;i<e.toHeight;i+=u)for(r=0;r<e.toWidth;r+=l)(t=r-e.destTileBorder)<0&&(t=0),o=r+l+e.destTileBorder-t,t+o>=e.toWidth&&(o=e.toWidth-t),(n=i-e.destTileBorder)<0&&(n=0),a=i+u+e.destTileBorder-n,n+a>=e.toHeight&&(a=e.toHeight-n),d={toX:t,toY:n,toWidth:o,toHeight:a,toInnerX:r,toInnerY:i,toInnerWidth:l,toInnerHeight:u,offsetX:t/s-f(t/s),offsetY:n/c-f(n/c),scaleX:s,scaleY:c,x:f(t/s),y:f(n/c),width:h(o/s),height:h(a/c)},p.push(d);return p}},{}],12:[function(e,t,n){function r(e){return Object.prototype.toString.call(e)}t.exports.isCanvas=function(e){var t=r(e);return"[object HTMLCanvasElement]"===t||"[object Canvas]"===t},t.exports.isImage=function(e){return"[object HTMLImageElement]"===r(e)},t.exports.limiter=function(e){var r=0,i=[];function o(){r<e&&i.length&&(r++,i.shift()())}return function(e){return new Promise(function(t,n){i.push(function(){e().then(function(e){t(e),r--,o()},function(e){n(e),r--,o()})}),o()})}},t.exports.cib_quality_name=function(e){switch(e){case 0:return"pixelated";case 1:return"low";case 2:return"medium"}return"high"},t.exports.cib_support=function(){return Promise.resolve().then(function(){if("undefined"==typeof createImageBitmap||"undefined"==typeof document)return!1;var n=document.createElement("canvas");return n.width=100,n.height=100,createImageBitmap(n,0,0,100,100,{resizeWidth:10,resizeHeight:10,resizeQuality:"high"}).then(function(e){var t=10===e.width;return e.close(),n=null,t})}).catch(function(){return!1})}},{}],13:[function(e,t,n){t.exports=function(){var r=e("./mathlib"),i=void 0;onmessage=function(e){var t=e.data.opts,n=(i=i||new r(e.data.features)).resizeAndUnsharp(t);postMessage({result:n},[n.buffer])}}},{"./mathlib":1}],14:[function(e,t,n){var o,a,s,c,l,u;function d(e){e<.5&&(e=.5);var t=Math.exp(.527076)/e,n=Math.exp(-t),r=Math.exp(-2*t),i=(1-n)*(1-n)/(1+2*t*n-r);return a=(o=i)*(t-1)*n,s=i*(1+t)*n,c=-i*r,l=2*n,u=-r,new Float32Array([o,a,s,c,l,u,(o+a)/(1-l-u),(s+c)/(1-l-u)])}function p(e,t,n,r,i,o){var a,s,c,l,u,d,p,f,h,m,v,g,y,_;for(h=0;h<o;h++){for(f=0,a=e[d=(p=h)*i],u=a*r[6],l=u,v=r[0],g=r[1],y=r[4],_=r[5],m=0;m<i;m++)s=e[d],c=s*v+a*g+l*y+u*_,u=l,l=c,a=s,n[f]=l,f++,d++;for(f--,p+=o*(i-1),a=e[--d],u=a*r[7],l=u,s=a,v=r[2],g=r[3],m=i-1;0<=m;m--)c=s*v+a*g+l*y+u*_,u=l,l=c,a=s,s=e[d],t[p]=n[f]+l,d--,f--,p-=o}}t.exports=function(e,t,n,r){if(!r)return;var i=new Uint16Array(e.length),o=new Float32Array(Math.max(t,n)),a=d(r);p(e,i,o,a,t,n),p(i,e,o,a,n,t)}},{}],15:[function(e,t,n){"function"==typeof Object.create?t.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},{}],16:[function(e,t,n){var o=e("object-assign"),r=e("./lib/base64decode"),i=e("./lib/wa_detect"),a={js:!0,wasm:!0};function s(e){if(!(this instanceof s))return new s(e);var t=o({},a,e||{});if(this.options=t,this.__cache={},this.has_wasm=i(),this.__init_promise=null,this.__modules=t.modules||{},this.__memory=null,this.__wasm={},this.__isLE=1===new Uint32Array(new Uint8Array([1,0,0,0]).buffer)[0],!this.options.js&&!this.options.wasm)throw new Error('mathlib: at least "js" or "wasm" should be enabled')}s.prototype.use=function(e){return this.__modules[e.name]=e,this.has_wasm&&this.options.wasm&&e.wasm_fn?this[e.name]=e.wasm_fn:this[e.name]=e.fn,this},s.prototype.init=function(){if(this.__init_promise)return this.__init_promise;if(!this.options.js&&this.options.wasm&&!this.has_wasm)return Promise.reject(new Error('mathlib: only "wasm" was enabled, but it\'s not supported'));var n=this;return this.__init_promise=Promise.all(Object.keys(n.__modules).map(function(t){var e=n.__modules[t];return n.has_wasm&&n.options.wasm&&e.wasm_fn?n.__wasm[t]?null:WebAssembly.compile(n.__base64decode(e.wasm_src)).then(function(e){n.__wasm[t]=e}):null})).then(function(){return n}),this.__init_promise},s.prototype.__base64decode=r,s.prototype.__reallocate=function(e){if(!this.__memory)return this.__memory=new WebAssembly.Memory({initial:Math.ceil(e/65536)}),this.__memory;var t=this.__memory.buffer.byteLength;return t<e&&this.__memory.grow(Math.ceil((e-t)/65536)),this.__memory},s.prototype.__instance=function(e,t,n){if(t&&this.__reallocate(t),!this.__wasm[e]){var r=this.__modules[e];this.__wasm[e]=new WebAssembly.Module(this.__base64decode(r.wasm_src))}if(!this.__cache[e]){var i={memoryBase:0,memory:this.__memory,tableBase:0,table:new WebAssembly.Table({initial:0,element:"anyfunc"})};this.__cache[e]=new WebAssembly.Instance(this.__wasm[e],{env:o(i,n||{})})}return this.__cache[e]},s.prototype.__align=function(e,t){var n=e%(t=t||8);return e+(n?t-n:0)},t.exports=s},{"./lib/base64decode":17,"./lib/wa_detect":23,"object-assign":24}],17:[function(e,t,n){t.exports=function(e){for(var t=e.replace(/[\r\n=]/g,""),n=t.length,r=new Uint8Array(3*n>>2),i=0,o=0,a=0;a<n;a++)a%4==0&&a&&(r[o++]=i>>16&255,r[o++]=i>>8&255,r[o++]=255&i),i=i<<6|"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(t.charAt(a));var s=n%4*6;return 0==s?(r[o++]=i>>16&255,r[o++]=i>>8&255,r[o++]=255&i):18==s?(r[o++]=i>>10&255,r[o++]=i>>2&255):12==s&&(r[o++]=i>>4&255),r}},{}],18:[function(e,t,n){t.exports=function(e,t,n){for(var r,i,o,a,s,c=t*n,l=new Uint16Array(c),u=0;u<c;u++)r=e[4*u],i=e[4*u+1],o=e[4*u+2],s=i<=r&&o<=r?r:o<=i&&r<=i?i:o,a=r<=i&&r<=o?r:i<=o&&i<=r?i:o,l[u]=257*(s+a)>>1;return l}},{}],19:[function(e,t,n){t.exports={name:"unsharp_mask",fn:e("./unsharp_mask"),wasm_fn:e("./unsharp_mask_wasm"),wasm_src:e("./unsharp_mask_wasm_base64")}},{"./unsharp_mask":20,"./unsharp_mask_wasm":21,"./unsharp_mask_wasm_base64":22}],20:[function(e,t,n){var E=e("glur/mono16"),k=e("./hsl_l16");t.exports=function(e,t,n,r,i,o){var a,s,c,l,u,d,p,f,h,m,v,g,y;if(!(0===r||i<.5)){2<i&&(i=2);var _=k(e,t,n),b=new Uint16Array(_);E(b,t,n,i);for(var w=r/100*4096+.5|0,A=257*o|0,C=t*n,S=0;S<C;S++)g=2*(_[S]-b[S]),Math.abs(g)>=A&&(a=e[y=4*S],s=e[1+y],c=e[2+y],d=257*((f=s<=a&&c<=a?a:a<=s&&c<=s?s:c)+(p=a<=s&&a<=c?a:s<=a&&s<=c?s:c))>>1,l=p===f?u=0:(u=d<=32767?4095*(f-p)/(f+p)|0:4095*(f-p)/(510-f-p)|0,a===f?65535*(s-c)/(6*(f-p))|0:s===f?21845+(65535*(c-a)/(6*(f-p))|0):43690+(65535*(a-s)/(6*(f-p))|0)),65535<(d+=w*g+2048>>12)?d=65535:d<0&&(d=0),0===u?a=s=c=d>>8:(h=2*d-(m=d<=32767?d*(4096+u)+2048>>12:d+((65535-d)*u+2048>>12))>>8,m>>=8,a=43690<=(v=l+21845&65535)?h:32767<=v?h+(6*(m-h)*(43690-v)+32768>>16):10922<=v?m:h+(6*(m-h)*v+32768>>16),s=43690<=(v=65535&l)?h:32767<=v?h+(6*(m-h)*(43690-v)+32768>>16):10922<=v?m:h+(6*(m-h)*v+32768>>16),c=43690<=(v=l-21845&65535)?h:32767<=v?h+(6*(m-h)*(43690-v)+32768>>16):10922<=v?m:h+(6*(m-h)*v+32768>>16)),e[y]=a,e[1+y]=s,e[2+y]=c)}}},{"./hsl_l16":18,"glur/mono16":14}],21:[function(e,t,n){t.exports=function(e,t,n,r,i,o){if(!(0===r||i<.5)){2<i&&(i=2);var a=t*n,s=4*a,c=2*a,l=2*a,u=4*Math.max(t,n),d=s,p=d+c,f=p+l,h=f+l,m=h+u,v=this.__instance("unsharp_mask",s+c+2*l+u+32,{exp:Math.exp}),g=new Uint32Array(e.buffer),y=new Uint32Array(this.__memory.buffer);y.set(g);var _=v.exports.hsl_l16||v.exports._hsl_l16;_(0,d,t,n),(_=v.exports.blurMono16||v.exports._blurMono16)(d,p,f,h,m,t,n,i),(_=v.exports.unsharp||v.exports._unsharp)(0,0,d,p,t,n,r,o),g.set(new Uint32Array(this.__memory.buffer,0,a))}}},{}],22:[function(e,t,n){t.exports="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"},{}],23:[function(e,t,n){var r;t.exports=function(){if(void 0!==r)return r;if(r=!1,"undefined"==typeof WebAssembly)return r;try{var e=new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,127,1,127,3,2,1,0,5,3,1,0,1,7,8,1,4,116,101,115,116,0,0,10,16,1,14,0,32,0,65,1,54,2,0,32,0,40,2,0,11]),t=new WebAssembly.Module(e),n=new WebAssembly.Instance(t,{});return 0!==n.exports.test(4)&&(r=!0),r}catch(e){}return r}},{}],24:[function(e,t,n){var c=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"!==Object.keys(Object.assign({},r)).join("")?void 0:1}catch(e){return}}()?Object.assign:function(e,t){for(var n,r,i=function(e){if(null!=e)return Object(e);throw new TypeError("Object.assign cannot be called with null or undefined")}(e),o=1;o<arguments.length;o++){for(var a in n=Object(arguments[o]))l.call(n,a)&&(i[a]=n[a]);if(c){r=c(n);for(var s=0;s<r.length;s++)u.call(n,r[s])&&(i[r[s]]=n[r[s]])}}return i}},{}],25:[function(e,t,n){var g=arguments[3],y=arguments[4],_=arguments[5],b=JSON.stringify;t.exports=function(e,t){for(var n,r=Object.keys(_),i=0,o=r.length;i<o;i++){var a=r[i],s=_[a].exports;if(s===e||s&&s.default===e){n=a;break}}if(!n){n=Math.floor(Math.pow(16,8)*Math.random()).toString(16);for(var c={},i=0,o=r.length;i<o;i++){var a=r[i];c[a]=a}y[n]=["function(require,module,exports){"+e+"(self); }",c]}var l=Math.floor(Math.pow(16,8)*Math.random()).toString(16),u={};u[n]=n,y[l]=["function(require,module,exports){var f = require("+b(n)+");(f.default ? f.default : f)(self);}",u];var d={};!function e(t){d[t]=!0;for(var n in y[t][1]){var r=y[t][1][n];d[r]||e(r)}}(l);var p="("+g+")({"+Object.keys(d).map(function(e){return b(e)+":["+y[e][0]+","+b(y[e][1])+"]"}).join(",")+"},{},["+b(l)+"])",f=window.URL||window.webkitURL||window.mozURL||window.msURL,h=new Blob([p],{type:"text/javascript"});if(t&&t.bare)return h;var m=f.createObjectURL(h),v=new Worker(m);return v.objectURL=m,v}},{}],"/":[function(a,e,t){var v=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},g=a("object-assign"),n=a("webworkify"),s=a("./lib/mathlib"),c=a("./lib/pool"),y=a("./lib/utils"),r=a("./lib/worker"),l=a("./lib/stepper"),_=a("./lib/tiler"),u={},b=!1;try{"undefined"!=typeof navigator&&navigator.userAgent&&(b=0<=navigator.userAgent.indexOf("Safari"))}catch(e){}var i=1;"undefined"!=typeof navigator&&(i=Math.min(navigator.hardwareConcurrency||1,4));var o={tile:1024,concurrency:i,features:["js","wasm","ww"],idle:2e3},d={quality:3,alpha:!1,unsharpAmount:0,unsharpRadius:0,unsharpThreshold:0},w=void 0,A=void 0;function p(){return{value:n(r),destroy:function(){if(this.value.terminate(),"undefined"!=typeof window){var e=window.URL||window.webkitURL||window.mozURL||window.msURL;e&&e.revokeObjectURL&&this.value.objectURL&&e.revokeObjectURL(this.value.objectURL)}}}}function f(e){if(!(this instanceof f))return new f(e);this.options=g({},o,e||{});var t="lk_"+this.options.concurrency;this.__limit=u[t]||y.limiter(this.options.concurrency),u[t]||(u[t]=this.__limit),this.features={js:!1,wasm:!1,cib:!1,ww:!1},this.__workersPool=null,this.__requested_features=[],this.__mathlib=null}f.prototype.init=function(){var t=this;if(this.__initPromise)return this.__initPromise;if(!1!==w&&!0!==w&&(w=!1,"undefined"!=typeof ImageData&&"undefined"!=typeof Uint8ClampedArray))try{new ImageData(new Uint8ClampedArray(400),10,10),w=!0}catch(e){}!1!==A&&!0!==A&&(A=!1,"undefined"!=typeof ImageBitmap&&(ImageBitmap.prototype&&ImageBitmap.prototype.close?A=!0:this.debug("ImageBitmap does not support .close(), disabled")));var n=this.options.features.slice();if(0<=n.indexOf("all")&&(n=["cib","wasm","js","ww"]),this.__requested_features=n,this.__mathlib=new s(n),0<=n.indexOf("ww")&&"undefined"!=typeof window&&"Worker"in window)try{var e=a("webworkify")(function(){});e.terminate(),this.features.ww=!0;var r="wp_"+JSON.stringify(this.options);u[r]?this.__workersPool=u[r]:(this.__workersPool=new c(p,this.options.idle),u[r]=this.__workersPool)}catch(e){}var i=this.__mathlib.init().then(function(e){g(t.features,e.features)}),o=void 0;return o=A?y.cib_support().then(function(e){t.features.cib&&n.indexOf("cib")<0?t.debug("createImageBitmap() resize supported, but disabled by config"):0<=n.indexOf("cib")&&(t.features.cib=e)}):Promise.resolve(!1),this.__initPromise=Promise.all([i,o]).then(function(){return t}),this.__initPromise},f.prototype.resize=function(t,o,e){var p=this;this.debug("Start resize...");var a=g({},d);if(isNaN(e)?e&&(a=g(a,e)):a=g(a,{quality:e}),a.toWidth=o.width,a.toHeight=o.height,a.width=t.naturalWidth||t.width,a.height=t.naturalHeight||t.height,0===o.width||0===o.height)return Promise.reject(new Error("Invalid output size: "+o.width+"x"+o.height));2<a.unsharpRadius&&(a.unsharpRadius=2);var f=!1,h=null;a.cancelToken&&(h=a.cancelToken.then(function(e){throw f=!0,e},function(e){throw f=!0,e}));var m=Math.ceil(Math.max(3,2.5*a.unsharpRadius|0));return this.init().then(function(){if(f)return h;if(p.features.cib){var i=o.getContext("2d",{alpha:Boolean(a.alpha)});return p.debug("Resize via createImageBitmap()"),createImageBitmap(t,{resizeWidth:a.toWidth,resizeHeight:a.toHeight,resizeQuality:y.cib_quality_name(a.quality)}).then(function(e){if(f)return h;if(!a.unsharpAmount)return i.drawImage(e,0,0),e.close(),i=null,p.debug("Finished!"),o;p.debug("Unsharp result");var t=document.createElement("canvas");t.width=a.toWidth,t.height=a.toHeight;var n=t.getContext("2d",{alpha:Boolean(a.alpha)});n.drawImage(e,0,0),e.close();var r=n.getImageData(0,0,a.toWidth,a.toHeight);return p.__mathlib.unsharp(r.data,a.toWidth,a.toHeight,a.unsharpAmount,a.unsharpRadius,a.unsharpThreshold),i.putImageData(r,0,0),r=n=t=i=null,p.debug("Finished!"),o})}var u={},d=function(o,r,a){var s=void 0,c=void 0,l=void 0,i=function(i){return p.__limit(function(){if(f)return h;var r=void 0;if(y.isCanvas(o))p.debug("Get tile pixel data"),r=s.getImageData(i.x,i.y,i.width,i.height);else{p.debug("Draw tile imageBitmap/image to temporary canvas");var e=document.createElement("canvas");e.width=i.width,e.height=i.height;var t=e.getContext("2d",{alpha:Boolean(a.alpha)});t.globalCompositeOperation="copy",t.drawImage(c||o,i.x,i.y,i.width,i.height,0,0,i.width,i.height),p.debug("Get tile pixel data"),r=t.getImageData(0,0,i.width,i.height),t=e=null}var n={src:r.data,width:i.width,height:i.height,toWidth:i.toWidth,toHeight:i.toHeight,scaleX:i.scaleX,scaleY:i.scaleY,offsetX:i.offsetX,offsetY:i.offsetY,quality:a.quality,alpha:a.alpha,unsharpAmount:a.unsharpAmount,unsharpRadius:a.unsharpRadius,unsharpThreshold:a.unsharpThreshold};return p.debug("Invoke resize math"),Promise.resolve().then(function(){return function(e){return Promise.resolve().then(function(){if(!p.features.ww)return p.__mathlib.resizeAndUnsharp(e,u);return new Promise(function(t,n){var r=p.__workersPool.acquire();if(h)h["catch"](function(e){return n(e)});r.value.onmessage=function(e){r.release();if(e.data.err)n(e.data.err);else t(e.data.result)};r.value.postMessage({opts:e,features:p.__requested_features,preload:{wasm_nodule:p.__mathlib.__}},[e.src.buffer])})})}(n)}).then(function(e){if(f)return h;r=null;var t=void 0;if(p.debug("Convert raw rgba tile result to ImageData"),w)t=new ImageData(new Uint8ClampedArray(e),i.toWidth,i.toHeight);else if((t=l.createImageData(i.toWidth,i.toHeight)).data.set)t.data.set(e);else for(var n=t.data.length-1;0<=n;n--)t.data[n]=e[n];return p.debug("Draw tile"),b?l.putImageData(t,i.toX,i.toY,i.toInnerX-i.toX,i.toInnerY-i.toY,i.toInnerWidth+1e-5,i.toInnerHeight+1e-5):l.putImageData(t,i.toX,i.toY,i.toInnerX-i.toX,i.toInnerY-i.toY,i.toInnerWidth,i.toInnerHeight),null})})};return Promise.resolve().then(function(){if(l=r.getContext("2d",{alpha:Boolean(a.alpha)}),y.isCanvas(o))return s=o.getContext("2d",{alpha:Boolean(a.alpha)}),null;if(y.isImage(o))return A?(p.debug("Decode image via createImageBitmap"),createImageBitmap(o).then(function(e){c=e})):null;throw new Error('".from" should be image or canvas')}).then(function(){if(f)return h;p.debug("Calculate tiles");var e=_({width:a.width,height:a.height,srcTileSize:p.options.tile,toWidth:a.toWidth,toHeight:a.toHeight,destTileBorder:m}),t=e.map(function(e){return i(e)});function n(){c&&(c.close(),c=null)}return p.debug("Process tiles"),Promise.all(t).then(function(){return p.debug("Finished!"),n(),r},function(e){throw n(),e})})},e=l(a.width,a.height,a.toWidth,a.toHeight,p.options.tile,m);return function e(t,n,r,i){if(f)return h;var o=t.shift(),a=v(o,2),s=a[0],c=a[1],l=t.length===0;i=g({},i,{toWidth:s,toHeight:c,quality:l?i.quality:Math.min(1,i.quality)});var u=void 0;if(!l){u=document.createElement("canvas");u.width=s;u.height=c}return d(n,l?r:u,i).then(function(){if(l)return r;i.width=s;i.height=c;return e(t,u,r,i)})}(e,t,o,a)})},f.prototype.resizeBuffer=function(e){var t=this,n=g({},d,e);return this.init().then(function(){return t.__mathlib.resizeAndUnsharp(n)})},f.prototype.toBlob=function(o,a,s){return a=a||"image/png",new Promise(function(t){if(o.toBlob)o.toBlob(function(e){return t(e)},a,s);else{for(var e=atob(o.toDataURL(a,s).split(",")[1]),n=e.length,r=new Uint8Array(n),i=0;i<n;i++)r[i]=e.charCodeAt(i);t(new Blob([r],{type:a}))}})},f.prototype.debug=function(){},e.exports=f},{"./lib/mathlib":1,"./lib/pool":9,"./lib/stepper":10,"./lib/tiler":11,"./lib/utils":12,"./lib/worker":13,"object-assign":24,webworkify:25}]},{},[])("/")});function Fc(e,t){var n=new Error(e);return n.code=t,n}function Ic(e){this.data=e;var t=String.fromCharCode.apply(null,e.subarray(0,4));if("II*\0"!==t&&"MM\0*"!==t)throw Fc("invalid TIFF signature","EBADDATA");this.big_endian="M"===t[0]}Ic.prototype.readUInt16=function(e,t){if(t+2>e.length)throw Fc("unexpected EOF","EBADDATA");return this.big_endian?256*e[t]+e[t+1]:e[t]+256*e[t+1]},Ic.prototype.readUInt32=function(e,t){if(t+4>e.length)throw Fc("unexpected EOF","EBADDATA");return this.big_endian?16777216*e[t]+65536*e[t+1]+256*e[t+2]+e[t+3]:e[t]+256*e[t+1]+65536*e[t+2]+16777216*e[t+3]},Ic.prototype.writeUInt16=function(e,t,n){if(n+2>e.length)throw Fc("TIFF data is too large","EBADDATA");this.big_endian?(e[n]=t>>>8&255,e[n+1]=255&t):(e[n]=255&t,e[n+1]=t>>>8&255)},Ic.prototype.writeUInt32=function(e,t,n){if(n+4>e.length)throw Fc("TIFF data is too large","EBADDATA");this.big_endian?(e[n]=t>>>24&255,e[n+1]=t>>>16&255,e[n+2]=t>>>8&255,e[n+3]=255&t):(e[n]=255&t,e[n+1]=t>>>8&255,e[n+2]=t>>>16&255,e[n+3]=t>>>24&255)},Ic.prototype.filter=function(n,e){function r(t){return function(e){return(!n||!n.onIFDEntry||!1!==n.onIFDEntry.call(i,t,e))&&e.value.length<=o}}var i=this,o=n&&n.maxEntrySize?n.maxEntrySize:100;this.output={buf:e,length:0};var t;if(this.output.buf[0]=this.data[0],this.output.buf[1]=this.data[1],this.output.buf[2]=this.data[2],this.output.buf[3]=this.data[3],this.output.length+=4,this.writeUInt32(this.output.buf,8,this.output.length),this.output.length+=4,t=this.readUInt32(this.data,4),this.processIFDSection(t,r(0)).entries.forEach(function(e){if((34665===e.tag||34853===e.tag||40965===e.tag)&&4===e.type){i.writeUInt32(i.output.buf,i.output.length,e.written_offset+8);var t=i.readUInt32(e.value,0);i.processIFDSection(t,r(e.tag))}}),this.output.length>this.output.buf.length)throw Fc("TIFF data is too large","EBADDATA");return this.output.length},Ic.prototype.readIFDEntry=function(e){var t,n,r=this.readUInt16(this.data,e),i=this.readUInt16(this.data,e+2),o=this.readUInt32(this.data,e+4);switch(i){case 1:case 2:case 6:case 7:t=1;break;case 3:case 8:t=2;break;case 4:case 9:case 11:t=4;break;case 5:case 10:case 12:t=8;break;default:return}var a=t*o;if(a<=4){if((n=this.data.subarray(e+8,e+12)).length<4)throw Fc("unexpected EOF","EBADDATA")}else{var s=this.readUInt32(this.data,e+8);if((n=this.data.subarray(s,s+a)).length<a)throw Fc("unexpected EOF","EBADDATA")}return{tag:r,type:i,count:o,value:n}},Ic.prototype.processIFDSection=function(e,t){var n=this,r=[],i=this.readUInt16(this.data,e);e+=2;for(var o=0;o<i;o+=1){var a=this.readIFDEntry(e+12*o);a&&t(a)&&r.push(a)}this.writeUInt16(this.output.buf,r.length,this.output.length),this.output.length+=2;var s=this.output.length;return r.forEach(function(e){if(e.written_offset=n.output.length,n.writeUInt16(n.output.buf,e.tag,n.output.length),n.writeUInt16(n.output.buf,e.type,n.output.length+2),n.writeUInt32(n.output.buf,e.count,n.output.length+4),e.value.length<=4){if(e.value.length+n.output.length+8>n.output.buf.length)throw Fc("TIFF data is too large","EBADDATA");n.output.buf.set(e.value,n.output.length+8)}n.output.length+=12}),this.writeUInt32(this.output.buf,0,this.output.length),this.output.length+=4,r.forEach(function(e,t){if(4<e.value.length){if(n.writeUInt32(n.output.buf,n.output.length,s+12*t+8),e.value.length+n.output.length>n.output.buf.length)throw Fc("TIFF data is too large","EBADDATA");n.output.buf.set(e.value,n.output.length),n.output.length+=e.value.length,n.output.length%2&&(n.output.buf[n.output.length]=255,n.output.length+=1)}}),{entries:r,next_ifb:this.readUInt32(this.data,e+12*i)}};function Tc(e,t){if("Exif\0\0"!==String.fromCharCode.apply(null,e.subarray(0,6)))throw Fc("invalid Exif signature","ENOTEXIF");var n=new e.constructor(e.length),r=new Ic(e.subarray(6));"Exif\0\0".split("").forEach(function(e,t){n[t]=e.charCodeAt(0)});var i=r.filter(t,n.subarray(6));return new e.constructor(n.subarray(0,i+6))}var Oc=0;function Nc(e){if(!(this instanceof Nc))return new Nc(e);e=e||{},this.output=[],this._state=Oc,this._removeICCandAPP=e.removeICCandAPP,this._removeExif=e.removeExif,this._filter=e.filter,this._removeComments=e.removeComments,this._removeImage=e.removeImage,this._comment=e.comment,this._maxEntrySize=e.maxEntrySize,this._onIFDEntry=e.onIFDEntry,this._markerCode=0,this._bytesLeft=0,this._segmentLength=0,this._app1buffer=null,this._app1pos=0,this._bytesRead=0,this._BufferConstructor=null,this._bufferUseAlloc=!1,this._bufferUseFrom=!1}function Rc(e){for(var t=e.toString(16).toUpperCase(),n=2-t.length;0<n;--n)t="0".concat(t);return"0x".concat(t)}function Dc(e,t,n){return e.slice&&e.copy&&e.writeDoubleBE?e.slice(t,n):e.subarray(t,n)}function Uc(e,t,n){if(e.length+n>t.length)throw new Error("buffer is too small");e.copy?e.copy(t,n):t.set(e,n)}Nc.prototype._error=function(e,t){if(12!==this._state){var n=new Error(e);n.code=t,this._state=12,this.onError(n)}},Nc.prototype._detectBuffer=function(e){this._BufferConstructor||(this._BufferConstructor=e.constructor,this._bufferUseAlloc="function"==typeof e.constructor.alloc,this._bufferUseFrom="function"==typeof e.constructor.from)},Nc.prototype._buffer=function(e){var t=this._BufferConstructor;return"number"==typeof e?this._bufferUseAlloc?t.alloc(e):new t(e):this._bufferUseFrom?t.from(e):new t(e)},Nc.prototype.push=function(e){var n,t,r=0;for(this._detectBuffer(e);r<e.length;){var i=e[r];switch(this._state){case Oc:if(255!==i)return void this._error("unknown file format","ENOTJPEG",r);r+=this._state=1;break;case 1:if(216!==i)return void this._error("unknown file format","ENOTJPEG",r);this.onData(this._buffer([255,216])),this._state=2,r+=1;break;case 2:if(218===this._markerCode){this._state=10;break}if(255!==i)return void this._error("unexpected byte at segment start: ".concat(Rc(i),"\n          (offset ").concat(Rc(this._bytesRead+r)," )"),"EBADDATA");this._state=3,r+=1;break;case 3:if(208<=i&&i<=217||1===i){this._markerCode=i,this._bytesLeft=0,this._segmentLength=0,217===this._markerCode?(this.onData(this._buffer([255,217])),this._state=12,this.onEnd()):this._state=4,r+=1;break}if(192<=i&&i<=254){this._markerCode=i,this._bytesLeft=2,this._segmentLength=0,this._state=4,r+=1;break}if(255!==i)return void this._error("unknown marker: ".concat(Rc(i),"\n          (offset ").concat(Rc(this._bytesRead+r)," )"),"EBADDATA");r+=1;break;case 4:for(;0<this._bytesLeft&&r<e.length;)this._segmentLength=256*this._segmentLength+e[r],--this._bytesLeft,r+=1;if(this._bytesLeft<=0){if(null!==this._comment&&void 0!==this._comment&&224!==this._markerCode){var o=void 0;try{o=unescape(encodeURIComponent(this._comment))}catch(e){o=this._comment}(n=this._buffer(5+o.length))[0]=255,n[1]=254,n[2]=o.length+3>>>8&255,n[3]=o.length+3&255,o.split("").forEach(function(e,t){n[t+4]=255&e.charCodeAt(0)}),n[n.length-1]=0,this._comment=null,this.onData(n)}224===this._markerCode?this._state=6:225===this._markerCode?this._state=this._filter&&this._removeExif?5:8:226===this._markerCode||238===this._markerCode?this._state=this._removeICCandAPP?5:6:226<this._markerCode&&this._markerCode<240?this._state=this._filter?5:6:254===this._markerCode?this._state=this._removeComments?5:6:this._state=this._removeImage?5:6,this._bytesLeft=Math.max(this._segmentLength-2,0)}break;case 5:r+=t=Math.min(this._bytesLeft,e.length-r),this._bytesLeft-=t,this._bytesLeft<=0&&(this._state=2);break;case 6:this._bytesLeft<=0?this._state=2:this._state=7,(n=this._buffer(4))[0]=255,n[1]=this._markerCode,n[2]=this._bytesLeft+2>>>8&255,n[3]=this._bytesLeft+2&255,this.onData(n);break;case 7:t=Math.min(this._bytesLeft,e.length-r),this.onData(Dc(e,r,r+t)),r+=t,this._bytesLeft-=t,this._bytesLeft<=0&&(this._state=2);break;case 8:this._app1buffer=this._buffer(this._bytesLeft),this._app1pos=0,this._state=9;break;case 9:var a=Dc(e,r,r+(t=Math.min(this._bytesLeft,e.length-r)));if(Uc(a,this._app1buffer,this._app1pos),this._app1pos+=a.length,r+=t,this._bytesLeft-=t,this._bytesLeft<=0){var s=this._app1buffer;if(this._app1buffer=null,225===this._markerCode&&69===s[0]&&120===s[1]&&105===s[2]&&102===s[3]&&0===s[4]&&0===s[5])if(this._removeExif)s=null;else try{s=Tc(s,{maxEntrySize:this._maxEntrySize,onIFDEntry:this._onIFDEntry})}catch(e){if(s=null,e.code&&"EBADDATA"!==e.code)return void this.onError(e)}else!0===this._filter&&(s=null);if(s){var c=this._buffer(4);c[0]=255,c[1]=this._markerCode,c[2]=s.length+2>>>8&255,c[3]=s.length+2&255,this.onData(c),this.onData(s)}this._state=2}break;case 10:for(var l=r;r<e.length;){if(255===e[r]){if(r+1<e.length&&(0===(i=e[r+1])||208<=i&&i<216)){r+=2;continue}break}r+=1}this._removeImage||this.onData(Dc(e,l,r)),r<e.length&&(this._state=11,r+=1);break;case 11:if(0===i||208<=i&&i<216||255===i){this._removeImage||this.onData(this._buffer([255,i])),this._state=255===i?11:10,r+=1;break}this._state=3;break;case 12:r+=1}}this._bytesRead+=e.length},Nc.prototype.end=function(){switch(this._state){case Oc:case 1:case 5:case 6:case 7:case 8:case 9:this._error("unexpected end of file (offset ".concat(Rc(this._bytesRead),")"),"EBADDATA");break;case 12:break;default:this.push(this._buffer([255,217]))}},Nc.prototype.onData=function(e){this.output.push(e)},Nc.prototype.onEnd=function(){},Nc.prototype.onError=function(e){throw e};function Lc(e){return new Promise(function(r,i){if(e){var o=new FileReader;o.onloadend=function(){var e=new Uint8Array(o.result);if(255===e[0]&&216===e[1]){var t=Nc({removeImage:!0,filter:!0,removeICC:!0});try{t.push(e),t.end()}catch(e){return void i(new Error("Bad image."))}var n=function(e){for(var t=0,n=0,r=0;r<e.length;r+=1)t+=e[r].length;for(var i=new Uint8Array(t),o=0;o<e.length;o+=1)i.set(e[o],n),n+=e[o].length;return i}(t.output);r(n.subarray(0,n.length-2))}r()},o.readAsArrayBuffer(e)}else r()})}function Pc(s,e,t){var c=1<arguments.length&&void 0!==e&&e,l=2<arguments.length&&void 0!==t&&t;return Rs(s).then(function(e){var t=new Uint8Array(e),n=Zs(e);if(255!==t[0]||216!==t[1])return s;var r=Nc({removeExif:!0,removeComments:!0,filter:!0,removeICCandAPP:!l});try{r.push(t),r.end()}catch(e){return console.error(e),s}var i=function(e){for(var t=0,n=0,r=0;r<e.length;r+=1)t+=e[r].length;for(var i=new Uint8Array(t),o=0;o<e.length;o+=1)i.set(e[o],n),n+=e[o].length;return i}(r.output),o=i.subarray(0,i.length-2);if(c&&n){var a=Js(n);o=Xs(o.buffer,a)}return new Blob([o])})}function jc(e,t){var n,r,i=t.currentCloud,o=t.cloudFolders,a=t.selectedCloudPath;if((e instanceof File||e instanceof Blob)&&(e={source:"local_file_system",mimetype:e.type,name:e.name,path:e.path||e.name,size:e.size,originalFile:e}),"dragged-from-web"===e.source){e.name=e.url.split("/").pop(),e.path=e.url,e.mimetype="text/html";var s=e.url.split(".").pop();s&&-1!==["jpg","jpeg","png","tiff","gif","bmp"].indexOf(s.toLowerCase())&&(e.thumbnail=e.url,e.mimetype="image/".concat(s))}if(e.link_path&&(e.source="url",e.path=e.link_path,e.name=e.display_name,e.mimetype=e.type),"cloud"===e.sourceKind&&i&&i.path){var c=i.path.map(function(e){return o[e]&&o[e].name}).filter(function(e){return e}).join("/"),l=o[a]&&o[a].name;l&&(c=c?"".concat(c,"/").concat(l):l),e.originalPath=c?"/".concat(c,"/").concat(e.name):"/".concat(e.name)}return e.uuid=new Array(16).join().replace(/(.|$)/g,function(){return(36*Math.random()|0).toString(36)[Math.random()<.5?"toString":"toUpperCase"]()}),e.uploadId=e.uuid,e.progress=0,e.progressSize="",e.size=(r=null,(n=e).size&&("number"==typeof n.size?r=n.size:"string"==typeof n.size&&n.size===parseInt(n.size,10).toString()&&(r=parseInt(n.size,10))),r),e}function Mc(e){return!isNaN(parseFloat(e))&&!isNaN(+e)}function Bc(c,e){function l(o,a){!function e(){!function(){var e=a.progress/100;if(!(1<e)){var t,n,r;r=.994,e=(t=e+(0<=e&&e<.2?.1:.2<=e&&e<.5?.04:.5<=e&&e<.8?.02:.8<=e&&e<.99?.005:0))<(n=0)?n:r<t?r:t,o.commit("SET_FILE_UPLOAD_PROGRESS",{uuid:a.uuid,progress:Math.round(100*e)});var i={totalBytes:Math.min(a.size,Math.round(a.size*Math.max(e,.01))),totalPercent:Math.round(100*e)};o.getters.onFileUploadProgress&&o.getters.onFileUploadProgress(bc(a,o.getters),i)}}(),setTimeout(function(){if(a)return a.state!==Hc?(o.commit("SET_FILE_UPLOAD_PROGRESS",{uuid:a.uuid,progress:100}),void(o.getters.onFileUploadProgress&&o.getters.onFileUploadProgress(bc(a,o.getters),{totalBytes:a.size,totalPercent:100}))):void e()},150)}()}var t=1<arguments.length&&void 0!==e?e:{};return{state:t=_objectSpread({files:{},uploadStarted:!1},t),mutations:{CLEAR_FILES:function(n){Object.keys(n.files).forEach(function(e){var t=n.files[e];Fn.set(t,"state",void 0),Fn.set(t,"uuid",void 0),Fn.delete(n.files,e)})},SET_UPLOAD_STARTED:function(e,t){e.uploadStarted=t},INITIALIZE_FILE:function(e,t){Fn.set(e.files,t.uuid,t)},MARK_FILE_AS_WAITING:function(e,t){var n=e.files[t];Fn.set(n,"state",Gc),Fn.set(n,"progress",0),Fn.set(n,"progressSize",0)},DESELECT_FILE:function(e,t){var n=e.files[t];Fn.set(n,"state",void 0),Fn.set(n,"uuid",void 0),Fn.delete(e.files,t)},DESELECT_FOLDER:function(n,r){Object.keys(n.files).forEach(function(e){var t=n.files[e];Za(t,r)&&(Fn.set(t,"state",void 0),Fn.set(t,"uuid",void 0),Fn.delete(n.files,e))})},MARK_FILE_AS_UPLOADING:function(e,t){var n=t.uuid,r=t.token,i=e.files[n];Fn.set(i,"state",Hc),r&&(i.token=r)},MARK_FILE_AS_PAUSED:function(e,t){var n=e.files[t];Fn.set(n,"state",qc)},MARK_FILE_AS_DONE:function(e,t){var n=t.uuid,r=t.uploadMetadata,i=e.files[n];r&&Object.keys(r).forEach(function(e){Fn.set(i,e,r[e])}),Fn.set(i,"state",Vc)},MARK_FILE_AS_FAILED:function(e,t){var n=e.files[t];n&&Fn.set(n,"state",Qc)},SET_FILE_UPLOAD_PROGRESS:function(e,t){var n=t.uuid,r=t.progress,i=t.progressSize,o=e.files[n];o&&(Fn.delete(o,"progress"),Fn.delete(o,"progressSize"),Fn.set(o,"progress",r),Fn.set(o,"progressSize",i))},SET_FILE_CROP_DATA:function(e,t){var n=t.uuid,r=t.cropData,i=t.imageData,o=e.files[n];Fn.set(o,"cropData",{originalImageSize:[i.naturalWidth,i.naturalHeight],cropArea:{position:[r.x,r.y],size:[r.width,r.height]}})},SET_FILE_ROTATION:function(e,t){var n=t.uuid,r=t.rotation,i=e.files[n];return 0!==r&&(Fn.set(i,"rotated",{value:Math.abs(r),direction:0<r?"CW":"CCW"}),!0)},SET_FILE_TRANSFORMATION:function(e,t){var n=t.uuid,r=t.blob,i=t.transform,o=e.files[n];o.state=Gc,o.originalSize||Fn.set(o,"originalSize",o.size),o.originalName||Fn.set(o,"originalName",o.name),"circle"!==i&&"crop"!==i||Fn.set(o,"cropped",!0),Fn.set(o,"transformed",r),Fn.set(o,"size",r.size),Fn.set(o,"name",r.name),Fn.set(o,"progress",0),Fn.set(o,"progressSize","")},REMOVE_FILE_TRANSFORMATION:function(e,t){var n=e.files[t];Fn.delete(n,"transformed"),Fn.delete(n,"cropped"),Fn.delete(n,"cropData"),Fn.delete(n,"rotated"),n.originalSize&&(Fn.set(n,"size",n.originalSize),Fn.delete(n,"originalSize")),n.originalName&&(Fn.set(n,"name",n.originalName),Fn.delete(n,"originalName"))},REMOVE_SOURCE_FROM_WAITING:function(n,r){Object.keys(n.files).forEach(function(e){var t=n.files[e];t.source===r&&(Fn.set(t,"state",void 0),Fn.set(t,"uuid",void 0),Fn.delete(n.files,e))})},REMOVE_CLOUDS_FROM_WAITING:function(n){Object.keys(n.files).forEach(function(e){var t=n.files[e];"cloud"===t.sourceKind&&(Fn.set(t,"state",void 0),Fn.set(t,"uuid",void 0),Fn.delete(n.files,e))})},UPDATE_FILE_AFTER_RESIZE:function(e,t){var n=t.uuid,r=t.blob,i=e.files[n];Fn.set(i,"size",r.size),Fn.set(i,"progress",0),Fn.set(i,"progressSize","")}},actions:{addFile:function(a,s){return new Promise(function(t){if(s&&void 0!==s.state)return a.dispatch("cancelUpload",s.uuid),a.commit("DESELECT_FILE",s.uuid),void t();if(s&&s.folder)return a.dispatch("addCloudFolder",{name:s.source,path:s.path}),void t();var r,n=jc(s,a);(r=n,a.getters.onFileSelected?new Promise(function(e,t){try{var n=a.getters.onFileSelected(bc(r,a.getters));n instanceof Promise?n.then(e).catch(t):e(n)}catch(e){t(e)}}):Promise.resolve()).then(function(e){var i,o;e&&(n=_objectSpread({},n,{name:e.name||e.filename||n.name})),(i=s,(o={imageMax:a.getters.imageMax,imageMin:a.getters.imageMin,shouldBlock:a.getters.imageMinMaxBlock}).shouldBlock?0!==s.type.indexOf("image")?Promise.resolve():new Promise(function(t,n){var r=new FileReader;r.onload=function(){var e=new Image;e.onload=function(){return o.imageMin&&o.imageMin[0]>e.width?n(new Error("Incorrect image size. Minimum width is ".concat(o.imageMin[0],"px but image have ").concat(e.width,"px"))):o.imageMin&&o.imageMin[1]>e.height?n(new Error("Incorrect image size. Minimum height is ".concat(o.imageMin[1],"px but image have ").concat(e.height,"px"))):o.imageMax&&o.imageMax[0]<e.width?n(new Error("Incorrect image size. Maximum width is ".concat(o.imageMax[0],"px but image have ").concat(e.width,"px"))):o.imageMax&&o.imageMax[1]<e.height?n(new Error("Incorrect image size. Maximum height is ".concat(o.imageMax[1],"px but image have ").concat(e.height,"px"))):t()},e.src=r.result},r.readAsDataURL(i)}):Promise.resolve()).then(function(){return function(){if(!a.getters.maxFiles||(a.getters.fileCount||0)<a.getters.maxFiles)return!1;var e=1===a.getters.maxFiles?"file":"files",t=Sc(a.getters.lang,a.getters.customText).ERROR_MAX_FILES_REACHED.replace("{maxFiles}",a.getters.maxFiles).replace("{filesText}",e);return a.dispatch("showNotification",t),!0}()||function(e){if(_c(e,a.getters.accept))return!0;var t=Sc(a.getters.lang,a.getters.customText).ERROR_FILE_NOT_ACCEPTABLE.replace("{displayName}",Cc(e)).replace("{types}",a.getters.accept);return a.dispatch("showNotification",t),!1}(n)&&function(e){if(void 0===a.getters.maxSize||!e.size)return!0;if(e.size<a.getters.maxSize)return!0;var t=Sc(a.getters.lang,a.getters.customText).ERROR_FILE_TOO_BIG.replace("{displayName}",Cc(e)).replace("{roundFileSize}",Ac(a.getters.maxSize));return a.dispatch("showNotification",t),!1}(n)&&(Wc("Selected file:",s),a.commit("INITIALIZE_FILE",n),a.commit("MARK_FILE_AS_WAITING",n.uuid),!0===a.getters.startUploadingWhenMaxFilesReached&&a.getters.onlyFilesWaiting.length===a.getters.maxFiles&&a.dispatch("startUploading"),!a.getters.uploadStarted&&a.getters.uploadInBackground&&a.dispatch("uploadMoreMaybe"),Ja(n)&&es(n)&&1===a.getters.maxFiles&&!a.getters.disableTransformer&&!a.getters.uploadStarted?a.commit("CHANGE_ROUTE",["transform",n.uuid]):1===a.getters.maxFiles||1<a.getters.maxFiles&&a.getters.fileCount===a.getters.maxFiles&&"summary"!==a.getters.route[0]?a.commit("CHANGE_ROUTE",["summary"]):1<a.getters.maxFiles&&"local_file_system"===n.source&&"summary"!==a.getters.route[0]&&a.commit("CHANGE_ROUTE",["summary"])),t()}).catch(function(e){return s.uuid&&(a.dispatch("cancelUpload",s.uuid),a.commit("DESELECT_FILE",s.uuid)),a.dispatch("showNotification",e.message?e.message:e),t()})}).catch(function(e){s.uuid&&(a.dispatch("cancelUpload",s.uuid),a.commit("DESELECT_FILE",s.uuid)),a.dispatch("showNotification",e.message?e.message:e),t()})})},finishUploadsMaybe:function(e){var t=e.dispatch,n=e.getters,r=n.allowManualRetry,i=n.filesDone,o=n.filesList,a=n.filesFailed;n.uploadStarted&&o.length===i.length+a.length&&(r&&a.length||t("allUploadsDone"))},startUploading:function(e){if(!e.getters.uploadStarted){e.dispatch("checkNetworkNavigator"),e.getters.onUploadStarted&&e.getters.onUploadStarted(wc(e.getters.filesList,e.getters)),e.commit("SET_UPLOAD_STARTED",!0),e.commit("UPDATE_MOBILE_NAV_ACTIVE",!1);var t=e.getters.route[0];"transform"!==t&&"summary"!==t&&e.commit("CHANGE_ROUTE",["summary"]),e.dispatch("uploadMoreMaybe")}},uploadMoreMaybe:function(e){e.getters.filesUploading.length<e.getters.concurrency&&0<e.getters.onlyFilesWaiting.length?(e.dispatch("uploadOne").then(function(){return e.dispatch("uploadMoreMaybe")}).catch(function(){return e.dispatch("uploadMoreMaybe")}),e.dispatch("uploadMoreMaybe")):e.dispatch("finishUploadsMaybe")},uploadOne:function(n,e){var t,r=e||n.getters.onlyFilesWaiting[0],i=_objectSpread({progressInterval:10},n.getters.uploadConfig,{onRetry:function(e){n.dispatch("checkNetworkXHR"),n.getters.uploadConfig&&n.getters.uploadConfig.onRetry&&n.getters.uploadConfig.onRetry(e)},onProgress:function(e){n.commit("SET_FILE_UPLOAD_PROGRESS",{uuid:r.uuid,progress:e.totalPercent,progressSize:Ac(e.totalBytes)}),n.getters.onFileUploadProgress&&n.getters.onFileUploadProgress(bc(r,n.getters),e)}}),o={},a=_objectSpread({},n.getters.storeTo);if(n.getters.disableStorageKey&&(n.getters.storeTo&&n.getters.storeTo.path?a.path="".concat(n.getters.storeTo.path).concat(r.name):a.path=r.name),"cloud"!==r.sourceKind&&(a.filename=r.name),n.commit("MARK_FILE_AS_UPLOADING",{uuid:r.uuid,token:o}),Wc("Upload started:",r),r.transformed)t=n.dispatch("resizeImageMaybe",r.transformed).then(function(e){return n.dispatch("runCallbackUploadStarted",r.uuid),e}).then(function(e){var t=n.getters.removeExif;return t?Pc(e,t.keepOrientation,t.keepICCandAPP):e}).then(function(e){return n.getters.files[r.uuid]?(e&&"[object Blob]"===e.toString()&&(e=new File([e],e.name)),c.upload(e,i,a,o)):Promise.resolve()});else if(r.originalFile)t=n.dispatch("resizeImageMaybe",r.originalFile).then(function(e){return n.commit("UPDATE_FILE_AFTER_RESIZE",{uuid:r.uuid,blob:e}),n.dispatch("runCallbackUploadStarted",r.uuid),e}).then(function(e){var t=n.getters.removeExif;return t&&(e=Pc(e,t.keepOrientation,t.keepICCandAPP)),n.getters.files[r.uuid]?(e&&"[object Blob]"===e.toString()&&(e=function(t,n){var r=window.File;try{return new r([t],n)}catch(e){return new(r=function(){function i(e,t){var n,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};return _classCallCheck(this,i),(n=_possibleConstructorReturn(this,_getPrototypeOf(i).call(this,e,r))).lastModifiedDate=new Date,n.lastModified=n.lastModifiedDate,n.name=t,n}return _inherits(i,_wrapNativeSuper(Blob)),i}())([t],n)}}(e,e.name)),c.upload(e,i,a,o)):Promise.resolve()});else if("url"===r.source||"dragged-from-web"===r.source)n.dispatch("runCallbackUploadStarted",r.uuid),t=c.storeURL(r.path,a,o);else if("cloud"===r.sourceKind){var s={};n.getters.customSourcePath&&(s.customSourcePath=n.getters.customSourcePath),n.getters.customSourceContainer&&(s.customSourceContainer=n.getters.customSourceContainer),n.dispatch("runCallbackUploadStarted",r.uuid),t=n.getters.cloudClient.store(r.source,r.path,a,s,o)}return!r.transformed&&"local_file_system"!==r.source&&n.getters.uploadStarted&&l(n,r),t.then(function(e){if(e){if(r.transformed||"local_file_system"===r.source||n.commit("SET_FILE_UPLOAD_PROGRESS",{uuid:r.uuid,progress:100,progressSize:e.size}),e.error&&e.error.text)throw new Error(e.error.text);var t=_objectSpread({},r,{},e);return delete t.uuid,n.commit("MARK_FILE_AS_DONE",{uuid:r.uuid,uploadMetadata:t}),void 0!==n.getters.onFileUploadFinished&&n.getters.onFileUploadFinished(bc(t,n.getters)),Wc("Upload done:",r),e}n.commit("MARK_FILE_AS_DONE",{uuid:r.uuid})}).catch(function(e){navigator.onLine||n.dispatch("onNetworkError",!0),n.commit("SET_FILE_UPLOAD_PROGRESS",{uuid:r.uuid,progress:100}),n.commit("MARK_FILE_AS_FAILED",r.uuid),void 0!==n.getters.onFileUploadFailed&&n.getters.onFileUploadFailed(bc(r,n.getters),e),Wc("Upload failed:",r,e.message)}),t},runCallbackUploadStarted:function(e,t){var n=e.state,r=e.getters;if(r.onFileUploadStarted){var i=n.files[t];r.onFileUploadStarted(bc(i,r))}},cancelUpload:function(e,t){var n=e.state;if(t){var r=n.files[t];r&&r.token&&r.token.cancel&&r.token.cancel()}},cancelFolderUpload:function(e,t){var n=e.dispatch,r=e.state;Ec(r.files).filter(function(e){return"cloud"!==e.sourceKind||0<=e.path.indexOf(t.path)}).map(function(e){return e.uuid}).forEach(function(e){n("cancelUpload",e)})},cancelAllUploads:function(e){var t=e.dispatch,n=e.state;Object.keys(n.files).forEach(function(e){t("cancelUpload",e)})},deselectAllFiles:function(t){t.dispatch("cancelAllUploads"),t.getters.filesList.forEach(function(e){e&&e.uuid&&t.commit("DESELECT_FILE",e.uuid)})},deselectFolder:function(e,t){e.dispatch("cancelFolderUpload",t),e.commit("DESELECT_FOLDER",t)},resizeImageMaybe:function(e,o){var a=e.dispatch,t=e.getters,s=t.imageDim,c=t.imageMin,l=t.imageMax,u=t.imageMinMaxBlock;return o&&es(o)&&(s||c||l)?new Promise(function(n){var r=new Image,i=window.URL.createObjectURL(o);r.src=i,r.onload=function(){window.URL.revokeObjectURL(i);var e={width:r.width,height:r.height},t=e.width/e.height;return u?Promise.resolve(o):(s?s[0]?(e.width=s[0],e.height=e.width/t):s[1]&&(e.height=s[1],e.width=e.height*t):(c&&(e.width<c[0]&&(e.width=c[0],e.height=e.width/t),e.height<c[1]&&(e.height=c[1],e.width=e.height*t)),l&&(e.width>l[0]&&(e.width=l[0],e.height=e.width/t),e.height>l[1]&&(e.height=l[1],e.width=e.height*t))),e.width=parseInt(e.width,10),e.height=parseInt(e.height,10),r.width!==e.width&&r.height!==e.height?a("resizeImage",{blob:o,config:e}).then(function(e){return n(e)}).catch(function(){return n(o)}):n(o))}}):Promise.resolve(o)},resizeImage:function(e,t){var u,d,n=t.blob,r=t.config;return u=n,d=r,new Promise(function(o,e){var a=u.slice||u.webkitSlice||u.mozSlice,s=u.name.split(".").pop().toLowerCase();if(-1!==["bmp","jpg","jpeg","png"].indexOf(s)){var c,l=new Image;l.onload=function(){window.URL.revokeObjectURL(l.src);var e="jpeg"===s||"jpg"===s?3:void 0,t=Math.min(l.height*d.width/d.height,l.width),n="png"===s||"image/png"===u.type,r=document.createElement("canvas"),i=document.createElement("canvas");r.width=t,r.height=l.height,i.width=d.width,i.height=d.height,r.getContext("2d").drawImage(l,0,0,t,l.height),$c.resize(r,i,{alpha:n,unsharpAmount:80,unsharpRadius:.6,unsharpThreshold:2}).then(function(){return $c.toBlob(i,u.type,e)}).then(function(e){var t,n;c&&(n=a.call(e,20),t=new Blob([c,n],{type:u.type}));var r=u.name;(u=t||e).name=r,o(u)})},l.onerror=function(){window.URL.revokeObjectURL(l.src),e(new Error("Bad image."))},Lc(u).then(function(e){c=e,l.src=window.URL.createObjectURL(u)})}else o(u)})},setFileCropData:function(e,t){var n=e.getters,r=e.commit,i=t.uuid,o=t.cropData,a=t.imageData,s=t.rotation,c=n.files[i];return r("SET_FILE_ROTATION",{uuid:i,rotation:s}),Mc(o.x)&&void 0!==Mc(o.y)&&o.width&&o.height&&(180===s?a.naturalWidth!==o.width||a.naturalHeight!==o.height:a.naturalHeight!==o.width||a.naturalWidth!==o.height)&&(r("SET_FILE_CROP_DATA",{uuid:i,cropData:o,imageData:a}),"function"==typeof n.onFileCropped&&n.onFileCropped(bc(c,n))),!1},transformImage:function(e,t){return e.commit("CHANGE_ROUTE",["transform",t])},pauseAllUploads:function(e){var t=e.commit,n=e.getters.filesUploading;n.length&&n.forEach(function(e){e.token&&e.token.pause&&(e.token.pause(),t("MARK_FILE_AS_PAUSED",e.uuid))})},retryAllFailedFiles:function(e){var t=e.commit,n=e.dispatch,r=e.getters,i=r.filesFailed,o=r.filesPaused;o.length&&o.forEach(function(e){e.token&&e.token.resume&&(e.token.resume(),t("MARK_FILE_AS_UPLOADING",{uuid:e.uuid}))}),i.length&&i.forEach(function(e){t("MARK_FILE_AS_WAITING",e.uuid),n("uploadMoreMaybe")})}},getters:{files:function(e){return e.files},filesList:function(e){return Ec(e.files)},filesUploading:function(e,t){return t.filesList.filter(function(e){return e.state===Hc})},filesDone:function(e,t){return t.filesList.filter(function(e){return e.state===Vc})},filesFailed:function(e,t){return t.filesList.filter(function(e){return e.state===Qc})},filesPaused:function(e,t){return t.filesList.filter(function(e){return e.state===qc})},fileCount:function(e,t){return t.filesList.length},onlyFilesWaiting:function(e,t){return t.filesList.filter(function(e){return e.state===Gc})},uploadStarted:function(e){return e.uploadStarted},filesWaiting:function(e,t){var n=t.filesList;return e.uploadStarted?n.filter(function(e){return e.state===Gc}):n},filesNeededCount:function(e,t){return t.minFiles-t.filesWaiting.length},canStartUpload:function(e,t){var n=t.filesWaiting,r=t.minFiles;return n.length>=r},canAddMoreFiles:function(e,t){var n=t.filesWaiting,r=t.maxFiles;return n.length<r}}}}function zc(){var n=this,e=n.$createElement,r=n._self._c||e;return r("modal",[r("div",{attrs:{slot:"header"},slot:"header"},[n.shouldGoBack?r("div",{staticClass:"fsp-transformer__go-back",attrs:{title:n.t("Go back")},on:{click:n.goBack}}):n._e(),n._v(" "),r("content-header",{attrs:{"hide-menu":!0}},[r("span",{staticClass:"fsp-header-text--visible"},[n._v(n._s(n.t("Edit Image")))])])],1),n._v(" "),r("div",{staticClass:"fst-sidebar",attrs:{slot:"sidebar"},slot:"sidebar"},n._l(n.options,function(t){return r("div",{key:t,staticClass:"fst-sidebar__option",class:n.getSidebarClasses(t),attrs:{title:n.t(n.capitalize(t)),tabindex:"0"},on:{click:function(){return n.handleClick(t)},keyup:function(e){return!e.type.indexOf("key")&&n._k(e.keyCode,"enter",13,e.key,"Enter")?null:n.handleClick(t)}}},[r("span",{staticClass:"fst-icon",class:n.genIconClass(t)}),n._v("\n      "+n._s(n.t(n.capitalize(t)))+"\n    ")])}),0),n._v(" "),r("div",{staticClass:"fsp-transformer",attrs:{slot:"body"},slot:"body"},["loading"===n.state?r("loading"):n._e(),n._v(" "),"errored"===n.state?r("div",{staticClass:"fsp-transformer__error"},[r("div",{staticClass:"fst-icon--broken-image"}),n._v("\n      "+n._s(n.t("This image cannot be edited"))+"\n    ")]):n._e(),n._v(" "),r("img",{directives:[{name:"show",rawName:"v-show",value:"loading"!==n.state&&"errored"!==n.state,expression:"state !== 'loading' && state !== 'errored'"}],ref:"image",staticStyle:{"max-width":"100%"}}),n._v(" "),r("div",{directives:[{name:"show",rawName:"v-show",value:"rotate"===n.state,expression:"state === 'rotate'"}],staticClass:"fsp-transformer__rotate"},[r("div",{staticClass:"fsp-transformer__rotate-left",attrs:{title:"Rotate -90°"},on:{click:function(){return n.rotate(-90)}}}),n._v(" "),r("div",{staticClass:"fsp-transformer__rotate-right",attrs:{title:"Rotate 90°"},on:{click:function(){return n.rotate(90)}}})]),n._v(" "),r("footer-nav",{attrs:{slot:"footer","is-visible":!n.uploadStarted},slot:"footer"},[r("span",{staticClass:"fsp-button fsp-button--cancel",class:{"fsp-button--cancel-disabled":!n.file.transformed||"loading"===n.state},attrs:{slot:"nav-left"},on:{click:n.handleReset},slot:"nav-left"},[n._v("\n        "+n._s(n.t("Reset"))+"\n      ")]),n._v(" "),r("div",{attrs:{slot:"nav-right"},slot:"nav-right"},["ready"!==n.state&&"loading"!==n.state&&"errored"!==n.state?r("span",{staticClass:"fsp-button fsp-button--outline",attrs:{title:"Save",tabindex:"0"},on:{click:n.handleApply,keyup:function(e){return!e.type.indexOf("key")&&n._k(e.keyCode,"enter",13,e.key,"Enter")?null:n.handleApply(e)}}},[n._v("\n          "+n._s(n.t("Save"))+"\n        ")]):1===n.maxFiles?r("span",{staticClass:"fsp-button fsp-button--primary",class:{"fsp-button--disabled":"loading"===n.state},attrs:{title:n.t("Upload"),tabindex:"0"},on:{click:n.handleUpload,keyup:function(e){return!e.type.indexOf("key")&&n._k(e.keyCode,"enter",13,e.key,"Enter")?null:n.handleUpload(e)}}},[n._v("\n          "+n._s(n.t("Upload"))+"\n        ")]):n.cropForce&&n.filesNotCropped.length&&"loading"!==n.state?r("span",{staticClass:"fsp-button fsp-button--primary",attrs:{title:"Next",tabindex:"0"},on:{click:n.handleNext,keyup:function(e){return!e.type.indexOf("key")&&n._k(e.keyCode,"enter",13,e.key,"Enter")?null:n.handleNext(e)}}},[n._v("\n          "+n._s(n.t("Next"))+"\n        ")]):r("span",{staticClass:"fsp-button fsp-button--primary",class:{"fsp-button--disabled":"loading"===n.state},attrs:{title:"Done",tabindex:"0"},on:{click:n.handleDone,keyup:function(e){return!e.type.indexOf("key")&&n._k(e.keyCode,"enter",13,e.key,"Enter")?null:n.handleDone(e)}}},[n._v("\n          "+n._s(n.t("Done"))+"\n        ")])])]),n._v(" "),r("footer-nav",{attrs:{slot:"footer","is-visible":n.uploadStarted,"full-width":!0},slot:"footer"},[r("span",{attrs:{slot:"nav-center"},slot:"nav-center"},[r("progress-bar",{attrs:{progress:n.file.progress}})],1)])],1)])}var $c=xc({tile:200}),Wc=Ki.context("picker"),Gc="waiting",Hc="uploading",Vc="done",Qc="failed",qc="paused",Yc=Ki.context("picker"),Kc={components:{ContentHeader:ha,FooterNav:ks,Loading:ys,Modal:Va,ProgressBar:Ks},beforeDestroy:function(){this.cropper&&(this.cropper.destroy(),this.cropper=null)},mounted:function(){var e=this;Yc("Transform component mounted"),this.$nextTick(function(){e.initialize()})},computed:_objectSpread({},ra.mapGetters(["getModuleUrl","apiClient","cropAspectRatio","cropFiles","cropForce","files","maxFiles","route","transformations","uploadStarted","filesList"]),{filesNotCropped:function(){return this.filesList.filter(function(e){return es(e)&&!e.cropped})},options:function(){var e=[];return this.transformations.crop&&e.push("crop"),this.transformations.mask&&e.push("mask"),this.transformations.circle&&(e.push("circle"),"number"!=typeof this.cropAspectRatio||isNaN(this.cropAspectRatio)||1===this.cropAspectRatio||e.pop()),this.transformations.rotate&&e.push("rotate"),e},shouldGoBack:function(){return!this.uploadStarted&&(!this.cropFiles||1<this.maxFiles)}}),data:function(){return{cachedURL:null,cropper:null,ctx:null,fabric:null,file:{},hasCircle:!1,maskContainer:null,oImg:null,pendingApply:!1,rotation:0,state:"loading"}},methods:_objectSpread({},ra.mapActions(["deselectAllFiles","resizeImageMaybe","startUploading","uploadOne"]),{apply:function(c){var l=this,u=this.file.mimetype,d=this.file.name;return this.pendingApply=!1,new Promise(function(t){var e,n,r,i,o=l.cropper.getCroppedCanvas();if("circle"===l.state&&(o=l.getRoundedCanvas(o),l.hasCircle=!0),"mask"===l.state&&(o=l.getMaskedCanvas(o),l.hasCircle=!0),l.hasCircle||(e=l.file,n=e.name&&e.name.split(".").pop().toLowerCase(),r=e.type||e.mimetype,i=0<=["image/svg","image/svg+xml"].indexOf(r),"svg"===n||i)){var a=l.file.name&&l.file.name.split(".").pop().toLowerCase();u="image/png",d="png"===a?d:"".concat(d,".png")}var s=l.state;l.state="loading",o.toBlob(function(e){l.resetEXIFOrientation(e).then(function(e){l.cropper&&(e.name=d,l.$store.dispatch("setFileCropData",{uuid:l.file.uuid,cropData:l.cropper.getData(!0),imageData:l.cropper.getImageData(),rotation:l.rotation}),l.$store.commit("SET_FILE_TRANSFORMATION",{uuid:l.file.uuid,blob:e,transform:s}),c||l.cropper.replace(window.URL.createObjectURL(e))),t()})},u)})},capitalize:function(e){return e&&e[0].toUpperCase()+e.slice(1)},getMaskedCanvas:function(e){var t=document.createElement("canvas"),n=t.getContext("2d");return t.width=e.width,t.height=e.height,n.imageSmoothingEnabled=!0,n.drawImage(this.svgMask,0,0,t.width,t.height),n.globalCompositeOperation="source-out",n.drawImage(e,0,0,t.width,t.height),t},getRoundedCanvas:function(e){var t=document.createElement("canvas"),n=t.getContext("2d"),r=e.width,i=e.height;return t.width=r,t.height=i,n.imageSmoothingEnabled=!0,n.drawImage(e,0,0,r,i),n.globalCompositeOperation="destination-in",n.beginPath(),n.arc(r/2,i/2,Math.min(r,i)/2,0,2*Math.PI,!0),n.fill(),t},getImageURL:function(n){var r=this;return new Promise(function(t){if(r.cachedURL)return t(r.cachedURL);if(n.originalFile)return r.resizeImageMaybe(n.originalFile).then(function(e){r.cachedURL=window.URL.createObjectURL(e),t(r.cachedURL)});if(n.state!==Hc)return r.uploadOne(n).then(function(e){r.cachedURL=r.signUrl(e.url),t(r.cachedURL)}).catch(function(){r.state="errored",t()});return function e(){n.state===Hc?setTimeout(e,100):(r.cachedURL=r.signUrl(n.url),t(r.cachedURL))}()})},genIconClass:function(e){return this.state!==e||this.uploadStarted||"loading"===this.state||"errored"===this.state?"fst-icon--".concat(e,"-black"):"fst-icon--".concat(e,"-blue")},getSidebarClasses:function(e){return{"fst-sidebar__option--active":e===this.state,"fst-sidebar__option--disabled":"loading"===this.state||"errored"===this.state||this.uploadStarted}},goBack:function(){1===this.maxFiles&&(this.file&&this.$store.commit("REMOVE_FILE_TRANSFORMATION",this.file.uuid),this.$store.dispatch("deselectAllFiles")),this.$store.commit("GO_BACK_WITH_ROUTE")},handleApply:function(){if("crop"===this.state||"circle"===this.state){var e=this.cropper.getCropBoxData();if(!e.width||!e.height)return}"ready"!==this.state&&"loading"!==this.state&&"errored"!==this.state&&this.apply()},handleReset:function(){"loading"!==this.state&&(this.file&&this.$store.commit("REMOVE_FILE_TRANSFORMATION",this.file.uuid),this.state="loading",this.hasCircle=!1,this.rotation=0,this.cropper.destroy(),this.$refs.image.src="",this.initialize())},handleClick:function(e){this.state=e},handleNext:function(){if("loading"!==this.state){var e=this.filesNotCropped[0];this.cachedURL=null,this.state="loading",this.hasCircle=!1,this.rotation=0,this.$refs.image.src="",this.cropper.destroy(),this.initialize(e.uuid)}},handleDone:function(){var e=this;"ready"!==this.state&&"loading"!==this.state&&"errored"!==this.state?this.apply(!0).then(function(){console.log("crop done!!!!"),e.goBack()}):"loading"!==this.state&&this.goBack()},handleUpload:function(){var e=this;"ready"!==this.state&&"loading"!==this.state&&"errored"!==this.state?this.apply(!0).then(function(){return e.startUploading()}):"loading"!==this.state&&this.startUploading()},initialize:function(e){var r=this,i={aspectRatio:this.cropAspectRatio,autoCrop:!1,autoCropArea:1,background:!1,center:!1,dragMode:"none",guides:!1,toggleDragModeOnDblclick:!1,viewMode:1,zoomable:!0};e=e||this.route[1],this.file=this.files[e],$i(this.getModuleUrl("fs-cropper"),"fs-cropper").then(function(n){r.getImageURL(r.file).then(function(e){Yc("Image transform URL ".concat(e));var t=r.$refs.image;t&&(t.src=e,t.addEventListener("ready",function(){Yc("Image for transformation loaded"),r.state="ready"}),t.addEventListener("error",function(e){Yc("Cannot load image to crop ".concat(e," imgTag")),r.state="errored"}),r.cropper=new n(t,i))}).catch(function(e){Yc("Cannot load image to crop ".concat(e)),r.state="errored"})}).catch(function(e){Yc("Cannot load cropper module ".concat(e)),r.state="errored"})},resetEXIFOrientation:function(r){return"image/jpeg"!==r.type?Promise.resolve(r):Rs(r).then(function(e){var t=Js(1),n=Xs(e,t);return new Blob([n],{type:r.type})})},rotate:function(e){this.rotation+=e,270===this.rotation?this.rotation=-90:-180===this.rotation&&(this.rotation=180),this.cropper.rotate(e)},showSVGMask:function(u){var d=this;u.loadSVGFromURL(this.transformations.mask.url,function(e){var t=e[0];if(t&&t.d){var n=document.createElement("canvas"),r=Math.ceil(t.width),i=Math.ceil(t.height),o=new u.Canvas(n);o.setDimensions({width:r,height:i});var a=new u.Path(t.d,{width:r,height:i,top:0,left:0,fill:"#000000",globalCompositeOperation:"destination-out"}),s=new u.Rect({width:r+100,height:i+100,left:0,top:0,fill:d.transformations.mask.color,stroke:d.transformations.mask.color,strokeWidth:10});o.add(s),o.add(a),o.renderAll();var c=o.toDataURL(),l=new Image;l.src=c,(d.svgMask=l).onerror=function(){d.state="errored"},l.onload=function(){var e=document.querySelector(".fsp-picker .cropper-face");d.cropper.setAspectRatio(r/i),d.cropper.crop(),e.style.background="url(".concat(c,") no-repeat"),e.style.backgroundSize="100%",e.style.opacity="0.5"}}},null,{crossOrigin:"anonymous"})},signUrl:function(e){var t=this.apiClient.session,n=t.policy,r=t.signature;return n&&r?"".concat(e,"?policy=").concat(n,"&signature=").concat(r):e}}),watch:{state:function(e){var t=this,n=document.querySelector(".fsp-picker .cropper-view-box"),r=document.querySelector(".fsp-picker .cropper-face");switch(e){case"ready":if(this.cropper.reset(),this.cropper.clear(),this.cropForce&&!this.file.cropped&&this.transformations.crop&&(this.state="crop"),!this.cropForce||this.file.cropped||this.transformations.crop||(this.state="circle"),!this.file){this.state="errored";break}this.file.transformed||1!==this.options.length||"mask"!==this.options[0]||(this.state="mask");break;case"circle":n.style.borderRadius="50%",r.style.borderRadius="50%",r.style.background="none",this.cropper.setAspectRatio(1),this.cropper.crop();break;case"crop":n.style.borderRadius="0px",r.style.borderRadius="0px",r.style.background="none",this.cropper.setAspectRatio(this.cropAspectRatio),this.cropper.crop();break;case"rotate":this.cropper.reset(),this.cropper.clear();break;case"mask":n.style.borderRadius="0px",r.style.borderRadius="0px",$i(this.getModuleUrl("fs-fabric"),"fs-fabric").then(function(e){t.showSVGMask(e)})}}}};zc._withStripped=!0;var Xc=oa({render:zc,staticRenderFns:[]},void 0,Kc,void 0,!1,void 0,!1,void 0,void 0,void 0),Zc={r:"rotate",ry:"rotateY",t:"translateX",ty:"translateY"},Jc={2:{ry:180},3:{r:180},4:{r:180,ry:180},5:{r:270,ry:180},6:{ty:-1,r:90},7:{ty:-1,t:-1,r:90,ry:180},8:{t:-1,r:270}},el={5:"top left",6:"bottom left",7:"bottom right",8:"top right"};function tl(e,t){return"r"===e||"ry"===e?"".concat(t,"deg"):"t"===e||"ty"===e?"".concat(100*t,"%"):void 0}function nl(e){var t="".concat(e),n=Jc[t],r=function(e){var t=[];for(var n in e){var r=Zc[n];t.push(r+"("+tl(n,e[n])+")")}return t.length?t.join(" "):null}(n),i=el[t],o=function(e){var t={},n=!1;for(var r in e){n=n||!0,t[Zc[r]]=e[r]}return n?t:null}(n),a=function(e){var t={},n=!1;for(var r in e){n=n||!0;var i=Zc[r];t[i]=i+"("+tl(r,e[r])+")"}return n?t:null}(n),s={};return r&&(s.transform=r),i&&(s["transform-origin"]=i),o&&(s.transforms=o),a&&(s.transformStrings=a),s}function rl(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"fsp-summary__item",style:{opacity:t.uploadStarted&&t.isDone(t.file)?"0.7":"1"}},["local_file_system"!==t.file.source&&!t.isTransformed(t.file)||t.disableThumbnails||!t.isEditable(t.file)?t.isEditable(t.file)&&"local_file_system"!==t.file.source&&!t.disableThumbnails?n("div",[n("img",{staticClass:"fsp-summary__thumbnail",attrs:{src:t.file.thumbnail}})]):n("div",{staticClass:"fsp-summary__thumbnail-container"},[n("span",{class:t.generateClass(t.file)})]):n("img",{key:t.file.uuid,ref:"thumb-"+t.file.uuid,staticClass:"fsp-summary__thumbnail",attrs:{src:t.generateThumbnail(t.file)}}),t._v(" "),n("span",{staticClass:"fsp-summary__item-name",attrs:{title:t.file.name}},[n("span",[t._v(t._s(t.file.name))]),t._v(" "),n("span",{staticClass:"fsp-summary__size"},[t.isFailed(t.file)||"local_file_system"!==t.file.source&&!t.isTransformed(t.file)||!t.uploadStarted?t._e():n("span",{staticClass:"fsp-summary__size-progress"},[t._v("\n        "+t._s(t.file.progressSize)+" /\n      ")]),t._v(" "),n("span",[t._v(" "+t._s(t.translatedFileSize(t.file)))])])]),t._v(" "),t.uploadStarted&&!t.isFailed(t.file)?n("div",{staticClass:"fsp-summary__item-progress",style:{width:t.file.progress+"%"}}):t._e(),t._v(" "),n("div",{staticClass:"fsp-summary__actions-container"},[t.uploadStarted||t.disableTransformer||t.isTransformed(t.file)||!t.isEditable(t.file)?!t.uploadStarted&&t.isTransformed(t.file)?n("span",{staticClass:"fsp-summary__action fsp-summary__action--button",on:{click:function(){return t.revert(t.file)}}},[t._v("\n      "+t._s(t.t("Revert"))+"\n    ")]):t._e():n("span",{staticClass:"fsp-summary__action fsp-summary__action--button",class:{"fsp-summary__action--button-blue":t.cropForce},attrs:{tabindex:"0"},on:{click:function(){return t.transform(t.file.uuid)},keyup:function(e){return!e.type.indexOf("key")&&t._k(e.keyCode,"enter",13,e.key,"Enter")?null:t.transform(t.file.uuid)}}},[t._v("\n      "+t._s(t.cropForce?t.t("Crop"):t.t("Edit"))+"\n    ")]),t._v(" "),!t.uploadStarted&&t.isEditable(t.file)?n("span",{staticClass:"fsp-summary__action-separator"}):t._e(),t._v(" "),t.uploadStarted&&t.isDone(t.file)?t._e():n("span",{staticClass:"fsp-summary__action fsp-summary__action--remove",attrs:{tabindex:"0"},on:{click:function(){return t.addFile(t.file)}}})])])}var il={props:{file:Object},computed:_objectSpread({},ra.mapGetters(["blobURLs","cropForce","disableTransformer","disableThumbnails","uploadStarted"])),methods:_objectSpread({},ra.mapActions(["addFile","transformImage"]),{isEditable:function(e){return es(e)},isDone:function(e){return e.state===Vc},isFailed:function(e){return e.state===Qc},isTransformed:function(e){return e.transformed},generateClass:function(e){return es(e)?"fsp-grid__icon-image":ts(e)?"fsp-grid__icon-audio":"application/pdf"===e.mimetype?"fsp-grid__icon-pdf":"fsp-grid__icon-file"},generateThumbnail:function(e){if(this.blobURLs[e.uuid])return this.blobURLs[e.uuid];var t=e.transformed||e.originalFile,n=window.URL.createObjectURL(t);return this.$store.commit("SET_BLOB_URL",{uuid:e.uuid,url:n}),this.fixTmpThumbnail(e),n},fixTmpThumbnail:function(r){var i=this;Rs(r.transformed||r.originalFile).then(function(e){var t=nl(Zs(e)),n=i.$refs["thumb-".concat(r.uuid)];n&&t&&t.transform&&(n.style.transform=t.transform,t["transform-origin"]&&(n.style["transform-origin"]=t["transform-origin"]))})},revert:function(e){this.$store.commit("REMOVE_FILE_TRANSFORMATION",e.uuid),this.$store.commit("REMOVE_BLOB_URL",e.uuid)},transform:function(e){this.$store.commit("REMOVE_BLOB_URL",e),this.transformImage(e)},translatedFileSize:function(e){return"cloud"!==e.sourceKind||e.transformed?1048576<=(t=e.size)?"".concat(Math.round(t/1048576),"MB"):1024<=t?"".concat(Math.round(t/1024),"KB"):"".concat(t,"B"):"";var t}})};rl._withStripped=!0;function ol(){var t=this,e=t.$createElement,n=t._self._c||e;return n("modal",[n("div",{attrs:{slot:"header"},slot:"header"},[n("content-header",[t.mobileNavActive?t._e():n("span",{staticClass:"fsp-header-text--visible"},[t._v("\n        "+t._s(t.headerText)+"\n      ")])])],1),t._v(" "),n("sidebar",{attrs:{slot:"sidebar"},slot:"sidebar"}),t._v(" "),n("div",{staticClass:"fsp-summary",attrs:{slot:"body"},slot:"body"},[n("div",{staticClass:"fsp-summary__header"},[n("div",{staticClass:"fsp-summary__filter"},[n("input",{attrs:{placeholder:t.placeholderText},on:{input:t.updateFilter}}),t._v(" "),n("span",{staticClass:"fsp-summary__filter-icon"})])]),t._v(" "),n("div",{staticClass:"fsp-summary__body"},t._l(t.fileBuckets,function(e){return t.filterFiles(e.files).length?n("div",{key:e.id},[n("div",{staticClass:"fsp-grid__label",class:{"fsp-color--error":"failed"===e.id}},[t._v("\n            "+t._s(t.t(e.name))+"\n            "),t.isConnected&&t.allowManualRetry&&"failed"===e.id?n("span",{staticClass:"fsp-color--error fsp-summary__try-again",on:{click:t.retryAll}},[t._v("\n            "+t._s(t.t("Try again"))+"\n            ")]):!t.isConnected&&t.allowManualRetry&&"failed"===e.id?n("span",{staticClass:"fsp-color--error",on:{click:t.retryAll}},[t._v("\n              "+t._s(t.reconnectTimer)+"\n              "),n("span",{staticClass:"fsp-summary__try-again"},[t._v(t._s(t.t("Try now")))])]):t._e()]),t._v(" "),t._l(t.filterFiles(e.files),function(e){return n("SummaryRow",{key:e.uuid,attrs:{file:e}})})],2):t._e()}),0)]),t._v(" "),n("footer-nav",{attrs:{slot:"footer","is-visible":!t.uploadStarted},slot:"footer"},[n("span",{staticClass:"fsp-button fsp-button--cancel",attrs:{slot:"nav-left",tabindex:"0"},on:{click:t.deselectAllFiles,keyup:function(e){return!e.type.indexOf("key")&&t._k(e.keyCode,"enter",13,e.key,"Enter")?null:t.deselectAllFiles(e)}},slot:"nav-left"},[t._v("\n      "+t._s(t.t("Deselect All"))+"\n    ")]),t._v(" "),n("div",{attrs:{slot:"nav-right"},slot:"nav-right"},[t.fileCount<t.maxFiles?n("span",{staticClass:"fsp-button fsp-button--cancel",attrs:{"data-e2e":"upload-more",tabindex:"0"},on:{click:t.historyBack,keyup:function(e){return!e.type.indexOf("key")&&t._k(e.keyCode,"enter",13,e.key,"Enter")?null:t.historyBack(e)}}},[t._v("\n        "+t._s(t.t("Upload more"))+"\n      ")]):t._e(),t._v(" "),n("span",{staticClass:"fsp-button fsp-button--primary fsp-button-upload",class:{"fsp-button--disabled":!t.canStartUpload},attrs:{"data-e2e":"upload",title:t.t("Upload"),tabindex:"0"},on:{click:t.startUploadMaybe,keyup:function(e){return!e.type.indexOf("key")&&t._k(e.keyCode,"enter",13,e.key,"Enter")?null:t.startUploadMaybe(e)}}},[t.uploadStarted||t.canStartUpload?n("span",[t._v("\n          "+t._s(t.t("Upload"))+"\n          "),n("span",{directives:[{name:"show",rawName:"v-show",value:1<t.filesWaiting.length,expression:"filesWaiting.length > 1"}],staticClass:"fsp-badge fsp-badge--bright"},[t._v("\n            "+t._s(t.filesWaiting.length)+"\n          ")])]):n("span",[t._v("\n          "+t._s(t.minFilesMessage)+"\n        ")])])])])],1)}var al={components:{ContentHeader:ha,FooterNav:ks,Modal:Va,Sidebar:za,SummaryRow:oa({render:rl,staticRenderFns:[]},void 0,il,void 0,!1,void 0,!1,void 0,void 0,void 0)},computed:_objectSpread({},ra.mapGetters(["allowManualRetry","canStartUpload","cropFiles","cropForce","disableTransformer","fileCount","maxFiles","filesDone","filesFailed","filesUploading","filesList","filesPaused","filesWaiting","filesNeededCount","isConnected","isConnectedObj","lang","minFiles","mobileNavActive","route","routesHistory","uploadStarted"]),{fileBuckets:function(){return this.uploadStarted?!this.isConnected&&this.allowManualRetry?[{id:"failed",name:"Connection Lost",files:this.filesPaused.concat(this.filesFailed)},{id:"done",name:"Completed",files:this.filesDone},{id:"uploading",name:"Uploading",files:this.filesUploading.concat(this.filesWaiting)}]:[{id:"failed",name:"Failed While Uploading",files:this.filesFailed},{id:"done",name:"Completed",files:this.filesDone},{id:"uploading",name:"Uploading",files:this.filesUploading.concat(this.filesWaiting)}]:[{id:"edited",name:"Edited Images",files:this.onlyTransformedImages},{id:"cropped",name:"Cropped Images",files:this.onlyCroppedImages},{id:"images",name:"Images",files:this.onlyImages},{id:"files",name:"Files",files:this.onlyFiles}]},minFilesMessage:function(){return 1===this.filesNeededCount?"".concat(this.t("Add")," 1 ").concat(this.t("more file")):1<this.filesNeededCount?"".concat(this.t("Add")," ").concat(this.filesNeededCount," ").concat(this.t("more files")):null},onlyFiles:function(){return this.filesList.filter(function(e){return!Ja(e)})},onlyImages:function(){return this.filesList.filter(function(e){return Ja(e)}).filter(function(e){return!e.transformed})},onlyTransformedImages:function(){return this.cropForce?this.filesList.filter(function(e){return Ja(e)}).filter(function(e){return e.transformed}).filter(function(e){return!e.cropped}):this.filesList.filter(function(e){return Ja(e)}).filter(function(e){return e.transformed})},onlyCroppedImages:function(){return this.cropForce?this.filesList.filter(function(e){return Ja(e)}).filter(function(e){return e.transformed}).filter(function(e){return e.cropped}):[]},cropForceComplete:function(){return!this.cropForce||!this.onlyImages.length&&!this.onlyTransformedImages.length},headerText:function(){return this.uploadStarted?"".concat(this.t("Uploaded")," ").concat(this.filesDone.length," / ").concat(this.fileCount):this.cropForce&&!this.cropForceComplete?this.t("Crop is required on images"):this.t("Selected Files")},placeholderText:function(){return this.t("Filter")},reconnectTimer:function(){return"- Retrying in ".concat(this.timer.toLocaleString(this.lang),"...")}}),data:function(){return{timer:20,filter:""}},methods:_objectSpread({},ra.mapActions(["addFile","deselectAllFiles","retryAllFailedFiles","startUploading","transformImage"]),{filterFiles:function(e){var t=new RegExp(this.filter,"i");return e.filter(function(e){return t.test(e.name)})},retryAll:function(){this.resetCountdown(),this.retryAllFailedFiles(),this.$store.commit("SET_CONNECTION_STATUS",!0),this.$store.commit("RESET_ATTEMPTS")},startCountdown:function(){var e=this;this.timerInterval||(this.timerInterval=setInterval(function(){--e.timer},1e3))},resetCountdown:function(){clearInterval(this.timerInterval),this.timerInterval=null,this.timer=20},startUploadMaybe:function(){if(this.canStartUpload&&this.cropForceComplete&&this.startUploading(),!this.cropForceComplete){var e=this.onlyImages[0]||this.onlyTransformedImages[0];this.transformImage(e.uuid)}},updateFilter:function(e){this.filter=e.target.value},historyBack:function(){this.$store.commit("GO_BACK_WITH_ROUTE_CURRENT_TYPE")}}),watch:{isConnectedObj:{handler:function(e){!1===e.value&&this.startCountdown(),!0===e.value&&this.resetCountdown()}},timer:{handler:function(e){0===e&&this.retryAll()}},filesList:{immediate:!1,handler:function(e){0===e.length&&(this.cropFiles?(this.$store.dispatch("cancelPick"),this.$root.$destroy()):(this.$store.commit("GO_BACK_WITH_ROUTE_CURRENT_TYPE"),this.$store.commit("SET_UPLOAD_STARTED",!1)))}}}};ol._withStripped=!0;var sl=oa({render:ol,staticRenderFns:[]},void 0,al,void 0,!1,void 0,!1,void 0,void 0,void 0),cl=function(e,t){return(cl=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function ll(e,t){function n(){this.constructor=e}cl(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var ul,dl,pl,fl,hl,ml,vl=function(){return(vl=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function gl(n,r){var i,o,a,e,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return e={next:t(0),throw:t(1),return:t(2)},"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,o&&(a=2&t[0]?o.return:t[0]?o.throw||((a=o.return)&&a.call(o),0):o.next)&&!(a=a.call(o,t[1])).done)return a;switch(o=0,a&&(t=[2&t[0],a.value]),t[0]){case 0:case 1:a=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,o=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(a=0<(a=s.trys).length&&a[a.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!a||t[1]>a[0]&&t[1]<a[3])){s.label=t[1];break}if(6===t[0]&&s.label<a[1]){s.label=a[1],a=t;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(t);break}a[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],o=0}finally{i=a=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}}function yl(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||0<t--)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function _l(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(yl(arguments[t]));return e}(dl=ul=ul||{}).Fatal="fatal",dl.Error="error",dl.Warning="warning",dl.Log="log",dl.Info="info",dl.Debug="debug",dl.Critical="critical",(pl=ul=ul||{}).fromString=function(e){switch(e){case"debug":return pl.Debug;case"info":return pl.Info;case"warn":case"warning":return pl.Warning;case"error":return pl.Error;case"fatal":return pl.Fatal;case"critical":return pl.Critical;case"log":default:return pl.Log}},(hl=fl=fl||{}).Unknown="unknown",hl.Skipped="skipped",hl.Success="success",hl.RateLimit="rate_limit",hl.Invalid="invalid",hl.Failed="failed",(ml=fl=fl||{}).fromHttpCode=function(e){return 200<=e&&e<300?ml.Success:429===e?ml.RateLimit:400<=e&&e<500?ml.Invalid:500<=e?ml.Failed:ml.Unknown};var bl=Object.setPrototypeOf||({__proto__:[]}instanceof Array?function(e,t){return e.__proto__=t,e}:function(e,t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n]);return e});var wl,Al=(ll(Cl,wl=Error),Cl);function Cl(e){var t=this.constructor,n=wl.call(this,e)||this;return n.message=e,n.name=t.prototype.constructor.name,bl(n,t.prototype),n}function Sl(e){switch(Object.prototype.toString.call(e)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return 1;default:return e instanceof Error}}function El(e){return"[object ErrorEvent]"===Object.prototype.toString.call(e)}function kl(e){return"[object DOMError]"===Object.prototype.toString.call(e)}function xl(e){return"[object String]"===Object.prototype.toString.call(e)}function Fl(e){return null===e||"object"!==_typeof2(e)&&"function"!=typeof e}function Il(e){return"[object Object]"===Object.prototype.toString.call(e)}function Tl(e){return"undefined"!=typeof Event&&e instanceof Event}function Ol(e){return"undefined"!=typeof Element&&e instanceof Element}function Nl(e){return Boolean(e&&e.then&&"function"==typeof e.then)}function Rl(){return"[object process]"===Object.prototype.toString.call("undefined"!=typeof process?process:0)}var Dl={};function Ul(){return Rl()?global:"undefined"!=typeof window?window:"undefined"!=typeof self?self:Dl}function Ll(){var e=Ul(),t=e.crypto||e.msCrypto;if(void 0!==t&&t.getRandomValues){var n=new Uint16Array(8);t.getRandomValues(n),n[3]=4095&n[3]|16384,n[4]=16383&n[4]|32768;function r(e){for(var t=e.toString(16);t.length<4;)t="0"+t;return t}return r(n[0])+r(n[1])+r(n[2])+r(n[3])+r(n[4])+r(n[5])+r(n[6])+r(n[7])}return"xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})}function Pl(e){if(!e)return{};var t=e.match(/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);if(!t)return{};var n=t[6]||"",r=t[8]||"";return{host:t[4],path:t[5],protocol:t[2],relative:t[5]+n+r}}function jl(e){if(e.message)return e.message;if(e.exception&&e.exception.values&&e.exception.values[0]){var t=e.exception.values[0];return t.type&&t.value?t.type+": "+t.value:t.type||t.value||e.event_id||"<unknown>"}return e.event_id||"<unknown>"}function Ml(e){var t=Ul();if(!("console"in t))return e();var n=t.console,r={};["debug","info","warn","error","log","assert"].forEach(function(e){e in t.console&&n[e].__sentry__&&(r[e]=n[e].__sentry_wrapped__,n[e]=n[e].__sentry_original__)});var i=e();return Object.keys(r).forEach(function(e){n[e]=r[e]}),i}function Bl(e,t,n){e.exception=e.exception||{},e.exception.values=e.exception.values||[],e.exception.values[0]=e.exception.values[0]||{},e.exception.values[0].value=e.exception.values[0].value||t||"",e.exception.values[0].type=e.exception.values[0].type||n||"Error"}function zl(t,n){void 0===n&&(n={});try{t.exception.values[0].mechanism=t.exception.values[0].mechanism||{},Object.keys(n).forEach(function(e){t.exception.values[0].mechanism[e]=n[e]})}catch(e){}}function $l(e){try{for(var t=e,n=[],r=0,i=0,o=" > ".length,a=void 0;t&&r++<5&&!("html"===(a=Wl(t))||1<r&&80<=i+n.length*o+a.length);)n.push(a),i+=a.length,t=t.parentNode;return n.reverse().join(" > ")}catch(e){return"<unknown>"}}function Wl(e){var t,n,r,i,o,a=e,s=[];if(!a||!a.tagName)return"";if(s.push(a.tagName.toLowerCase()),a.id&&s.push("#"+a.id),(t=a.className)&&xl(t))for(n=t.split(/\s+/),o=0;o<n.length;o++)s.push("."+n[o]);var c=["type","name","title","alt"];for(o=0;o<c.length;o++)r=c[o],(i=a.getAttribute(r))&&s.push("["+r+'="'+i+'"]');return s.join("")}function Gl(e,t){if(!t)return 6e4;var n=parseInt(""+t,10);if(!isNaN(n))return 1e3*n;var r=Date.parse(""+t);return isNaN(r)?6e4:r-e}var Hl=Ul(),Vl="Sentry Logger ",Ql=(ql.prototype.disable=function(){this._enabled=!1},ql.prototype.enable=function(){this._enabled=!0},ql.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._enabled&&Ml(function(){Hl.console.log(Vl+"[Log]: "+e.join(" "))})},ql.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._enabled&&Ml(function(){Hl.console.warn(Vl+"[Warn]: "+e.join(" "))})},ql.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._enabled&&Ml(function(){Hl.console.error(Vl+"[Error]: "+e.join(" "))})},ql);function ql(){this._enabled=!1}Hl.__SENTRY__=Hl.__SENTRY__||{};var Yl,Kl,Xl=Hl.__SENTRY__.logger||(Hl.__SENTRY__.logger=new Ql),Zl=(Jl.prototype.memoize=function(e){if(this._hasWeakSet)return!!this._inner.has(e)||(this._inner.add(e),!1);for(var t=0;t<this._inner.length;t++)if(this._inner[t]===e)return!0;return this._inner.push(e),!1},Jl.prototype.unmemoize=function(e){if(this._hasWeakSet)this._inner.delete(e);else for(var t=0;t<this._inner.length;t++)if(this._inner[t]===e){this._inner.splice(t,1);break}},Jl);function Jl(){this._hasWeakSet="function"==typeof WeakSet,this._inner=this._hasWeakSet?new WeakSet:[]}function eu(e,t){return void 0===t&&(t=0),"string"!=typeof e||0===t||e.length<=t?e:e.substr(0,t)+"..."}function tu(e,t){if(!Array.isArray(e))return"";for(var n=[],r=0;r<e.length;r++){var i=e[r];try{n.push(String(i))}catch(e){n.push("[value cannot be serialized]")}}return n.join(t)}function nu(e,t){return n=t,"[object RegExp]"===Object.prototype.toString.call(n)?t.test(e):"string"==typeof t&&-1!==e.indexOf(t);var n}function ru(e,t,n){if(t in e){var r=e[t],i=n(r);if("function"==typeof i)try{i.prototype=i.prototype||{},Object.defineProperties(i,{__sentry__:{enumerable:!1,value:!0},__sentry_original__:{enumerable:!1,value:r},__sentry_wrapped__:{enumerable:!1,value:i}})}catch(e){}e[t]=i}}function iu(e){if(Sl(e)){var t=e,n={message:t.message,name:t.name,stack:t.stack};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}if(Tl(e)){var i=e,o={};o.type=i.type;try{o.target=Ol(i.target)?$l(i.target):Object.prototype.toString.call(i.target)}catch(e){o.target="<unknown>"}try{o.currentTarget=Ol(i.currentTarget)?$l(i.currentTarget):Object.prototype.toString.call(i.currentTarget)}catch(e){o.currentTarget="<unknown>"}for(var r in"undefined"!=typeof CustomEvent&&e instanceof CustomEvent&&(o.detail=i.detail),i)Object.prototype.hasOwnProperty.call(i,r)&&(o[r]=i);return o}return e}function ou(e){return t=JSON.stringify(e),~-encodeURI(t).split(/%..|./).length;var t}function au(e,t){return"domain"===t&&e&&"object"===_typeof2(e)&&e._events?"[Domain]":"domainEmitter"===t?"[DomainEmitter]":"undefined"!=typeof global&&e===global?"[Global]":"undefined"!=typeof window&&e===window?"[Window]":"undefined"!=typeof document&&e===document?"[Document]":Il(n=e)&&"nativeEvent"in n&&"preventDefault"in n&&"stopPropagation"in n?"[SyntheticEvent]":"number"==typeof e&&e!=e?"[NaN]":void 0===e?"[undefined]":"function"==typeof e?"[Function: "+(e.name||"<unknown-function-name>")+"]":e;var n}function su(e,t,n,r){if(void 0===n&&(n=1/0),void 0===r&&(r=new Zl),0===n)return function(e){var t=Object.prototype.toString.call(e);if("string"==typeof e)return e;if("[object Object]"===t)return"[Object]";if("[object Array]"===t)return"[Array]";var n=au(e);return Fl(n)?n:t}(t);if(null!=t&&"function"==typeof t.toJSON)return t.toJSON();var i=au(t,e);if(Fl(i))return i;var o=iu(t),a=Array.isArray(t)?[]:{};if(r.memoize(t))return"[Circular ~]";for(var s in o)Object.prototype.hasOwnProperty.call(o,s)&&(a[s]=su(s,o[s],n-1,r));return r.unmemoize(t),a}function cu(e,n){try{return JSON.parse(JSON.stringify(e,function(e,t){return su(e,t,n)}))}catch(e){return"**non-serializable**"}}(Kl=Yl=Yl||{}).PENDING="PENDING",Kl.RESOLVED="RESOLVED",Kl.REJECTED="REJECTED";var lu=(uu.prototype.toString=function(){return"[object SyncPromise]"},uu.resolve=function(t){return new uu(function(e){e(t)})},uu.reject=function(n){return new uu(function(e,t){t(n)})},uu.all=function(e){return new uu(function(n,r){if(Array.isArray(e))if(0!==e.length){var i=e.length,o=[];e.forEach(function(e,t){uu.resolve(e).then(function(e){o[t]=e,0==--i&&n(o)}).then(null,r)})}else n([]);else r(new TypeError("Promise.all requires an array as input."))})},uu.prototype.then=function(r,i){var e=this;return new uu(function(t,n){e._attachHandler({onfulfilled:function(e){if(r)try{return void t(r(e))}catch(e){return void n(e)}else t(e)},onrejected:function(e){if(i)try{return void t(i(e))}catch(e){return void n(e)}else n(e)}})})},uu.prototype.catch=function(e){return this.then(function(e){return e},e)},uu.prototype.finally=function(i){var o=this;return new uu(function(e,t){var n,r;return o.then(function(e){r=!1,n=e,i&&i()},function(e){r=!0,n=e,i&&i()}).then(function(){(r?t:e)(n)})})},uu);function uu(e){var n=this;this._state=Yl.PENDING,this._handlers=[],this._resolve=function(e){n._setResult(Yl.RESOLVED,e)},this._reject=function(e){n._setResult(Yl.REJECTED,e)},this._setResult=function(e,t){n._state===Yl.PENDING&&(Nl(t)?t.then(n._resolve,n._reject):(n._state=e,n._value=t,n._executeHandlers()))},this._attachHandler=function(e){n._handlers=n._handlers.concat(e),n._executeHandlers()},this._executeHandlers=function(){n._state!==Yl.PENDING&&(n._state===Yl.REJECTED?n._handlers.forEach(function(e){e.onrejected&&e.onrejected(n._value)}):n._handlers.forEach(function(e){e.onfulfilled&&e.onfulfilled(n._value)}),n._handlers=[])};try{e(this._resolve,this._reject)}catch(e){this._reject(e)}}var du=(pu.prototype.isReady=function(){return void 0===this._limit||this.length()<this._limit},pu.prototype.add=function(e){var t=this;return this.isReady()?(-1===this._buffer.indexOf(e)&&this._buffer.push(e),e.then(function(){return t.remove(e)}).then(null,function(){return t.remove(e).then(null,function(){})}),e):lu.reject(new Al("Not adding Promise due to buffer limit reached."))},pu.prototype.remove=function(e){return this._buffer.splice(this._buffer.indexOf(e),1)[0]},pu.prototype.length=function(){return this._buffer.length},pu.prototype.drain=function(n){var r=this;return new lu(function(e){var t=setTimeout(function(){n&&0<n&&e(!1)},n);lu.all(r._buffer).then(function(){clearTimeout(t),e(!0)}).then(null,function(){e(!0)})})},pu);function pu(e){this._limit=e,this._buffer=[]}function fu(){if("fetch"in Ul())try{return new Headers,new Request(""),new Response,1}catch(e){return}}function hu(){if(fu()){function e(e){return-1!==e.toString().indexOf("native")}var t=Ul(),n=null,r=t.document;if(r){var i=r.createElement("iframe");i.hidden=!0;try{r.head.appendChild(i),i.contentWindow&&i.contentWindow.fetch&&(n=e(i.contentWindow.fetch)),r.head.removeChild(i)}catch(e){Xl.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ",e)}}return null===n&&(n=e(t.fetch)),n}}var mu=/^[ \t]*([0-9a-f]{32})?-?([0-9a-f]{16})?-?([01])?[ \t]*$/,vu=(gu.prototype.setParent=function(e){return this._parent=e,this},gu.prototype.setSampled=function(e){return this._sampled=e,this},gu.fromTraceparent=function(e){var t=e.match(mu);if(t){var n=void 0;"1"===t[3]?n=!0:"0"===t[3]&&(n=!1);var r=new gu(t[1],t[2],n);return new gu(t[1],void 0,n,r)}},gu.prototype.toTraceparent=function(){var e="";return!0===this._sampled?e="-1":!1===this._sampled&&(e="-0"),this._traceId+"-"+this._spanId+e},gu.prototype.toJSON=function(){return{parent:this._parent&&this._parent.toJSON()||void 0,sampled:this._sampled,span_id:this._spanId,trace_id:this._traceId}},gu);function gu(e,t,n,r){void 0===e&&(e=Ll()),void 0===t&&(t=Ll().substring(16)),this._traceId=e,this._spanId=t,this._sampled=n,this._parent=r}var yu=(_u.prototype.addScopeListener=function(e){this._scopeListeners.push(e)},_u.prototype.addEventProcessor=function(e){return this._eventProcessors.push(e),this},_u.prototype._notifyScopeListeners=function(){var t=this;this._notifyingListeners||(this._notifyingListeners=!0,setTimeout(function(){t._scopeListeners.forEach(function(e){e(t)}),t._notifyingListeners=!1}))},_u.prototype._notifyEventProcessors=function(i,o,a,s){var c=this;return void 0===s&&(s=0),new lu(function(t,e){var n=i[s];if(null===o||"function"!=typeof n)t(o);else{var r=n(vl({},o),a);Nl(r)?r.then(function(e){return c._notifyEventProcessors(i,e,a,s+1).then(t)}).then(null,e):c._notifyEventProcessors(i,r,a,s+1).then(t).then(null,e)}})},_u.prototype.setUser=function(e){return this._user=cu(e),this._notifyScopeListeners(),this},_u.prototype.setTags=function(e){return this._tags=vl({},this._tags,cu(e)),this._notifyScopeListeners(),this},_u.prototype.setTag=function(e,t){var n;return this._tags=vl({},this._tags,((n={})[e]=cu(t),n)),this._notifyScopeListeners(),this},_u.prototype.setExtras=function(e){return this._extra=vl({},this._extra,cu(e)),this._notifyScopeListeners(),this},_u.prototype.setExtra=function(e,t){var n;return this._extra=vl({},this._extra,((n={})[e]=cu(t),n)),this._notifyScopeListeners(),this},_u.prototype.setFingerprint=function(e){return this._fingerprint=cu(e),this._notifyScopeListeners(),this},_u.prototype.setLevel=function(e){return this._level=cu(e),this._notifyScopeListeners(),this},_u.prototype.setTransaction=function(e){return this._transaction=e,this._notifyScopeListeners(),this},_u.prototype.setContext=function(e,t){return this._context[e]=t?cu(t):void 0,this._notifyScopeListeners(),this},_u.prototype.setSpan=function(e){return this._span=e,this._notifyScopeListeners(),this},_u.prototype.startSpan=function(e){var t=new vu;return t.setParent(e),this.setSpan(t),t},_u.prototype.getSpan=function(){return this._span},_u.clone=function(e){var t=new _u;return e&&(t._breadcrumbs=_l(e._breadcrumbs),t._tags=vl({},e._tags),t._extra=vl({},e._extra),t._context=vl({},e._context),t._user=e._user,t._level=e._level,t._span=e._span,t._transaction=e._transaction,t._fingerprint=e._fingerprint,t._eventProcessors=_l(e._eventProcessors)),t},_u.prototype.clear=function(){return this._breadcrumbs=[],this._tags={},this._extra={},this._user={},this._context={},this._level=void 0,this._transaction=void 0,this._fingerprint=void 0,this._span=void 0,this._notifyScopeListeners(),this},_u.prototype.addBreadcrumb=function(e,t){var n=(new Date).getTime()/1e3,r=vl({timestamp:n},e);return this._breadcrumbs=void 0!==t&&0<=t?_l(this._breadcrumbs,[cu(r)]).slice(-t):_l(this._breadcrumbs,[cu(r)]),this._notifyScopeListeners(),this},_u.prototype.clearBreadcrumbs=function(){return this._breadcrumbs=[],this._notifyScopeListeners(),this},_u.prototype._applyFingerprint=function(e){e.fingerprint=e.fingerprint?Array.isArray(e.fingerprint)?e.fingerprint:[e.fingerprint]:[],this._fingerprint&&(e.fingerprint=e.fingerprint.concat(this._fingerprint)),e.fingerprint&&!e.fingerprint.length&&delete e.fingerprint},_u.prototype.applyToEvent=function(e,t){return this._extra&&Object.keys(this._extra).length&&(e.extra=vl({},this._extra,e.extra)),this._tags&&Object.keys(this._tags).length&&(e.tags=vl({},this._tags,e.tags)),this._user&&Object.keys(this._user).length&&(e.user=vl({},this._user,e.user)),this._context&&Object.keys(this._context).length&&(e.contexts=vl({},this._context,e.contexts)),this._level&&(e.level=this._level),this._transaction&&(e.transaction=this._transaction),this._span&&(e.contexts=e.contexts||{},e.contexts.trace=this._span),this._applyFingerprint(e),e.breadcrumbs=_l(e.breadcrumbs||[],this._breadcrumbs),e.breadcrumbs=0<e.breadcrumbs.length?e.breadcrumbs:void 0,this._notifyEventProcessors(_l(bu(),this._eventProcessors),e,t)},_u);function _u(){this._notifyingListeners=!1,this._scopeListeners=[],this._eventProcessors=[],this._breadcrumbs=[],this._user={},this._tags={},this._extra={},this._context={}}function bu(){var e=Ul();return e.__SENTRY__=e.__SENTRY__||{},e.__SENTRY__.globalEventProcessors=e.__SENTRY__.globalEventProcessors||[],e.__SENTRY__.globalEventProcessors}function wu(e){bu().push(e)}var Au=3,Cu=(Su.prototype._invokeClient=function(e){for(var t,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=this.getStackTop();i&&i.client&&i.client[e]&&(t=i.client)[e].apply(t,_l(n,[i.scope]))},Su.prototype.isOlderThan=function(e){return this._version<e},Su.prototype.bindClient=function(e){this.getStackTop().client=e},Su.prototype.pushScope=function(){var e=this.getStack(),t=0<e.length?e[e.length-1].scope:void 0,n=yu.clone(t);return this.getStack().push({client:this.getClient(),scope:n}),n},Su.prototype.popScope=function(){return void 0!==this.getStack().pop()},Su.prototype.withScope=function(e){var t=this.pushScope();try{e(t)}finally{this.popScope()}},Su.prototype.getClient=function(){return this.getStackTop().client},Su.prototype.getScope=function(){return this.getStackTop().scope},Su.prototype.getStack=function(){return this._stack},Su.prototype.getStackTop=function(){return this._stack[this._stack.length-1]},Su.prototype.captureException=function(e,t){var n=this._lastEventId=Ll(),r=t;if(!t){var i=void 0;try{throw new Error("Sentry syntheticException")}catch(e){i=e}r={originalException:e,syntheticException:i}}return this._invokeClient("captureException",e,vl({},r,{event_id:n})),n},Su.prototype.captureMessage=function(e,t,n){var r=this._lastEventId=Ll(),i=n;if(!n){var o=void 0;try{throw new Error(e)}catch(e){o=e}i={originalException:e,syntheticException:o}}return this._invokeClient("captureMessage",e,t,vl({},i,{event_id:r})),r},Su.prototype.captureEvent=function(e,t){var n=this._lastEventId=Ll();return this._invokeClient("captureEvent",e,vl({},t,{event_id:n})),n},Su.prototype.lastEventId=function(){return this._lastEventId},Su.prototype.addBreadcrumb=function(e,t){var n=this.getStackTop();if(n.scope&&n.client){var r=n.client.getOptions&&n.client.getOptions()||{},i=r.beforeBreadcrumb,o=void 0===i?null:i,a=r.maxBreadcrumbs,s=void 0===a?30:a;if(!(s<=0)){var c=(new Date).getTime()/1e3,l=vl({timestamp:c},e),u=o?Ml(function(){return o(l,t)}):l;null!==u&&n.scope.addBreadcrumb(u,Math.min(s,100))}}},Su.prototype.setUser=function(e){var t=this.getStackTop();t.scope&&t.scope.setUser(e)},Su.prototype.setTags=function(e){var t=this.getStackTop();t.scope&&t.scope.setTags(e)},Su.prototype.setExtras=function(e){var t=this.getStackTop();t.scope&&t.scope.setExtras(e)},Su.prototype.setTag=function(e,t){var n=this.getStackTop();n.scope&&n.scope.setTag(e,t)},Su.prototype.setExtra=function(e,t){var n=this.getStackTop();n.scope&&n.scope.setExtra(e,t)},Su.prototype.setContext=function(e,t){var n=this.getStackTop();n.scope&&n.scope.setContext(e,t)},Su.prototype.configureScope=function(e){var t=this.getStackTop();t.scope&&t.client&&e(t.scope)},Su.prototype.run=function(e){var t=ku(this);try{e(this)}finally{ku(t)}},Su.prototype.getIntegration=function(t){var e=this.getClient();if(!e)return null;try{return e.getIntegration(t)}catch(e){return Xl.warn("Cannot retrieve integration "+t.id+" from the current Hub"),null}},Su.prototype.traceHeaders=function(){var e=this.getStackTop();if(e.scope&&e.client){var t=e.scope.getSpan();if(t)return{"sentry-trace":t.toTraceparent()}}return{}},Su);function Su(e,t,n){void 0===t&&(t=new yu),void 0===n&&(n=Au),this._version=n,this._stack=[],this._stack.push({client:e,scope:t})}function Eu(){var e=Ul();return e.__SENTRY__=e.__SENTRY__||{hub:void 0},e}function ku(e){var t=Eu(),n=Iu(t);return Tu(t,e),n}function xu(){var e=Eu();return Fu(e)&&!Iu(e).isOlderThan(Au)||Tu(e,new Cu),(Rl()?function(t){try{var e=function(e,t){return e.require(t)}(module,"domain").active;if(!e)return Iu(t);if(!Fu(e)||Iu(e).isOlderThan(Au)){var n=Iu(t).getStackTop();Tu(e,new Cu(n.client,yu.clone(n.scope)))}return Iu(e)}catch(e){return Iu(t)}}:Iu)(e)}function Fu(e){return!!(e&&e.__SENTRY__&&e.__SENTRY__.hub)}function Iu(e){return e&&e.__SENTRY__&&e.__SENTRY__.hub||(e.__SENTRY__=e.__SENTRY__||{},e.__SENTRY__.hub=new Cu),e.__SENTRY__.hub}function Tu(e,t){return e&&(e.__SENTRY__=e.__SENTRY__||{},e.__SENTRY__.hub=t,1)}function Ou(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=xu();if(r&&r[e])return r[e].apply(r,_l(t));throw new Error("No hub defined or "+e+" was not found on the hub, please open a bug report.")}function Nu(e){var t;try{throw new Error("Sentry syntheticException")}catch(e){t=e}return Ou("captureException",e,{originalException:e,syntheticException:t})}function Ru(e){Ou("configureScope",e)}function Du(e){Ou("withScope",e)}var Uu=/^(?:(\w+):)\/\/(?:(\w+)(?::(\w+))?@)([\w\.-]+)(?::(\d+))?\/(.+)/,Lu="Invalid Dsn",Pu=(ju.prototype.toString=function(e){void 0===e&&(e=!1);var t=this.host,n=this.path,r=this.pass,i=this.port,o=this.projectId;return this.protocol+"://"+this.user+(e&&r?":"+r:"")+"@"+t+(i?":"+i:"")+"/"+(n?n+"/":n)+o},ju.prototype._fromString=function(e){var t=Uu.exec(e);if(!t)throw new Al(Lu);var n=yl(t.slice(1),6),r=n[0],i=n[1],o=n[2],a=void 0===o?"":o,s=n[3],c=n[4],l=void 0===c?"":c,u="",d=n[5],p=d.split("/");1<p.length&&(u=p.slice(0,-1).join("/"),d=p.pop()),this._fromComponents({host:s,pass:a,path:u,projectId:d,port:l,protocol:r,user:i})},ju.prototype._fromComponents=function(e){this.protocol=e.protocol,this.user=e.user,this.pass=e.pass||"",this.host=e.host,this.port=e.port||"",this.path=e.path||"",this.projectId=e.projectId},ju.prototype._validate=function(){var t=this;if(["protocol","user","host","projectId"].forEach(function(e){if(!t[e])throw new Al(Lu)}),"http"!==this.protocol&&"https"!==this.protocol)throw new Al(Lu);if(this.port&&isNaN(parseInt(this.port,10)))throw new Al(Lu)},ju);function ju(e){"string"==typeof e?this._fromString(e):this._fromComponents(e),this._validate()}var Mu=(Bu.prototype.getDsn=function(){return this._dsnObject},Bu.prototype.getStoreEndpoint=function(){return""+this._getBaseUrl()+this.getStoreEndpointPath()},Bu.prototype.getStoreEndpointWithUrlEncodedAuth=function(){var t,e={sentry_key:this._dsnObject.user,sentry_version:"7"};return this.getStoreEndpoint()+"?"+(t=e,Object.keys(t).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(t[e])}).join("&"))},Bu.prototype._getBaseUrl=function(){var e=this._dsnObject,t=e.protocol?e.protocol+":":"",n=e.port?":"+e.port:"";return t+"//"+e.host+n},Bu.prototype.getStoreEndpointPath=function(){var e=this._dsnObject;return(e.path?"/"+e.path:"")+"/api/"+e.projectId+"/store/"},Bu.prototype.getRequestHeaders=function(e,t){var n=this._dsnObject,r=["Sentry sentry_version=7"];return r.push("sentry_timestamp="+(new Date).getTime()),r.push("sentry_client="+e+"/"+t),r.push("sentry_key="+n.user),n.pass&&r.push("sentry_secret="+n.pass),{"Content-Type":"application/json","X-Sentry-Auth":r.join(", ")}},Bu.prototype.getReportDialogEndpoint=function(e){void 0===e&&(e={});var t=this._dsnObject,n=this._getBaseUrl()+(t.path?"/"+t.path:"")+"/api/embed/error-page/",r=[];for(var i in r.push("dsn="+t.toString()),e)if("user"===i){if(!e.user)continue;e.user.name&&r.push("name="+encodeURIComponent(e.user.name)),e.user.email&&r.push("email="+encodeURIComponent(e.user.email))}else r.push(encodeURIComponent(i)+"="+encodeURIComponent(e[i]));return r.length?n+"?"+r.join("&"):n},Bu);function Bu(e){this.dsn=e,this._dsnObject=new Pu(e)}var zu=[];function $u(e){var n={};return function(e){var t=e.defaultIntegrations&&_l(e.defaultIntegrations)||[],n=e.integrations,r=[];if(Array.isArray(n)){var i=n.map(function(e){return e.name}),o=[];t.forEach(function(e){-1===i.indexOf(e.name)&&-1===o.indexOf(e.name)&&(r.push(e),o.push(e.name))}),n.forEach(function(e){-1===o.indexOf(e.name)&&(r.push(e),o.push(e.name))})}else r="function"==typeof n?(r=n(t),Array.isArray(r)?r:[r]):_l(t);var a=r.map(function(e){return e.name});return-1!==a.indexOf("Debug")&&r.push.apply(r,_l(r.splice(a.indexOf("Debug"),1))),r}(e).forEach(function(e){var t;n[e.name]=e,t=e,-1===zu.indexOf(t.name)&&(t.setupOnce(wu,xu),zu.push(t.name),Xl.log("Integration installed: "+t.name))}),n}var Wu=(Gu.prototype.captureException=function(e,t,n){var r=this,i=t&&t.event_id;return this._processing=!0,this._getBackend().eventFromException(e,t).then(function(e){return r._processEvent(e,t,n)}).then(function(e){i=e&&e.event_id,r._processing=!1}).then(null,function(e){Xl.error(e),r._processing=!1}),i},Gu.prototype.captureMessage=function(e,t,n,r){var i=this,o=n&&n.event_id;return this._processing=!0,(Fl(e)?this._getBackend().eventFromMessage(""+e,t,n):this._getBackend().eventFromException(e,n)).then(function(e){return i._processEvent(e,n,r)}).then(function(e){o=e&&e.event_id,i._processing=!1}).then(null,function(e){Xl.error(e),i._processing=!1}),o},Gu.prototype.captureEvent=function(e,t,n){var r=this,i=t&&t.event_id;return this._processing=!0,this._processEvent(e,t,n).then(function(e){i=e&&e.event_id,r._processing=!1}).then(null,function(e){Xl.error(e),r._processing=!1}),i},Gu.prototype.getDsn=function(){return this._dsn},Gu.prototype.getOptions=function(){return this._options},Gu.prototype.flush=function(e){var n=this;return this._isClientProcessing(e).then(function(t){return clearInterval(t.interval),n._getBackend().getTransport().close(e).then(function(e){return t.ready&&e})})},Gu.prototype.close=function(e){var t=this;return this.flush(e).then(function(e){return t.getOptions().enabled=!1,e})},Gu.prototype.getIntegrations=function(){return this._integrations||{}},Gu.prototype.getIntegration=function(t){try{return this._integrations[t.id]||null}catch(e){return Xl.warn("Cannot retrieve integration "+t.id+" from the current Client"),null}},Gu.prototype._isClientProcessing=function(r){var i=this;return new lu(function(e){var t=0,n=0;clearInterval(n),n=setInterval(function(){i._processing?(t+=1,r&&r<=t&&e({interval:n,ready:!1})):e({interval:n,ready:!0})},1)})},Gu.prototype._getBackend=function(){return this._backend},Gu.prototype._isEnabled=function(){return!1!==this.getOptions().enabled&&void 0!==this._dsn},Gu.prototype._prepareEvent=function(e,t,n){var r=this.getOptions(),i=r.environment,o=r.release,a=r.dist,s=r.maxValueLength,c=void 0===s?250:s,l=vl({},e);void 0===l.environment&&void 0!==i&&(l.environment=i),void 0===l.release&&void 0!==o&&(l.release=o),void 0===l.dist&&void 0!==a&&(l.dist=a),l.message&&(l.message=eu(l.message,c));var u=l.exception&&l.exception.values&&l.exception.values[0];u&&u.value&&(u.value=eu(u.value,c));var d=l.request;d&&d.url&&(d.url=eu(d.url,c)),void 0===l.event_id&&(l.event_id=Ll()),this._addIntegrations(l.sdk);var p=lu.resolve(l);return t&&(p=t.applyToEvent(l,n)),p},Gu.prototype._addIntegrations=function(e){var t=Object.keys(this._integrations);e&&0<t.length&&(e.integrations=t)},Gu.prototype._processEvent=function(e,o,t){var a=this,n=this.getOptions(),s=n.beforeSend,r=n.sampleRate;return this._isEnabled()?"number"==typeof r&&Math.random()>r?lu.reject("This event has been sampled, will not send event."):new lu(function(r,i){a._prepareEvent(e,t,o).then(function(e){if(null!==e){var t=e;try{if(o&&o.data&&!0===o.data.__sentry__||!s)return a._getBackend().sendEvent(t),void r(t);var n=s(e,o);if(void 0===n)Xl.error("`beforeSend` method has to return `null` or a valid event.");else if(Nl(n))a._handleAsyncBeforeSend(n,r,i);else{if(null===(t=n))return Xl.log("`beforeSend` returned `null`, will not send event."),void r(null);a._getBackend().sendEvent(t),r(t)}}catch(e){a.captureException(e,{data:{__sentry__:!0},originalException:e}),i("`beforeSend` threw an error, will not send event.")}}else i("An event processor returned null, will not send event.")}).then(null,function(){i("`beforeSend` threw an error, will not send event.")})}):lu.reject("SDK not enabled, will not send event.")},Gu.prototype._handleAsyncBeforeSend=function(e,t,n){var r=this;e.then(function(e){null!==e?(r._getBackend().sendEvent(e),t(e)):n("`beforeSend` returned `null`, will not send event.")}).then(null,function(e){n("beforeSend rejected with "+e)})},Gu);function Gu(e,t){this._integrations={},this._processing=!1,this._backend=new e(t),(this._options=t).dsn&&(this._dsn=new Pu(t.dsn)),this._isEnabled()&&(this._integrations=$u(this._options))}var Hu=(Vu.prototype.sendEvent=function(e){return lu.resolve({reason:"NoopTransport: Event has been skipped because no Dsn is configured.",status:fl.Skipped})},Vu.prototype.close=function(e){return lu.resolve(!0)},Vu);function Vu(){}var Qu,qu=(Yu.prototype._setupTransport=function(){return new Hu},Yu.prototype.eventFromException=function(e,t){throw new Al("Backend has to implement `eventFromException` method")},Yu.prototype.eventFromMessage=function(e,t,n){throw new Al("Backend has to implement `eventFromMessage` method")},Yu.prototype.sendEvent=function(e){this._transport.sendEvent(e).then(null,function(e){Xl.error("Error while sending event: "+e)})},Yu.prototype.getTransport=function(){return this._transport},Yu);function Yu(e){this._options=e,this._options.dsn||Xl.warn("No DSN provided, backend will not do anything."),this._transport=this._setupTransport()}var Ku=(Xu.prototype.setupOnce=function(){Qu=Function.prototype.toString,Function.prototype.toString=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.__sentry__?this.__sentry_original__:this;return Qu.apply(n,e)}},Xu.id="FunctionToString",Xu);function Xu(){this.name=Xu.id}var Zu=[/^Script error\.?$/,/^Javascript error: Script error\.? on line 0$/],Ju=(ed.prototype.setupOnce=function(){wu(function(e){var t=xu();if(!t)return e;var n=t.getIntegration(ed);if(n){var r=t.getClient(),i=r?r.getOptions():{},o=n._mergeOptions(i);if(n._shouldDropEvent(e,o))return null}return e})},ed.prototype._shouldDropEvent=function(e,t){return this._isSentryError(e,t)?(Xl.warn("Event dropped due to being internal Sentry Error.\nEvent: "+jl(e)),!0):this._isIgnoredError(e,t)?(Xl.warn("Event dropped due to being matched by `ignoreErrors` option.\nEvent: "+jl(e)),!0):this._isBlacklistedUrl(e,t)?(Xl.warn("Event dropped due to being matched by `blacklistUrls` option.\nEvent: "+jl(e)+".\nUrl: "+this._getEventFilterUrl(e)),!0):!this._isWhitelistedUrl(e,t)&&(Xl.warn("Event dropped due to not being matched by `whitelistUrls` option.\nEvent: "+jl(e)+".\nUrl: "+this._getEventFilterUrl(e)),!0)},ed.prototype._isSentryError=function(e,t){if(void 0===t&&(t={}),!t.ignoreInternal)return!1;try{return e&&e.exception&&e.exception.values&&e.exception.values[0]&&"SentryError"===e.exception.values[0].type||!1}catch(e){return!1}},ed.prototype._isIgnoredError=function(e,n){return void 0===n&&(n={}),!(!n.ignoreErrors||!n.ignoreErrors.length)&&this._getPossibleEventMessages(e).some(function(t){return n.ignoreErrors.some(function(e){return nu(t,e)})})},ed.prototype._isBlacklistedUrl=function(e,t){if(void 0===t&&(t={}),!t.blacklistUrls||!t.blacklistUrls.length)return!1;var n=this._getEventFilterUrl(e);return!!n&&t.blacklistUrls.some(function(e){return nu(n,e)})},ed.prototype._isWhitelistedUrl=function(e,t){if(void 0===t&&(t={}),!t.whitelistUrls||!t.whitelistUrls.length)return!0;var n=this._getEventFilterUrl(e);return!n||t.whitelistUrls.some(function(e){return nu(n,e)})},ed.prototype._mergeOptions=function(e){return void 0===e&&(e={}),{blacklistUrls:_l(this._options.blacklistUrls||[],e.blacklistUrls||[]),ignoreErrors:_l(this._options.ignoreErrors||[],e.ignoreErrors||[],Zu),ignoreInternal:void 0===this._options.ignoreInternal||this._options.ignoreInternal,whitelistUrls:_l(this._options.whitelistUrls||[],e.whitelistUrls||[])}},ed.prototype._getPossibleEventMessages=function(t){if(t.message)return[t.message];if(t.exception)try{var e=t.exception.values&&t.exception.values[0]||{},n=e.type,r=e.value,i=void 0===r?"":r;return[""+i,(void 0===n?"":n)+": "+i]}catch(e){return Xl.error("Cannot extract message for event "+jl(t)),[]}return[]},ed.prototype._getEventFilterUrl=function(t){try{if(t.stacktrace){var e=t.stacktrace.frames;return e&&e[e.length-1].filename||null}if(t.exception){var n=t.exception.values&&t.exception.values[0].stacktrace&&t.exception.values[0].stacktrace.frames;return n&&n[n.length-1].filename||null}return null}catch(e){return Xl.error("Cannot extract url for event "+jl(t)),null}},ed.id="InboundFilters",ed);function ed(e){void 0===e&&(e={}),this._options=e,this.name=ed.id}var td=Object.freeze({__proto__:null,FunctionToString:Ku,InboundFilters:Ju}),nd="?",rd=/^\s*at (?:(.*?) ?\()?((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|[-a-z]+:|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i,id=/^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension).*?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js))(?::(\d+))?(?::(\d+))?\s*$/i,od=/^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i,ad=/(\S+) line (\d+)(?: > eval line \d+)* > eval/i,sd=/\((\S*)(?::(\d+))(?::(\d+))\)/;function cd(e){var t=null,n=e&&e.framesToPop;try{if(t=function(e){if(!e||!e.stacktrace)return null;for(var t,n=e.stacktrace,r=/ line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i,i=/ line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^\)]+))\((.*)\))? in (.*):\s*$/i,o=n.split("\n"),a=[],s=0;s<o.length;s+=2){var c=null;(t=r.exec(o[s]))?c={url:t[2],func:t[3],args:[],line:+t[1],column:null}:(t=i.exec(o[s]))&&(c={url:t[6],func:t[3]||t[4],args:t[5]?t[5].split(","):[],line:+t[1],column:+t[2]}),c&&(!c.func&&c.line&&(c.func=nd),a.push(c))}return a.length?{message:ud(e),name:e.name,stack:a}:null}(e))return ld(t,n)}catch(e){}try{if(t=function(e){if(!e||!e.stack)return null;for(var t,n,r,i=[],o=e.stack.split("\n"),a=0;a<o.length;++a){if(n=rd.exec(o[a])){var s=n[2]&&0===n[2].indexOf("native");n[2]&&0===n[2].indexOf("eval")&&(t=sd.exec(n[2]))&&(n[2]=t[1],n[3]=t[2],n[4]=t[3]),r={url:n[2],func:n[1]||nd,args:s?[n[2]]:[],line:n[3]?+n[3]:null,column:n[4]?+n[4]:null}}else if(n=od.exec(o[a]))r={url:n[2],func:n[1]||nd,args:[],line:+n[3],column:n[4]?+n[4]:null};else{if(!(n=id.exec(o[a])))continue;n[3]&&-1<n[3].indexOf(" > eval")&&(t=ad.exec(n[3]))?(n[1]=n[1]||"eval",n[3]=t[1],n[4]=t[2],n[5]=""):0!==a||n[5]||void 0===e.columnNumber||(i[0].column=e.columnNumber+1),r={url:n[3],func:n[1]||nd,args:n[2]?n[2].split(","):[],line:n[4]?+n[4]:null,column:n[5]?+n[5]:null}}!r.func&&r.line&&(r.func=nd),i.push(r)}return i.length?{message:ud(e),name:e.name,stack:i}:null}(e))return ld(t,n)}catch(e){}return{message:ud(e),name:e&&e.name,stack:[],failed:!0}}function ld(t,e){try{return vl({},t,{stack:t.stack.slice(e)})}catch(e){return t}}function ud(e){var t=e&&e.message;return t?t.error&&"string"==typeof t.error.message?t.error.message:t:"No error message"}var dd=50;function pd(e){var t=md(e.stack),n={type:e.name,value:e.message};return t&&t.length&&(n.stacktrace={frames:t}),void 0===n.type&&""===n.value&&(n.value="Unrecoverable error caught"),n}function fd(e,t,n){var r={exception:{values:[{type:Tl(e)?e.constructor.name:n?"UnhandledRejection":"Error",value:"Non-Error "+(n?"promise rejection":"exception")+" captured with keys: "+function(e,t){void 0===t&&(t=40);var n=Object.keys(iu(e));if(n.sort(),!n.length)return"[object has no keys]";if(n[0].length>=t)return eu(n[0],t);for(var r=n.length;0<r;r--){var i=n.slice(0,r).join(", ");if(!(i.length>t))return r===n.length?i:eu(i,t)}return""}(e)}]},extra:{__serialized__:function e(t,n,r){void 0===n&&(n=3),void 0===r&&(r=102400);var i=cu(t,n);return ou(i)>r?e(t,n-1,r):i}(e)}};if(t){var i=md(cd(t).stack);r.stacktrace={frames:i}}return r}function hd(e){return{exception:{values:[pd(e)]}}}function md(e){if(!e||!e.length)return[];var t=e,n=t[0].func||"",r=t[t.length-1].func||"";return-1===n.indexOf("captureMessage")&&-1===n.indexOf("captureException")||(t=t.slice(1)),-1!==r.indexOf("sentryWrapped")&&(t=t.slice(0,-1)),t.map(function(e){return{colno:null===e.column?void 0:e.column,filename:e.url||t[0].url,function:e.func||"?",in_app:!0,lineno:null===e.line?void 0:e.line}}).slice(0,dd).reverse()}function vd(e,t,n){var r,i;if(void 0===n&&(n={}),El(e)&&e.error)return r=hd(cd(e=e.error));if(kl(e)||(i=e,"[object DOMException]"===Object.prototype.toString.call(i))){var o=e,a=o.name||(kl(o)?"DOMError":"DOMException"),s=o.message?a+": "+o.message:a;return Bl(r=gd(s,t,n),s),r}return Sl(e)?r=hd(cd(e)):(Il(e)||Tl(e)?zl(r=fd(e,t,n.rejection),{synthetic:!0}):(Bl(r=gd(e,t,n),""+e,void 0),zl(r,{synthetic:!0})),r)}function gd(e,t,n){void 0===n&&(n={});var r={message:e};if(n.attachStacktrace&&t){var i=md(cd(t).stack);r.stacktrace={frames:i}}return r}var yd=(_d.prototype.sendEvent=function(e){throw new Al("Transport Class has to implement `sendEvent` method")},_d.prototype.close=function(e){return this._buffer.drain(e)},_d);function _d(e){this.options=e,this._buffer=new du(30),this.url=new Mu(this.options.dsn).getStoreEndpointWithUrlEncodedAuth()}var bd,wd=Ul(),Ad=(ll(Cd,bd=yd),Cd.prototype.sendEvent=function(e){var t=this;if(new Date(Date.now())<this._disabledUntil)return Promise.reject({event:e,reason:"Transport locked till "+this._disabledUntil+" due to too many requests.",status:429});var d={body:JSON.stringify(e),method:"POST",referrerPolicy:function(){if(fu())try{return new Request("_",{referrerPolicy:"origin"}),1}catch(e){return}}()?"origin":""};return this._buffer.add(new lu(function(o,a){return s=t,u=function(){var t,n,r,i;return gl(this,function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),[4,wd.fetch(this.url,d)];case 1:return t=e.sent(),[3,3];case 2:return n=e.sent(),a(n),[2];case 3:return(r=fl.fromHttpCode(t.status))===fl.Success?o({status:r}):(r===fl.RateLimit&&(i=Date.now(),this._disabledUntil=new Date(i+Gl(i,t.headers.get("Retry-After"))),Xl.warn("Too many requests, backing off till: "+this._disabledUntil)),a(t)),[2]}})},new(l=(l=c=void 0)||Promise)(function(e,t){function n(e){try{i(u.next(e))}catch(e){t(e)}}function r(e){try{i(u.throw(e))}catch(e){t(e)}}function i(t){t.done?e(t.value):new l(function(e){e(t.value)}).then(n,r)}i((u=u.apply(s,c||[])).next())});var s,c,l,u}))},Cd);function Cd(){var e=null!==bd&&bd.apply(this,arguments)||this;return e._disabledUntil=new Date(Date.now()),e}var Sd,Ed=(ll(kd,Sd=yd),kd.prototype.sendEvent=function(e){var o=this;return new Date(Date.now())<this._disabledUntil?Promise.reject({event:e,reason:"Transport locked till "+this._disabledUntil+" due to too many requests.",status:429}):this._buffer.add(new lu(function(n,r){var i=new XMLHttpRequest;i.onreadystatechange=function(){if(4===i.readyState){var e=fl.fromHttpCode(i.status);if(e!==fl.Success){if(e===fl.RateLimit){var t=Date.now();o._disabledUntil=new Date(t+Gl(t,i.getResponseHeader("Retry-After"))),Xl.warn("Too many requests, backing off till: "+o._disabledUntil)}r(i)}else n({status:e})}},i.open("POST",o.url),i.send(JSON.stringify(e))}))},kd);function kd(){var e=null!==Sd&&Sd.apply(this,arguments)||this;return e._disabledUntil=new Date(Date.now()),e}var xd,Fd=Object.freeze({__proto__:null,BaseTransport:yd,FetchTransport:Ad,XHRTransport:Ed}),Id=(ll(Td,xd=qu),Td.prototype._setupTransport=function(){if(!this._options.dsn)return xd.prototype._setupTransport.call(this);var e=vl({},this._options.transportOptions,{dsn:this._options.dsn});return this._options.transport?new this._options.transport(e):new(fu()?Ad:Ed)(e)},Td.prototype.eventFromException=function(e,t){var n=vd(e,t&&t.syntheticException||void 0,{attachStacktrace:this._options.attachStacktrace});return zl(n,{handled:!0,type:"generic"}),n.level=ul.Error,t&&t.event_id&&(n.event_id=t.event_id),lu.resolve(n)},Td.prototype.eventFromMessage=function(e,t,n){void 0===t&&(t=ul.Info);var r=gd(e,n&&n.syntheticException||void 0,{attachStacktrace:this._options.attachStacktrace});return r.level=t,n&&n.event_id&&(r.event_id=n.event_id),lu.resolve(r)},Td);function Td(){return null!==xd&&xd.apply(this,arguments)||this}var Od,Nd="sentry.javascript.browser",Rd="5.8.0",Dd=(ll(Ud,Od=Wu),Ud.prototype._prepareEvent=function(e,t,n){return e.platform=e.platform||"javascript",e.sdk=vl({},e.sdk,{name:Nd,packages:_l(e.sdk&&e.sdk.packages||[],[{name:"npm:@sentry/browser",version:Rd}]),version:Rd}),Od.prototype._prepareEvent.call(this,e,t,n)},Ud.prototype.showReportDialog=function(e){void 0===e&&(e={});var t=Ul().document;if(t)if(this._isEnabled()){var n=e.dsn||this.getDsn();if(e.eventId)if(n){var r=t.createElement("script");r.async=!0,r.src=new Mu(n).getReportDialogEndpoint(e),e.onLoad&&(r.onload=e.onLoad),(t.head||t.body).appendChild(r)}else Xl.error("Missing `Dsn` option in showReportDialog call");else Xl.error("Missing `eventId` option in showReportDialog call")}else Xl.error("Trying to call showReportDialog with Sentry Client is disabled")},Ud);function Ud(e){return void 0===e&&(e={}),Od.call(this,Id,e)||this}var Ld,Pd,jd=0;function Md(){return 0<jd}function Bd(t,r,i){if(void 0===r&&(r={}),"function"!=typeof t)return t;try{if(t.__sentry__)return t;if(t.__sentry_wrapped__)return t.__sentry_wrapped__}catch(e){return t}function e(){i&&"function"==typeof i&&i.apply(this,arguments);var n=Array.prototype.slice.call(arguments);try{var e=n.map(function(e){return Bd(e,r)});return t.handleEvent?t.handleEvent.apply(this,e):t.apply(this,e)}catch(t){throw jd+=1,setTimeout(function(){--jd}),Du(function(e){e.addEventProcessor(function(e){var t=vl({},e);return r.mechanism&&(Bl(t,void 0,void 0),zl(t,r.mechanism)),t.extra=vl({},t.extra,{arguments:cu(n,3)}),t}),Nu(t)}),t}}try{for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}catch(e){}t.prototype=t.prototype||{},e.prototype=t.prototype,Object.defineProperty(t,"__sentry_wrapped__",{enumerable:!1,value:e}),Object.defineProperties(e,{__sentry__:{enumerable:!1,value:!0},__sentry_original__:{enumerable:!1,value:t}});try{Object.getOwnPropertyDescriptor(e,"name").configurable&&Object.defineProperty(e,"name",{get:function(){return t.name}})}catch(e){}return e}var zd=0;function $d(n,r){return void 0===r&&(r=!1),function(e){if(Ld=void 0,e&&Pd!==e){Pd=e;function t(){var t;try{t=e.target?$l(e.target):$l(e)}catch(e){t="<unknown>"}0!==t.length&&xu().addBreadcrumb({category:"ui."+n,message:t},{event:e,name:n})}zd&&clearTimeout(zd),r?zd=setTimeout(t):t()}}}function Wd(){return function(e){var t;try{t=e.target}catch(e){return}var n=t&&t.tagName;n&&("INPUT"===n||"TEXTAREA"===n||t.isContentEditable)&&(Ld||$d("input")(e),clearTimeout(Ld),Ld=setTimeout(function(){Ld=void 0},1e3))}}var Gd=(Hd.prototype.setupOnce=function(){Error.stackTraceLimit=50,this._options.onerror&&(Xl.log("Global Handler attached: onerror"),this._installGlobalOnErrorHandler()),this._options.onunhandledrejection&&(Xl.log("Global Handler attached: onunhandledrejection"),this._installGlobalOnUnhandledRejectionHandler())},Hd.prototype._installGlobalOnErrorHandler=function(){if(!this._onErrorHandlerInstalled){var u=this;this._oldOnErrorHandler=this._global.onerror,this._global.onerror=function(e,t,n,r,i){var o=xu(),a=o.getIntegration(Hd),s=i&&!0===i.__sentry_own_request__;if(!a||Md()||s)return!!u._oldOnErrorHandler&&u._oldOnErrorHandler.apply(this,arguments);var c=o.getClient(),l=Fl(i)?u._eventFromIncompleteOnError(e,t,n,r):u._enhanceEventWithInitialFrame(vd(i,void 0,{attachStacktrace:c&&c.getOptions().attachStacktrace,rejection:!1}),t,n,r);return zl(l,{handled:!1,type:"onerror"}),o.captureEvent(l,{originalException:i}),!!u._oldOnErrorHandler&&u._oldOnErrorHandler.apply(this,arguments)},this._onErrorHandlerInstalled=!0}},Hd.prototype._installGlobalOnUnhandledRejectionHandler=function(){if(!this._onUnhandledRejectionHandlerInstalled){var s=this;this._oldOnUnhandledRejectionHandler=this._global.onunhandledrejection,this._global.onunhandledrejection=function(e){var t=e;try{t=e&&"reason"in e?e.reason:e}catch(e){}var n=xu(),r=n.getIntegration(Hd),i=t&&!0===t.__sentry_own_request__;if(!r||Md()||i)return!!s._oldOnUnhandledRejectionHandler&&s._oldOnUnhandledRejectionHandler.apply(this,arguments);var o=n.getClient(),a=Fl(t)?s._eventFromIncompleteRejection(t):vd(t,void 0,{attachStacktrace:o&&o.getOptions().attachStacktrace,rejection:!0});return a.level=ul.Error,zl(a,{handled:!1,type:"onunhandledrejection"}),n.captureEvent(a,{originalException:t}),!!s._oldOnUnhandledRejectionHandler&&s._oldOnUnhandledRejectionHandler.apply(this,arguments)},this._onUnhandledRejectionHandlerInstalled=!0}},Hd.prototype._eventFromIncompleteOnError=function(e,t,n,r){var i,o=El(e)?e.message:e;if(xl(o)){var a=o.match(/^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i);a&&(i=a[1],o=a[2])}var s={exception:{values:[{type:i||"Error",value:o}]}};return this._enhanceEventWithInitialFrame(s,t,n,r)},Hd.prototype._eventFromIncompleteRejection=function(e){return{exception:{values:[{type:"UnhandledRejection",value:"Non-Error promise rejection captured with value: "+e}]}}},Hd.prototype._enhanceEventWithInitialFrame=function(e,t,n,r){e.exception=e.exception||{},e.exception.values=e.exception.values||[],e.exception.values[0]=e.exception.values[0]||{},e.exception.values[0].stacktrace=e.exception.values[0].stacktrace||{},e.exception.values[0].stacktrace.frames=e.exception.values[0].stacktrace.frames||[];var i=isNaN(parseInt(r,10))?void 0:r,o=isNaN(parseInt(n,10))?void 0:n,a=xl(t)&&0<t.length?t:function(){try{return document.location.href}catch(e){return""}}();return 0===e.exception.values[0].stacktrace.frames.length&&e.exception.values[0].stacktrace.frames.push({colno:i,filename:a,function:"?",in_app:!0,lineno:o}),e},Hd.id="GlobalHandlers",Hd);function Hd(e){this.name=Hd.id,this._global=Ul(),this._oldOnErrorHandler=null,this._oldOnUnhandledRejectionHandler=null,this._onErrorHandlerInstalled=!1,this._onUnhandledRejectionHandlerInstalled=!1,this._options=vl({onerror:!0,onunhandledrejection:!0},e)}var Vd=(Qd.prototype._wrapTimeFunction=function(r){return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e[0];return e[0]=Bd(n,{mechanism:{data:{function:qd(r)},handled:!0,type:"instrument"}}),r.apply(this,e)}},Qd.prototype._wrapRAF=function(t){return function(e){return t(Bd(e,{mechanism:{data:{function:"requestAnimationFrame",handler:qd(t)},handled:!0,type:"instrument"}}))}},Qd.prototype._wrapEventTarget=function(i){var e=Ul(),t=e[i]&&e[i].prototype;t&&t.hasOwnProperty&&t.hasOwnProperty("addEventListener")&&(ru(t,"addEventListener",function(r){return function(e,t,n){try{"function"==typeof t.handleEvent&&(t.handleEvent=Bd(t.handleEvent.bind(t),{mechanism:{data:{function:"handleEvent",handler:qd(t),target:i},handled:!0,type:"instrument"}}))}catch(e){}return r.call(this,e,Bd(t,{mechanism:{data:{function:"addEventListener",handler:qd(t),target:i},handled:!0,type:"instrument"}}),n)}}),ru(t,"removeEventListener",function(i){return function(e,t,n){var r=t;try{r=r&&(r.__sentry_wrapped__||r)}catch(e){}return i.call(this,e,r,n)}}))},Qd.prototype.setupOnce=function(){this._ignoreOnError=this._ignoreOnError;var e=Ul();ru(e,"setTimeout",this._wrapTimeFunction.bind(this)),ru(e,"setInterval",this._wrapTimeFunction.bind(this)),ru(e,"requestAnimationFrame",this._wrapRAF.bind(this)),["EventTarget","Window","Node","ApplicationCache","AudioTrackList","ChannelMergerNode","CryptoOperation","EventSource","FileReader","HTMLUnknownElement","IDBDatabase","IDBRequest","IDBTransaction","KeyOperation","MediaController","MessagePort","ModalWindow","Notification","SVGElementInstance","Screen","TextTrack","TextTrackCue","TextTrackList","WebSocket","WebSocketWorker","Worker","XMLHttpRequest","XMLHttpRequestEventTarget","XMLHttpRequestUpload"].forEach(this._wrapEventTarget.bind(this))},Qd.id="TryCatch",Qd);function Qd(){this._ignoreOnError=0,this.name=Qd.id}function qd(e){try{return e&&e.name||"<anonymous>"}catch(e){return"<anonymous>"}}var Yd,Kd=Ul(),Xd=(Zd.prototype._instrumentConsole=function(){"console"in Kd&&["debug","info","warn","error","log","assert"].forEach(function(i){i in Kd.console&&ru(Kd.console,i,function(r){return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n={category:"console",data:{extra:{arguments:cu(e,3)},logger:"console"},level:ul.fromString(i),message:tu(e," ")};"assert"===i?!1===e[0]&&(n.message="Assertion failed: "+(tu(e.slice(1)," ")||"console.assert"),n.data.extra.arguments=cu(e.slice(1),3),Zd.addBreadcrumb(n,{input:e,level:i})):Zd.addBreadcrumb(n,{input:e,level:i}),r&&Function.prototype.apply.call(r,Kd.console,e)}})})},Zd.prototype._instrumentDOM=function(){"document"in Kd&&(Kd.document.addEventListener("click",$d("click"),!1),Kd.document.addEventListener("keypress",Wd(),!1),["EventTarget","Node"].forEach(function(e){var t=Kd[e]&&Kd[e].prototype;t&&t.hasOwnProperty&&t.hasOwnProperty("addEventListener")&&(ru(t,"addEventListener",function(r){return function(e,t,n){return t&&t.handleEvent?("click"===e&&ru(t,"handleEvent",function(t){return function(e){return $d("click")(e),t.call(this,e)}}),"keypress"===e&&ru(t,"handleEvent",function(t){return function(e){return Wd()(e),t.call(this,e)}})):("click"===e&&$d("click",!0)(this),"keypress"===e&&Wd()(this)),r.call(this,e,t,n)}}),ru(t,"removeEventListener",function(i){return function(e,t,n){var r=t;try{r=r&&(r.__sentry_wrapped__||r)}catch(e){}return i.call(this,e,r,n)}}))}))},Zd.prototype._instrumentFetch=function(){hu()&&ru(Kd,"fetch",function(l){return function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n,r=t[0],i="GET";"string"==typeof r?n=r:"Request"in Kd&&r instanceof Request?(n=r.url,r.method&&(i=r.method)):n=String(r),t[1]&&t[1].method&&(i=t[1].method);var o=xu().getClient(),a=o&&o.getDsn();if(a){var s=new Mu(a).getStoreEndpoint();if(s&&-1!==n.indexOf(s))return"POST"===i&&t[1]&&t[1].body&&Jd(t[1].body),l.apply(Kd,t)}var c={method:xl(i)?i.toUpperCase():i,url:n};return l.apply(Kd,t).then(function(e){return c.status_code=e.status,Zd.addBreadcrumb({category:"fetch",data:c,type:"http"},{input:t,response:e}),e}).then(null,function(e){throw Zd.addBreadcrumb({category:"fetch",data:c,level:ul.Error,type:"http"},{error:e,input:t}),e})}})},Zd.prototype._instrumentHistory=function(){var r=this;if(e=Ul(),t=e.chrome,n=t&&t.app&&t.app.runtime,i="history"in e&&!!e.history.pushState&&!!e.history.replaceState,!n&&i){var e,t,n,i,o=function(e,t){var n=Pl(Kd.location.href),r=Pl(t),i=Pl(e);i.path||(i=n),Yd=t,n.protocol===r.protocol&&n.host===r.host&&(t=r.relative),n.protocol===i.protocol&&n.host===i.host&&(e=i.relative),Zd.addBreadcrumb({category:"navigation",data:{from:e,to:t}})},a=Kd.onpopstate;Kd.onpopstate=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Kd.location.href;if(o(Yd,n),a)return a.apply(r,e)},ru(Kd.history,"pushState",s),ru(Kd.history,"replaceState",s)}function s(r){return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=2<e.length?e[2]:void 0;return n&&o(Yd,String(n)),r.apply(this,e)}}},Zd.prototype._instrumentXHR=function(){if("XMLHttpRequest"in Kd){var e=XMLHttpRequest.prototype;ru(e,"open",function(a){return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e[1];this.__sentry_xhr__={method:xl(e[0])?e[0].toUpperCase():e[0],url:e[1]};var r=xu().getClient(),i=r&&r.getDsn();if(i){var o=new Mu(i).getStoreEndpoint();xl(n)&&o&&-1!==n.indexOf(o)&&(this.__sentry_own_request__=!0)}return a.apply(this,e)}}),ru(e,"send",function(i){return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=this;function n(){if(4===r.readyState){if(r.__sentry_own_request__)return;try{r.__sentry_xhr__&&(r.__sentry_xhr__.status_code=r.status)}catch(e){}Zd.addBreadcrumb({category:"xhr",data:r.__sentry_xhr__,type:"http"},{xhr:r})}}return r.__sentry_own_request__&&Jd(e[0]),["onload","onerror","onprogress"].forEach(function(e){var t,n;(t=e)in(n=r)&&"function"==typeof n[t]&&ru(n,t,function(e){return Bd(e,{mechanism:{data:{function:t,handler:e&&e.name||"<anonymous>"},handled:!0,type:"instrument"}})})}),"onreadystatechange"in r&&"function"==typeof r.onreadystatechange?ru(r,"onreadystatechange",function(e){return Bd(e,{mechanism:{data:{function:"onreadystatechange",handler:e&&e.name||"<anonymous>"},handled:!0,type:"instrument"}},n)}):r.onreadystatechange=n,i.apply(this,e)}})}},Zd.addBreadcrumb=function(e,t){xu().getIntegration(Zd)&&xu().addBreadcrumb(e,t)},Zd.prototype.setupOnce=function(){this._options.console&&this._instrumentConsole(),this._options.dom&&this._instrumentDOM(),this._options.xhr&&this._instrumentXHR(),this._options.fetch&&this._instrumentFetch(),this._options.history&&this._instrumentHistory()},Zd.id="Breadcrumbs",Zd);function Zd(e){this.name=Zd.id,this._options=vl({console:!0,dom:!0,fetch:!0,history:!0,sentry:!0,xhr:!0},e)}function Jd(e){try{var t=JSON.parse(e);Xd.addBreadcrumb({category:"sentry",event_id:t.event_id,level:t.level||ul.fromString("error"),message:jl(t)},{event:t})}catch(e){Xl.error("Error while adding sentry type breadcrumb")}}var ep=(tp.prototype.setupOnce=function(){wu(function(e,t){var n=xu().getIntegration(tp);return n?n._handler(e,t):e})},tp.prototype._handler=function(e,t){if(!(e.exception&&e.exception.values&&t&&t.originalException instanceof Error))return e;var n=this._walkErrorTree(t.originalException,this._key);return e.exception.values=_l(n,e.exception.values),e},tp.prototype._walkErrorTree=function(e,t,n){if(void 0===n&&(n=[]),!(e[t]instanceof Error)||n.length+1>=this._limit)return n;var r=pd(cd(e[t]));return this._walkErrorTree(e[t],t,_l([r],n))},tp.id="LinkedErrors",tp);function tp(e){void 0===e&&(e={}),this.name=tp.id,this._key=e.key||"cause",this._limit=e.limit||5}var np=Ul(),rp=(ip.prototype.setupOnce=function(){wu(function(e){if(xu().getIntegration(ip)){if(!np.navigator||!np.location)return e;var t=e.request||{};return t.url=t.url||np.location.href,t.headers=t.headers||{},t.headers["User-Agent"]=np.navigator.userAgent,vl({},e,{request:t})}return e})},ip.id="UserAgent",ip);function ip(){this.name=ip.id}var op=Object.freeze({__proto__:null,GlobalHandlers:Gd,TryCatch:Vd,Breadcrumbs:Xd,LinkedErrors:ep,UserAgent:rp}),ap=[new Ju,new Ku,new Vd,new Xd,new Gd,new ep,new rp];function sp(e){if(void 0===e&&(e={}),void 0===e.defaultIntegrations&&(e.defaultIntegrations=ap),void 0===e.release){var t=Ul();t.SENTRY_RELEASE&&t.SENTRY_RELEASE.id&&(e.release=t.SENTRY_RELEASE.id)}var n,r;n=Dd,!0===(r=e).debug&&Xl.enable(),xu().bindClient(new n(r))}var cp={},lp=Ul();lp.Sentry&&lp.Sentry.Integrations&&(cp=lp.Sentry.Integrations);function up(){var e=this,t=e.$createElement,n=e._self._c||t;return n("transition",{attrs:{appear:"","appear-class":"fsp-picker-appear","appear-to-class":"fsp-picker-appear-to","appear-active-class":"fsp-picker-appear-active"}},[n("error-boundary",[n("div",{directives:[{name:"show",rawName:"v-show",value:e.uiVisible,expression:"uiVisible"}],class:e.getClasses,attrs:{id:e.rootId}},[n("div",{staticClass:"fsp-picker-holder"},[e.isRootRoute("source")?n("pick-from-source"):e._e(),e._v(" "),e.isRootRoute("summary")?n("upload-summary"):e._e(),e._v(" "),e.isRootRoute("transform")?n("transform"):e._e(),e._v(" "),n("notifications"),e._v(" "),e.localPickingAllowed&&!e.isRootRoute("transform")?n("drag-and-drop"):e._e()],1)])])],1)}var dp=vl({},cp,td,op),pp=Object.freeze({__proto__:null,Integrations:dp,Transports:Fd,get Severity(){return ul},get Status(){return fl},addGlobalEventProcessor:wu,addBreadcrumb:function(e){Ou("addBreadcrumb",e)},captureException:Nu,captureEvent:function(e){return Ou("captureEvent",e)},captureMessage:function(e,t){var n;try{throw new Error(e)}catch(e){n=e}return Ou("captureMessage",e,t,{originalException:e,syntheticException:n})},configureScope:Ru,getHubFromCarrier:Iu,getCurrentHub:xu,Hub:Cu,Scope:yu,setContext:function(e,t){Ou("setContext",e,t)},setExtra:function(e,t){Ou("setExtra",e,t)},setExtras:function(e){Ou("setExtras",e)},setTag:function(e,t){Ou("setTag",e,t)},setTags:function(e){Ou("setTags",e)},setUser:function(e){Ou("setUser",e)},Span:vu,withScope:Du,BrowserClient:Dd,defaultIntegrations:ap,forceLoad:function(){},init:sp,lastEventId:function(){return xu().lastEventId()},onLoad:function(e){e()},showReportDialog:function(e){void 0===e&&(e={}),e.eventId||(e.eventId=xu().lastEventId());var t=xu().getClient();t&&t.showReportDialog(e)},flush:function(e){var t=xu().getClient();return t?t.flush(e):lu.reject(!1)},close:function(e){var t=xu().getClient();return t?t.close(e):lu.reject(!1)},wrap:function(e){return Bd(e)()},SDK_NAME:Nd,SDK_VERSION:Rd}),fp=oa({},void 0,{name:"ErrorBoundary",data:function(){return{sentry:null}},computed:_objectSpread({},ra.mapGetters(["apiClient","config"])),methods:{initSentry:function(){var e=this.config.useSentryBreadcrumbs?[new dp.Breadcrumbs]:[];sp({dsn:i.sentryDSN,release:"picker@1.12.0",defaultIntegrations:!1,integrations:e}),this.sentry=pp},formatComponentName:function(e){if(e.$root===e)return"root instance";var t=e._isVue?e.$options.name||e.$options._componentTag:e.name;return(t?"component <".concat(t,">"):"anonymous component")+(e._isVue&&e.$options.__file?" at ".concat(e.$options.__file):"")}},errorCaptured:function(e,t,n){var r=this,i={};i.componentName=this.formatComponentName(t),i.propsData=t.$options.propsData,void 0!==n&&(i.lifecycleHook=n),Ru(function(e){e.setExtra("config",r.config),e.setTag("version","1.12.0"),e.setTag("apikey",r.apiClient.session.apikey),e.setContext("vue",i)}),this.sentry.captureException(e)},mounted:function(){this.initSentry()},render:function(){return this.$slots.default[0]}},void 0,void 0,void 0,!1,void 0,void 0,void 0),hp=is.filter(function(e){return"cloud"===e.ui}).map(function(e){return e.name}).reduce(function(e,t){return e[t]={status:"initialized"},e},{}),mp={clouds:_objectSpread({},hp),cloudFolders:{},selectedCloudPath:null},vp={SET_CLOUD_PATH:function(e,t){var n=t.name,r=t.path,i=t.payload,o=i,a=e.clouds[n];a.contents&&a.contents[r]&&(o=a.contents[r].concat(i)),Fn.set(a,"contents",_objectSpread({},a.contents,_defineProperty({},r,o))),Fn.set(e.clouds[n],"status","ready")},SET_CLOUD_REDIRECT:function(e,t){var n=t.name,r=t.payload.auth.redirect_url;e.clouds[n]&&(Fn.set(e.clouds[n],"redirect",r),Fn.set(e.clouds[n],"status","unauthorized"))},SET_CLOUD_NEXT:function(e,t){var n=t.name,r=t.path,i=t.next;e.clouds[n]&&Fn.set(e.clouds[n],"next",_objectSpread({},e.clouds[n].next,_defineProperty({},r,i)))},SET_CLOUD_LOADING:function(e,t){e.clouds[t]&&Fn.set(e.clouds[t],"status","loading")},SET_CLOUD_ERROR:function(e,t){var n=e.clouds[t];n&&Fn.set(n,"status","errored")},REMOVE_CLOUD_PATHS:function(e,t){e.clouds[t]&&(e.clouds[t]={status:"initialized"})},REMOVE_ALL_CLOUD_PATHS:function(e){e.clouds=_objectSpread({},hp)},SET_CLOUD_FOLDERS:function(t,e){e.forEach(function(e){t.cloudFolders[e.path]=_objectSpread({},t.cloudFolders[e.path],{name:e.name})})},SET_CLOUD_PATH_SELECTED:function(e,t){e.selectedCloudPath=t},SET_CLOUD_FOLDER_LOADING:function(e,t){var n=t.path,r=t.value;e.cloudFolders=_objectSpread({},e.cloudFolders,_defineProperty({},n,_objectSpread({},e.cloudFolders[n],{loading:r})))},RESET_CLOUD:function(){Object.keys(mp.clouds).forEach(function(e){mp.clouds[e].contents=null})}},gp={state:mp,mutations:vp,actions:{goToDirectory:function(e,t){var n=e.commit,r=e.dispatch,i=e.getters,o=i.currentCloud.name,a=i.currentCloud.path,s=t.path;r("fetchCloudPath",{name:o,path:s}).then(function(e){if(o===i.currentCloud.name&&void 0!==e){var t=a.concat([s]);n("CHANGE_ROUTE",["source",o,t])}})},logout:function(e,t){var n=e.commit,r=e.dispatch,i=e.getters;t?i.cloudClient.logout(t).then(function(){n("REMOVE_CLOUD_PATHS",t),n("REMOVE_SOURCE_FROM_WAITING",t),t===i.currentCloud.name&&n("CHANGE_ROUTE",["source",t]),n("REMOVE_SOURCE_FROM_ROUTES",t),r("fetchCloudPath",{name:t,path:"/"})}):i.cloudClient.logout().then(function(){n("REMOVE_ALL_CLOUD_PATHS"),n("REMOVE_CLOUDS_FROM_WAITING")})},onFetchSuccess:function(a,e){var s=e.name,c=e.path,l=e.res;return new Promise(function(e,t){var n=l[s];if(n&&n.auth&&n.auth.redirect_url)a.commit("SET_CLOUD_REDIRECT",{name:s,payload:n}),e();else if(n&&n.error){var r=n.error.text||"Error occurred.";t(new Error(r))}else if(n&&n.contents){var i=n.contents.map(function(e){return _objectSpread({source:s,sourceKind:"cloud"},e)});a.commit("SET_CLOUD_NEXT",{name:s,path:c,next:n.next});var o=i.filter(function(e){return e.folder});a.commit("SET_CLOUD_FOLDERS",o),a.commit("SET_CLOUD_PATH",{name:s,path:c,payload:i}),e(i)}else t(new Error("Empty response."))})},prefetchClouds:function(n){var e=n.getters.fromSources.filter(function(e){return"cloud"===e.ui}).map(function(e){return e.name}).reduce(function(e,t){return e[t]={path:"/"},"customsource"===t&&(e[t].customSourceContainer=n.getters.customSourceContainer,e[t].customSourcePath=n.getters.customSourcePath),e},{}),r=Object.keys(e);return r.length?(r.forEach(function(e){n.commit("SET_CLOUD_LOADING",e)}),n.getters.cloudClient.list(e).then(function(t){r.forEach(function(e){n.dispatch("onFetchSuccess",{name:e,path:"/",res:t}).catch(function(){n.commit("SET_CLOUD_ERROR",e)})})}).catch(function(){r.forEach(function(e){n.commit("SET_CLOUD_ERROR",e)})})):Promise.resolve()},addCloudFolder:function(e,t){var n=e.state,r=e.commit,i=e.dispatch,o=e.getters,a=t.name,s=t.path,c=t.next;return r("SET_CLOUD_FOLDER_LOADING",{path:s,value:!0}),i("fetchCloudPath",{name:a,path:s,load:!1,next:c}).then(function(e){if(e){r("SET_CLOUD_PATH_SELECTED",s),r("SET_CLOUD_FOLDER_LOADING",{path:s,value:!1}),e.filter(function(e){return!e.folder}).forEach(function(e){return i("addFile",e)}),r("SET_CLOUD_PATH_SELECTED",null);var t=n.clouds[a].next&&n.clouds[a].next[s];t&&o.fileCount!==o.maxFiles&&i("addCloudFolder",{name:a,path:s,next:t})}}).catch(function(e){return r("SET_CLOUD_FOLDER_LOADING",{path:s,value:!1}),i("showNotification",e.message)})},fetchCloudPath:function(e,t){var n=e.state,r=e.commit,i=e.getters,o=e.dispatch,a=t.name,s=t.path,c=void 0===s?"/":s,l=t.load,u=void 0===l||l,d=t.next,p=n.clouds[a];if(!d&&p&&p.contents&&p.contents[c])return Promise.resolve(p.contents[c]);var f=_defineProperty({},a,{path:c,next:d});return"customsource"===a&&(f.customsource.customSourceContainer=i.customSourceContainer,f.customsource.customSourcePath=i.customSourcePath),u&&r("SET_CLOUD_LOADING",a),i.cloudClient.list(f).then(function(e){return o("onFetchSuccess",{name:a,path:c,res:e})}).catch(function(e){return r("SET_CLOUD_ERROR",a),o("showNotification",e.message)})},goToLastPath:function(e,t){var n=e.getters,r=e.commit;if(n.currentCloud.name!==t){var i=n.routesHistory.filter(function(e){return e[1]===t}).pop();i&&i.length?r("CHANGE_ROUTE",i):r("CHANGE_ROUTE",["source",t])}}},getters:{clouds:function(e){return e.clouds},cloudFolders:function(e){return e.cloudFolders},currentCloud:function(e,t){var n,r,i=t.route,o=i[1],a=i[2]||["/"],s=(r=null==(n=a)?0:n.length)?n[r-1]:void 0;return e.clouds[o]?{name:o,path:a,lastPath:s,next:e.clouds[o].next&&e.clouds[o].next[s],redirect:e.clouds[o].redirect,isUnauthorized:"unauthorized"===e.clouds[o].status,isErrored:!e.clouds[o].contents&&"errored"===e.clouds[o].status,isLoading:"loading"===e.clouds[o].status}:{}},currentCloudFiles:function(e,t){var n=t.currentCloud,r=n.name,i=n.lastPath;return e.clouds[r]&&e.clouds[r].contents&&e.clouds[r].contents[i]||[]},selectedCloudPath:function(e){return e.selectedCloudPath}}},yp={components:{Blocked:Ya,DragAndDrop:la,Notifications:rs,PickFromSource:Vs,Transform:Xc,UploadSummary:sl,ErrorBoundary:fp},computed:_objectSpread({},ra.mapGetters(["cloudClient","cropFiles","fromSources","globalDropZone","isInlineDisplay","rootId","route","prefetched","uiVisible"]),{localPickingAllowed:function(){return this.route&&"local_file_system"===this.route[1]||this.globalDropZone},getClasses:function(){return{"fsp-picker--inline":this.isInlineDisplay}}}),methods:_objectSpread({},ra.mapActions(["addFile","prefetchClouds","showNotification"]),{isRootRoute:function(e){return this.route[0]===e},detectEscPressed:function(e){27===e.keyCode&&(this.$store.dispatch("cancelPick"),this.$root.$destroy())}}),created:function(){var t=this;this.isInlineDisplay||window.addEventListener("keyup",this.detectEscPressed),this.prefetched||this.cloudClient.prefetch().then(function(e){t.$store.commit("SET_PREFETCH",e),t.$store.commit("PREFETCH_DONE"),t.prefetchClouds()}).catch(function(){});var n=[];if(this.cropFiles&&this.cropFiles.length)return[].forEach.call(this.cropFiles,function(e){"string"==typeof e?n.push(t.cloudClient.metadata(e)):t.addFile(e)}),Promise.all(n).then(function(e){e.forEach(function(e){if(e.error)throw new Error(e.error);t.addFile(e)}),1<t.cropFiles.length&&t.$store.commit("CHANGE_ROUTE",["summary"])}).catch(function(){t.showNotification("Error fetching URL metadata."),setTimeout(function(){t.$store.dispatch("cancelPick"),t.$root.$destroy()},2e3)});if(window.URLSearchParams){var e=new window.URLSearchParams(window.location.search).get("fs-tab");if(e&&0<e.length)return this.$store.dispatch("goToLastPath",e)}return this.$store.commit("INITIAL_ROUTE")},destroyed:function(){window.removeEventListener("keyup",this.detectEscPressed)}};up._withStripped=!0;function _p(e){return"object"===_typeof2(e)&&null!==e&&!1===Array.isArray(e)}function bp(e){return e%1==0}function wp(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:t.containerClasses},[n("notifications"),t._v(" "),n("input",{ref:"fileUploadInput",staticClass:"fsp-drop-pane__input",attrs:{type:"file",accept:t.acceptStr,multiple:t.multiple,disabled:!t.canAddMoreFiles},on:{change:function(e){return t.onFilesSelected(e)},click:function(e){return t.clearEvent(e)}}}),t._v(" "),n("div",{ref:"dropZone",staticClass:"fsp-drop-pane__drop-zone",on:{click:t.openSelectFile}}),t._v(" "),t.dropPane.showIcon?n("div",{class:t.iconClasses}):t._e(),t._v(" "),t.dropPane.showProgress&&!t.uploadStarted?n("div",{staticClass:"fsp-drop-pane__text"},[t._v("\n    "+t._s(t.dropPane.customText||t.t("Drag and Drop, Copy and Paste Files"))+"\n  ")]):t.dropPane.showProgress&&t.uploadStarted?n("div",{staticClass:"fsp-drop-pane__text"},[t._v("\n    "+t._s(t.t("Uploaded")+" "+t.filesFinished+" "+t.t("of")+" "+t.fileCount)+"\n    "),n("div",{staticClass:"fsp-drop-pane__upload-progress",style:t.progressStyle})]):t._e(),t._v(" "),n("transition",{attrs:{name:"__fs-fade"}},[n("div",{directives:[{name:"show",rawName:"v-show",value:t.dropPane.overlay&&t.isDropping,expression:"dropPane.overlay && isDropping"}],ref:"dropOverlay",staticClass:"fsp-drop-pane__overlay"},[n("div",{staticClass:"fsp-drop-pane__overlay-box"},[n("div",{staticClass:"fsp-drop-pane__overlay-icon"}),t._v(" "),n("div",{staticClass:"fsp-drop-pane__overlay-header"},[t._v("\n          "+t._s(t.t("Drop your files anywhere"))+"\n        ")])])])])],1)}var Ap=oa({render:up,staticRenderFns:[]},void 0,yp,void 0,!1,void 0,!1,void 0,void 0,void 0),Cp="overlay",Sp="inline",Ep="dropPane",kp={dropPane:function(e){return e},displayMode:function(e){if([Cp,Sp].indexOf(e)<-1)throw new Error("Wrong display mode");return e||Cp},"dropPane.id":function(e){return e},"dropPane.overlay":function(e){return e},"dropPane.onDragEnter":function(e){if("function"!=typeof e)throw new Error('Invalid value for "dropPane.onDragEnter" config option');return e},"dropPane.onDragLeave":function(e){if("function"!=typeof e)throw new Error('Invalid value for "dropPane.onDragLeave" config option');return e},"dropPane.onDragOver":function(e){if("function"!=typeof e)throw new Error('Invalid value for "dropPane.onDragOver" config option');return e},"dropPane.onDrop":function(e){if("function"!=typeof e)throw new Error('Invalid value for "dropPane.onDrop" config option');return e},"dropPane.onSuccess":function(e){if("function"!=typeof e)throw new Error('Invalid value for "dropPane.onSuccess" config option');return e},"dropPane.onError":function(e){if("function"!=typeof e)throw new Error('Invalid value for "dropPane.onError" config option');return e},"dropPane.onProgress":function(e){if("function"!=typeof e)throw new Error('Invalid value for "dropPane.onProgress" config option');return e},"dropPane.onClick":function(e){if("function"!=typeof e)throw new Error('Invalid value for "dropPane.onClick" config option');return e},"dropPane.disableClick":function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "dropPane.disableClick" config option');return e},"dropPane.showIcon":function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "dropPane.showIcon" config option');return e},"dropPane.showProgress":function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "dropPane.showProgress" config option');return e},"dropPane.customText":function(e){if("string"!=typeof e)throw new Error('Invalid value for "dropPane.customText" config option');return e},"dropPane.cropFiles":function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "dropPane.cropFiles" config option');return e},rootId:function(e){if("string"!=typeof e)throw new Error('Invalid value for "rootId" config option');return e},cleanupImageExif:function(e){if("boolean"!=typeof e&&(!(e instanceof Object)||void 0===e.keepOrientation&&void 0===e.keepICCandAPP))throw new Error('Invalid value for "cleanupImageExif" config option');return e},fromSources:function(e){return"string"==typeof e&&(e=[e]),e.map(Xa).filter(function(e){return!e.deprecated})},customSourceContainer:function(e){if("string"!=typeof e)throw new Error('Invalid value for "customSourceContainer" config option');return e},customSourceName:function(e){if("string"!=typeof e)throw new Error('Invalid value for "customSourceName" config option');return e},customSourcePath:function(e){if("string"!=typeof e)throw new Error('Invalid value for "customSourcePath" config option');return e},accept:function(e){return"string"==typeof e&&(e=[e]),e.forEach(function(e){if("string"!=typeof e)throw new Error('Invalid value for "accept" config option')}),e},concurrency:function(e){if("number"!=typeof e||!bp(e)||e<1)throw new Error('Invalid value for "concurrency" config option');return e},maxSize:function(e){if("number"!=typeof e||!bp(e)||e<0)throw new Error('Invalid value for "maxSize" config option');return e},minFiles:function(e){if("number"!=typeof e||!bp(e)||e<0)throw new Error('Invalid value for "minFiles" config option');return e},maxFiles:function(e){if("number"!=typeof e||!bp(e)||e<0)throw new Error('Invalid value for "maxFiles" config option');return e},startUploadingWhenMaxFilesReached:function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "startUploadingWhenMaxFilesReached" config option');return e},loadCss:function(e){if("boolean"==typeof e&&!1===e||"string"==typeof e)return e;throw new Error('Invalid value for "loadCss" config option')},lang:function(e){if("boolean"==typeof e&&!1===e||"string"==typeof e)return e;throw new Error('Invalid value for "lang" config option')},viewType:function(e){if(-1===["list","grid"].indexOf(e))throw new Error('Invalid view type. Can be "list" or "grid"');return e},customText:function(e){if(_p(e))return e;throw new Error('Invalid value for "customText" config option')},storeTo:function(e){if(_p(e))return e;throw new Error('Invalid value for "storeTo" config option')},uploadConfig:function(e){if(_p(e))return e;throw new Error('Invalid value for "uploadConfig" config option')},hideModalWhenUploading:function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "hideModalWhenUploading" config option');return e},uploadInBackground:function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "uploadInBackground" config option');return e},allowManualRetry:function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "allowManualRetry" config option');return e},disableTransformer:function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "disableTransformer" config option');return e},disableThumbnails:function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "disableThumbnails" config option');return e},disableStorageKey:function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "disableStorageKey" config option');return e},onUploadStarted:function(e){if("function"!=typeof e)throw new Error('Invalid value for "onUploadStarted" config option');return e},onFileSelected:function(e){if("function"!=typeof e)throw new Error('Invalid value for "onFileSelected" config option');return e},onFileUploadStarted:function(e){if("function"!=typeof e)throw new Error('Invalid value for "onFileUploadStarted" config option');return e},onFileUploadProgress:function(e){if("function"!=typeof e)throw new Error('Invalid value for "onFileUploadProgress" config option');return e},onFileUploadFinished:function(e){if("function"!=typeof e)throw new Error('Invalid value for "onFileUploadFinished" config option');return e},onFileUploadFailed:function(e){if("function"!=typeof e)throw new Error('Invalid value for "onFileUploadFailed" config option');return e},onFileCropped:function(e){if("function"!=typeof e)throw new Error('Invalid value for "onFileCropped" config option');return e},onOpen:function(e){if("function"!=typeof e)throw new Error('Invalid value for "onOpen" config option');return e},onCancel:function(e){if("function"!=typeof e)throw new Error('Invalid value for "onCancel" config option');return e},onClose:function(e){if("function"!=typeof e)throw new Error('Invalid value for "onClose" config option');return e},onUploadDone:function(e){if("function"!=typeof e)throw new Error('Invalid value for "onUploadDone" config option');return e},videoResolution:function(e){if("string"!=typeof e)throw new Error('Invalid value for "videoResolution" config option');if(-1===["1280x720","640x480","320x240"].indexOf(e))throw new Error('Invalid value for "videoResolution" config option');return e},errorsTimeout:function(e){if("number"!=typeof e||e<=0)throw new Error("Timeout must be a number [ms] greater than 0");return e},transformations:function(e){if(_p(e))return e;throw new Error('Invalid value for "transformations" config option')},"transformations.crop":function(e){if(_p(e))return e;if(!0===e)return{};if(!1===e)return!1;throw new Error('Invalid value for "transformations.crop" config option')},"transformations.crop.aspectRatio":function(e){if("number"==typeof e)return e;throw new Error('Invalid value for "transformations.crop.aspectRatio" config option')},"transformations.crop.force":function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "transformations.crop.force" config option');return e},"transformations.force":function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "transformations.force" config option');return e},"transformations.circle":function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "transformations.circle" config option');return e},"transformations.rotate":function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "transformations.rotate" config option');return e},"transformations.mask":function(e){if(_p(e)){if(!e.url||!e.type)throw new Error('Mask transformation requires a URL and a type of "png" or "svg".');return e}throw new Error('Invalid value for "transformations.mask" config option')},"transformations.mask.url":function(e){if("string"!=typeof e)throw new Error('Invalid value for "transformations.mask.url" config option');return e},"transformations.mask.type":function(e){if("string"!=typeof e||-1===["png","svg"].indexOf(e))throw new Error('Invalid value for "transformations.mask.type" config option');return e},"transformations.mask.color":function(e){if("string"!=typeof e)throw new Error('Invalid value for "transformations.mask.color" config option');return e},imageMin:function(e){if(Array.isArray(e)){if(2!==e.length)throw new Error('Option "imageMin" requires array with exactly two elements: [width, height]');if(!e.some(function(e){return"number"!=typeof e}))return e;throw new Error('Option "imageMin" requires array of numbers')}throw new Error('Invalid value for "imageMin" config option')},imageMax:function(e){if(Array.isArray(e)){if(2!==e.length)throw new Error('Option "imageMax" requires array with exactly two elements: [width, height]');if(!e.some(function(e){return"number"!=typeof e}))return e;throw new Error('Option "imageMax" requires array of numbers')}throw new Error('Invalid value for "imageMax" config option')},imageDim:function(e){if(Array.isArray(e)){if(2===e.length)return e;throw new Error('Option "imageDim" requires array with exactly two elements: [width, height]')}throw new Error('Invalid value for "imageDim" config option')},imageMinMaxBlock:function(e){if("boolean"!=typeof e)throw new Error("imageMinMaxBlock should be boolean");return e},container:function(e){return e},globalDropZone:function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "globalDropZone" config option');return e},exposeOriginalFile:function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "exposeOriginalFile" config option');return e},modalSize:function(e){if(Array.isArray(e)){if(2!==e.length)throw new Error('Option "modalSize" requires array with exactly two elements: [width, height]');if(!e.some(function(e){return"number"!=typeof e}))return e;throw new Error('Option "modalSize" requires array of numbers')}throw new Error('Invalid value for "modalSize" config option')},customAuthText:function(e){if(!_p(e))throw new Error('Invalid value for "customAuthText" config option');return e},useSentryBreadcrumbs:function(e){if("boolean"!=typeof e)throw new Error('Invalid value for "useSentryBreadcrumbs" config option');return e}},xp={components:{Notifications:rs},data:function(){return{cropFilesDone:0,cropFilesOverride:{},isDropping:!1}},computed:_objectSpread({},ra.mapGetters(["accept","apiClient","canAddMoreFiles","dropPane","fileCount","filesDone","filesList","filesWaiting","maxFiles","maxSize","storeTo","uploadStarted"]),{acceptStr:function(){if(this.accept)return this.accept.join(",")},containerClasses:function(){return{"fsp-drop-pane__container":!0,"fsp-drop-pane__container--active":this.isDropping}},filesFinished:function(){return this.cropFilesDone?this.cropFilesDone:this.filesDone.length?this.filesDone.length:0},iconClasses:function(){return{"fsp-drop-pane__icon":!0,"fsp-drop-pane__icon--active":this.isDropping}},multiple:function(){return 1<this.maxFiles},progressStyle:function(){return{width:"".concat(this.totalProgress,"%")}},totalProgress:function(){var e=Ec(this.cropFilesOverride),t=e.length?e:this.filesList,n=Math.round(t.map(function(e){return e.progress}).filter(function(e){return e}).reduce(function(e,t){return e+t},0)/this.fileCount);return this.dropPane.onProgress&&this.dropPane.onProgress(n),n}}),methods:_objectSpread({},ra.mapActions(["addFile","showNotification"]),{clearEvent:function(e){e.target.value=null},dragenter:function(e){e.preventDefault(),this.isDropping=!0,this.dropPane.onDragEnter&&this.dropPane.onDragEnter(e)},dragover:function(e){e.preventDefault(),this.dropPane.onDragOver&&this.dropPane.onDragOver(e)},dragleave:function(){this.isDropping=!1,this.dropPane.onDragLeave&&this.dropPane.onDragLeave()},drop:function(e){var t=this;e.preventDefault(),this.isDropping=!1,na(e.dataTransfer).then(function(e){return t.callAddFiles(e)}),this.dropPane.onDrop&&this.dropPane.onDrop(e)},incCropFilesDone:function(){this.cropFilesDone+=1},onFilesSelected:function(e){this.callAddFiles(e.target.files)},paste:function(e){var t=this;na(e.clipboardData).then(function(e){return t.callAddFiles(e)})},openSelectFile:function(){this.dropPane.onClick&&this.dropPane.onClick(),this.dropPane.disableClick||this.$refs.fileUploadInput.click()},callAddFiles:function(e){if(this.maxFiles&&0<this.maxFiles&&this.maxFiles<e.length){var t=1===this.maxFiles?"file":"files",n=Sc(this.$store.getters.lang,this.$store.getters.customText).ERROR_MAX_FILES_REACHED.replace("{maxFiles}",this.$store.getters.maxFiles).replace("{filesText}",t);return this.showNotification(n)}if(this.maxSize){for(var r=[],i=0;i<e.length;i++)e[i].size&&e[i].size>this.maxSize&&r.push(e[i].name);if(0<r.length){var o=Sc(this.$store.getters.lang,this.$store.getters.customText).ERROR_FILES_TOO_BIG.replace("{displayName}",r.join(", ")).replace("{maxSize}",Ac(this.maxSize));return this.showNotification(o)}}for(var a=0;a<e.length;a++){var s=e[a];s.name||(s.name=0<a?"untitled (".concat(a,")"):"untitled"),this.addFile(s)}return!0}}),mounted:function(){var e=this.dropPane.overlay?this.$refs.dropOverlay:this.$refs.dropZone,t=this.dropPane.overlay?document:this.$refs.dropZone;t.addEventListener("dragenter",this.dragenter,!1),t.addEventListener("paste",this.paste,!1),e.addEventListener("dragover",this.dragover,!1),e.addEventListener("dragleave",this.dragleave,!1),e.addEventListener("drop",this.drop,!1)},beforeDestroy:function(){var e=this.dropPane.overlay?this.$refs.dropOverlay:this.$refs.dropZone,t=this.dropPane.overlay?document:this.$refs.dropZone;t.removeEventListener("dragenter",this.dragenter),t.removeEventListener("paste",this.paste),e.removeEventListener("dragover",this.dragover),e.removeEventListener("dragleave",this.dragleave),e.removeEventListener("drop",this.drop)},watch:{filesWaiting:{handler:function(e){var n=this;if(this.uploadStarted||!e.length||this.dropPane.cropFiles){if(!this.uploadStarted&&e.length&&this.dropPane.cropFiles){function t(){setTimeout(function(){n.$store.commit("SET_UPLOAD_STARTED",!1),n.$store.commit("CLEAR_FILES")},1e3)}var r=e.filter(function(e){return e.originalFile}).map(function(e){return e.originalFile}),i=e.filter(function(e){return!e.originalFile&&e.url}).map(function(e){return e.url}),o={displayMode:Cp,onUploadDone:t,onCancel:t,dropPane:this.dropPane,transformations:this.$store.getters.transformations,onFileUploadProgress:function(e,t){n.$set(n.cropFilesOverride,e.uploadId,e),n.$set(n.cropFilesOverride[e.uploadId],"progress",t.totalPercent)},onFileUploadFinished:function(){return n.incCropFilesDone()},onUploadStarted:function(){return n.$store.commit("SET_UPLOAD_STARTED",!0)}};this.storeTo&&Object.keys(this.storeTo)&&(o.storeTo=this.storeTo),new jp(this.apiClient,o).crop(r.concat(i))}}else setTimeout(function(){return n.$store.dispatch("startUploading")})}}}};wp._withStripped=!0;function Fp(e){return _objectSpread({source:"imagesearch",sourceKind:"cloud"},e)}var Ip=oa({render:wp,staticRenderFns:[]},void 0,xp,void 0,!1,void 0,!1,void 0,void 0,void 0),Tp={state:{input:"",isSearching:!1,result:null,error:null},mutations:{UPDATE_INPUT:function(e,t){e.input=t},FETCH_IMAGES_BEGIN:function(e){e.isSearching=!0},FETCH_IMAGES_SUCCESS:function(e,t){e.result=t,e.isSearching=!1},FETCH_IMAGES_ERROR:function(e,t){e.error=t,e.isSearching=!1},CLEAR_IMAGES_STORE:function(e){e.isSearching=!1,e.result=null,e.error=null,e.input=""}},actions:{updateSearchInput:function(e,t){e.commit("UPDATE_INPUT",t)},fetchImages:function(n){if(!n.getters.isSearching){var r=n.getters.imageSearchInput;r&&(n.commit("FETCH_IMAGES_BEGIN"),n.getters.cloudClient.list({imagesearch:{path:"/".concat(r)}}).then(function(e){var t=e.imagesearch;t||(n.commit("FETCH_IMAGES_ERROR","No response."),n.dispatch("showNotification","An error occurred. Please try again.")),t&&t.contents&&(t.contents=t.contents.map(Fp),n.commit("FETCH_IMAGES_SUCCESS",t)),t&&t.contents&&0===t.contents.length&&n.dispatch("showNotification",['No search results found for "{search}"',{search:r}]),t&&t.error&&(n.commit("FETCH_IMAGES_ERROR",t.error),n.dispatch("showNotification","An error occurred. Please try again."))}).catch(function(e){n.commit("FETCH_IMAGES_ERROR",e),n.dispatch("showNotification",e.message)}))}}},getters:{isSearching:function(e){return e.isSearching},noResultsFound:function(e){return e.result&&0===e.result.contents.length},resultsFound:function(e){return e.result&&0<e.result.contents.length},imageSearchInput:function(e){return e.input},imageSearchResults:function(e){return e.result&&e.result.contents}}},Op=["http://cdn.filestackcontent.com/JRgmGyLtQjCFENsiL0SN","http://cdn.filestackcontent.com/F9wSolR8qtkRluW5nGoQ","http://cdn.filestackcontent.com/qLTNxOSpRH2zWhuiro3E"],Np={state:{connected:{value:!0},attempts:0,listeners:{}},mutations:{SET_CONNECTION_STATUS:function(e,t){e.connected={value:t}},INC_ATTEMPTS:function(e){e.attempts+=1},RESET_ATTEMPTS:function(e){e.attempts=0},SET_NETWORK_LISTENERS:function(e,t){e.listeners=t}},actions:{onNetworkError:function(e,t){var n=e.state.attempts,r=e.commit,i=e.dispatch;r("INC_ATTEMPTS"),(t||2<=n)&&(r("RESET_ATTEMPTS"),r("SET_CONNECTION_STATUS",!1),i("pauseAllUploads"))},onNetworkSuccess:function(e){var t=e.commit,n=e.dispatch;t("SET_CONNECTION_STATUS",!0),t("RESET_ATTEMPTS"),n("retryAllFailedFiles")},checkNetworkNavigator:function(e){var t=e.commit,n=e.dispatch;if(e.getters.allowManualRetry){function r(){return n("onNetworkSuccess")}function i(){return n("onNetworkError",!0)}window.addEventListener("online",r),window.addEventListener("offline",i),t("SET_NETWORK_LISTENERS",{online:r,offline:i})}},removeNetworkListeners:function(e){var t=e.getters,n=e.state.listeners,r=n.online,i=n.offline;t.allowManualRetry&&(window.removeEventListener("online",r),window.removeEventListener("offline",i))},checkNetworkXHR:function(e){var t=e.dispatch;if(e.getters.allowManualRetry){var n=new XMLHttpRequest,r=Op[Math.floor(Math.random()*Op.length)],i="".concat(r,"?_=").concat((new Date).getTime());n.open("HEAD",i),n.onreadystatechange=function(){4===n.readyState&&(n.status?t("onNetworkSuccess"):t("onNetworkError"))},n.send()}}},getters:{isConnected:function(e){return e.connected.value},isConnectedObj:function(e){return e.connected}}},Rp={state:{notifications:[]},mutations:{ADD_NOTIFICATION:function(e,t){e.notifications.push(t)},REMOVE_NOTIFICATION:function(e,t){e.notifications=e.notifications.filter(function(e){return e!==t})},REMOVE_ALL_NOTIFICATIONS:function(e){e.notifications.splice(0,e.notifications.length)}},actions:{showNotification:function(e,t,n){var r={};r=Array.isArray(t)&&2===t.length?_objectSpread({message:t[0],params:t[1]},n):"object"===_typeof2(t)?_objectSpread({},t,{},n):_objectSpread({message:t},n),e.getters.notifications.map(function(e){return e.message}).indexOf(t)<0&&(e.commit("ADD_NOTIFICATION",r),setTimeout(function(){e.commit("REMOVE_NOTIFICATION",r)},e.rootGetters.errorsTimeout||r.timeout||5e3))},removeAllNotifications:function(e){e.commit("REMOVE_ALL_NOTIFICATIONS")}},getters:{notifications:function(e){return e.notifications}}},Dp={state:{isFetching:!1},mutations:{FETCH_URL_START:function(e){e.isFetching=!0},FETCH_URL_DONE:function(e){e.isFetching=!1}},actions:{fetchUrl:function(t,e){return t.commit("FETCH_URL_START"),t.getters.cloudClient.metadata(e).then(function(e){return e.error?(t.commit("FETCH_URL_DONE"),t.dispatch("showNotification",e.error)):(t.commit("FETCH_URL_DONE"),t.dispatch("addFile",e).then(function(){return!0}))}).catch(function(){t.commit("FETCH_URL_DONE"),t.dispatch("showNotification","Error fetching URL metadata.")})}},getters:{isUrlFetching:function(e){return e.isFetching}}},Up=Ki.context("picker");Fn.use(ra);function Lp(e,t,o,a,n){var r=e.cloud;return n=_objectSpread({apiClient:e,modules:{"fs-cropper":i.vendor.cropper,"fs-fabric":i.vendor.fabric,"fs-opentok":i.vendor.opentok},cloudClient:r,config:t,viewType:null,route:[],routesHistory:[],whitelabel:!1,blobURLs:{},prefetched:!1,mobileNavActive:!1,hideSidebar:!1,selectLabelIsActive:!1},n),new ra.Store({state:n,modules:{uploadQueue:Bc(e,n.uploadQueue),cloudStore:gp,imageSearch:Tp,urlSource:Dp,notifications:Rp,network:Np},mutations:{INITIAL_ROUTE:function(e){var t=e.config.fromSources,n=t[0],r=n?["source",n.name]:[];e.route=r,e.routesHistory.push(e.route),1===t.length?e.hideSidebar=!0:e.hideSidebar=!1},SET_PREFETCH:function(e,t){e.whitelabel=t.whitelabel},CHANGE_ROUTE:function(e,t){Up("Change route from ".concat(JSON.stringify(this.state.route)," to ").concat(JSON.stringify(t))),e.routesHistory.push(e.route),e.route=t,e.mobileNavActive=!1},GO_BACK_WITH_ROUTE:function(e){var t=e.routesHistory.pop();t&&(e.route=t)},GO_BACK_WITH_ROUTE_CURRENT_TYPE:function(e){var t=e.routesHistory.reverse(),n=this.state.route.join("/"),r=function(e,t,n){if("function"==typeof Array.prototype.findIndex)return e.findIndex(t,n);if("function"!=typeof t)throw new TypeError("predicate must be a function");var r=Object(e),i=r.length;if(0===i)return-1;for(var o=0;o<i;o++)if(t.call(n,r[o],o,r))return o;return-1}(t,function(e){return e.join("/")!==n&&0===n.indexOf(e.join("/"))});-1<r&&t.splice(0,r);var i=(t=t.reverse()).pop();i&&(e.route=i)},PREFETCH_DONE:function(e){e.prefetched=!0},REMOVE_SOURCE_FROM_ROUTES:function(e,t){e.routesHistory=e.routesHistory.filter(function(e){return e[1]&&e[1]!==t})},SET_BLOB_URL:function(e,t){var n=t.uuid,r=t.url;e.blobURLs[n]=r},REMOVE_BLOB_URL:function(e,t){Fn.delete(e.blobURLs,t)},UPDATE_MOBILE_NAV_ACTIVE:function(e,t){e.mobileNavActive=t,1===e.config.fromSources.length&&(e.hideSidebar=!t)},UPDATE_SELECT_LABEL_ACTIVE:function(e,t){e.selectLabelIsActive=t},SET_VIEW_TYPE:function(e,t){if(-1===["list","grid"].indexOf(t))throw new Error("View type ".concat(t," is not supported. Supported types: grid, list"));e.viewType=t}},actions:{setViewType:function(e,t){(0,e.commit)("SET_VIEW_TYPE",t)},allUploadsDone:function(e){var t=wc(e.getters.filesDone,e.getters),n=wc(e.getters.filesFailed,e.getters),r=e.getters.dropPane,i=e.getters.isInlineDisplay;r&&e.getters.dropPane.onSuccess&&e.getters.dropPane.onSuccess(t),r&&e.getters.dropPane.onError&&e.getters.dropPane.onError(n),e.dispatch("removeNetworkListeners"),(r||i)&&setTimeout(function(){e.commit("SET_UPLOAD_STARTED",!1),e.commit("CLEAR_FILES")},1e3),o({filesUploaded:t,filesFailed:n})},cancelPick:function(e){var t=e.dispatch,n=e.getters,r=n.filesList,i=n.exposeOriginalFile;t("cancelAllUploads"),t("removeNetworkListeners"),a&&a(wc(r,{exposeOriginalFile:i}))},updateMobileNavActive:function(e,t){e.commit("UPDATE_MOBILE_NAV_ACTIVE",t)},updateSelectLabelActive:function(e,t){e.commit("UPDATE_SELECT_LABEL_ACTIVE",t)}},getters:{uiVisible:function(e,t){return e.config.displayMode!==Cp||!t.uploadStarted||!e.config.hideModalWhenUploading},apiClient:function(e){return e.apiClient},cloudClient:function(e){return e.cloudClient},config:function(e){return e.config},blobURLs:function(e){return e.blobURLs},isInlineDisplay:function(e){return e.config.displayMode===Sp},isSidebarHidden:function(e){return e.hideSidebar},mobileNavActive:function(e){return e.mobileNavActive},prefetched:function(e){return e.prefetched},route:function(e){return e.route},whitelabel:function(e){return e.whitelabel},routesHistory:function(e){return e.routesHistory},selectLabelIsActive:function(e){return e.selectLabelIsActive},accept:function(e){return e.config.accept},viewType:function(e){if(e.viewType)return e.viewType;var t=e.config.viewType;return e.viewType=t},allowManualRetry:function(e){return e.config.allowManualRetry},concurrency:function(e){return e.config.concurrency},container:function(e){return e.config.container},cropAspectRatio:function(e){return e.config.transformations.crop&&e.config.transformations.crop.aspectRatio||NaN},cropFiles:function(e){return e.config.cropFiles},cropForce:function(e){return e.config.transformations.crop&&e.config.transformations.crop.force||e.config.transformations&&e.config.transformations.force},customSourceContainer:function(e){return e.config.customSourceContainer},customSourcePath:function(e){return e.config.customSourcePath},customSourceName:function(e){return e.config.customSourceName},customText:function(e){return e.config.customText},disableStorageKey:function(e){return e.config.disableStorageKey},disableThumbnails:function(e){return e.config.disableThumbnails},errorsTimeout:function(e){return e.config.errorsTimeout},disableTransformer:function(e){return e.config.disableTransformer||(t=e.config.transformations,n=!0,Object.keys(t).forEach(function(e){t[e]&&(n=!1)}),n);var t,n},dropPane:function(e){return e.config.dropPane},exposeOriginalFile:function(e){return e.config.exposeOriginalFile},fromSources:function(e){return e.config.fromSources},globalDropZone:function(e){return e.config.globalDropZone},imageMin:function(e){return e.config.imageMin},imageMax:function(e){return e.config.imageMax},imageDim:function(e){return e.config.imageDim},imageMinMaxBlock:function(e){return e.config.imageMinMaxBlock},lang:function(e){return e.config.lang},maxFiles:function(e){return e.config.maxFiles},maxSize:function(e){return e.config.maxSize},minFiles:function(e){return e.config.minFiles},modalSize:function(e){return e.config.modalSize},onClose:function(e){return e.config.onClose},onFileSelected:function(e){return e.config.onFileSelected},onFileUploadStarted:function(e){return e.config.onFileUploadStarted},onFileCropped:function(e){return e.config.onFileCropped},onFileUploadProgress:function(e){return e.config.onFileUploadProgress},onFileUploadFinished:function(e){return e.config.onFileUploadFinished},onFileUploadFailed:function(e){return e.config.onFileUploadFailed},onOpen:function(e){return e.config.onOpen},onUploadStarted:function(e){return e.config.onUploadStarted},rootId:function(e){return e.config.rootId},startUploadingWhenMaxFilesReached:function(e){return e.config.startUploadingWhenMaxFilesReached},storeTo:function(e){return e.config.storeTo},transformations:function(e){return e.config.transformations},uploadConfig:function(e){return e.config.uploadConfig},uploadInBackground:function(e){return!!e.config.uploadInBackground&&(e.config.disableTransformer||e.config.transformations&&!e.config.transformations.crop&&!e.config.transformations.circle&&!e.config.transformations.rotate?e.config.uploadInBackground:(console.warn("Upload in background can be enabled only when cropper is disabled"),!1))},videoResolution:function(e){return e.config.videoResolution},removeExif:function(e){return e.config.cleanupImageExif},getModuleUrl:function(r){return function(e){var t=r.modules[e],n=r.apiClient.session.cname;return n&&(t=t.replace("filestackapi.com",n)),t}}}})}var Pp=Ki.context("picker"),jp=function(){function n(e,t){_classCallCheck(this,n),Pp("Starting picker v1.12.0 with config:",t),this.app=null,this._mutationObserver=null,this.apiClient=e,this.config=function i(o,a){var s={};if(Object.keys(o).forEach(function(e){var t=e;a&&(t="".concat(a,".").concat(e));var n=kp[t];if(void 0!==o[e]){if(!n)throw new Error('Unknown config option "'.concat(t,'"'));var r=n(o[e]);_p(r)&&-1!==t.indexOf("transformations")?s[e]=i(r,t):s[e]=r}}),void 0!==s.minFiles&&void 0!==s.maxFiles&&s.minFiles>s.maxFiles)throw new Error('Config option "minFiles" must be smaller or equal to "maxFiles"');return s}(function(e,t){var n=_objectSpread({},e);if(void 0===n.fromSources&&(n.fromSources=["local_file_system","url","imagesearch","facebook","instagram","googledrive","dropbox"]),void 0===n.minFiles&&(n.minFiles=1),void 0===n.maxFiles&&(n.maxFiles=1),void 0===n.loadCss&&(n.loadCss=t.css.main),void 0===n.lang&&(n.lang="en"),void 0===n.viewType&&(n.viewType="list"),void 0===n.uploadInBackground&&(n.uploadInBackground=!0),void 0===n.errorsTimeout&&(n.errorsTimeout=5e3),void 0===n.transformations&&(n.transformations={crop:{},circle:!0,rotate:!0}),n.transformations&&n.transformations.mask&&void 0===n.transformations.mask.color&&(n.transformations.mask.color="#000000"),n.transformations&&void 0===n.transformations.circle){var r=n.transformations.crop&&n.transformations.crop.circle;void 0!==r&&(n.transformations.circle=r)}if(void 0===n.imageMax){var i=n.transformations.maxDimensions;void 0!==i&&(n.imageMax=i)}if(void 0===n.imageMin){var o=n.transformations.minDimensions;void 0!==o&&(n.imageMin=o)}return n.dropPane||n.displayMode!==Ep||(n.dropPane={}),n.dropPane&&(n.uploadInBackground=!1),n.dropPane&&void 0===n.dropPane.overlay&&(n.dropPane.overlay=!0),n.dropPane&&void 0===n.dropPane.showIcon&&(n.dropPane.showIcon=!0),n.dropPane&&void 0===n.dropPane.showProgress&&(n.dropPane.showProgress=!0),void 0===n.concurrency&&(n.concurrency=4),void 0===n.displayMode&&(n.displayMode=Cp),void 0===n.rootId&&(n.rootId="__filestack-picker"),void 0===n.useSentryBreadcrumbs&&(n.useSentryBreadcrumbs=!0),n}(t,i)),this.loadCss=this._loadCssMaybe(),this._onUploadDone=this.config.onUploadDone,this._onOpen=this.config.onOpen,this._onCancel=this.config.onCancel,this._onClose=this.config.onClose,this._initVue(),this._initContainer(),this._initMutationObserver()}return _createClass(n,[{key:"open",value:function(e){var t=this,n=0<arguments.length&&void 0!==e?e:{};return this.app?(console.warn("PickerOpen: Picker is already open"),Promise.resolve()):this.loadCss.then(function(){var e=t._onCancel;t._createPicker(n,function(e){t.app&&(t.config.displayMode===Sp&&t.app.$store.commit("GO_BACK_WITH_ROUTE"),t.config.displayMode===Cp&&t.close()),t._onUploadDone&&t._onUploadDone(e)},e)})}},{key:"crop",value:function(e){if([Cp,Sp].indexOf(this.config.displayMode)<0)throw new Error("PickerCrop: you can only use crop in overlay and inline display modes");var t;if("string"==typeof e)t=[e];else{if(!e||!e.length)throw new Error("PickerCrop: no files found");t=e}var n={config:_objectSpread({},this.config,{cropFiles:t,hideModalWhenUploading:!0,fromSources:[],uploadInBackground:!1,maxFiles:t.length,startUploadingWhenMaxFilesReached:!1,disableTransformer:!1,transformations:_objectSpread({},this.config.transformations,{crop:_objectSpread({},this.config.transformations.crop,{force:!0})})})};return this.config.transformations&&"boolean"==typeof this.config.transformations.crop&&!this.config.transformations.crop&&delete n.config.transformations.crop,this.open(n)}},{key:"close",value:function(){this.app?(this.app.$root.$destroy(),this.app=null):console.warn("PickerClose: Picker is already closed")}},{key:"cancel",value:function(){this.app?this.app.$store.dispatch("cancelPick"):console.warn("PickerCancel: Picker is already closed")}},{key:"_initVue",value:function(){var e=this.config,t=e.customText,n=e.lang,r=_objectSpread({},kc,_defineProperty({},n,_objectSpread({},kc[n],{},t)));Fn.use(To),Fn.locales(r),Fn.use(no)}},{key:"_initContainer",value:function(){this._component=this.config.displayMode===Ep?Ip:Ap,this._container=this._getElement(this.config.container,this.config.displayMode===Cp)||document.body}},{key:"_initMutationObserver",value:function(){var n=this,e=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserve;e&&(this._mutationObserver=new e(function(e){var t=e[0];t&&n.app&&0<t.removedNodes.length&&(-1<[].indexOf.call(t.removedNodes,n.app.$el)||-1<[].indexOf.call(t.removedNodes,n._container))&&(n.app.$root.$destroy(),n.app=null)}))}},{key:"_createPicker",value:function(e,t,n){var r=this,i=this,o=this.config,a=o.displayMode===Cp,s=document.createElement("div");return document.getElementById(o.rootId)?(console.warn("Picker Create: Application mount point already exists"),i.app):(this._container.appendChild(s),new Fn({el:s,store:Lp(this.apiClient,o,t,n,e),render:function(e){return e(r._component)},created:function(){i.app=this,a&&document.body.classList.add("fsp-picker--no-scroll"),this.$translate.setLang(o.lang),i._mutationObserver&&i._mutationObserver.observe(i._container.parentNode,{childList:!0}),i._onOpen&&i._onOpen(i)},destroyed:function(){i._mutationObserver&&i._mutationObserver.disconnect(),document.body.classList.remove("fsp-picker--no-scroll");var e=this.$el;e&&e.parentNode&&e.parentNode.removeChild(e),i._onClose&&i._onClose(),this.$store.commit("RESET_CLOUD"),this.$store.commit("CLEAR_FILES"),i.app=null}}))}},{key:"_getElement",value:function(e,t){var n;if(!e&&!t)throw new Error("Filestack Picker Initialize: Container is not defined");if(!(n="string"==typeof e?(0!==e.indexOf(".")&&0!==e.indexOf("#")&&(e="#".concat(e)),document.querySelector(e)):!!document.body.contains(e)&&e)&&!t)throw new Error("Filestack Picker Initialize: Container with - ".concat(e," not found in document"));return n}},{key:"_loadCssMaybe",value:function(){if(!1===this.config.loadCss)return Promise.resolve();if(this.config.modalSize){var e=document.createElement("style");e.innerHTML="\n        @media screen and (min-width: 980px) {\n          .fsp-picker .fsp-modal {\n            width: ".concat(this.config.modalSize[0],"px !important;\n            height: ").concat(this.config.modalSize[1],"px !important;\n          }\n        }\n      ").trim(),document.head.appendChild(e)}var r,t=this.config.loadCss,n=this.apiClient.session.cname;return n&&n.length&&(t=t.replace("filestackapi.com",n)),r=t,null!==document.querySelector('link[href="'+r+'"]')?Promise.resolve():new Promise(function(t){var e=document.getElementsByTagName("head")[0],n=document.createElement("link");n.rel="stylesheet",n.href=r,n.addEventListener("load",function e(){t(),n.removeEventListener("load",e)}),e.appendChild(n)})}}]),n}();return function(e,t){var n=void 0;if(t&&document.getElementById(t))n=document.getElementById(t);else{var r=document.getElementsByTagName("script");n=r[r.length-1]}var i=n.getAttribute("src"),o=Qi[i];o&&o.resolvePromise&&(o.instance=e,o.resolvePromise(e),delete o.promise,delete o.resolvePromise)}(jp,"__filestack-picker-module"),jp}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBpY2tlci5qcyJdLCJuYW1lcyI6WyJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsIl9jcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwiX3R5cGVvZjIiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiX3NldFByb3RvdHlwZU9mIiwiX3dyYXBOYXRpdmVTdXBlciIsIkNsYXNzIiwiX2NhY2hlIiwiTWFwIiwidW5kZWZpbmVkIiwiX2lzTmF0aXZlRnVuY3Rpb24iLCJoYXMiLCJnZXQiLCJzZXQiLCJXcmFwcGVyIiwiX2NvbnN0cnVjdCIsImFyZ3VtZW50cyIsIl9nZXRQcm90b3R5cGVPZiIsInRoaXMiLCJpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0Iiwic2hhbSIsIlByb3h5IiwiRGF0ZSIsInRvU3RyaW5nIiwiZSIsIlBhcmVudCIsImFyZ3MiLCJhIiwicHVzaCIsImFwcGx5IiwiRnVuY3Rpb24iLCJiaW5kIiwiZm4iLCJpbmRleE9mIiwibyIsInAiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImdldFByb3RvdHlwZU9mIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsIml0ZXIiLCJTeW1ib2wiLCJpdGVyYXRvciIsIkFycmF5IiwiZnJvbSIsImlzQXJyYXkiLCJhcnIyIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkIiwic291cmNlIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwib2JqIiwiZmlsZXN0YWNrIiwicGljayIsIkVOViIsImNzcyIsIm1haW4iLCJ2ZW5kb3IiLCJvcGVudG9rIiwiZmFicmljIiwiY3JvcHBlciIsInNlbnRyeURTTiIsImVtcHR5T2JqZWN0IiwiZnJlZXplIiwiaXNVbmRlZiIsInYiLCJpc0RlZiIsImlzVHJ1ZSIsImlzUHJpbWl0aXZlIiwiaXNPYmplY3QiLCJfdG9TdHJpbmciLCJpc1BsYWluT2JqZWN0IiwiaXNWYWxpZEFycmF5SW5kZXgiLCJ2YWwiLCJuIiwicGFyc2VGbG9hdCIsIlN0cmluZyIsIk1hdGgiLCJmbG9vciIsImlzRmluaXRlIiwiaXNQcm9taXNlIiwidGhlbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b051bWJlciIsImlzTmFOIiwibWFrZU1hcCIsInN0ciIsImV4cGVjdHNMb3dlckNhc2UiLCJtYXAiLCJsaXN0Iiwic3BsaXQiLCJ0b0xvd2VyQ2FzZSIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJyZW1vdmUiLCJpdGVtIiwiaW5kZXgiLCJzcGxpY2UiLCJoYXNPd25Qcm9wZXJ0eSIsImhhc093biIsImNhY2hlZCIsImNhY2hlIiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwicmVwbGFjZSIsIl8iLCJjIiwidG9VcHBlckNhc2UiLCJjYXBpdGFsaXplIiwiY2hhckF0Iiwic2xpY2UiLCJoeXBoZW5hdGVSRSIsImh5cGhlbmF0ZSIsImN0eCIsImJvdW5kRm4iLCJsIiwiX2xlbmd0aCIsInRvQXJyYXkiLCJzdGFydCIsInJldCIsImV4dGVuZCIsInRvIiwiX2Zyb20iLCJ0b09iamVjdCIsInJlcyIsIm5vb3AiLCJiIiwibm8iLCJpZGVudGl0eSIsImxvb3NlRXF1YWwiLCJpc09iamVjdEEiLCJpc09iamVjdEIiLCJpc0FycmF5QSIsImlzQXJyYXlCIiwiZXZlcnkiLCJnZXRUaW1lIiwia2V5c0EiLCJrZXlzQiIsImxvb3NlSW5kZXhPZiIsIm9uY2UiLCJjYWxsZWQiLCJTU1JfQVRUUiIsIkFTU0VUX1RZUEVTIiwiTElGRUNZQ0xFX0hPT0tTIiwiY29uZmlnIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwic2lsZW50IiwicHJvZHVjdGlvblRpcCIsImRldnRvb2xzIiwicGVyZm9ybWFuY2UiLCJlcnJvckhhbmRsZXIiLCJ3YXJuSGFuZGxlciIsImlnbm9yZWRFbGVtZW50cyIsImtleUNvZGVzIiwiaXNSZXNlcnZlZFRhZyIsImlzUmVzZXJ2ZWRBdHRyIiwiaXNVbmtub3duRWxlbWVudCIsImdldFRhZ05hbWVzcGFjZSIsInBhcnNlUGxhdGZvcm1UYWdOYW1lIiwibXVzdFVzZVByb3AiLCJhc3luYyIsIl9saWZlY3ljbGVIb29rcyIsImRlZiIsImJhaWxSRSIsIlJlZ0V4cCIsIl9pc1NlcnZlciIsImhhc1Byb3RvIiwiaW5Ccm93c2VyIiwid2luZG93IiwiaW5XZWV4IiwiV1hFbnZpcm9ubWVudCIsInBsYXRmb3JtIiwid2VleFBsYXRmb3JtIiwiVUEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpc0lFIiwidGVzdCIsImlzSUU5IiwiaXNFZGdlIiwiaXNJT1MiLCJpc0ZGIiwibWF0Y2giLCJuYXRpdmVXYXRjaCIsIndhdGNoIiwic3VwcG9ydHNQYXNzaXZlIiwib3B0cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJpc1NlcnZlclJlbmRlcmluZyIsImdsb2JhbCIsImVudiIsIlZVRV9FTlYiLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNOYXRpdmUiLCJDdG9yIiwiX1NldCIsImhhc1N5bWJvbCIsIlNldCIsImFkZCIsImNsZWFyIiwid2FybiIsInVpZCIsIkRlcCIsImlkIiwic3VicyIsImFkZFN1YiIsInN1YiIsInJlbW92ZVN1YiIsImRlcGVuZCIsImFkZERlcCIsIm5vdGlmeSIsInVwZGF0ZSIsInRhcmdldFN0YWNrIiwicHVzaFRhcmdldCIsInBvcFRhcmdldCIsInBvcCIsIlZOb2RlIiwidGFnIiwiZGF0YSIsImNoaWxkcmVuIiwidGV4dCIsImVsbSIsImNvbnRleHQiLCJjb21wb25lbnRPcHRpb25zIiwiYXN5bmNGYWN0b3J5IiwibnMiLCJmbkNvbnRleHQiLCJmbk9wdGlvbnMiLCJmblNjb3BlSWQiLCJjb21wb25lbnRJbnN0YW5jZSIsInBhcmVudCIsInJhdyIsImlzU3RhdGljIiwiaXNSb290SW5zZXJ0IiwiaXNDb21tZW50IiwiaXNDbG9uZWQiLCJpc09uY2UiLCJhc3luY01ldGEiLCJpc0FzeW5jUGxhY2Vob2xkZXIiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJjaGlsZCIsImNyZWF0ZUVtcHR5Vk5vZGUiLCJub2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsIm1ldGhvZCIsIm9yaWdpbmFsIiwibGVuIiwiaW5zZXJ0ZWQiLCJyZXN1bHQiLCJvYiIsIl9fb2JfXyIsIm9ic2VydmVBcnJheSIsImRlcCIsImFycmF5S2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJzaG91bGRPYnNlcnZlIiwidG9nZ2xlT2JzZXJ2aW5nIiwiT2JzZXJ2ZXIiLCJzcmMiLCJ2bUNvdW50IiwiY29weUF1Z21lbnQiLCJ3YWxrIiwib2JzZXJ2ZSIsImFzUm9vdERhdGEiLCJpc0V4dGVuc2libGUiLCJfaXNWdWUiLCJkZWZpbmVSZWFjdGl2ZSQkMSIsImN1c3RvbVNldHRlciIsInNoYWxsb3ciLCJwcm9wZXJ0eSIsImdldHRlciIsInNldHRlciIsImNoaWxkT2IiLCJkZXBlbmRBcnJheSIsIm5ld1ZhbCIsIm1heCIsImRlbCIsIml0ZW1zIiwic3RyYXRzIiwibWVyZ2VEYXRhIiwidG9WYWwiLCJmcm9tVmFsIiwibWVyZ2VEYXRhT3JGbiIsInBhcmVudFZhbCIsImNoaWxkVmFsIiwidm0iLCJpbnN0YW5jZURhdGEiLCJkZWZhdWx0RGF0YSIsIm1lcmdlSG9vayIsImNvbmNhdCIsImhvb2tzIiwiZGVkdXBlSG9va3MiLCJtZXJnZUFzc2V0cyIsImhvb2siLCJ0eXBlIiwia2V5JDEiLCJtZXRob2RzIiwiaW5qZWN0IiwiY29tcHV0ZWQiLCJwcm92aWRlIiwiZGVmYXVsdFN0cmF0IiwibWVyZ2VPcHRpb25zIiwib3B0aW9ucyIsIm5vcm1hbGl6ZVByb3BzIiwibm9ybWFsaXplZCIsIm5vcm1hbGl6ZUluamVjdCIsImRpcnMiLCJkaXJlY3RpdmVzIiwiZGVmJCQxIiwibm9ybWFsaXplRGlyZWN0aXZlcyIsIl9iYXNlIiwibWl4aW5zIiwibWVyZ2VGaWVsZCIsInN0cmF0IiwicmVzb2x2ZUFzc2V0IiwiYXNzZXRzIiwiY2FtZWxpemVkSWQiLCJQYXNjYWxDYXNlSWQiLCJ2YWxpZGF0ZVByb3AiLCJwcm9wT3B0aW9ucyIsInByb3BzRGF0YSIsInByb3AiLCJhYnNlbnQiLCJib29sZWFuSW5kZXgiLCJnZXRUeXBlSW5kZXgiLCJCb29sZWFuIiwic3RyaW5nSW5kZXgiLCIkb3B0aW9ucyIsIl9wcm9wcyIsImdldFR5cGUiLCJnZXRQcm9wRGVmYXVsdFZhbHVlIiwicHJldlNob3VsZE9ic2VydmUiLCJpc1NhbWVUeXBlIiwiZXhwZWN0ZWRUeXBlcyIsImhhbmRsZUVycm9yIiwiZXJyIiwiaW5mbyIsImN1ciIsIiRwYXJlbnQiLCJlcnJvckNhcHR1cmVkIiwiZ2xvYmFsSGFuZGxlRXJyb3IiLCJpbnZva2VXaXRoRXJyb3JIYW5kbGluZyIsImhhbmRsZXIiLCJfaGFuZGxlZCIsImxvZ0Vycm9yIiwiY29uc29sZSIsImVycm9yIiwidGltZXJGdW5jIiwiaXNVc2luZ01pY3JvVGFzayIsImNhbGxiYWNrcyIsInBlbmRpbmciLCJmbHVzaENhbGxiYWNrcyIsImNvcGllcyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJzZXRJbW1lZGlhdGUiLCJjb3VudGVyIiwib2JzZXJ2ZXIiLCJ0ZXh0Tm9kZSIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJjaGFyYWN0ZXJEYXRhIiwibmV4dFRpY2siLCJjYiIsIl9yZXNvbHZlIiwic2Vlbk9iamVjdHMiLCJ0cmF2ZXJzZSIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJpc0Zyb3plbiIsImRlcElkIiwibm9ybWFsaXplRXZlbnQiLCJuYW1lIiwicGFzc2l2ZSIsIm9uY2UkJDEiLCJjYXB0dXJlIiwiY3JlYXRlRm5JbnZva2VyIiwiZm5zIiwiaW52b2tlciIsImFyZ3VtZW50cyQxIiwidXBkYXRlTGlzdGVuZXJzIiwib24iLCJvbGRPbiIsInJlbW92ZSQkMSIsImNyZWF0ZU9uY2VIYW5kbGVyIiwib2xkIiwiZXZlbnQiLCJwYXJhbXMiLCJtZXJnZVZOb2RlSG9vayIsImhvb2tLZXkiLCJvbGRIb29rIiwid3JhcHBlZEhvb2siLCJtZXJnZWQiLCJjaGVja1Byb3AiLCJoYXNoIiwiYWx0S2V5IiwicHJlc2VydmUiLCJub3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4iLCJuZXN0ZWRJbmRleCIsImxhc3RJbmRleCIsImxhc3QiLCJpc1RleHROb2RlIiwic2hpZnQiLCJfaXNWTGlzdCIsInJlc29sdmVJbmplY3QiLCJwcm92aWRlS2V5IiwiX3Byb3ZpZGVkIiwicHJvdmlkZURlZmF1bHQiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsImF0dHJzIiwic2xvdCIsIm5hbWUkMSIsImlzV2hpdGVzcGFjZSIsIm5vcm1hbGl6ZVNjb3BlZFNsb3RzIiwibm9ybWFsU2xvdHMiLCJwcmV2U2xvdHMiLCJoYXNOb3JtYWxTbG90cyIsImlzU3RhYmxlIiwiJHN0YWJsZSIsIiRrZXkiLCJfbm9ybWFsaXplZCIsIiRoYXNOb3JtYWwiLCJub3JtYWxpemVTY29wZWRTbG90Iiwia2V5JDIiLCJwcm94eU5vcm1hbFNsb3QiLCJwcm94eSIsInJlbmRlckxpc3QiLCJyZW5kZXIiLCJuZXh0IiwiZG9uZSIsInJlbmRlclNsb3QiLCJmYWxsYmFjayIsImJpbmRPYmplY3QiLCJub2RlcyIsInNjb3BlZFNsb3RGbiIsIiRzY29wZWRTbG90cyIsIiRzbG90cyIsIiRjcmVhdGVFbGVtZW50IiwicmVzb2x2ZUZpbHRlciIsImlzS2V5Tm90TWF0Y2giLCJleHBlY3QiLCJhY3R1YWwiLCJjaGVja0tleUNvZGVzIiwiZXZlbnRLZXlDb2RlIiwiYnVpbHRJbktleUNvZGUiLCJldmVudEtleU5hbWUiLCJidWlsdEluS2V5TmFtZSIsIm1hcHBlZEtleUNvZGUiLCJiaW5kT2JqZWN0UHJvcHMiLCJhc1Byb3AiLCJpc1N5bmMiLCJsb29wIiwiZG9tUHJvcHMiLCJjYW1lbGl6ZWRLZXkiLCJoeXBoZW5hdGVkS2V5IiwiJGV2ZW50IiwicmVuZGVyU3RhdGljIiwiaXNJbkZvciIsIl9zdGF0aWNUcmVlcyIsInRyZWUiLCJtYXJrU3RhdGljIiwic3RhdGljUmVuZGVyRm5zIiwiX3JlbmRlclByb3h5IiwibWFya09uY2UiLCJtYXJrU3RhdGljTm9kZSIsImJpbmRPYmplY3RMaXN0ZW5lcnMiLCJleGlzdGluZyIsIm91cnMiLCJyZXNvbHZlU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljS2V5cyIsImNvbnRlbnRIYXNoS2V5IiwiYmluZER5bmFtaWNLZXlzIiwiYmFzZU9iaiIsInZhbHVlcyIsInByZXBlbmRNb2RpZmllciIsInN5bWJvbCIsImluc3RhbGxSZW5kZXJIZWxwZXJzIiwiX28iLCJfbiIsIl9zIiwiX2wiLCJfdCIsIl9xIiwiX2kiLCJfbSIsIl9mIiwiX2siLCJfYiIsIl92IiwiX2UiLCJfdSIsIl9nIiwiX2QiLCJfcCIsIkZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IiwiY29udGV4dFZtIiwidGhpcyQxIiwiX29yaWdpbmFsIiwiaXNDb21waWxlZCIsIl9jb21waWxlZCIsIm5lZWROb3JtYWxpemF0aW9uIiwibGlzdGVuZXJzIiwiaW5qZWN0aW9ucyIsInNjb3BlZFNsb3RzIiwiX3Njb3BlSWQiLCJfYyIsImQiLCJjcmVhdGVFbGVtZW50IiwiY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCIsImNsb25lIiwibWVyZ2VQcm9wcyIsImNvbXBvbmVudFZOb2RlSG9va3MiLCJpbml0IiwiaHlkcmF0aW5nIiwiX2lzRGVzdHJveWVkIiwia2VlcEFsaXZlIiwicHJlcGF0Y2giLCJfaXNDb21wb25lbnQiLCJfcGFyZW50Vm5vZGUiLCJpbmxpbmVUZW1wbGF0ZSIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUiLCJhY3RpdmVJbnN0YW5jZSIsIiRtb3VudCIsIm9sZFZub2RlIiwicGFyZW50Vm5vZGUiLCJyZW5kZXJDaGlsZHJlbiIsIm5ld1Njb3BlZFNsb3RzIiwib2xkU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljU2NvcGVkU2xvdCIsIm5lZWRzRm9yY2VVcGRhdGUiLCJfcmVuZGVyQ2hpbGRyZW4iLCIkdm5vZGUiLCJfdm5vZGUiLCIkYXR0cnMiLCIkbGlzdGVuZXJzIiwicHJvcEtleXMiLCJfcHJvcEtleXMiLCJvbGRMaXN0ZW5lcnMiLCJfcGFyZW50TGlzdGVuZXJzIiwidXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIiwiJGZvcmNlVXBkYXRlIiwidXBkYXRlQ2hpbGRDb21wb25lbnQiLCJpbnNlcnQiLCJfaXNNb3VudGVkIiwiY2FsbEhvb2siLCJfaW5hY3RpdmUiLCJhY3RpdmF0ZWRDaGlsZHJlbiIsImFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCJkZXN0cm95IiwiZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGlyZWN0IiwiX2RpcmVjdEluYWN0aXZlIiwiaXNJbkluYWN0aXZlVHJlZSIsIiRjaGlsZHJlbiIsIiRkZXN0cm95IiwiaG9va3NUb01lcmdlIiwiY3JlYXRlQ29tcG9uZW50IiwiYmFzZUN0b3IiLCJmYWN0b3J5IiwiY2lkIiwiZXJyb3JDb21wIiwicmVzb2x2ZWQiLCJvd25lciIsImN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsIm93bmVycyIsImxvYWRpbmciLCJsb2FkaW5nQ29tcCIsInN5bmMiLCJ0aW1lckxvYWRpbmciLCJ0aW1lclRpbWVvdXQiLCIkb24iLCJmb3JjZVJlbmRlciIsInJlbmRlckNvbXBsZXRlZCIsImNsZWFyVGltZW91dCIsImVuc3VyZUN0b3IiLCJyZWplY3QiLCJyZWFzb24iLCJjb21wb25lbnQiLCJkZWxheSIsInRpbWVvdXQiLCJyZXNvbHZlQXN5bmNDb21wb25lbnQiLCJyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIiwibW9kZWwiLCJjYWxsYmFjayIsInRyYW5zZm9ybU1vZGVsIiwiZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSIsImZ1bmN0aW9uYWwiLCJyZW5kZXJDb250ZXh0Iiwidm5vZGVzIiwiY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCIsIm5hdGl2ZU9uIiwidG9NZXJnZSIsIl9tZXJnZWQiLCJtZXJnZUhvb2skMSIsImluc3RhbGxDb21wb25lbnRIb29rcyIsImYxIiwiZjIiLCJTSU1QTEVfTk9STUFMSVpFIiwiQUxXQVlTX05PUk1BTElaRSIsIm5vcm1hbGl6YXRpb25UeXBlIiwiYWx3YXlzTm9ybWFsaXplIiwiaXMiLCJkZWZhdWx0Iiwic2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4iLCJwcmUiLCJhcHBseU5TIiwiZm9yY2UiLCJzdHlsZSIsInJlZ2lzdGVyRGVlcEJpbmRpbmdzIiwiX2NyZWF0ZUVsZW1lbnQiLCJjb21wIiwiYmFzZSIsIl9fZXNNb2R1bGUiLCJ0b1N0cmluZ1RhZyIsImdldEZpcnN0Q29tcG9uZW50Q2hpbGQiLCJyZW1vdmUkMSIsIiRvZmYiLCJfdGFyZ2V0Iiwib25jZUhhbmRsZXIiLCJzZXRBY3RpdmVJbnN0YW5jZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsImhhbmRsZXJzIiwiaiIsIl9oYXNIb29rRXZlbnQiLCIkZW1pdCIsInF1ZXVlIiwid2FpdGluZyIsImZsdXNoaW5nIiwiY3VycmVudEZsdXNoVGltZXN0YW1wIiwiZ2V0Tm93Iiwibm93IiwiY3JlYXRlRXZlbnQiLCJ0aW1lU3RhbXAiLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsInNvcnQiLCJiZWZvcmUiLCJydW4iLCJhY3RpdmF0ZWRRdWV1ZSIsInVwZGF0ZWRRdWV1ZSIsImNhbGxBY3RpdmF0ZWRIb29rcyIsIl93YXRjaGVyIiwiY2FsbFVwZGF0ZWRIb29rcyIsImVtaXQiLCJ1aWQkMiIsIldhdGNoZXIiLCJleHBPckZuIiwiaXNSZW5kZXJXYXRjaGVyIiwiX3dhdGNoZXJzIiwiZGVlcCIsInVzZXIiLCJsYXp5IiwiYWN0aXZlIiwiZGlydHkiLCJkZXBzIiwibmV3RGVwcyIsImRlcElkcyIsIm5ld0RlcElkcyIsImV4cHJlc3Npb24iLCJwYXRoIiwic2VnbWVudHMiLCJwYXJzZVBhdGgiLCJjbGVhbnVwRGVwcyIsInRtcCIsInF1ZXVlV2F0Y2hlciIsIm9sZFZhbHVlIiwiZXZhbHVhdGUiLCJ0ZWFyZG93biIsIl9pc0JlaW5nRGVzdHJveWVkIiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwic291cmNlS2V5IiwiaW5pdFN0YXRlIiwicHJvcHNPcHRpb25zIiwiaW5pdFByb3BzIiwiaW5pdE1ldGhvZHMiLCJfZGF0YSIsImdldERhdGEiLCJjaGFyQ29kZUF0IiwiaW5pdERhdGEiLCJ3YXRjaGVycyIsIl9jb21wdXRlZFdhdGNoZXJzIiwiaXNTU1IiLCJ1c2VyRGVmIiwiY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyIsImRlZmluZUNvbXB1dGVkIiwiaW5pdENvbXB1dGVkIiwiY3JlYXRlV2F0Y2hlciIsImluaXRXYXRjaCIsInNob3VsZENhY2hlIiwiY3JlYXRlQ29tcHV0ZWRHZXR0ZXIiLCJjcmVhdGVHZXR0ZXJJbnZva2VyIiwiJHdhdGNoIiwiVnVlIiwiZGF0YURlZiIsInByb3BzRGVmIiwiaG9va1JFIiwidWlkJDMiLCJzdXBlck9wdGlvbnMiLCJtb2RpZmllZE9wdGlvbnMiLCJtb2RpZmllZCIsImxhdGVzdCIsInNlYWxlZCIsInNlYWxlZE9wdGlvbnMiLCJyZXNvbHZlTW9kaWZpZWRPcHRpb25zIiwiZXh0ZW5kT3B0aW9ucyIsImNvbXBvbmVudHMiLCJfaW5pdCIsImluaXRFeHRlbmQiLCJTdXBlciIsIlN1cGVySWQiLCJjYWNoZWRDdG9ycyIsIl9DdG9yIiwiU3ViIiwiQ29tcCIsImluaXRQcm9wcyQxIiwiaW5pdENvbXB1dGVkJDEiLCJtaXhpbiIsInVzZSIsImdldENvbXBvbmVudE5hbWUiLCJtYXRjaGVzIiwicGF0dGVybiIsInBydW5lQ2FjaGUiLCJrZWVwQWxpdmVJbnN0YW5jZSIsImNhY2hlZE5vZGUiLCJwcnVuZUNhY2hlRW50cnkiLCJjdXJyZW50IiwiY2FjaGVkJCQxIiwiX3VpZCIsInZub2RlQ29tcG9uZW50T3B0aW9ucyIsIl9jb21wb25lbnRUYWciLCJpbml0SW50ZXJuYWxDb21wb25lbnQiLCIkcm9vdCIsIiRyZWZzIiwiaW5pdExpZmVjeWNsZSIsIl9zZWxmIiwiX2V2ZW50cyIsImluaXRFdmVudHMiLCJwYXJlbnREYXRhIiwiaW5pdFJlbmRlciIsImVsIiwiJHNldCIsIiRkZWxldGUiLCJpbW1lZGlhdGUiLCIkb25jZSIsImkkMSIsImNicyIsIl91cGRhdGUiLCJwcmV2RWwiLCIkZWwiLCJwcmV2Vm5vZGUiLCJyZXN0b3JlQWN0aXZlSW5zdGFuY2UiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwiJG5leHRUaWNrIiwiX3JlbmRlciIsInJlZiIsImNvbmZpZ0RlZiIsInBhdHRlcm5UeXBlcyIsImJ1aWx0SW5Db21wb25lbnRzIiwiS2VlcEFsaXZlIiwiYWJzdHJhY3QiLCJpbmNsdWRlIiwiZXhjbHVkZSIsIk51bWJlciIsImNyZWF0ZWQiLCJkZXN0cm95ZWQiLCJtb3VudGVkIiwicGFyc2VJbnQiLCJ1dGlsIiwiZGVmaW5lUmVhY3RpdmUiLCJvYnNlcnZhYmxlIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwidW5zaGlmdCIsImluc3RhbGwiLCJkZWZpbml0aW9uIiwic3NyQ29udGV4dCIsInZlcnNpb24iLCJhY2NlcHRWYWx1ZSIsImlzRW51bWVyYXRlZEF0dHIiLCJpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUiLCJjb252ZXJ0RW51bWVyYXRlZFZhbHVlIiwiaXNGYWxzeUF0dHJWYWx1ZSIsImlzQm9vbGVhbkF0dHIiLCJ4bGlua05TIiwiaXNYbGluayIsImdldFhsaW5rUHJvcCIsImdlbkNsYXNzRm9yVm5vZGUiLCJwYXJlbnROb2RlIiwiY2hpbGROb2RlIiwibWVyZ2VDbGFzc0RhdGEiLCJzdGF0aWNDbGFzcyIsImR5bmFtaWNDbGFzcyIsInN0cmluZ2lmeUNsYXNzIiwicmVuZGVyQ2xhc3MiLCJjbGFzcyIsInN0cmluZ2lmaWVkIiwic3RyaW5naWZ5QXJyYXkiLCJzdHJpbmdpZnlPYmplY3QiLCJpc0hUTUxUYWciLCJpc1NWRyIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJ1bmtub3duRWxlbWVudENhY2hlIiwiaXNUZXh0SW5wdXRUeXBlIiwibm9kZU9wcyIsInRhZ05hbWUiLCJtdWx0aXBsZSIsInNldEF0dHJpYnV0ZSIsImNyZWF0ZUVsZW1lbnROUyIsIm5hbWVzcGFjZSIsImNyZWF0ZUNvbW1lbnQiLCJpbnNlcnRCZWZvcmUiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJuZXh0U2libGluZyIsInNldFRleHRDb250ZW50IiwidGV4dENvbnRlbnQiLCJzZXRTdHlsZVNjb3BlIiwic2NvcGVJZCIsInJlZ2lzdGVyUmVmIiwiaXNSZW1vdmFsIiwicmVmcyIsInJlZkluRm9yIiwiZW1wdHlOb2RlIiwic2FtZVZub2RlIiwidHlwZUEiLCJ0eXBlQiIsInNhbWVJbnB1dFR5cGUiLCJjcmVhdGVLZXlUb09sZElkeCIsImJlZ2luSWR4IiwiZW5kSWR4IiwidXBkYXRlRGlyZWN0aXZlcyIsIm9sZERpciIsImRpciIsImlzQ3JlYXRlIiwiaXNEZXN0cm95Iiwib2xkRGlycyIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMkMSIsIm5ld0RpcnMiLCJkaXJzV2l0aEluc2VydCIsImRpcnNXaXRoUG9zdHBhdGNoIiwib2xkQXJnIiwiYXJnIiwiY2FsbEhvb2skMSIsImNvbXBvbmVudFVwZGF0ZWQiLCJjYWxsSW5zZXJ0IiwiZW1wdHlNb2RpZmllcnMiLCJtb2RpZmllcnMiLCJyYXdOYW1lIiwiam9pbiIsImJhc2VNb2R1bGVzIiwidXBkYXRlQXR0cnMiLCJpbmhlcml0QXR0cnMiLCJvbGRBdHRycyIsInNldEF0dHIiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZSIsImJhc2VTZXRBdHRyIiwic2V0QXR0cmlidXRlTlMiLCJfX2llcGgiLCJibG9ja2VyIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVwZGF0ZUNsYXNzIiwib2xkRGF0YSIsImNscyIsInRyYW5zaXRpb25DbGFzcyIsIl90cmFuc2l0aW9uQ2xhc3NlcyIsIl9wcmV2Q2xhc3MiLCJ0YXJnZXQkMSIsImtsYXNzIiwiUkFOR0VfVE9LRU4iLCJDSEVDS0JPWF9SQURJT19UT0tFTiIsImNyZWF0ZU9uY2VIYW5kbGVyJDEiLCJyZW1vdmUkMiIsInVzZU1pY3JvdGFza0ZpeCIsImFkZCQxIiwiYXR0YWNoZWRUaW1lc3RhbXAiLCJfd3JhcHBlciIsImN1cnJlbnRUYXJnZXQiLCJvd25lckRvY3VtZW50IiwidXBkYXRlRE9NTGlzdGVuZXJzIiwiY2hhbmdlIiwibm9ybWFsaXplRXZlbnRzIiwic3ZnQ29udGFpbmVyIiwiZXZlbnRzIiwidXBkYXRlRE9NUHJvcHMiLCJjaGVja1ZhbCIsIm9sZFByb3BzIiwiY2hpbGROb2RlcyIsInN0ckN1ciIsIl92YWx1ZSIsImNvbXBvc2luZyIsIm5vdEluRm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiaXNOb3RJbkZvY3VzQW5kRGlydHkiLCJfdk1vZGlmaWVycyIsIm51bWJlciIsInRyaW0iLCJpc0RpcnR5V2l0aE1vZGlmaWVycyIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJwYXJzZVN0eWxlVGV4dCIsImNzc1RleHQiLCJwcm9wZXJ0eURlbGltaXRlciIsIm5vcm1hbGl6ZVN0eWxlRGF0YSIsIm5vcm1hbGl6ZVN0eWxlQmluZGluZyIsInN0YXRpY1N0eWxlIiwiYmluZGluZ1N0eWxlIiwic2V0UHJvcCIsImNzc1ZhclJFIiwic2V0UHJvcGVydHkiLCJpbXBvcnRhbnRSRSIsIm5vcm1hbGl6ZWROYW1lIiwibm9ybWFsaXplIiwiZW1wdHlTdHlsZSIsInZlbmRvck5hbWVzIiwiY2FwTmFtZSIsInVwZGF0ZVN0eWxlIiwib2xkU3RhdGljU3R5bGUiLCJvbGRTdHlsZUJpbmRpbmciLCJub3JtYWxpemVkU3R5bGUiLCJvbGRTdHlsZSIsIm5ld1N0eWxlIiwiY2hlY2tDaGlsZCIsInN0eWxlRGF0YSIsImdldFN0eWxlIiwid2hpdGVzcGFjZVJFIiwiYWRkQ2xhc3MiLCJjbGFzc0xpc3QiLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVDbGFzcyIsInRhciIsInJlc29sdmVUcmFuc2l0aW9uIiwiYXV0b0Nzc1RyYW5zaXRpb24iLCJlbnRlckNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImxlYXZlQ2xhc3MiLCJsZWF2ZVRvQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwiaGFzVHJhbnNpdGlvbiIsIlRSQU5TSVRJT04iLCJBTklNQVRJT04iLCJ0cmFuc2l0aW9uUHJvcCIsInRyYW5zaXRpb25FbmRFdmVudCIsImFuaW1hdGlvblByb3AiLCJhbmltYXRpb25FbmRFdmVudCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ud2Via2l0dHJhbnNpdGlvbmVuZCIsIm9uYW5pbWF0aW9uZW5kIiwib253ZWJraXRhbmltYXRpb25lbmQiLCJyYWYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJuZXh0RnJhbWUiLCJhZGRUcmFuc2l0aW9uQ2xhc3MiLCJ0cmFuc2l0aW9uQ2xhc3NlcyIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImV4cGVjdGVkVHlwZSIsImdldFRyYW5zaXRpb25JbmZvIiwicHJvcENvdW50IiwiZW5kIiwib25FbmQiLCJlbmRlZCIsInRyYW5zZm9ybVJFIiwic3R5bGVzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInRyYW5zaXRpb25EZWxheXMiLCJ0cmFuc2l0aW9uRHVyYXRpb25zIiwidHJhbnNpdGlvblRpbWVvdXQiLCJnZXRUaW1lb3V0IiwiYW5pbWF0aW9uRGVsYXlzIiwiYW5pbWF0aW9uRHVyYXRpb25zIiwiYW5pbWF0aW9uVGltZW91dCIsImhhc1RyYW5zZm9ybSIsImRlbGF5cyIsImR1cmF0aW9ucyIsInRvTXMiLCJzIiwiZW50ZXIiLCJ0b2dnbGVEaXNwbGF5IiwiX2xlYXZlQ2IiLCJjYW5jZWxsZWQiLCJ0cmFuc2l0aW9uIiwiX2VudGVyQ2IiLCJub2RlVHlwZSIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYmVmb3JlRW50ZXIiLCJhZnRlckVudGVyIiwiZW50ZXJDYW5jZWxsZWQiLCJiZWZvcmVBcHBlYXIiLCJhcHBlYXIiLCJhZnRlckFwcGVhciIsImFwcGVhckNhbmNlbGxlZCIsImR1cmF0aW9uIiwidHJhbnNpdGlvbk5vZGUiLCJpc0FwcGVhciIsInN0YXJ0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInRvQ2xhc3MiLCJiZWZvcmVFbnRlckhvb2siLCJlbnRlckhvb2siLCJhZnRlckVudGVySG9vayIsImVudGVyQ2FuY2VsbGVkSG9vayIsImV4cGxpY2l0RW50ZXJEdXJhdGlvbiIsImV4cGVjdHNDU1MiLCJ1c2VyV2FudHNDb250cm9sIiwiZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCIsInNob3ciLCJwZW5kaW5nTm9kZSIsIl9wZW5kaW5nIiwiaXNWYWxpZER1cmF0aW9uIiwibGVhdmUiLCJybSIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsImV4cGxpY2l0TGVhdmVEdXJhdGlvbiIsInBlcmZvcm1MZWF2ZSIsImludm9rZXJGbnMiLCJfZW50ZXIiLCJwYXRjaCIsImJhY2tlbmQiLCJtb2R1bGVzIiwicmVtb3ZlTm9kZSIsImNyZWF0ZUVsbSIsImluc2VydGVkVm5vZGVRdWV1ZSIsInBhcmVudEVsbSIsInJlZkVsbSIsIm5lc3RlZCIsIm93bmVyQXJyYXkiLCJpc1JlYWN0aXZhdGVkIiwiaW5pdENvbXBvbmVudCIsImlubmVyTm9kZSIsImFjdGl2YXRlIiwicmVhY3RpdmF0ZUNvbXBvbmVudCIsInNldFNjb3BlIiwiY3JlYXRlQ2hpbGRyZW4iLCJpbnZva2VDcmVhdGVIb29rcyIsInBlbmRpbmdJbnNlcnQiLCJpc1BhdGNoYWJsZSIsInJlZiQkMSIsImFuY2VzdG9yIiwiYWRkVm5vZGVzIiwic3RhcnRJZHgiLCJpbnZva2VEZXN0cm95SG9vayIsInJlbW92ZVZub2RlcyIsImNoIiwicmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayIsImNoaWxkRWxtIiwiZmluZElkeEluT2xkIiwib2xkQ2giLCJwYXRjaFZub2RlIiwicmVtb3ZlT25seSIsImh5ZHJhdGUiLCJuZXdDaCIsIm9sZEtleVRvSWR4IiwiaWR4SW5PbGQiLCJ2bm9kZVRvTW92ZSIsIm9sZFN0YXJ0SWR4IiwibmV3U3RhcnRJZHgiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJjYW5Nb3ZlIiwidXBkYXRlQ2hpbGRyZW4iLCJwb3N0cGF0Y2giLCJpbnZva2VJbnNlcnRIb29rIiwiaW5pdGlhbCIsImlzUmVuZGVyZWRNb2R1bGUiLCJpblZQcmUiLCJoYXNDaGlsZE5vZGVzIiwiY2hpbGRyZW5NYXRjaCIsImZ1bGxJbnZva2UiLCJpc0luaXRpYWxQYXRjaCIsImlzUmVhbEVsZW1lbnQiLCJoYXNBdHRyaWJ1dGUiLCJvbGRFbG0iLCJwYXRjaGFibGUiLCJpJDIiLCJjcmVhdGVQYXRjaEZ1bmN0aW9uIiwidm1vZGVsIiwidHJpZ2dlciIsImRpcmVjdGl2ZSIsImJpbmRpbmciLCJfdk9wdGlvbnMiLCJzZXRTZWxlY3RlZCIsImdldFZhbHVlIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsInByZXZPcHRpb25zIiwiY3VyT3B0aW9ucyIsInNvbWUiLCJoYXNOb01hdGNoaW5nT3B0aW9uIiwiYWN0dWFsbHlTZXRTZWxlY3RlZCIsImlzTXVsdGlwbGUiLCJzZWxlY3RlZCIsIm9wdGlvbiIsInNlbGVjdGVkSW5kZXgiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwibG9jYXRlTm9kZSIsInBsYXRmb3JtRGlyZWN0aXZlcyIsInRyYW5zaXRpb24kJDEiLCJvcmlnaW5hbERpc3BsYXkiLCJfX3ZPcmlnaW5hbERpc3BsYXkiLCJkaXNwbGF5IiwidW5iaW5kIiwidHJhbnNpdGlvblByb3BzIiwibW9kZSIsImdldFJlYWxDaGlsZCIsImNvbXBPcHRpb25zIiwiZXh0cmFjdFRyYW5zaXRpb25EYXRhIiwicGxhY2Vob2xkZXIiLCJoIiwicmF3Q2hpbGQiLCJpc05vdFRleHROb2RlIiwiaXNWU2hvd0RpcmVjdGl2ZSIsIlRyYW5zaXRpb24iLCJoYXNQYXJlbnRUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRDaGlsZCIsIm9sZFJhd0NoaWxkIiwiZGVsYXllZExlYXZlIiwibW92ZUNsYXNzIiwiY2FsbFBlbmRpbmdDYnMiLCJfbW92ZUNiIiwicmVjb3JkUG9zaXRpb24iLCJuZXdQb3MiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJhcHBseVRyYW5zbGF0aW9uIiwib2xkUG9zIiwicG9zIiwiZHgiLCJsZWZ0IiwiZHkiLCJ0b3AiLCJtb3ZlZCIsInRyYW5zZm9ybSIsIldlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsInBsYXRmb3JtQ29tcG9uZW50cyIsIlRyYW5zaXRpb25Hcm91cCIsImJlZm9yZU1vdW50Iiwia2VwdCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJyZW1vdmVkIiwiYyQxIiwidXBkYXRlZCIsImhhc01vdmUiLCJfcmVmbG93IiwiYm9keSIsIm9mZnNldEhlaWdodCIsInByb3BlcnR5TmFtZSIsIl9oYXNNb3ZlIiwiY2xvbmVOb2RlIiwiYXR0ciIsIkhUTUxVbmtub3duRWxlbWVudCIsIkhUTUxFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInF1ZXJ5IiwidXBkYXRlQ29tcG9uZW50IiwibG9hZE1vZHVsZSIsInVybCIsIm1vZHVsZUlkIiwibW9kdWxlRGVmaW5pdGlvbiIsIm1vZHVsZXMkMSIsInByb21pc2UiLCJjaGVja0lmRG9tUmVhZHkiLCJyZWFkeVN0YXRlIiwicmVzb2x2ZVByb21pc2UiLCJzY3JpcHQiLCJvbmVycm9yIiwiZW1iZWRTY3JpcHQiLCJfdHlwZW9mIiwiZmlsZXN0YWNrSW50ZXJuYWxzIiwibG9hZGVyIiwib25PZmYiLCJsb2dnZXIiLCJ3b3JraW5nIiwiaXNXb3JraW5nIiwib2ZmIiwiX3R5cGVvZiQxIiwiY29udGV4dE5hbWUiLCJhcGkiLCJfbGVuIiwic3R1ZmYiLCJfa2V5IiwiX2NvbnNvbGUiLCJjb252ZXJ0ZWRUb1N0cmluZ3MiLCJ0aGluZyIsIkZpbGUiLCJzaXplIiwibG9nIiwidG9Db25zdW1hYmxlQXJyYXkiLCJzdWJDb250ZXh0TmFtZSIsImNvbW1vbmpzR2xvYmFsIiwiZ2xvYmFsVGhpcyIsImNvbW1vbmpzUmVxdWlyZSIsIkVycm9yIiwiY3JlYXRlQ29tbW9uanNNb2R1bGUiLCJtb2R1bGUiLCJleHBvcnRzIiwieCIsInZ1ZVNlc3Npb25zdG9yYWdlX21pbiIsInQiLCJsb2FkZWQiLCJtIiwiciIsInUiLCJzZXNzaW9uU3RvcmFnZSIsIiRzZXNzaW9uIiwic2V0SXRlbSIsImdldEl0ZW0iLCJfX2dldFJhbmRvbVN0cmluZyIsImZyb21DaGFyQ29kZSIsInJhbmRvbSIsIl9fZ2V0S2V5IiwiX19nZXQiLCJwYXJzZSIsIl9fc2V0IiwiZXhpc3RzIiwiVnVlU2Vzc2lvblN0b3JhZ2UiLCJsb2Rhc2hfX3JlaW50ZXJwb2xhdGUiLCJJTkZJTklUWSIsIm51bGxUYWciLCJzeW1ib2xUYWciLCJ1bmRlZmluZWRUYWciLCJyZVVuZXNjYXBlZEh0bWwiLCJyZUhhc1VuZXNjYXBlZEh0bWwiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJyb290IiwiZXNjYXBlSHRtbENoYXIiLCImIiwiPCIsIj4iLCJcIiIsIiciLCJvYmplY3RQcm90byIsImhhc093blByb3BlcnR5JDEiLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIlN5bWJvbCQxIiwic3ltVG9TdHJpbmdUYWciLCJzeW1ib2xQcm90byIsInN5bWJvbFRvU3RyaW5nIiwidGVtcGxhdGVTZXR0aW5ncyIsImVzY2FwZSIsImludGVycG9sYXRlIiwidmFyaWFibGUiLCJpbXBvcnRzIiwic3RyaW5nIiwiYmFzZVRvU3RyaW5nIiwidG9TdHJpbmckMSIsImJhc2VHZXRUYWciLCJpc093biIsInVubWFza2VkIiwiZ2V0UmF3VGFnIiwiYXJyYXkiLCJpdGVyYXRlZSIsImFycmF5TWFwIiwiaXNPYmplY3RMaWtlIiwibG9kYXNoX3RlbXBsYXRlc2V0dGluZ3MiLCJsb2Rhc2hfdGVtcGxhdGUiLCJNQVhfU0FGRV9JTlRFR0VSIiwiYXJnc1RhZyIsImFzeW5jVGFnIiwiZG9tRXhjVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwib2JqZWN0VGFnIiwicHJveHlUYWciLCJyZUVtcHR5U3RyaW5nTGVhZGluZyIsInJlRW1wdHlTdHJpbmdNaWRkbGUiLCJyZUVtcHR5U3RyaW5nVHJhaWxpbmciLCJyZUVzVGVtcGxhdGUiLCJyZUlzSG9zdEN0b3IiLCJyZUlzVWludCIsInJlTm9NYXRjaCIsInJlVW5lc2NhcGVkU3RyaW5nIiwidHlwZWRBcnJheVRhZ3MiLCJzdHJpbmdFc2NhcGVzIiwiXFwiLCJcbiIsIlxyIiwi4oCoIiwi4oCpIiwiZnJlZUV4cG9ydHMiLCJmcmVlTW9kdWxlIiwibW9kdWxlRXhwb3J0cyIsImZyZWVQcm9jZXNzIiwicHJvY2VzcyIsIm5vZGVVdGlsIiwidHlwZXMiLCJyZXF1aXJlIiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImZ1bmMiLCJ0aGlzQXJnIiwiZXNjYXBlU3RyaW5nQ2hhciIsImNociIsIm92ZXJBcmciLCJmdW5jUHJvdG8iLCJjb3JlSnNEYXRhIiwiZnVuY1RvU3RyaW5nIiwibWFza1NyY0tleSIsImV4ZWMiLCJJRV9QUk9UTyIsIm9iamVjdEN0b3JTdHJpbmciLCJyZUlzTmF0aXZlIiwiQnVmZmVyIiwiX1N5bWJvbCIsImdldFByb3RvdHlwZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiaXNNYXNrZWQiLCJpc0Z1bmN0aW9uIiwidG9Tb3VyY2UiLCJiYXNlSXNOYXRpdmUiLCJuYXRpdmVJc0J1ZmZlciIsImlzQnVmZmVyIiwibmF0aXZlS2V5cyIsIm5hdGl2ZU1heCIsIm5hdGl2ZU5vdyIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNBcmd1bWVudHMiLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImJhc2VUaW1lcyIsImlzSW5kZXgiLCJiYXNlQXNzaWduVmFsdWUiLCJiYXNlSXNBcmd1bWVudHMiLCJiYXNlS2V5c0luIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImlzUHJvdG90eXBlIiwiYmFzZVJlc3QiLCJzZXRUb1N0cmluZyIsIm90aGVyQXJncyIsImN1c3RvbURlZmF1bHRzQXNzaWduSW4iLCJvYmpWYWx1ZSIsInNyY1ZhbHVlIiwiZXEiLCJpc0l0ZXJhdGVlQ2FsbCIsImlzQXJyYXlMaWtlIiwiY291bnQiLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyZW1haW5pbmciLCJvdGhlciIsImlzTGVuZ3RoIiwiaXNFcnJvciIsIm1lc3NhZ2UiLCJwcm90byIsImFzc2lnbmVyIiwiYXNzaWduSW5XaXRoIiwic3JjSW5kZXgiLCJjdXN0b21pemVyIiwiaXNOZXciLCJuZXdWYWx1ZSIsImNvcHlPYmplY3QiLCJzb3VyY2VzIiwiZ3VhcmQiLCJhdHRlbXB0Iiwic2V0dGluZ3MiLCJpc0VzY2FwaW5nIiwiaXNFdmFsdWF0aW5nIiwiaW1wb3J0c0tleXMiLCJpbXBvcnRzVmFsdWVzIiwicmVEZWxpbWl0ZXJzIiwic291cmNlVVJMIiwiZXNjYXBlVmFsdWUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiZXNUZW1wbGF0ZVZhbHVlIiwiZXZhbHVhdGVWYWx1ZSIsIm9mZnNldCIsIlZ1ZVRyYW5zbGF0ZSIsIl9WdWUkbWl4aW4iLCJsb2NhbGVzIiwibGFuZyIsImxvY2FsZSIsInNldExhbmciLCJzZXRMb2NhbGVzIiwibmV3TG9jYWxlIiwiJHRyYW5zbGF0ZSIsInRyYW5zbGF0ZSIsIiR0cmFuc2xhdGVLZXkiLCJpbm5lclRleHQiLCJkZXZ0b29sSG9vayIsImZvckVhY2hWYWx1ZSIsImlzT2JqZWN0JDEiLCJNb2R1bGUiLCJyYXdNb2R1bGUiLCJydW50aW1lIiwiX2NoaWxkcmVuIiwicmF3U3RhdGUiLCJfcmF3TW9kdWxlIiwic3RhdGUiLCJwcm90b3R5cGVBY2Nlc3NvcnMkMSIsIm5hbWVzcGFjZWQiLCJhZGRDaGlsZCIsImdldENoaWxkIiwiYWN0aW9ucyIsIm11dGF0aW9ucyIsImdldHRlcnMiLCJmb3JFYWNoQ2hpbGQiLCJmb3JFYWNoR2V0dGVyIiwiZm9yRWFjaEFjdGlvbiIsImZvckVhY2hNdXRhdGlvbiIsIk1vZHVsZUNvbGxlY3Rpb24iLCJyYXdSb290TW9kdWxlIiwicmVnaXN0ZXIiLCJWdWUkMSIsInJlZHVjZSIsImdldE5hbWVzcGFjZSIsInRhcmdldE1vZHVsZSIsIm5ld01vZHVsZSIsInJhd0NoaWxkTW9kdWxlIiwidW5yZWdpc3RlciIsIlN0b3JlIiwicGx1Z2lucyIsInN0cmljdCIsIl9jb21taXR0aW5nIiwiX2FjdGlvbnMiLCJfYWN0aW9uU3Vic2NyaWJlcnMiLCJfbXV0YXRpb25zIiwiX3dyYXBwZWRHZXR0ZXJzIiwiX21vZHVsZXMiLCJfbW9kdWxlc05hbWVzcGFjZU1hcCIsIl9zdWJzY3JpYmVycyIsIl93YXRjaGVyVk0iLCJfbWFrZUxvY2FsR2V0dGVyc0NhY2hlIiwic3RvcmUiLCJkaXNwYXRjaCIsImNvbW1pdCIsInBheWxvYWQiLCJpbnN0YWxsTW9kdWxlIiwicmVzZXRTdG9yZVZNIiwiX2RldnRvb2xIb29rIiwidGFyZ2V0U3RhdGUiLCJyZXBsYWNlU3RhdGUiLCJzdWJzY3JpYmUiLCJtdXRhdGlvbiIsInByb3RvdHlwZUFjY2Vzc29ycyQxJDEiLCJnZW5lcmljU3Vic2NyaWJlIiwicmVzZXRTdG9yZSIsImhvdCIsIm9sZFZtIiwiX3ZtIiwid3JhcHBlZEdldHRlcnMiLCIkJHN0YXRlIiwiX3dpdGhDb21taXQiLCJyb290U3RhdGUiLCJpc1Jvb3QiLCJwYXJlbnRTdGF0ZSIsImdldE5lc3RlZFN0YXRlIiwibW9kdWxlTmFtZSIsIm5vTmFtZXNwYWNlIiwibG9jYWwiLCJfdHlwZSIsIl9wYXlsb2FkIiwiX29wdGlvbnMiLCJ1bmlmeU9iamVjdFN0eWxlIiwiZ2V0dGVyc1Byb3h5Iiwic3BsaXRQb3MiLCJsb2NhbFR5cGUiLCJtYWtlTG9jYWxHZXR0ZXJzIiwiYWN0aW9uIiwicm9vdEdldHRlcnMiLCJyYXdHZXR0ZXIiLCJyZWdpc3RlckdldHRlciIsIl9WdWUiLCJiZWZvcmVDcmVhdGUiLCJ2dWV4SW5pdCIsIiRzdG9yZSIsImFwcGx5TWl4aW4iLCJlbnRyeSIsImFsbCIsImFmdGVyIiwic3Vic2NyaWJlQWN0aW9uIiwicmVnaXN0ZXJNb2R1bGUiLCJwcmVzZXJ2ZVN0YXRlIiwidW5yZWdpc3Rlck1vZHVsZSIsImhvdFVwZGF0ZSIsIm5ld09wdGlvbnMiLCJjb21taXR0aW5nIiwibWFwU3RhdGUiLCJub3JtYWxpemVOYW1lc3BhY2UiLCJzdGF0ZXMiLCJub3JtYWxpemVNYXAiLCJnZXRNb2R1bGVCeU5hbWVzcGFjZSIsInZ1ZXgiLCJtYXBNdXRhdGlvbnMiLCJtYXBHZXR0ZXJzIiwibWFwQWN0aW9ucyIsImhlbHBlciIsImdldFBhdGgiLCJleHRyYWN0RnJvbUl0ZW1zIiwidHJhdmVyc2VEaXJlY3RvcnlUcmVlIiwiZmlsZUVudHJ5IiwicHJvbWlzZXMiLCJpc0RpcmVjdG9yeSIsInJlYWRlciIsImNyZWF0ZVJlYWRlciIsInJlYWRGaWxlcyIsInJlYWRFbnRyaWVzIiwiZGlyQ29udGVudCIsImRpckl0ZW0iLCJpc0ZpbGUiLCJmaWxlIiwiZmlsZW5hbWUiLCJmaWxlcyIsImV4dHJhY3RVcmwiLCJnZXRBc1N0cmluZyIsImtpbmQiLCJnZXRBc0ZpbGUiLCJfZmlsZSIsImdldEFzRW50cnkiLCJ3ZWJraXRHZXRBc0VudHJ5IiwiZXh0cmFjdEZpbGVzRnJvbURhdGFUcmFuc2ZlciIsImRhdGFUcmFuc2ZlciIsImZpbGVMaXN0IiwiaW5kZXhfZXNtIiwiY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMiLCJmaWxlQWJvdXRUb0JlRHJvcHBlZCIsImRyYWdlbnRlciIsInByZXZlbnREZWZhdWx0IiwidXBkYXRlU2VsZWN0TGFiZWxBY3RpdmUiLCJkcmFnb3ZlciIsImRyYWdsZWF2ZSIsImRyb3AiLCJfdGhpczQiLCJhZGRGaWxlIiwicGFzdGUiLCJfdGhpczUiLCJjbGlwYm9hcmREYXRhIiwiZHJvcFpvbmUiLCJiZWZvcmVEZXN0cm95Iiwibm9ybWFsaXplQ29tcG9uZW50IiwidGVtcGxhdGUiLCJpc0Z1bmN0aW9uYWxUZW1wbGF0ZSIsIm1vZHVsZUlkZW50aWZpZXIiLCJzaGFkb3dNb2RlIiwiY3JlYXRlSW5qZWN0b3IiLCJjcmVhdGVJbmplY3RvclNTUiIsImNyZWF0ZUluamVjdG9yU2hhZG93IiwiX19WVUVfU1NSX0NPTlRFWFRfXyIsIl9yZWdpc3RlcmVkQ29tcG9uZW50cyIsIl9zc3JSZWdpc3RlciIsInNoYWRvd1Jvb3QiLCJvcmlnaW5hbFJlbmRlciIsIl9fdnVlX3JlbmRlcl9fIiwiX2giLCJfX3Z1ZV9zY3JpcHRfXyIsIl93aXRoU3RyaXBwZWQiLCJfX3Z1ZV9yZW5kZXJfXyQxIiwiY2xpY2siLCJ0b2dnbGVOYXYiLCJEcmFnQW5kRHJvcCIsIl9fdnVlX3NjcmlwdF9fJDEiLCJ1cGRhdGVNb2JpbGVOYXZBY3RpdmUiLCJtb2JpbGVOYXZBY3RpdmUiLCJfX3Z1ZV9yZW5kZXJfXyQyIiwiZnNwLWhlYWRlci0taGlkZSIsImhpZGVIZWFkZXIiLCJ0aXRsZSIsImxhYmVsIiwiaXNDdXN0b21Tb3VyY2UiLCJjdXN0b21Tb3VyY2VMYWJlbCIsImhpZGVNZW51IiwiY3JvcEZpbGVzIiwiTW9iaWxlTWVudUJ1dHRvbiIsIl9fdnVlX3NjcmlwdF9fJDIiLCJjdXN0b21Tb3VyY2VOYW1lIiwiQ29udGVudEhlYWRlciIsIkZVTkNfRVJST1JfVEVYVCIsIk5BTiIsInN5bWJvbFRhZyQxIiwicmVUcmltIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzT2N0YWwiLCJmcmVlUGFyc2VJbnQiLCJmcmVlR2xvYmFsJDEiLCJmcmVlU2VsZiQxIiwicm9vdCQxIiwib2JqZWN0VG9TdHJpbmckMSIsIm5hdGl2ZU1pbiIsIm1pbiIsImRlYm91bmNlIiwid2FpdCIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibGVhZGluZyIsIm1heGluZyIsInRyYWlsaW5nIiwiaW52b2tlRnVuYyIsInRpbWUiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRpbWVyRXhwaXJlZCIsInRyYWlsaW5nRWRnZSIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJ0b051bWJlciQxIiwiaXNPYmplY3QkMiIsImNhbmNlbCIsImZsdXNoIiwiaXNTeW1ib2wkMSIsInZhbHVlT2YiLCJpc0JpbmFyeSIsIl9fdnVlX3JlbmRlcl9fJDMiLCJpdGVtQ2xhc3NlcyIsIml0ZW1MYWJlbCIsInRhYmluZGV4Iiwia2V5dXAiLCJrZXlDb2RlIiwib25OYXZDbGljayIsInNvdXJjZU5hbWUiLCJzb3VyY2VTZWxlY3RlZENvdW50IiwiaXNBdXRob3JpemVkIiwic3RvcFByb3BhZ2F0aW9uIiwibG9nb3V0IiwiaXNNb2JpbGVMb2NhbCIsImFjY2VwdCIsImFjY2VwdFN0ciIsImRpc2FibGVkIiwiY2FuQWRkTW9yZUZpbGVzIiwib25GaWxlc1NlbGVjdGVkIiwiY2xlYXJFdmVudCIsImxvZGFzaF90aHJvdHRsZSIsImJvd3NlciIsImRldGVjdCIsInVhIiwiZ2V0Rmlyc3RNYXRjaCIsInJlZ2V4IiwiZ2V0U2Vjb25kTWF0Y2giLCJpb3NkZXZpY2UiLCJhbmRyb2lkIiwibmV4dXNNb2JpbGUiLCJuZXh1c1RhYmxldCIsImNocm9tZW9zIiwic2lsayIsInNhaWxmaXNoIiwidGl6ZW4iLCJ3ZWJvcyIsIndpbmRvd3NwaG9uZSIsIndpbmRvd3MiLCJtYWMiLCJsaW51eCIsImVkZ2VWZXJzaW9uIiwidmVyc2lvbklkZW50aWZpZXIiLCJ0YWJsZXQiLCJtb2JpbGUiLCJ4Ym94Iiwib3BlcmEiLCJzYW1zdW5nQnJvd3NlciIsIndoYWxlIiwibXpicm93c2VyIiwiY29hc3QiLCJmb2N1cyIsInlhbmRleGJyb3dzZXIiLCJ1Y2Jyb3dzZXIiLCJtYXh0aG9uIiwiZXBpcGhhbnkiLCJwdWZmaW4iLCJzbGVpcG5pciIsImtNZWxlb24iLCJvc25hbWUiLCJtc2VkZ2UiLCJtc2llIiwiY2hyb21lQm9vayIsImNocm9tZSIsInZpdmFsZGkiLCJzZWFtb25rZXkiLCJmaXJlZm94IiwiZmlyZWZveG9zIiwicGhhbnRvbSIsInNsaW1lciIsImJsYWNrYmVycnkiLCJ0b3VjaHBhZCIsImJhZGEiLCJxdXB6aWxsYSIsImNocm9taXVtIiwic2FmYXJpIiwiZ29vZ2xlYm90IiwiYmxpbmsiLCJ3ZWJraXQiLCJnZWNrbyIsImlvcyIsIm9zVmVyc2lvbiIsImdldFdpbmRvd3NWZXJzaW9uIiwib3N2ZXJzaW9uIiwib3NNYWpvclZlcnNpb24iLCJjb21wYXJlVmVyc2lvbnMiLCJnZXRWZXJzaW9uUHJlY2lzaW9uIiwidmVyc2lvbnMiLCJwcmVjaXNpb24iLCJjaHVua3MiLCJkZWx0YSIsImNodW5rIiwicmV2ZXJzZSIsImlzVW5zdXBwb3J0ZWRCcm93c2VyIiwibWluVmVyc2lvbnMiLCJzdHJpY3RNb2RlIiwiX2Jvd3NlciIsImJyb3dzZXIiLCJicm93c2VyTGlzdCIsImJyb3dzZXJJdGVtIiwiY2hlY2siLCJfZGV0ZWN0IiwiX192dWVfc2NyaXB0X18kMyIsImZzcC1zb3VyY2UtbGlzdF9faXRlbSIsImZzcC1zb3VyY2UtbGlzdF9faXRlbS0tYWN0aXZlIiwiaXNTZWxlY3RlZFNvdXJjZSIsImZzcC1zb3VyY2UtbGlzdF9faXRlbS0tZGlzYWJsZWQiLCJ1cGxvYWRTdGFydGVkIiwic291cmNlTGFiZWwiLCJyb3V0ZSIsImNsb3VkIiwiY2xvdWRzIiwic3RhdHVzIiwibWF4RmlsZXMiLCJfdGhpczYiLCJmaWxlc1dhaXRpbmciLCJmdyIsIm9wZW5TZWxlY3RGaWxlIiwibW9iaWxlTG9jYUlucHV0IiwiX192dWVfcmVuZGVyX18kNCIsImlzU2lkZWJhckhpZGRlbiIsInNpZGViYXJDbGFzc2VzIiwiZnJvbVNvdXJjZXMiLCJzb3VyY2UtbmFtZSIsInNvdXJjZS1sYWJlbCIsIl9fdnVlX3NjcmlwdF9fJDQiLCJTb3VyY2VOYXZJdGVtIiwiZnNwLW1vZGFsX19zaWRlYmFyLS1tb2JpbGUiLCJmc3AtbW9kYWxfX3NpZGViYXIiLCJfX3Z1ZV9yZW5kZXJfXyQ1IiwiaXNJbmxpbmVEaXNwbGF5Iiwid2hpdGVsYWJlbCIsIlNpZGViYXIiLCJfX3Z1ZV9zY3JpcHRfXyQ1IiwiX192dWVfcmVuZGVyX18kNiIsImNsb3NlUGlja2VyIiwiZ2V0TW9kYWxDbGFzc2VzIiwiZ2V0Q29udGVudENsYXNzZXMiLCJzY3JvbGwiLCJoYW5kbGVTY3JvbGwiLCJfX3Z1ZV9zY3JpcHRfXyQ2IiwiQnJhbmRpbmciLCJpc0Nsb3VkIiwiY3VycmVudENsb3VkIiwiaXNMb2NhbCIsImlzV2ViY2FtIiwiaXNUcmFuc2Zvcm1lciIsImZzcC1jb250ZW50LS1zZWxlY3RlZC1pdGVtcyIsImZzcC1jb250ZW50LS10cmFuc2Zvcm1lciIsImZzcC1tb2RhbF9fYm9keS0tZnVsbC13aWR0aCIsImZzcC1tb2RhbF9fYm9keS0tdHJhbnNmb3JtZXIiLCJmc3AtbW9kYWxfX2JvZHktLXNpZGViYXItZGlzYWJsZWQiLCJfdGhpczciLCJjdCIsImNvbnRlbnQiLCJzY3JvbGxIZWlnaHQiLCJyb3VuZCIsInNjcm9sbFRvcCIsImlzTmVhckJvdHRvbSIsImNsaWVudEhlaWdodCIsImdldE5leHQiLCJsYXN0UGF0aCIsImxvYWQiLCJpc0xvYWRpbmciLCJfX3Z1ZV9yZW5kZXJfXyQ3IiwiaGlkZS1tZW51IiwiaGVhZGVyVGV4dCIsInRpdGxlVGV4dCIsInN1YmhlYWRlclRleHQiLCJNb2RhbCIsIl9fdnVlX3NjcmlwdF9fJDciLCJpc0Jsb2NrZWQiLCJfX3Z1ZV9yZW5kZXJfXyQ4Iiwibm90aWZpY2F0aW9ucyIsImdldENsYXNzZXMiLCJtb3N0UmVjZW50Tm90aWZpY2F0aW9uIiwicmVtb3ZlQWxsTm90aWZpY2F0aW9ucyIsIkJsb2NrZWQiLCJfX3Z1ZV9zY3JpcHRfXyQ4IiwiZnNwLW5vdGlmaWNhdGlvbnNfX3N1Y2Nlc3MiLCJzdWNjZXNzIiwiZ2V0QnlOYW1lIiwic291cmNlRGVmaW5pdGlvbiIsImRlcHJlY2F0ZWQiLCJpc0ZpbGVJbkZvbGRlciIsImZvbGRlciIsImZvbGRlclBhdGgiLCJnZXRGb2xkZXJQYXRoIiwicGF0aFdpdGhUcmFpbCIsIl9pc0ltYWdlIiwibWltZXR5cGUiLCJpc0VkaXRhYmxlSW1hZ2UiLCJleHQiLCJoYXNFeHQiLCJoYXNNaW1lIiwiX2lzQXVkaW8iLCJfX3Z1ZV9yZW5kZXJfXyQ5Iiwidmlld1R5cGUiLCJvbmx5Rm9sZGVycyIsImZzcC1ncmlkX19jZWxsLS1zZWxlY3RlZCIsImlzU2VsZWN0ZWQiLCJoYW5kbGVGb2xkZXJDbGljayIsImdldEZpbGVDb3VudCIsImdldEljb25DbGFzcyIsImZzcC1ncmlkX190ZXh0LS1zZWxlY3RlZCIsImRlc2VsZWN0Rm9sZGVyIiwib25seUZpbGVzIiwiZnNwLWdyaWRfX2NlbGwtLXRodW1ibmFpbCIsImlzSW1hZ2UiLCJoYW5kbGVDbGlja0ZpbGUiLCJpc0F1ZGlvIiwidGh1bWJuYWlsIiwiYWx0IiwiZ2V0TmFtZSIsIk5vdGlmaWNhdGlvbnMiLCJ1aSIsImxheW91dCIsIl9fdnVlX3NjcmlwdF9fJDkiLCJsYXN0Q2xpY2tlZCIsImYiLCJkaXNwbGF5X25hbWUiLCJldiIsInNoaWZ0S2V5IiwiZnJvbUVsIiwidG9FbCIsImdvVG9EaXJlY3RvcnkiLCJfcmVmIiwiY2xvdWRGb2xkZXJzIiwiX192dWVfcmVuZGVyX18kYSIsImdvQmFjayIsIkdyaWRBcnJheSIsIl9fdnVlX3NjcmlwdF9fJGEiLCJfX3Z1ZV9yZW5kZXJfXyRiIiwiZm9sZGVySXNFbXB0eSIsIl9fdnVlX3NjcmlwdF9fJGIiLCJFbXB0eUZvbGRlciIsImlzRXJyb3JlZCIsImN1cnJlbnRDbG91ZEZpbGVzIiwiX192dWVfcmVuZGVyX18kYyIsImNydW1icyIsImNydW1iIiwiaGFuZGxlQ2xpY2siLCJ0cnVuY2F0ZUNydW1icyIsIkNsb3VkR3JpZCIsIl9fdnVlX3NjcmlwdF9fJGMiLCJuZXdDcnVtYnMiLCJsYXN0VHdvQ3J1bWJzIiwib25DbGljayIsIl9fdnVlX3JlbmRlcl9fJGQiLCJCcmVhZGNydW1icyIsIl9fdnVlX3NjcmlwdF9fJGQiLCJfX3Z1ZV9yZW5kZXJfXyRlIiwiY2xpY2tGbiIsImFyaWEtaGlkZGVuIiwid2lkdGgiLCJoZWlnaHQiLCJ2aWV3Qm94IiwiZmlsbCIsIkxvYWRpbmciLCJfX3Z1ZV9zY3JpcHRfXyRlIiwiX192dWVfcmVuZGVyX18kZiIsInRyeUFnYWluIiwiaXNVbmF1dGhvcml6ZWQiLCJjdXJyZW50RGlzcGxheSIsImN1c3RvbUF1dGhUZXh0VG9wIiwidGV4dExpbmUiLCJzaG91bGRVc2VHb29nbGVTaWduSW4iLCJhdXRob3JpemUiLCJjdXN0b21BdXRoVGV4dEJvdHRvbSIsImN1cnJlbnRDcnVtYnMiLCJvbi1jbGljayIsInVwZGF0ZVBhdGgiLCJ0b29nbGVWaWV3VHlwZSIsImdldFZpZXdUeXBlSWNvbkNsYXNzIiwiX192dWVfc2NyaXB0X18kZiIsIkdvb2dsZVNpZ25JbkJ1dHRvbiIsImdvb2dsZVNvdXJjZXMiLCJjdXJyZW50TGFiZWwiLCJfdGhpczgiLCJjdXJyZW50U291cmNlIiwiY3VycmVudENsb3VkTmFtZSIsImN1c3RvbUF1dGhUZXh0IiwiYm90dG9tIiwidmlldyIsInNldFZpZXdUeXBlIiwiX3RoaXM5IiwicmVkaXJlY3QiLCJ3aW4iLCJvcGVuIiwid2FpdFVudGlsV2luZG93Q2xvc2VkIiwiY2xvc2VkIiwiZmV0Y2hDbG91ZFBhdGgiLCJuZXdQYXRoIiwicm9vdFBhdGgiLCJ2aWV3U3RvcmFnZSIsIl9fdnVlX3JlbmRlcl9fJGciLCJmc3AtZm9vdGVyLS1hcHBlYXJlZCIsImlzVmlzaWJsZSIsImZ1bGxXaWR0aCIsIkNsb3VkIiwiX192dWVfc2NyaXB0X18kZyIsIl9fdnVlX3JlbmRlcl9fJGgiLCJpc1NlYXJjaGluZyIsImZzcC1pbWFnZS1zZWFyY2hfX2Zvcm0tY29udGFpbmVyLS1yZXN1bHRzIiwicmVzdWx0c0ZvdW5kIiwic3VibWl0IiwiZmV0Y2giLCJwbGFjZWhvbGRlclRleHQiLCJpbWFnZVNlYXJjaElucHV0IiwiaW5wdXQiLCJ1cGRhdGVJbnB1dCIsInBhZGRpbmctdG9wIiwiaW1hZ2VTZWFyY2hSZXN1bHRzIiwiRm9vdGVyTmF2IiwiX192dWVfc2NyaXB0X18kaCIsIm9sZFZpZXdUeXBlIiwiZmV0Y2hJbWFnZXMiLCJzZWFyY2hJbnB1dCIsImJsdXIiLCJ1cGRhdGVTZWFyY2hJbnB1dCIsImNsZWFyU2VhcmNoIiwiX192dWVfcmVuZGVyX18kaSIsImZzcC1zZWxlY3QtbGFiZWxzLS1hY3RpdmUiLCJzZWxlY3RMYWJlbElzQWN0aXZlIiwiSW1hZ2VTZWFyY2giLCJfX3Z1ZV9zY3JpcHRfXyRpIiwiX192dWVfcmVuZGVyX18kaiIsIl9fdnVlX3NjcmlwdF9fJGoiLCJTZWxlY3RGaWxlc0xhYmVsIiwib25Nb3VzZW92ZXIiLCJvbk1vdXNlb3V0IiwiZmlsZVVwbG9hZElucHV0IiwiZHJvcEFyZWEiLCJibG9iVG9BcnJheUJ1ZmZlciIsImJsb2JGaWxlIiwiRmlsZVJlYWRlciIsIm9ubG9hZGVuZCIsInJlYWRBc0FycmF5QnVmZmVyIiwiX192dWVfcmVuZGVyX18kayIsIndlYkNhbUVycm9yIiwicGljdHVyZVRha2VuIiwiaW1nU3JjIiwiaXMtdmlzaWJsZSIsImdldFBob3RvIiwiY2xlYXJQaG90byIsImFkZFBob3RvIiwiTG9jYWwiLCJfX3Z1ZV9zY3JpcHRfXyRrIiwid2ViQ2FtSW1hZ2VTcmMiLCJoYXNVc2VyTWVkaWEiLCJ3ZWJDYW1SZWFkeSIsIl90aGlzMTEiLCJtZWRpYURldmljZXMiLCJnZXRVc2VyTWVkaWEiLCJ2aWRlbyIsImF1ZGlvIiwic3RyZWFtIiwic3JjT2JqZWN0IiwicGxheSIsInR1cm5XZWJDYW1PZmYiLCJnZXRUcmFja3MiLCJ0cmFjayIsInN0b3AiLCJjYW52YXMiLCJnZXRDb250ZXh0IiwiZmlsbFJlY3QiLCJjbGllbnRXaWR0aCIsImRyYXdJbWFnZSIsImRhdGFVUkkiLCJtaW1lIiwiYmluYXJ5IiwiYXRvYiIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsIkJsb2IiLCJVaW50OEFycmF5IiwiZGF0YVVSSXRvQmxvYlVybCIsInRvRGF0YVVSTCIsIl90aGlzMTIiLCJ0b0Jsb2IiLCJibG9iIiwidG9Mb2NhbGVTdHJpbmciLCJfX3Z1ZV9yZW5kZXJfXyRsIiwiaXNVcmxGZXRjaGluZyIsImZldGNoVXJsIiwiV2ViY2FtIiwiX192dWVfc2NyaXB0X18kbCIsIl90aGlzMTMiLCJfX3Z1ZV9yZW5kZXJfXyRtIiwiZmlsZXNMaXN0IiwiZ29Ub1N1bW1hcnkiLCJyZXNldCIsImZzcC1idXR0b24tLWRpc2FibGVkIiwic3RhcnRCdXR0b25Jbml0IiwiVXJsIiwiX192dWVfc2NyaXB0X18kbSIsImNsaWVudCIsImNsb3VkQ2xpZW50Iiwicm91dGVzSGlzdG9yeSIsImFyY2hpdmVJZCIsInBlbmRpbmdSZXF1ZXN0IiwicHVibGlzaGVyIiwic2Vzc2lvbiIsIm90U2Vzc2lvbiIsIm90X3Nlc3Npb25faWQiLCJvdF90b2tlbiIsInB1Ymxpc2hlck9wdGlvbnMiLCJpbnNlcnRNb2RlIiwibG9hZE9wZW5Ub2siLCJfdGhpczE0IiwiZ2V0TW9kdWxlVXJsIiwiX3RoaXMxNSIsInVucHVibGlzaCIsImRpc2Nvbm5lY3QiLCJ0b2siLCJpbml0aWFsaXplIiwiX3RoaXMxNiIsInRva0luaXQiLCIkcHJvcHMiLCJwdWJPcHRpb25zIiwibWlycm9yIiwicmVzb2x1dGlvbiIsInZpZGVvUmVzb2x1dGlvbiIsInB1Ymxpc2hWaWRlbyIsImluaXRTZXNzaW9uIiwiY29ubmVjdCIsImluaXRQdWJsaXNoZXIiLCJwdWJsaXNoIiwiZXZ0IiwiX3RoaXMxNyIsInRva1N0YXJ0IiwiX3RoaXMxOCIsInRva1N0b3AiLCJkYXRlIiwibW9udGgiLCJkYXkiLCJob3VyIiwibWludXRlIiwieWVhciIsInNvdXJjZUtpbmQiLCJfdGhpczE5IiwiX3RoaXMyMCIsIl9fdnVlX3JlbmRlcl9fJG4iLCJpc0luc2lkZUNsb3VkRm9sZGVyIiwiY2FuU3RhcnRVcGxvYWQiLCJtaW5GaWxlc01lc3NhZ2UiLCJfX3Z1ZV9zY3JpcHRfXyRuIiwiT3BlblRvayIsImZpbGVzTmVlZGVkQ291bnQiLCJfX3Z1ZV9yZW5kZXJfXyRvIiwiUGlja0Zyb21Tb3VyY2UiLCJfX3Z1ZV9zY3JpcHRfXyRvIiwiQ2FudmFzUHJvdG90eXBlIiwiaGFzQmxvYkNvbnN0cnVjdG9yIiwiaGFzQXJyYXlCdWZmZXJWaWV3U3VwcG9ydCIsIkJsb2JCdWlsZGVyIiwiZGF0YVVSSVBhdHRlcm4iLCJkYXRhVVJMdG9CbG9iIiwiSFRNTENhbnZhc0VsZW1lbnQiLCJXZWJLaXRCbG9iQnVpbGRlciIsIk1vekJsb2JCdWlsZGVyIiwiTVNCbG9iQnVpbGRlciIsIkFycmF5QnVmZmVyIiwibWVkaWFUeXBlIiwiaXNCYXNlNjQiLCJkYXRhU3RyaW5nIiwiYnl0ZVN0cmluZyIsImFycmF5QnVmZmVyIiwiaW50QXJyYXkiLCJiYiIsImRlY29kZVVSSUNvbXBvbmVudCIsImFwcGVuZCIsImdldEJsb2IiLCJtb3pHZXRBc0ZpbGUiLCJxdWFsaXR5IiwicHJvZ3Jlc3MiLCJudW0iLCJiYXIiLCJmaW5kRXhpZlBvc2l0aW9uIiwiZmlsZUJ1ZmZlciIsIm1hcmtlciIsImRhdGFWaWV3IiwiRGF0YVZpZXciLCJieXRlTGVuZ3RoIiwicG9zaXRpb24iLCJnZXRVaW50OCIsImdldFVpbnQxNiIsInN0YXJ0T2Zmc2V0IiwiZW5kT2Zmc2V0IiwiZmluZEV4aWZTdGFydFBvc2l0aW9uIiwiZ2V0VWludDMyIiwibGl0dGxlIiwidGFncyIsImVuZGlhbiIsIlByb2dyZXNzQmFyIiwiZXhpZiIsInRhcmdldEZpbGUiLCJleGlmQ2h1bmsiLCJ0YXJnZXRFeGlmUG9zaXRpb24iLCJmaW5kV2hlcmVFeGlmQ2FuQmVQdXQiLCJoZWFkZXIiLCJyZXN0IiwicmVzdWx0RmlsZSIsImJ1ZmZlciIsImV4aWZQb3NpdGlvbiIsIm9yaWVudGF0aW9uIiwic3RhbmRhcnRFeGlmU3RyaW5nIiwiZXhpZkJ1ZmZlciIsInN1YnN0cmluZyIsImR3Iiwic2V0VWludDE2IiwiYmFzZVZhbHVlcyIsImFycmF5TWFwJDEiLCJvYmplY3RQcm90byQyIiwiaGFzT3duUHJvcGVydHkkMiIsIm9iamVjdFRvU3RyaW5nJDIiLCJpc0FycmF5JDEiLCJpc09iamVjdExpa2UkMiIsImlzQXJyYXlMaWtlT2JqZWN0IiwiYmFzZUtleXMiLCJpc09iamVjdCQzIiwibm9ybWFsaXplRXh0ZW5zaW9uIiwiY2FuQWNjZXB0VGhpc0ZpbGUiLCJmaWxlRGVmaW5pdGlvbiIsInNpbmdsZUFjY2VwdE9wdGlvbiIsImNvbnZlcnRGaWxlRm9yT3V0c2lkZVdvcmxkIiwiX3JlZjIiLCJleHBvc2VPcmlnaW5hbEZpbGUiLCJoYW5kbGUiLCJvcmlnaW5hbFBhdGgiLCJ1cGxvYWRJZCIsIm9yaWdpbmFsRmlsZSIsImNvbnRhaW5lciIsImNyb3BEYXRhIiwiY3JvcHBlZCIsInJvdGF0ZWQiLCJ3b3JrZmxvd3MiLCJjb252ZXJ0RmlsZUxpc3RGb3JPdXRzaWRlV29ybGQiLCJyZWFkYWJsZVNpemUiLCJieXRlcyIsInBvdyIsInRvRml4ZWQiLCJkaXNwbGF5TmFtZSIsIm5vcm1hbGl6ZWRGaWxlIiwiZmlsZVNwbGl0IiwidHJ1bmNOYW1lIiwiZmlsZUV4dCIsIl90cnVuY05hbWUiLCJfZmlsZUV4dCIsImVycm9ycyIsImdldFBocmFzZSIsInBocmFzZXMiLCJsYW5ndWFnZXMiLCJFUlJPUl9GSUxFX05PVF9BQ0NFUFRBQkxFIiwiRVJST1JfRklMRV9UT09fQklHIiwiRVJST1JfRklMRVNfVE9PX0JJRyIsIkVSUk9SX01BWF9GSUxFU19SRUFDSEVEIiwibG9kYXNoX3ZhbHVlcyIsImFyIiwiVXBsb2FkIiwiVXBsb2FkIG1vcmUiLCJEZXNlbGVjdCBBbGwiLCJWaWV3L0VkaXQgU2VsZWN0ZWQiLCJTaWduIE91dCIsIk15IERldmljZSIsIldlYiBTZWFyY2giLCJUYWtlIFBob3RvIiwiTGluayAoVVJMKSIsIlJlY29yZCBWaWRlbyIsIlJlY29yZCBBdWRpbyIsIkN1c3RvbSBTb3VyY2UiLCJBZGQiLCJtb3JlIGZpbGUiLCJtb3JlIGZpbGVzIiwiQ29ubmVjdCB7cHJvdmlkZXJOYW1lfSIsIlNlbGVjdCBGaWxlcyBmcm9tIHtwcm92aWRlck5hbWV9IiwiWW91IG5lZWQgdG8gYXV0aGVudGljYXRlIHdpdGgge3Byb3ZpZGVyTmFtZX0uIiwiQSBuZXcgcGFnZSB3aWxsIG9wZW4gdG8gY29ubmVjdCB5b3VyIGFjY291bnQuIiwiV2Ugb25seSBleHRyYWN0IGltYWdlcyBhbmQgbmV2ZXIgbW9kaWZ5IG9yIGRlbGV0ZSB0aGVtLiIsIlRvIGRpc2Nvbm5lY3QgZnJvbSB7cHJvdmlkZXJOYW1lfSBjbGljayBcIlNpZ24gb3V0XCIgYnV0dG9uIGluIHRoZSBtZW51LiIsIlNpZ24gaW4gd2l0aCBHb29nbGUiLCJHbyBiYWNrIiwiVGhpcyBmb2xkZXIgaXMgZW1wdHkuIiwiRmlsZXMiLCJJbWFnZXMiLCJVcGxvYWRlZCIsIlVwbG9hZGluZyIsIkNvbXBsZXRlZCIsIkZpbHRlciIsIkNyb3BwZWQgSW1hZ2VzIiwiRWRpdGVkIEltYWdlcyIsIlNlbGVjdGVkIEZpbGVzIiwiQ3JvcCBpcyByZXF1aXJlZCBvbiBpbWFnZXMiLCJDcm9wIiwiQ2lyY2xlIiwiUm90YXRlIiwiTWFzayIsIlJldmVydCIsIkVkaXQiLCJSZXNldCIsIkRvbmUiLCJTYXZlIiwiTmV4dCIsIkVkaXQgSW1hZ2UiLCJUaGlzIGltYWdlIGNhbm5vdCBiZSBlZGl0ZWQiLCJDb25uZWN0aW9uIExvc3QiLCJGYWlsZWQgV2hpbGUgVXBsb2FkaW5nIiwiUmV0cnlpbmcgaW4iLCJUcnkgYWdhaW4iLCJUcnkgbm93IiwiRHJhZyBhbmQgRHJvcCwgQ29weSBhbmQgUGFzdGUgRmlsZXMiLCJvciBEcmFnIGFuZCBEcm9wLCBDb3B5IGFuZCBQYXN0ZSBGaWxlcyIsIlNlbGVjdCBGaWxlcyB0byBVcGxvYWQiLCJTZWxlY3QgRnJvbSIsIkRyb3AgeW91ciBmaWxlcyBhbnl3aGVyZSIsIkVudGVyIGEgVVJMIiwiU2VhcmNoIGltYWdlcyIsIldlYmNhbSBEaXNhYmxlZCIsIldlYmNhbSBOb3QgU3VwcG9ydGVkIiwiUGxlYXNlIGVuYWJsZSB5b3VyIHdlYmNhbSB0byB0YWtlIGEgcGhvdG8uIiwiWW91ciBjdXJyZW50IGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB3ZWJjYW0gZnVuY3Rpb25hbGl0eS4iLCJXZSBzdWdnZXN0IHVzaW5nIENocm9tZSBvciBGaXJlZm94LiIsIkZpbGUge2Rpc3BsYXlOYW1lfSBpcyBub3QgYW4gYWNjZXB0ZWQgZmlsZSB0eXBlLiBUaGUgYWNjZXB0ZWQgZmlsZSB0eXBlcyBhcmUge3R5cGVzfSIsIkZpbGUge2Rpc3BsYXlOYW1lfSBpcyB0b28gYmlnLiBUaGUgYWNjZXB0ZWQgZmlsZSBzaXplIGlzIGxlc3MgdGhhbiB7cm91bmRGaWxlU2l6ZX0iLCJPdXIgZmlsZSB1cGxvYWQgbGltaXQgaXMge21heEZpbGVzfSB7ZmlsZXNUZXh0fSIsIk5vIHNlYXJjaCByZXN1bHRzIGZvdW5kIGZvciBcIntzZWFyY2h9XCIiLCJBbiBlcnJvciBvY2N1cnJlZC4gUGxlYXNlIHRyeSBhZ2Fpbi4iLCJGaWxlcyBbe2Rpc3BsYXlOYW1lfV0gYXJlIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMge21heFNpemV9IiwiQ2xpY2sgaGVyZSBvciBoaXQgRVNDIHRvIGNsb3NlIHBpY2tlciIsImNhIiwiZGEiLCJkZSIsImVuIiwiZXMiLCJmciIsImhlIiwiaXQiLCJqYSIsImtvIiwiRmFjZWJvb2siLCJJbnN0YWdyYW0iLCJEcm9wYm94IiwiR29vZ2xlIFBob3RvcyIsIkdvb2dsZSBEcml2ZSIsIm5sIiwicGwiLCJwdCIsInJ1Iiwic3YiLCJ0ciIsInZpIiwiemgiLCJwaWNhIiwiY29kZSIsIjEiLCJpbmhlcml0cyIsIk11bHRpbWF0aCIsIm1tX3Vuc2hhcnBfbWFzayIsIm1tX3Jlc2l6ZSIsIk1hdGhMaWIiLCJyZXF1ZXN0ZWRfZmVhdHVyZXMiLCJfX3JlcXVlc3RlZF9mZWF0dXJlcyIsImZlYXR1cmVzIiwianMiLCJ3YXNtIiwiaGFzX3dhc20iLCJyZXNpemVBbmRVbnNoYXJwIiwicmVzaXplIiwidW5zaGFycEFtb3VudCIsInVuc2hhcnBfbWFzayIsInRvV2lkdGgiLCJ0b0hlaWdodCIsInVuc2hhcnBSYWRpdXMiLCJ1bnNoYXJwVGhyZXNob2xkIiwiLi9tbV9yZXNpemUiLCJtdWx0aW1hdGgiLCJtdWx0aW1hdGgvbGliL3Vuc2hhcnBfbWFzayIsIjIiLCJjbGFtcFRvOCIsImNvbnZvbHZlSG9yaXpvbnRhbGx5IiwiZGVzdCIsInNyY1ciLCJzcmNIIiwiZGVzdFciLCJmaWx0ZXJzIiwiZyIsImZpbHRlclB0ciIsImZpbHRlclNoaWZ0IiwiZmlsdGVyU2l6ZSIsInNyY1B0ciIsInNyY1kiLCJkZXN0WCIsImZpbHRlclZhbCIsInNyY09mZnNldCIsImRlc3RPZmZzZXQiLCJjb252b2x2ZVZlcnRpY2FsbHkiLCIzIiwiNCIsIndhc21fZm4iLCJ3YXNtX3NyYyIsIi4vY29udm9sdmVfd2FzbV9iYXNlNjQiLCIuL3Jlc2l6ZSIsIi4vcmVzaXplX3dhc20iLCI1IiwiY3JlYXRlRmlsdGVycyIsImRlc3RIIiwic2NhbGVYIiwic2NhbGVZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJhbHBoYSIsImZpbHRlcnNYIiwiZmlsdGVyc1kiLCJkc3QiLCJwdHIiLCJyZXNldEFscGhhIiwiLi9jb252b2x2ZSIsIi4vcmVzaXplX2ZpbHRlcl9nZW4iLCI2IiwiRklMVEVSX0lORk8iLCJGSVhFRF9GUkFDX0JJVFMiLCJ0b0ZpeGVkUG9pbnQiLCJzcmNTaXplIiwiZGVzdFNpemUiLCJzY2FsZSIsImRlc3RQaXhlbCIsInNyY1BpeGVsIiwic3JjRmlyc3QiLCJzcmNMYXN0IiwiZmlsdGVyRWxlbWVudFNpemUiLCJmbG9hdEZpbHRlciIsImZ4cEZpbHRlciIsInRvdGFsIiwicHhsIiwiaWR4IiwiZmxvYXRWYWwiLCJmaWx0ZXJUb3RhbCIsImxlZnROb3RFbXB0eSIsInJpZ2h0Tm90RW1wdHkiLCJmaWx0ZXJGdW5jdGlvbiIsInNjYWxlSW52ZXJ0ZWQiLCJzY2FsZUNsYW1wZWQiLCJzcmNXaW5kb3ciLCJtYXhGaWx0ZXJFbGVtZW50U2l6ZSIsInBhY2tlZEZpbHRlciIsIkludDE2QXJyYXkiLCJwYWNrZWRGaWx0ZXJQdHIiLCJzbG93Q29weSIsInN1YmFycmF5IiwiY2VpbCIsIkZsb2F0MzJBcnJheSIsIi4vcmVzaXplX2ZpbHRlcl9pbmZvIiwiNyIsInhwaSIsIlBJIiwic2luIiwiY29zIiwiOCIsIklTX0xFIiwiVWludDMyQXJyYXkiLCJfXyIsImNvcHlJbnQxNmFzTEUiLCJ0YXJnZXRfb2Zmc2V0IiwiYXNVaW50OEFycmF5IiwidG1wX29mZnNldCIsIl9fYWxpZ24iLCJmaWx0ZXJzWF9vZmZzZXQiLCJmaWx0ZXJzWV9vZmZzZXQiLCJhbGxvY19ieXRlcyIsIl9faW5zdGFuY2UiLCJtZW0iLCJfX21lbW9yeSIsIm1lbTMyIiwic3JjMzIiLCJjb252b2x2ZUhWIiwiX2NvbnZvbHZlSFYiLCJkZXN0MzIiLCI5IiwiUG9vbCIsImlkbGUiLCJhdmFpbGFibGUiLCJhY3F1aXJlZCIsImxhc3RJZCIsInRpbWVvdXRJZCIsImFjcXVpcmUiLCJfdGhpcyIsInJlc291cmNlIiwicmVsZWFzZSIsIl90aGlzMiIsImxhc3RVc2VkIiwiZ2MiLCJfdGhpczMiLCIxMCIsImZyb21XaWR0aCIsImZyb21IZWlnaHQiLCJzcmNUaWxlU2l6ZSIsImRlc3RUaWxlQm9yZGVyIiwibWluU2NhbGUiLCJzdGFnZUNvdW50IiwiMTEiLCJQSVhFTF9FUFNJTE9OIiwicGl4ZWxGbG9vciIsIm5lYXJlc3QiLCJhYnMiLCJwaXhlbENlaWwiLCJ5IiwiaW5uZXJYIiwiaW5uZXJZIiwidG9UaWxlV2lkdGgiLCJ0b1RpbGVIZWlnaHQiLCJpbm5lclRpbGVXaWR0aCIsImlubmVyVGlsZUhlaWdodCIsInRpbGUiLCJ0aWxlcyIsInRvWCIsInRvWSIsInRvSW5uZXJYIiwidG9Jbm5lclkiLCJ0b0lubmVyV2lkdGgiLCJ0b0lubmVySGVpZ2h0IiwiMTIiLCJvYmpDbGFzcyIsImlzQ2FudmFzIiwiZWxlbWVudCIsImNuYW1lIiwibGltaXRlciIsImNvbmN1cnJlbmN5Iiwicm9sbCIsImNpYl9xdWFsaXR5X25hbWUiLCJjaWJfc3VwcG9ydCIsImNyZWF0ZUltYWdlQml0bWFwIiwicmVzaXplV2lkdGgiLCJyZXNpemVIZWlnaHQiLCJyZXNpemVRdWFsaXR5IiwiYml0bWFwIiwiY2xvc2UiLCIxMyIsIm1hdGhMaWIiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsIi4vbWF0aGxpYiIsIjE0IiwiYTAiLCJhMSIsImEyIiwiYTMiLCJiMSIsImIyIiwiZ2F1c3NDb2VmIiwic2lnbWEiLCJleHAiLCJnMSIsImcyIiwiayIsImNvbnZvbHZlTW9ubzE2Iiwib3V0IiwibGluZSIsImNvZWZmIiwicHJldl9zcmMiLCJjdXJyX3NyYyIsImN1cnJfb3V0IiwicHJldl9vdXQiLCJwcmV2X3ByZXZfb3V0Iiwic3JjX2luZGV4Iiwib3V0X2luZGV4IiwibGluZV9pbmRleCIsImNvZWZmX2EwIiwiY29lZmZfYTEiLCJjb2VmZl9iMSIsImNvZWZmX2IyIiwicmFkaXVzIiwiVWludDE2QXJyYXkiLCJ0bXBfbGluZSIsIjE1IiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwiMTYiLCJhc3NpZ24iLCJiYXNlNjRkZWNvZGUiLCJoYXNXZWJBc3NlbWJseSIsIkRFRkFVTFRfT1BUSU9OUyIsIk11bHRpTWF0aCIsIl9fY2FjaGUiLCJfX2luaXRfcHJvbWlzZSIsIl9fbW9kdWxlcyIsIl9fd2FzbSIsIl9faXNMRSIsIldlYkFzc2VtYmx5IiwiY29tcGlsZSIsIl9fYmFzZTY0ZGVjb2RlIiwiX19yZWFsbG9jYXRlIiwiTWVtb3J5IiwibWVtX3NpemUiLCJncm93IiwibWVtc2l6ZSIsImVudl9leHRyYSIsImVudl9iYXNlIiwibWVtb3J5QmFzZSIsIm1lbW9yeSIsInRhYmxlQmFzZSIsInRhYmxlIiwiVGFibGUiLCJJbnN0YW5jZSIsInJlbWluZGVyIiwiLi9saWIvYmFzZTY0ZGVjb2RlIiwiLi9saWIvd2FfZGV0ZWN0Iiwib2JqZWN0LWFzc2lnbiIsIjE3IiwiYml0cyIsInRhaWxiaXRzIiwiMTgiLCJpbWciLCIxOSIsIi4vdW5zaGFycF9tYXNrIiwiLi91bnNoYXJwX21hc2tfd2FzbSIsIi4vdW5zaGFycF9tYXNrX3dhc21fYmFzZTY0IiwiMjAiLCJnbHVyX21vbm8xNiIsImhzbF9sMTYiLCJhbW91bnQiLCJ0aHJlc2hvbGQiLCJtMSIsIm0yIiwiaFNoaWZ0ZWQiLCJkaWZmIiwiaVRpbWVzNCIsImxpZ2h0bmVzcyIsImJsdXJlZCIsImFtb3VudEZwIiwidGhyZXNob2xkRnAiLCIuL2hzbF9sMTYiLCJnbHVyL21vbm8xNiIsIjIxIiwicGl4ZWxzIiwiaW1nX2J5dGVzX2NudCIsImhzbF9ieXRlc19jbnQiLCJibHVyX2J5dGVzX2NudCIsImJsdXJfbGluZV9ieXRlX2NudCIsImhzbF9vZmZzZXQiLCJibHVyX29mZnNldCIsImJsdXJfdG1wX29mZnNldCIsImJsdXJfbGluZV9vZmZzZXQiLCJibHVyX2NvZWZmc19vZmZzZXQiLCJpbWczMiIsIl9oc2xfbDE2IiwiYmx1ck1vbm8xNiIsIl9ibHVyTW9ubzE2IiwidW5zaGFycCIsIl91bnNoYXJwIiwiMjIiLCIyMyIsIndhIiwiYmluIiwiMjQiLCJwcm9wSXNFbnVtZXJhYmxlIiwidGVzdDEiLCJ0ZXN0MiIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwiMjUiLCJidW5kbGVGbiIsIndrZXkiLCJjYWNoZUtleXMiLCJ3Y2FjaGUiLCJza2V5Iiwic2NhY2hlIiwid29ya2VyU291cmNlcyIsInJlc29sdmVTb3VyY2VzIiwiZGVwUGF0aCIsImRlcEtleSIsIndlYmtpdFVSTCIsIm1velVSTCIsIm1zVVJMIiwiYmFyZSIsIndvcmtlclVybCIsIndvcmtlciIsIldvcmtlciIsIm9iamVjdFVSTCIsIi8iLCJfc2xpY2VkVG9BcnJheSIsIl9hcnIiLCJzbGljZUl0ZXJhdG9yIiwid2Vid29ya2lmeSIsInV0aWxzIiwiY3JlYXRlU3RhZ2VzIiwiY3JlYXRlUmVnaW9ucyIsInNpbmdsZXRvbmVzIiwiTkVFRF9TQUZBUklfRklYIiwiaGFyZHdhcmVDb25jdXJyZW5jeSIsIkRFRkFVTFRfUElDQV9PUFRTIiwiREVGQVVMVF9SRVNJWkVfT1BUUyIsIkNBTl9ORVdfSU1BR0VfREFUQSIsIkNBTl9DUkVBVEVfSU1BR0VfQklUTUFQIiwid29ya2VyRmFicmljIiwidGVybWluYXRlIiwicmV2b2tlT2JqZWN0VVJMIiwiUGljYSIsImxpbWl0ZXJfa2V5IiwiX19saW1pdCIsImNpYiIsInd3IiwiX193b3JrZXJzUG9vbCIsIl9fbWF0aGxpYiIsIl9faW5pdFByb21pc2UiLCJJbWFnZURhdGEiLCJVaW50OENsYW1wZWRBcnJheSIsIkltYWdlQml0bWFwIiwiZGVidWciLCJ3a3IiLCJ3cG9vbF9rZXkiLCJpbml0TWF0aCIsIm1hdGhsaWIiLCJjaGVja0NpYlJlc2l6ZSIsIm5hdHVyYWxXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJjYW5jZWxlZCIsImNhbmNlbFRva2VuIiwidG9DdHgiLCJpbWFnZUJpdG1hcCIsInRtcENhbnZhcyIsInRtcEN0eCIsImlEYXRhIiwiZ2V0SW1hZ2VEYXRhIiwicHV0SW1hZ2VEYXRhIiwidGlsZUFuZFJlc2l6ZSIsInNyY0N0eCIsInNyY0ltYWdlQml0bWFwIiwicHJvY2Vzc1RpbGUiLCJzcmNJbWFnZURhdGEiLCJnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24iLCJ3IiwicHJlbG9hZCIsIndhc21fbm9kdWxlIiwiaW52b2tlUmVzaXplIiwidG9JbWFnZURhdGEiLCJjcmVhdGVJbWFnZURhdGEiLCJyZWdpb25zIiwiam9icyIsImNsZWFudXAiLCJzdGFnZXMiLCJwcm9jZXNzU3RhZ2VzIiwiX3N0YWdlcyRzaGlmdCIsIl9zdGFnZXMkc2hpZnQyIiwiaXNMYXN0U3RhZ2UiLCJyZXNpemVCdWZmZXIiLCJtaW1lVHlwZSIsImFzU3RyaW5nIiwiYXNCdWZmZXIiLCIuL2xpYi9tYXRobGliIiwiLi9saWIvcG9vbCIsIi4vbGliL3N0ZXBwZXIiLCIuL2xpYi90aWxlciIsIi4vbGliL3V0aWxzIiwiLi9saWIvd29ya2VyIiwiRXhpZiIsInNpZyIsImJpZ19lbmRpYW4iLCJyZWFkVUludDE2IiwicmVhZFVJbnQzMiIsIndyaXRlVUludDE2Iiwid3JpdGVVSW50MzIiLCJmaWx0ZXJfZW50cnkiLCJzZWN0aW9uTmFtZSIsIm9uSUZERW50cnkiLCJfdGhpczIxIiwibWF4U2l6ZSIsIm1heEVudHJ5U2l6ZSIsIm91dHB1dCIsImJ1ZiIsInByb2Nlc3NJRkRTZWN0aW9uIiwiZW50cmllcyIsIndyaXR0ZW5fb2Zmc2V0IiwicmVhZElGREVudHJ5IiwidW5pdF9sZW5ndGgiLCJvZmZ2IiwiX3RoaXMyMiIsImVudHJpZXNfdG9fd3JpdGUiLCJlbnRyaWVzX2NvdW50Iiwid3JpdHRlbl9pZmJfb2Zmc2V0IiwibmV4dF9pZmIiLCJmaWx0ZXJFeGlmIiwiRklMRV9TVEFSVCIsIkpwZWdGaWx0ZXIiLCJfc3RhdGUiLCJfcmVtb3ZlSUNDYW5kQVBQIiwicmVtb3ZlSUNDYW5kQVBQIiwiX3JlbW92ZUV4aWYiLCJyZW1vdmVFeGlmIiwiX2ZpbHRlciIsIl9yZW1vdmVDb21tZW50cyIsInJlbW92ZUNvbW1lbnRzIiwiX3JlbW92ZUltYWdlIiwicmVtb3ZlSW1hZ2UiLCJfY29tbWVudCIsImNvbW1lbnQiLCJfbWF4RW50cnlTaXplIiwiX29uSUZERW50cnkiLCJfbWFya2VyQ29kZSIsIl9ieXRlc0xlZnQiLCJfc2VnbWVudExlbmd0aCIsIl9hcHAxYnVmZmVyIiwiX2FwcDFwb3MiLCJfYnl0ZXNSZWFkIiwiX0J1ZmZlckNvbnN0cnVjdG9yIiwiX2J1ZmZlclVzZUFsbG9jIiwiX2J1ZmZlclVzZUZyb20iLCJ0b0hleCIsImNvcHkiLCJ3cml0ZURvdWJsZUJFIiwiZHN0X29mZnNldCIsIl9lcnJvciIsIm9uRXJyb3IiLCJfZGV0ZWN0QnVmZmVyIiwiYWxsb2MiLCJfYnVmZmVyIiwiZGkiLCJvbkRhdGEiLCJlbmMiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImJ1Zl9zbGljZSIsIl9idWYiLCJidWYyIiwiZ2V0SnBlZ0hlYWRlciIsImZpbGVEYXRhIiwicmVtb3ZlSUNDIiwiX2kyIiwiYXJyYXlDb25jYXQiLCJjbGVhbnVwSnBlZ0V4aWYiLCJrZWVwT3JpZW50YXRpb24iLCJrZWVwSUNDYW5kQVBQIiwiZmlsZUFycmF5IiwiZGVmYXVsdE9yaWVudGF0aW9uIiwiX2kzIiwiYXJyYXlDb25jYXQkMSIsIm5ld0ZpbGVCdWZmQXJyYXkiLCJuZXdFeGlmIiwibm9ybWFsaXplRmlsZSIsIl9yZWYzIiwibm9ybWFsaXplZEZpbGVTaXplIiwic2VsZWN0ZWRDbG91ZFBhdGgiLCJsaW5rX3BhdGgiLCJmb2xkZXJOYW1lIiwidXVpZCIsInByb2dyZXNzU2l6ZSIsImlzTnVtYmVyIiwidXBsb2FkUXVldWUiLCJhcGlDbGllbnQiLCJzdGFydEZha2VQcm9ncmVzcyIsIndvcmsiLCJwcm9ncmVzc0V2ZW50IiwidG90YWxCeXRlcyIsInRvdGFsUGVyY2VudCIsIm9uRmlsZVVwbG9hZFByb2dyZXNzIiwiaW5jIiwiU1RBVEVTIiwiaW5pdGlhbFN0YXRlIiwiQ0xFQVJfRklMRVMiLCJTRVRfVVBMT0FEX1NUQVJURUQiLCJJTklUSUFMSVpFX0ZJTEUiLCJNQVJLX0ZJTEVfQVNfV0FJVElORyIsIkRFU0VMRUNUX0ZJTEUiLCJERVNFTEVDVF9GT0xERVIiLCJNQVJLX0ZJTEVfQVNfVVBMT0FESU5HIiwiX3JlZjUiLCJ0b2tlbiIsIk1BUktfRklMRV9BU19QQVVTRUQiLCJNQVJLX0ZJTEVfQVNfRE9ORSIsIl9yZWY2IiwidXBsb2FkTWV0YWRhdGEiLCJNQVJLX0ZJTEVfQVNfRkFJTEVEIiwiU0VUX0ZJTEVfVVBMT0FEX1BST0dSRVNTIiwiX3JlZjciLCJTRVRfRklMRV9DUk9QX0RBVEEiLCJfcmVmOCIsImltYWdlRGF0YSIsIm9yaWdpbmFsSW1hZ2VTaXplIiwiY3JvcEFyZWEiLCJTRVRfRklMRV9ST1RBVElPTiIsIl9yZWY5Iiwicm90YXRpb24iLCJkaXJlY3Rpb24iLCJTRVRfRklMRV9UUkFOU0ZPUk1BVElPTiIsIl9yZWYxMCIsIm9yaWdpbmFsU2l6ZSIsIm9yaWdpbmFsTmFtZSIsIlJFTU9WRV9GSUxFX1RSQU5TRk9STUFUSU9OIiwiUkVNT1ZFX1NPVVJDRV9GUk9NX1dBSVRJTkciLCJSRU1PVkVfQ0xPVURTX0ZST01fV0FJVElORyIsIlVQREFURV9GSUxFX0FGVEVSX1JFU0laRSIsIl9yZWYxMSIsIm9uRmlsZVNlbGVjdGVkIiwibmV3RmlsZSIsInJhd0ZpbGUiLCJpbWFnZU1heCIsImltYWdlTWluIiwic2hvdWxkQmxvY2siLCJpbWFnZU1pbk1heEJsb2NrIiwib25sb2FkIiwiSW1hZ2UiLCJyZWFkQXNEYXRhVVJMIiwiZmlsZUNvdW50IiwiZmlsZXNUZXh0IiwiZXJyb3JNc2ciLCJjdXN0b21UZXh0IiwibWF4RmlsZXNSZWFjaGVkIiwiZmlsZUlzQWNjZXB0YWJsZSIsImZpbGVJc1NtYWxsRW5vdWdoIiwic3RhcnRVcGxvYWRpbmdXaGVuTWF4RmlsZXNSZWFjaGVkIiwib25seUZpbGVzV2FpdGluZyIsInVwbG9hZEluQmFja2dyb3VuZCIsImRpc2FibGVUcmFuc2Zvcm1lciIsImZpbmlzaFVwbG9hZHNNYXliZSIsIl9yZWY0IiwiX3JlZjQkZ2V0dGVycyIsImFsbG93TWFudWFsUmV0cnkiLCJmaWxlc0RvbmUiLCJmaWxlc0ZhaWxlZCIsInN0YXJ0VXBsb2FkaW5nIiwib25VcGxvYWRTdGFydGVkIiwiYmFzZVJvdXRlIiwidXBsb2FkTW9yZU1heWJlIiwiZmlsZXNVcGxvYWRpbmciLCJ1cGxvYWRPbmUiLCJtYW51YWxGaWxlIiwidXBsb2FkQ29uZmlnIiwicHJvZ3Jlc3NJbnRlcnZhbCIsIm9uUmV0cnkiLCJvblByb2dyZXNzIiwic3RvcmVUbyIsImRpc2FibGVTdG9yYWdlS2V5IiwidHJhbnNmb3JtZWQiLCJ1cGxvYWQiLCJuZXdCbG9iIiwiX3RoaXMxMCIsImxhc3RNb2RpZmllZERhdGUiLCJsYXN0TW9kaWZpZWQiLCJibG9iVG9GaWxlIiwic3RvcmVVUkwiLCJjdXN0b21Tb3VyY2UiLCJjdXN0b21Tb3VyY2VQYXRoIiwiY3VzdG9tU291cmNlQ29udGFpbmVyIiwidXBsb2FkZWRGaWxlTWV0YWRhdGEiLCJ1cGxvYWRlZEZpbGUiLCJvbkZpbGVVcGxvYWRGaW5pc2hlZCIsIm9uTGluZSIsIm9uRmlsZVVwbG9hZEZhaWxlZCIsInJ1bkNhbGxiYWNrVXBsb2FkU3RhcnRlZCIsIl9yZWYxMiIsIm9uRmlsZVVwbG9hZFN0YXJ0ZWQiLCJjYW5jZWxVcGxvYWQiLCJfcmVmMTMiLCJjYW5jZWxGb2xkZXJVcGxvYWQiLCJfcmVmMTQiLCJjYW5jZWxBbGxVcGxvYWRzIiwiX3JlZjE1IiwiZGVzZWxlY3RBbGxGaWxlcyIsInJlc2l6ZUltYWdlTWF5YmUiLCJfcmVmMTYiLCJfcmVmMTYkZ2V0dGVycyIsImltYWdlRGltIiwicmF0aW8iLCJyZXNpemVJbWFnZSIsIl9yZWYxNyIsIndlYmtpdFNsaWNlIiwibW96U2xpY2UiLCJqcGVnSGVhZGVyIiwicGljYSQxIiwianBlZ0Jsb2IiLCJqcGVnQm9keSIsInNldEZpbGVDcm9wRGF0YSIsIl9yZWYxOCIsIl9yZWYxOSIsIm9uRmlsZUNyb3BwZWQiLCJ0cmFuc2Zvcm1JbWFnZSIsInBhdXNlQWxsVXBsb2FkcyIsIl9yZWYyMCIsInBhdXNlIiwicmV0cnlBbGxGYWlsZWRGaWxlcyIsIl9yZWYyMSIsIl9yZWYyMSRnZXR0ZXJzIiwiZmlsZXNQYXVzZWQiLCJyZXN1bWUiLCJzdCIsIl9yZWYyMiIsIl9yZWYyMyIsIl9yZWYyNCIsIl9yZWYyNSIsIl9yZWYyNiIsIl9yZWYyNyIsIl9yZWYyOCIsIl9yZWYyOSIsIm1pbkZpbGVzIiwiX3JlZjMwIiwiX3JlZjMxIiwiX192dWVfcmVuZGVyX18kcCIsInNob3VsZEdvQmFjayIsImdldFNpZGViYXJDbGFzc2VzIiwiZ2VuSWNvbkNsYXNzIiwibWF4LXdpZHRoIiwicm90YXRlIiwiZnNwLWJ1dHRvbi0tY2FuY2VsLWRpc2FibGVkIiwiaGFuZGxlUmVzZXQiLCJoYW5kbGVBcHBseSIsImhhbmRsZVVwbG9hZCIsImNyb3BGb3JjZSIsImZpbGVzTm90Q3JvcHBlZCIsImhhbmRsZU5leHQiLCJoYW5kbGVEb25lIiwiZnVsbC13aWR0aCIsImxvZyQxIiwiX192dWVfc2NyaXB0X18kcCIsIl90aGlzMjMiLCJ0cmFuc2Zvcm1hdGlvbnMiLCJjcm9wIiwibWFzayIsImNpcmNsZSIsImNyb3BBc3BlY3RSYXRpbyIsImNhY2hlZFVSTCIsImhhc0NpcmNsZSIsIm1hc2tDb250YWluZXIiLCJvSW1nIiwicGVuZGluZ0FwcGx5IiwiX3RoaXMyNCIsImdldENyb3BwZWRDYW52YXMiLCJnZXRSb3VuZGVkQ2FudmFzIiwiZ2V0TWFza2VkQ2FudmFzIiwicmVzZXRFWElGT3JpZW50YXRpb24iLCJmaW5hbEJsb2IiLCJpbWFnZVNtb290aGluZ0VuYWJsZWQiLCJzdmdNYXNrIiwiYmVnaW5QYXRoIiwiYXJjIiwiZ2V0SW1hZ2VVUkwiLCJfdGhpczI1Iiwic2lnblVybCIsImZzdC1zaWRlYmFyX19vcHRpb24tLWFjdGl2ZSIsImZzdC1zaWRlYmFyX19vcHRpb24tLWRpc2FibGVkIiwiYm94IiwiZ2V0Q3JvcEJveERhdGEiLCJpbWFnZSIsIl90aGlzMjYiLCJfdGhpczI3IiwiX3RoaXMyOCIsImFzcGVjdFJhdGlvIiwiYXV0b0Nyb3AiLCJhdXRvQ3JvcEFyZWEiLCJiYWNrZ3JvdW5kIiwiY2VudGVyIiwiZHJhZ01vZGUiLCJndWlkZXMiLCJ0b2dnbGVEcmFnTW9kZU9uRGJsY2xpY2siLCJ2aWV3TW9kZSIsInpvb21hYmxlIiwiQ3JvcHBlciIsImJ1ZmYiLCJleGlmRGF0YSIsIm5ld0J1ZiIsImRlZyIsInNob3dTVkdNYXNrIiwiX3RoaXMyOSIsImxvYWRTVkdGcm9tVVJMIiwib2JqZWN0cyIsIkNhbnZhcyIsInNldERpbWVuc2lvbnMiLCJjbGlwUGF0aCIsIlBhdGgiLCJyZWN0IiwiUmVjdCIsImNvbG9yIiwic3Ryb2tlIiwic3Ryb2tlV2lkdGgiLCJyZW5kZXJBbGwiLCJvdmVybGF5Iiwic2V0QXNwZWN0UmF0aW8iLCJiYWNrZ3JvdW5kU2l6ZSIsIm9wYWNpdHkiLCJjcm9zc09yaWdpbiIsIl90aGlzJGFwaUNsaWVudCRzZXNzaSIsInBvbGljeSIsInNpZ25hdHVyZSIsIl90aGlzMzAiLCJjcm9wVmlldyIsImNyb3BGYWNlIiwiYm9yZGVyUmFkaXVzIiwiVHJhbnNmb3JtIiwicHJvcE1hcCIsInJ5IiwidHkiLCJ0cmFuc2Zvcm1zTWFwIiwidHJhbnNmb3JtT3JpZ2luTWFwIiwiZ2V0VmFsdWUkMSIsImV4aWYyY3NzIiwidHJhbnNmb3JtcyIsImVwIiwiZXhwYW5kVHJhbnNmb3JtIiwidHJhbnNmb3JtT3JpZ2luIiwiYWxsVHJhbnNmb3JtcyIsImV4cGFuZGVkIiwiZXhwYW5kVHJhbnNmb3JtcyIsImFsbFRyYW5zZm9ybVN0cmluZ3MiLCJleHBhbmRUcmFuc2Zvcm1TdHJpbmdzIiwiX192dWVfcmVuZGVyX18kcSIsImlzRG9uZSIsImlzVHJhbnNmb3JtZWQiLCJkaXNhYmxlVGh1bWJuYWlscyIsImlzRWRpdGFibGUiLCJnZW5lcmF0ZUNsYXNzIiwiZ2VuZXJhdGVUaHVtYm5haWwiLCJpc0ZhaWxlZCIsInRyYW5zbGF0ZWRGaWxlU2l6ZSIsInJldmVydCIsImZzcC1zdW1tYXJ5X19hY3Rpb24tLWJ1dHRvbi1ibHVlIiwiX192dWVfc2NyaXB0X18kcSIsImJsb2JVUkxzIiwiaW1hZ2VCbG9iIiwiZml4VG1wVGh1bWJuYWlsIiwiX3RoaXMzMSIsImNzc09yaWVudGF0aW9uIiwibnVtYiIsIl9fdnVlX3JlbmRlcl9fJHIiLCJ1cGRhdGVGaWx0ZXIiLCJmaWxlQnVja2V0cyIsImJ1Y2tldCIsImZpbHRlckZpbGVzIiwiZnNwLWNvbG9yLS1lcnJvciIsImlzQ29ubmVjdGVkIiwicmV0cnlBbGwiLCJyZWNvbm5lY3RUaW1lciIsImRhdGEtZTJlIiwiaGlzdG9yeUJhY2siLCJzdGFydFVwbG9hZE1heWJlIiwiX192dWVfc2NyaXB0X18kciIsIlN1bW1hcnlSb3ciLCJvbmx5VHJhbnNmb3JtZWRJbWFnZXMiLCJvbmx5Q3JvcHBlZEltYWdlcyIsIm9ubHlJbWFnZXMiLCJjcm9wRm9yY2VDb21wbGV0ZSIsInRpbWVyIiwicmVzZXRDb3VudGRvd24iLCJzdGFydENvdW50ZG93biIsIl90aGlzMzIiLCJ0aW1lckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiaXNDb25uZWN0ZWRPYmoiLCJjb25uZWN0ZWQiLCJVcGxvYWRTdW1tYXJ5IiwiX2V4dGVuZFN0YXRpY3MiLCJfX2V4dGVuZHMiLCJTZXZlcml0eSIsIlN0YXR1cyIsIl9hc3NpZ24iLCJfX2dlbmVyYXRvciIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsInRocm93IiwicmV0dXJuIiwib3AiLCJzdGVwIiwiX19yZWFkIiwiX19zcHJlYWQiLCJmcm9tU3RyaW5nIiwibGV2ZWwiLCJEZWJ1ZyIsIkluZm8iLCJXYXJuaW5nIiwiRmF0YWwiLCJDcml0aWNhbCIsIkxvZyIsImZyb21IdHRwQ29kZSIsIlN1Y2Nlc3MiLCJSYXRlTGltaXQiLCJJbnZhbGlkIiwiRmFpbGVkIiwiVW5rbm93biIsIl9zdXBlciIsIlNlbnRyeUVycm9yIiwiX25ld1RhcmdldCIsIndhdCIsImlzRXJyb3JFdmVudCIsImlzRE9NRXJyb3IiLCJpc1N0cmluZyIsImlzUHJpbWl0aXZlJDEiLCJpc1BsYWluT2JqZWN0JDEiLCJpc0V2ZW50IiwiRXZlbnQiLCJpc0VsZW1lbnQiLCJFbGVtZW50IiwiaXNUaGVuYWJsZSIsImlzTm9kZUVudiIsImZhbGxiYWNrR2xvYmFsT2JqZWN0IiwiZ2V0R2xvYmFsT2JqZWN0IiwidXVpZDQiLCJjcnlwdG8iLCJtc0NyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsInBhZCIsInBhcnNlVXJsIiwiZnJhZ21lbnQiLCJob3N0IiwicHJvdG9jb2wiLCJyZWxhdGl2ZSIsImdldEV2ZW50RGVzY3JpcHRpb24iLCJleGNlcHRpb24iLCJldmVudF9pZCIsImNvbnNvbGVTYW5kYm94Iiwib3JpZ2luYWxDb25zb2xlIiwid3JhcHBlZExldmVscyIsIl9fc2VudHJ5X18iLCJfX3NlbnRyeV93cmFwcGVkX18iLCJfX3NlbnRyeV9vcmlnaW5hbF9fIiwiYWRkRXhjZXB0aW9uVHlwZVZhbHVlIiwiYWRkRXhjZXB0aW9uTWVjaGFuaXNtIiwibWVjaGFuaXNtIiwiX29PIiwiaHRtbFRyZWVBc1N0cmluZyIsImVsZW0iLCJjdXJyZW50RWxlbSIsInNlcExlbmd0aCIsIm5leHRTdHIiLCJfaHRtbEVsZW1lbnRBc1N0cmluZyIsImNsYXNzTmFtZSIsImNsYXNzZXMiLCJhdHRyV2hpdGVsaXN0IiwicGFyc2VSZXRyeUFmdGVySGVhZGVyIiwiaGVhZGVyRGVsYXkiLCJoZWFkZXJEYXRlIiwiZ2xvYmFsJDEiLCJQUkVGSVgiLCJMb2dnZXIiLCJkaXNhYmxlIiwiX2VuYWJsZWQiLCJlbmFibGUiLCJfX1NFTlRSWV9fIiwiU3RhdGVzIiwibG9nZ2VyJDEiLCJNZW1vIiwibWVtb2l6ZSIsIl9oYXNXZWFrU2V0IiwiX2lubmVyIiwidW5tZW1vaXplIiwiV2Vha1NldCIsInRydW5jYXRlIiwic3Vic3RyIiwic2FmZUpvaW4iLCJkZWxpbWl0ZXIiLCJpc01hdGNoaW5nUGF0dGVybiIsInJlcGxhY2VtZW50Iiwid3JhcHBlZCIsIl9PbyIsImdldFdhbGtTb3VyY2UiLCJzdGFjayIsImV2ZW50XzEiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImpzb25TaXplIiwiZW5jb2RlVVJJIiwibm9ybWFsaXplVmFsdWUiLCJkZXB0aCIsIm1lbW8iLCJJbmZpbml0eSIsInNlcmlhbGl6ZVZhbHVlIiwidG9KU09OIiwiYWNjIiwiaW5uZXJLZXkiLCJub3JtYWxpemUkMSIsIlN5bmNQcm9taXNlIiwiY29sbGVjdGlvbiIsInJlc29sdmVkQ29sbGVjdGlvbiIsIl9vbmZ1bGZpbGxlZCIsIl9vbnJlamVjdGVkIiwiX2F0dGFjaEhhbmRsZXIiLCJvbmZ1bGZpbGxlZCIsIm9ucmVqZWN0ZWQiLCJvbmZpbmFsbHkiLCJpc1JlamVjdGVkIiwiZXhlY3V0b3IiLCJQRU5ESU5HIiwiX2hhbmRsZXJzIiwiX3NldFJlc3VsdCIsIlJFU09MVkVEIiwiX3JlamVjdCIsIlJFSkVDVEVEIiwiX2V4ZWN1dGVIYW5kbGVycyIsIlByb21pc2VCdWZmZXIiLCJpc1JlYWR5IiwiX2xpbWl0IiwidGFzayIsImRyYWluIiwiY2FwdHVyZWRTZXRUaW1lb3V0Iiwic3VwcG9ydHNGZXRjaCIsIkhlYWRlcnMiLCJSZXF1ZXN0IiwiUmVzcG9uc2UiLCJzdXBwb3J0c05hdGl2ZUZldGNoIiwiaXNOYXRpdmVGdW5jIiwiZG9jIiwic2FuZGJveCIsImhpZGRlbiIsImhlYWQiLCJjb250ZW50V2luZG93IiwiVFJBQ0VQQVJFTlRfUkVHRVhQIiwiU3BhbiIsInNldFBhcmVudCIsIl9wYXJlbnQiLCJzZXRTYW1wbGVkIiwic2FtcGxlZCIsIl9zYW1wbGVkIiwiZnJvbVRyYWNlcGFyZW50IiwidHJhY2VwYXJlbnQiLCJwYXJlbnRfMSIsInRvVHJhY2VwYXJlbnQiLCJfdHJhY2VJZCIsIl9zcGFuSWQiLCJzcGFuX2lkIiwidHJhY2VfaWQiLCJTY29wZSIsImFkZFNjb3BlTGlzdGVuZXIiLCJfc2NvcGVMaXN0ZW5lcnMiLCJhZGRFdmVudFByb2Nlc3NvciIsIl9ldmVudFByb2Nlc3NvcnMiLCJfbm90aWZ5U2NvcGVMaXN0ZW5lcnMiLCJfbm90aWZ5aW5nTGlzdGVuZXJzIiwiX25vdGlmeUV2ZW50UHJvY2Vzc29ycyIsInByb2Nlc3NvcnMiLCJoaW50IiwicHJvY2Vzc29yIiwiX2ZpbmFsIiwic2V0VXNlciIsIl91c2VyIiwic2V0VGFncyIsIl90YWdzIiwic2V0VGFnIiwiX2EiLCJzZXRFeHRyYXMiLCJleHRyYSIsIl9leHRyYSIsInNldEV4dHJhIiwic2V0RmluZ2VycHJpbnQiLCJmaW5nZXJwcmludCIsIl9maW5nZXJwcmludCIsInNldExldmVsIiwiX2xldmVsIiwic2V0VHJhbnNhY3Rpb24iLCJ0cmFuc2FjdGlvbiIsIl90cmFuc2FjdGlvbiIsInNldENvbnRleHQiLCJfY29udGV4dCIsInNldFNwYW4iLCJzcGFuIiwiX3NwYW4iLCJzdGFydFNwYW4iLCJwYXJlbnRTcGFuIiwiZ2V0U3BhbiIsInNjb3BlIiwibmV3U2NvcGUiLCJfYnJlYWRjcnVtYnMiLCJhZGRCcmVhZGNydW1iIiwiYnJlYWRjcnVtYiIsIm1heEJyZWFkY3J1bWJzIiwidGltZXN0YW1wIiwibWVyZ2VkQnJlYWRjcnVtYiIsImNsZWFyQnJlYWRjcnVtYnMiLCJfYXBwbHlGaW5nZXJwcmludCIsImFwcGx5VG9FdmVudCIsImNvbnRleHRzIiwidHJhY2UiLCJicmVhZGNydW1icyIsImdldEdsb2JhbEV2ZW50UHJvY2Vzc29ycyIsImdsb2JhbEV2ZW50UHJvY2Vzc29ycyIsImFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yIiwiQVBJX1ZFUlNJT04iLCJIdWIiLCJfaW52b2tlQ2xpZW50IiwiZ2V0U3RhY2tUb3AiLCJpc09sZGVyVGhhbiIsIl92ZXJzaW9uIiwiYmluZENsaWVudCIsInB1c2hTY29wZSIsImdldFN0YWNrIiwicGFyZW50U2NvcGUiLCJnZXRDbGllbnQiLCJwb3BTY29wZSIsIndpdGhTY29wZSIsImdldFNjb3BlIiwiX3N0YWNrIiwiY2FwdHVyZUV4Y2VwdGlvbiIsImV2ZW50SWQiLCJfbGFzdEV2ZW50SWQiLCJmaW5hbEhpbnQiLCJzeW50aGV0aWNFeGNlcHRpb24iLCJvcmlnaW5hbEV4Y2VwdGlvbiIsImNhcHR1cmVNZXNzYWdlIiwiY2FwdHVyZUV2ZW50IiwibGFzdEV2ZW50SWQiLCJnZXRPcHRpb25zIiwiYmVmb3JlQnJlYWRjcnVtYiIsImZpbmFsQnJlYWRjcnVtYiIsImV4dHJhcyIsImNvbmZpZ3VyZVNjb3BlIiwib2xkSHViIiwibWFrZU1haW4iLCJnZXRJbnRlZ3JhdGlvbiIsImludGVncmF0aW9uIiwidHJhY2VIZWFkZXJzIiwic2VudHJ5LXRyYWNlIiwiZ2V0TWFpbkNhcnJpZXIiLCJjYXJyaWVyIiwiaHViIiwicmVnaXN0cnkiLCJnZXRIdWJGcm9tQ2FycmllciIsInNldEh1Yk9uQ2FycmllciIsImdldEN1cnJlbnRIdWIiLCJoYXNIdWJPbkNhcnJpZXIiLCJhY3RpdmVEb21haW4iLCJtb2QiLCJyZXF1ZXN0IiwiZHluYW1pY1JlcXVpcmUiLCJyZWdpc3RyeUh1YlRvcFN0YWNrIiwiY2FsbE9uSHViIiwiRFNOX1JFR0VYIiwiRVJST1JfTUVTU0FHRSIsIkRzbiIsIndpdGhQYXNzd29yZCIsInBhc3MiLCJwb3J0IiwicHJvamVjdElkIiwiX2Zyb21TdHJpbmciLCJfZnJvbUNvbXBvbmVudHMiLCJfdmFsaWRhdGUiLCJBUEkiLCJnZXREc24iLCJfZHNuT2JqZWN0IiwiZ2V0U3RvcmVFbmRwb2ludCIsIl9nZXRCYXNlVXJsIiwiZ2V0U3RvcmVFbmRwb2ludFBhdGgiLCJnZXRTdG9yZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoIiwiYXV0aCIsInNlbnRyeV9rZXkiLCJzZW50cnlfdmVyc2lvbiIsImRzbiIsImdldFJlcXVlc3RIZWFkZXJzIiwiY2xpZW50TmFtZSIsImNsaWVudFZlcnNpb24iLCJDb250ZW50LVR5cGUiLCJYLVNlbnRyeS1BdXRoIiwiZ2V0UmVwb3J0RGlhbG9nRW5kcG9pbnQiLCJkaWFsb2dPcHRpb25zIiwiZW5kcG9pbnQiLCJlbmNvZGVkT3B0aW9ucyIsImVtYWlsIiwiaW5zdGFsbGVkSW50ZWdyYXRpb25zIiwic2V0dXBJbnRlZ3JhdGlvbnMiLCJpbnRlZ3JhdGlvbnMiLCJkZWZhdWx0SW50ZWdyYXRpb25zIiwidXNlckludGVncmF0aW9ucyIsInVzZXJJbnRlZ3JhdGlvbnNOYW1lc18xIiwicGlja2VkSW50ZWdyYXRpb25zTmFtZXNfMSIsImRlZmF1bHRJbnRlZ3JhdGlvbiIsInVzZXJJbnRlZ3JhdGlvbiIsImludGVncmF0aW9uc05hbWVzIiwiZ2V0SW50ZWdyYXRpb25zVG9TZXR1cCIsInNldHVwT25jZSIsIkJhc2VDbGllbnQiLCJfcHJvY2Vzc2luZyIsIl9nZXRCYWNrZW5kIiwiZXZlbnRGcm9tRXhjZXB0aW9uIiwiX3Byb2Nlc3NFdmVudCIsImZpbmFsRXZlbnQiLCJldmVudEZyb21NZXNzYWdlIiwiX2RzbiIsIl9pc0NsaWVudFByb2Nlc3NpbmciLCJpbnRlcnZhbCIsImdldFRyYW5zcG9ydCIsInRyYW5zcG9ydEZsdXNoZWQiLCJyZWFkeSIsImVuYWJsZWQiLCJnZXRJbnRlZ3JhdGlvbnMiLCJfaW50ZWdyYXRpb25zIiwidGlja2VkIiwiX2JhY2tlbmQiLCJfaXNFbmFibGVkIiwiX3ByZXBhcmVFdmVudCIsImVudmlyb25tZW50IiwiZGlzdCIsIm1heFZhbHVlTGVuZ3RoIiwicHJlcGFyZWQiLCJfYWRkSW50ZWdyYXRpb25zIiwic2RrIiwic2RrSW5mbyIsImludGVncmF0aW9uc0FycmF5IiwiYmVmb3JlU2VuZCIsInNhbXBsZVJhdGUiLCJzZW5kRXZlbnQiLCJiZWZvcmVTZW5kUmVzdWx0IiwiX2hhbmRsZUFzeW5jQmVmb3JlU2VuZCIsInByb2Nlc3NlZEV2ZW50IiwiYmFja2VuZENsYXNzIiwiTm9vcFRyYW5zcG9ydCIsIlNraXBwZWQiLCJvcmlnaW5hbEZ1bmN0aW9uVG9TdHJpbmciLCJCYXNlQmFja2VuZCIsIl9zZXR1cFRyYW5zcG9ydCIsIl9leGNlcHRpb24iLCJfaGludCIsIl9tZXNzYWdlIiwiX3RyYW5zcG9ydCIsIkZ1bmN0aW9uVG9TdHJpbmciLCJERUZBVUxUX0lHTk9SRV9FUlJPUlMiLCJJbmJvdW5kRmlsdGVycyIsImNsaWVudE9wdGlvbnMiLCJfbWVyZ2VPcHRpb25zIiwiX3Nob3VsZERyb3BFdmVudCIsIl9pc1NlbnRyeUVycm9yIiwiX2lzSWdub3JlZEVycm9yIiwiX2lzQmxhY2tsaXN0ZWRVcmwiLCJfZ2V0RXZlbnRGaWx0ZXJVcmwiLCJfaXNXaGl0ZWxpc3RlZFVybCIsImlnbm9yZUludGVybmFsIiwiaWdub3JlRXJyb3JzIiwiX2dldFBvc3NpYmxlRXZlbnRNZXNzYWdlcyIsImJsYWNrbGlzdFVybHMiLCJ3aGl0ZWxpc3RVcmxzIiwib08iLCJzdGFja3RyYWNlIiwiZnJhbWVzXzEiLCJmcmFtZXMiLCJmcmFtZXNfMiIsIkNvcmVJbnRlZ3JhdGlvbnMiLCJVTktOT1dOX0ZVTkNUSU9OIiwid2luanMiLCJnZWNrb0V2YWwiLCJjaHJvbWVFdmFsIiwiY29tcHV0ZVN0YWNrVHJhY2UiLCJleCIsInBvcFNpemUiLCJmcmFtZXNUb1BvcCIsInBhcnRzIiwib3BlcmExMFJlZ2V4Iiwib3BlcmExMVJlZ2V4IiwibGluZXMiLCJjb2x1bW4iLCJleHRyYWN0TWVzc2FnZSIsImNvbXB1dGVTdGFja1RyYWNlRnJvbVN0YWNrdHJhY2VQcm9wIiwicG9wRnJhbWVzIiwic3VibWF0Y2giLCJjb2x1bW5OdW1iZXIiLCJjb21wdXRlU3RhY2tUcmFjZUZyb21TdGFja1Byb3AiLCJmYWlsZWQiLCJTVEFDS1RSQUNFX0xJTUlUIiwiZXhjZXB0aW9uRnJvbVN0YWNrdHJhY2UiLCJwcmVwYXJlRnJhbWVzRm9yRXZlbnQiLCJldmVudEZyb21QbGFpbk9iamVjdCIsInJlamVjdGlvbiIsIm1heExlbmd0aCIsImluY2x1ZGVkS2V5cyIsInNlcmlhbGl6ZWQiLCJleHRyYWN0RXhjZXB0aW9uS2V5c0Zvck1lc3NhZ2UiLCJfX3NlcmlhbGl6ZWRfXyIsIm5vcm1hbGl6ZVRvU2l6ZSIsImV2ZW50RnJvbVN0YWNrdHJhY2UiLCJsb2NhbFN0YWNrIiwiZmlyc3RGcmFtZUZ1bmN0aW9uIiwibGFzdEZyYW1lRnVuY3Rpb24iLCJmcmFtZSIsImNvbG5vIiwiZnVuY3Rpb24iLCJpbl9hcHAiLCJsaW5lbm8iLCJldmVudEZyb21Vbmtub3duSW5wdXQiLCJkb21FeGNlcHRpb24iLCJuYW1lXzEiLCJldmVudEZyb21TdHJpbmciLCJzeW50aGV0aWMiLCJhdHRhY2hTdGFja3RyYWNlIiwiQmFzZVRyYW5zcG9ydCIsImdsb2JhbCQyIiwiRmV0Y2hUcmFuc3BvcnQiLCJfZGlzYWJsZWRVbnRpbCIsImRlZmF1bHRPcHRpb25zIiwicmVmZXJyZXJQb2xpY3kiLCJzdXBwb3J0c1JlZmVycmVyUG9saWN5IiwiZ2VuZXJhdG9yIiwicmVzcG9uc2UiLCJlcnJfMSIsImhlYWRlcnMiLCJQIiwiX2FyZ3VtZW50cyIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiWEhSVHJhbnNwb3J0IiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJnZXRSZXNwb25zZUhlYWRlciIsInNlbmQiLCJpbmRleCQxIiwiQnJvd3NlckJhY2tlbmQiLCJ0cmFuc3BvcnRPcHRpb25zIiwidHJhbnNwb3J0IiwiaGFuZGxlZCIsIlNES19OQU1FIiwiU0RLX1ZFUlNJT04iLCJCcm93c2VyQ2xpZW50IiwicGFja2FnZXMiLCJzaG93UmVwb3J0RGlhbG9nIiwib25Mb2FkIiwia2V5cHJlc3NUaW1lb3V0IiwibGFzdENhcHR1cmVkRXZlbnQiLCJpZ25vcmVPbkVycm9yIiwic2hvdWxkSWdub3JlT25FcnJvciIsIndyYXAiLCJzZW50cnlXcmFwcGVkIiwid3JhcHBlZEFyZ3VtZW50cyIsImhhbmRsZUV2ZW50IiwiZGVib3VuY2VUaW1lciIsImJyZWFkY3J1bWJFdmVudEhhbmRsZXIiLCJldmVudE5hbWUiLCJjYXB0dXJlQnJlYWRjcnVtYiIsImNhdGVnb3J5Iiwia2V5cHJlc3NFdmVudEhhbmRsZXIiLCJpc0NvbnRlbnRFZGl0YWJsZSIsIkdsb2JhbEhhbmRsZXJzIiwic3RhY2tUcmFjZUxpbWl0IiwiX2luc3RhbGxHbG9iYWxPbkVycm9ySGFuZGxlciIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwiX2luc3RhbGxHbG9iYWxPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIiLCJfb25FcnJvckhhbmRsZXJJbnN0YWxsZWQiLCJfb2xkT25FcnJvckhhbmRsZXIiLCJfZ2xvYmFsIiwibXNnIiwiY3VycmVudEh1YiIsImhhc0ludGVncmF0aW9uIiwiaXNGYWlsZWRPd25EZWxpdmVyeSIsIl9fc2VudHJ5X293bl9yZXF1ZXN0X18iLCJfZXZlbnRGcm9tSW5jb21wbGV0ZU9uRXJyb3IiLCJfZW5oYW5jZUV2ZW50V2l0aEluaXRpYWxGcmFtZSIsIl9vblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXJJbnN0YWxsZWQiLCJfb2xkT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyIiwiX2V2ZW50RnJvbUluY29tcGxldGVSZWplY3Rpb24iLCJncm91cHMiLCJsb2NhdGlvbiIsImhyZWYiLCJnZXRMb2NhdGlvbkhyZWYiLCJUcnlDYXRjaCIsIl93cmFwVGltZUZ1bmN0aW9uIiwib3JpZ2luYWxDYWxsYmFjayIsImdldEZ1bmN0aW9uTmFtZSIsIl93cmFwUkFGIiwiX3dyYXBFdmVudFRhcmdldCIsIl9pZ25vcmVPbkVycm9yIiwibGFzdEhyZWYiLCJnbG9iYWwkMyIsIkJyZWFkY3J1bWJzJDEiLCJfaW5zdHJ1bWVudENvbnNvbGUiLCJvcmlnaW5hbENvbnNvbGVMZXZlbCIsImJyZWFkY3J1bWJEYXRhIiwiX2luc3RydW1lbnRET00iLCJpbm5lck9yaWdpbmFsIiwiX2luc3RydW1lbnRGZXRjaCIsIm9yaWdpbmFsRmV0Y2giLCJmZXRjaElucHV0IiwiZmlsdGVyVXJsIiwiYWRkU2VudHJ5QnJlYWRjcnVtYiIsImZldGNoRGF0YSIsInN0YXR1c19jb2RlIiwiX2luc3RydW1lbnRIaXN0b3J5IiwiaXNDaHJvbWVQYWNrYWdlZEFwcCIsImFwcCIsImhhc0hpc3RvcnlBcGkiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiY2FwdHVyZVVybENoYW5nZSIsInBhcnNlZExvYyIsInBhcnNlZFRvIiwicGFyc2VkRnJvbSIsIm9sZE9uUG9wU3RhdGUiLCJvbnBvcHN0YXRlIiwiY3VycmVudEhyZWYiLCJoaXN0b3J5UmVwbGFjZW1lbnRGdW5jdGlvbiIsIm9yaWdpbmFsSGlzdG9yeUZ1bmN0aW9uIiwiX2luc3RydW1lbnRYSFIiLCJ4aHJwcm90byIsIm9yaWdpbmFsT3BlbiIsIl9fc2VudHJ5X3hocl9fIiwib3JpZ2luYWxTZW5kIiwieGhyIiwib25yZWFkeXN0YXRlY2hhbmdlSGFuZGxlciIsImRvbSIsInNlbnRyeSIsInNlcmlhbGl6ZWREYXRhIiwiTGlua2VkRXJyb3JzIiwiX2hhbmRsZXIiLCJsaW5rZWRFcnJvcnMiLCJfd2Fsa0Vycm9yVHJlZSIsImxpbWl0IiwiZ2xvYmFsJDQiLCJVc2VyQWdlbnQiLCJCcm93c2VySW50ZWdyYXRpb25zIiwid2luZG93XzEiLCJTRU5UUllfUkVMRUFTRSIsImNsaWVudENsYXNzIiwid2luZG93SW50ZWdyYXRpb25zIiwiX3dpbmRvdyIsIlNlbnRyeSIsIkludGVncmF0aW9ucyIsIl9fdnVlX3JlbmRlcl9fJHMiLCJhcHBlYXItY2xhc3MiLCJhcHBlYXItdG8tY2xhc3MiLCJhcHBlYXItYWN0aXZlLWNsYXNzIiwidWlWaXNpYmxlIiwicm9vdElkIiwiaXNSb290Um91dGUiLCJsb2NhbFBpY2tpbmdBbGxvd2VkIiwiSU5URUdSQVRJT05TIiwiVHJhbnNwb3J0cyIsImZvcmNlTG9hZCIsIkVycm9yQm91bmRhcnkiLCJpbml0U2VudHJ5IiwidXNlU2VudHJ5QnJlYWRjcnVtYnMiLCJmb3JtYXRDb21wb25lbnROYW1lIiwiX19maWxlIiwiX3RoaXMzMyIsIm1ldGFkYXRhIiwiY29tcG9uZW50TmFtZSIsImxpZmVjeWNsZUhvb2siLCJhcGlrZXkiLCJjbG91ZFNvdXJjZXMiLCJTRVRfQ0xPVURfUEFUSCIsIl9yZWYzMiIsImNvbnRlbnRzIiwiU0VUX0NMT1VEX1JFRElSRUNUIiwiX3JlZjMzIiwicmVkaXJlY3RfdXJsIiwiU0VUX0NMT1VEX05FWFQiLCJfcmVmMzQiLCJTRVRfQ0xPVURfTE9BRElORyIsIlNFVF9DTE9VRF9FUlJPUiIsImNsb3VkT2JqIiwiUkVNT1ZFX0NMT1VEX1BBVEhTIiwiUkVNT1ZFX0FMTF9DTE9VRF9QQVRIUyIsIlNFVF9DTE9VRF9GT0xERVJTIiwiZm9sZGVycyIsIlNFVF9DTE9VRF9QQVRIX1NFTEVDVEVEIiwiU0VUX0NMT1VEX0ZPTERFUl9MT0FESU5HIiwiX3JlZjM1IiwiUkVTRVRfQ0xPVUQiLCJjbG91ZFN0b3JlIiwiX3JlZjM2IiwiZGlyUGF0aCIsIl9yZWYzNyIsIm9uRmV0Y2hTdWNjZXNzIiwiX3JlZjM4IiwicHJlZmV0Y2hDbG91ZHMiLCJhZGRDbG91ZEZvbGRlciIsIl9yZWYzOSIsIl9yZWY0MCIsIm5leHRQYXRoIiwiX3JlZjQxIiwiX3JlZjQyIiwiX3JlZjQyJHBhdGgiLCJfcmVmNDIkbG9hZCIsImN1c3RvbXNvdXJjZSIsImdvVG9MYXN0UGF0aCIsIl9yZWY0MyIsIl9yZWY0NCIsIl9yZWY0NSIsIl9fdnVlX3NjcmlwdF9fJHQiLCJnbG9iYWxEcm9wWm9uZSIsImZzcC1waWNrZXItLWlubGluZSIsImRldGVjdEVzY1ByZXNzZWQiLCJfdGhpczM0IiwicHJlZmV0Y2hlZCIsInByZWZldGNoIiwic2hvd05vdGlmaWNhdGlvbiIsIlVSTFNlYXJjaFBhcmFtcyIsInNlYXJjaCIsImlzT2JqZWN0JDQiLCJpc0ludGVnZXIiLCJfX3Z1ZV9yZW5kZXJfXyR0IiwiY29udGFpbmVyQ2xhc3NlcyIsImRyb3BQYW5lIiwic2hvd0ljb24iLCJpY29uQ2xhc3NlcyIsInNob3dQcm9ncmVzcyIsImZpbGVzRmluaXNoZWQiLCJwcm9ncmVzc1N0eWxlIiwiaXNEcm9wcGluZyIsIkFwcCIsIkRJU1BMQVlfTU9ERV9PVkVSTEFZIiwiRElTUExBWV9NT0RFX0lOTElORSIsIkRJU1BMQVlfTU9ERV9EUk9QUEFORSIsInBhcnNlcnMiLCJfZHJvcFBhbmUiLCJkaXNwbGF5TW9kZSIsImRyb3BQYW5lLmlkIiwiZHJvcFBhbmUub3ZlcmxheSIsImRyb3BQYW5lLm9uRHJhZ0VudGVyIiwib25EcmFnRW50ZXIiLCJkcm9wUGFuZS5vbkRyYWdMZWF2ZSIsIm9uRHJhZ0xlYXZlIiwiZHJvcFBhbmUub25EcmFnT3ZlciIsIm9uRHJhZ092ZXIiLCJkcm9wUGFuZS5vbkRyb3AiLCJvbkRyb3AiLCJkcm9wUGFuZS5vblN1Y2Nlc3MiLCJvblN1Y2Nlc3MiLCJkcm9wUGFuZS5vbkVycm9yIiwiZHJvcFBhbmUub25Qcm9ncmVzcyIsImRyb3BQYW5lLm9uQ2xpY2siLCJkcm9wUGFuZS5kaXNhYmxlQ2xpY2siLCJkaXNhYmxlQ2xpY2siLCJkcm9wUGFuZS5zaG93SWNvbiIsImRyb3BQYW5lLnNob3dQcm9ncmVzcyIsImRyb3BQYW5lLmN1c3RvbVRleHQiLCJkcm9wUGFuZS5jcm9wRmlsZXMiLCJfcm9vdElkIiwiY2xlYW51cEltYWdlRXhpZiIsInNvdXJjZXNEZWZpbmVkQnlVc2VyIiwiYWNjZXB0RGVmaW5lZEJ5VXNlciIsIm9uZU9mQWNjZXB0VmFsdWVzIiwiX2NvbmN1cnJlbmN5IiwibWF4U2l6ZURlZmluZWRCeVVzZXIiLCJtaW5GaWxlc0RlZmluZWRCeVVzZXIiLCJtYXhGaWxlc0RlZmluZWRCeVVzZXIiLCJzdGFydFVwbG9hZGluZ1doZW5NYXhGaWxlc1JlYWNoZWREZWZpbmVkQnlVc2VyIiwibG9hZENzcyIsImxvYWRDc3NEZWZpbmVkQnlVc2VyIiwibGFuZ0RlZmluZWRCeVVzZXIiLCJfdmlld1R5cGUiLCJfY3VzdG9tVGV4dCIsInN0b3JlVG9EZWZpbmVkQnlVc2VyIiwiX3VwbG9hZENvbmZpZyIsImhpZGVNb2RhbFdoZW5VcGxvYWRpbmciLCJoaWRlV2hlblVwbG9hZGluZ0RlZmluZWRCeVVzZXIiLCJ1cGxvYWRJbkJhY2tncm91bmREZWZpbmVkQnlVc2VyIiwiX2FsbG93TWFudWFsUmV0cnkiLCJlbmFibGVUcmFuc2Zvcm1lckRlZmluZWRCeVVzZXIiLCJfZGlzYWJsZVRodW1ibmFpbHMiLCJkaXNhYmxlS2V5Iiwib25VcGxvYWRTdGFydGVkRGVmaW5lZEJ5VXNlciIsIm9uRmlsZVNlbGVjdGVkRGVmaW5lZEJ5VXNlciIsIl9vbkZpbGVDcm9wcGVkIiwib25PcGVuIiwiX29uT3BlbiIsIm9uQ2FuY2VsIiwiX29uQ2FuY2VsIiwib25DbG9zZSIsIl9vbkNsb3NlIiwib25VcGxvYWREb25lIiwiX29uVXBsb2FkRG9uZSIsImVycm9yc1RpbWVvdXQiLCJ0cmFuc2Zvcm1hdGlvbnNEZWZpbmVkQnlVc2VyIiwidHJhbnNmb3JtYXRpb25zLmNyb3AiLCJjcm9wRGVmaW5lZEJ5VXNlciIsInRyYW5zZm9ybWF0aW9ucy5jcm9wLmFzcGVjdFJhdGlvIiwiYXNwZWN0UmF0aW9EZWZpbmVkQnlVc2VyIiwidHJhbnNmb3JtYXRpb25zLmNyb3AuZm9yY2UiLCJ0cmFuc2Zvcm1hdGlvbnMuZm9yY2UiLCJ0cmFuc2Zvcm1hdGlvbnMuY2lyY2xlIiwidHJhbnNmb3JtYXRpb25zLnJvdGF0ZSIsInRyYW5zZm9ybWF0aW9ucy5tYXNrIiwidHJhbnNmb3JtYXRpb25zLm1hc2sudXJsIiwibWFza1VybCIsInRyYW5zZm9ybWF0aW9ucy5tYXNrLnR5cGUiLCJtYXNrVHlwZSIsInRyYW5zZm9ybWF0aW9ucy5tYXNrLmNvbG9yIiwibWFza0NvbG9yIiwibWluRGltZW5zaW9uc0RlZmluZWRCeVVzZXIiLCJtYXhEaW1lbnNpb25zRGVmaW5lZEJ5VXNlciIsImJsb2NrIiwiX2NvbnRhaW5lciIsIl9nbG9iYWxEcm9wWm9uZSIsImV4cG9zZSIsIm1vZGFsU2l6ZSIsIl9tb2RhbFNpemUiLCJfdXNlU2VudHJ5QnJlYWRjcnVtYnMiLCJfX3Z1ZV9zY3JpcHRfXyR1IiwiY3JvcEZpbGVzRG9uZSIsImNyb3BGaWxlc092ZXJyaWRlIiwiZnNwLWRyb3AtcGFuZV9fY29udGFpbmVyIiwiZnNwLWRyb3AtcGFuZV9fY29udGFpbmVyLS1hY3RpdmUiLCJmc3AtZHJvcC1wYW5lX19pY29uIiwiZnNwLWRyb3AtcGFuZV9faWNvbi0tYWN0aXZlIiwidG90YWxQcm9ncmVzcyIsImFsbFBlcmNlbnRzIiwiX3RoaXMzNSIsImNhbGxBZGRGaWxlcyIsImluY0Nyb3BGaWxlc0RvbmUiLCJfdGhpczM2IiwiZXJyb3JlZCIsIl9lcnJvck1zZyIsImRyb3BPdmVybGF5IiwiZW50ZXJab25lIiwiX3RoaXMzNyIsImNsZWFyU3RhdGUiLCJibG9icyIsInVybHMiLCJfY29uZmlnIiwiUGlja2VyIiwiY29udmVydFRvRmlsZU9iaiQxIiwiZmlsZVJldHVybmVkQnlBcGkiLCJEcm9wUGFuZSIsImltYWdlU2VhcmNoIiwiVVBEQVRFX0lOUFVUIiwiRkVUQ0hfSU1BR0VTX0JFR0lOIiwiRkVUQ0hfSU1BR0VTX1NVQ0NFU1MiLCJGRVRDSF9JTUFHRVNfRVJST1IiLCJDTEVBUl9JTUFHRVNfU1RPUkUiLCJpbWFnZXNlYXJjaCIsIm5vUmVzdWx0c0ZvdW5kIiwiSU1HX1VSTFMiLCJuZXR3b3JrIiwiYXR0ZW1wdHMiLCJTRVRfQ09OTkVDVElPTl9TVEFUVVMiLCJJTkNfQVRURU1QVFMiLCJSRVNFVF9BVFRFTVBUUyIsIlNFVF9ORVRXT1JLX0xJU1RFTkVSUyIsIm9uTmV0d29ya0Vycm9yIiwiX3JlZjQ2Iiwib3ZlcnJpZGUiLCJvbk5ldHdvcmtTdWNjZXNzIiwiX3JlZjQ3IiwiY2hlY2tOZXR3b3JrTmF2aWdhdG9yIiwiX3JlZjQ4Iiwib25saW5lIiwib2ZmbGluZSIsInJlbW92ZU5ldHdvcmtMaXN0ZW5lcnMiLCJfcmVmNDkiLCJfcmVmNDkkc3RhdGUkbGlzdGVuZXIiLCJjaGVja05ldHdvcmtYSFIiLCJfcmVmNTAiLCJodHRwIiwiYmFzZVVybCIsIkFERF9OT1RJRklDQVRJT04iLCJub3RpZmljYXRpb24iLCJSRU1PVkVfTk9USUZJQ0FUSU9OIiwibm90aWZpY2F0aW9uVG9CZVJlbW92ZWQiLCJSRU1PVkVfQUxMX05PVElGSUNBVElPTlMiLCJ1cmxTb3VyY2UiLCJpc0ZldGNoaW5nIiwiRkVUQ0hfVVJMX1NUQVJUIiwiRkVUQ0hfVVJMX0RPTkUiLCJsb2ckMiIsImNyZWF0ZVN0b3JlIiwib25QaWNrZXJEb25lIiwib25QaWNrZXJDYW5jZWwiLCJmcy1jcm9wcGVyIiwiZnMtZmFicmljIiwiZnMtb3BlbnRvayIsImhpZGVTaWRlYmFyIiwiSU5JVElBTF9ST1VURSIsIm5ld1JvdXRlIiwiU0VUX1BSRUZFVENIIiwiQ0hBTkdFX1JPVVRFIiwiR09fQkFDS19XSVRIX1JPVVRFIiwibGFzdFJvdXRlIiwiR09fQkFDS19XSVRIX1JPVVRFX0NVUlJFTlRfVFlQRSIsInRvVGVzdCIsImZvdW5kSWR4IiwicHJlZGljYXRlIiwiZmluZEluZGV4IiwiYXJyYXlGaW5kSW5kZXgiLCJQUkVGRVRDSF9ET05FIiwiUkVNT1ZFX1NPVVJDRV9GUk9NX1JPVVRFUyIsIlNFVF9CTE9CX1VSTCIsIl9yZWY1MSIsIlJFTU9WRV9CTE9CX1VSTCIsIlVQREFURV9NT0JJTEVfTkFWX0FDVElWRSIsImlzQWN0aXZlIiwiVVBEQVRFX1NFTEVDVF9MQUJFTF9BQ1RJVkUiLCJTRVRfVklFV19UWVBFIiwiX3JlZjUyIiwiYWxsVXBsb2Fkc0RvbmUiLCJmaWxlc1VwbG9hZGVkIiwiaGFzRHJvcFBhbmUiLCJjYW5jZWxQaWNrIiwiX3JlZjUzIiwiX3JlZjUzJGdldHRlcnMiLCJ2dCIsIk5hTiIsImxvZyQzIiwicGlja2VyQ29uZmlnIiwiX211dGF0aW9uT2JzZXJ2ZXIiLCJwYXJzZUNvbmZpZyIsInBhcmVudEtleSIsInBhcnNlZENvbmZpZyIsImNvbmZpZ09wdGlvbiIsInBhcnNlciIsInBhcnNlZCIsImNmZyIsIm9sZENpcmNsZSIsIm9sZEltYWdlTWF4IiwibWF4RGltZW5zaW9ucyIsIm9sZEltYWdlTWluIiwibWluRGltZW5zaW9ucyIsImFkZENvbmZpZ0RlZmF1bHRzIiwiX2xvYWRDc3NNYXliZSIsIl9pbml0VnVlIiwiX2luaXRDb250YWluZXIiLCJfaW5pdE11dGF0aW9uT2JzZXJ2ZXIiLCJfdGhpczM4IiwiaW5pdGlhbFN0YXRlT3ZlcnJpZGVzIiwiX2NyZWF0ZVBpY2tlciIsImZzIiwiX3RoaXMkY29uZmlnIiwiZXh0ZW5kZWRMYW5ndWFnZXMiLCJfY29tcG9uZW50IiwiX2dldEVsZW1lbnQiLCJfdGhpczM5IiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsIk1vek11dGF0aW9uT2JzZXJ2ZSIsInJlbW92ZWROb2RlcyIsIm9uRG9uZSIsIl90aGlzNDAiLCJub1Njcm9sbCIsImdldEVsZW1lbnRCeUlkIiwiY2hpbGRMaXN0IiwiZG9Ob3RUaHJvdyIsInRvUmV0dXJuIiwiY29udGFpbnMiLCJfc3R5bGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxpbmsiLCJyZWwiLCJ0aGlzU2NyaXB0Iiwic2NyaXB0VGFncyIsInJlZ2lzdGVyUmVhZHlNb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLGtCQUFrQkMsRUFBT0MsR0FBTyxJQUFJLElBQUlDLEVBQUUsRUFBRUEsRUFBRUQsRUFBTUUsT0FBT0QsSUFBSSxDQUFDLElBQUlFLEVBQVdILEVBQU1DLEdBQUdFLEVBQVdDLFdBQVdELEVBQVdDLGFBQVksRUFBTUQsRUFBV0UsY0FBYSxFQUFRLFVBQVVGLElBQVdBLEVBQVdHLFVBQVMsR0FBS0MsT0FBT0MsZUFBZVQsRUFBT0ksRUFBV00sSUFBSU4sSUFBYyxTQUFTTyxhQUFhQyxFQUFZQyxFQUFXQyxHQUF5SSxPQUF6SEQsR0FBV2Qsa0JBQWtCYSxFQUFZRyxVQUFVRixHQUFlQyxHQUFZZixrQkFBa0JhLEVBQVlFLEdBQW9CRixFQUFhLFNBQVNJLGdCQUFnQkMsRUFBU0wsR0FBYSxLQUFLSyxhQUFvQkwsR0FBYyxNQUFNLElBQUlNLFVBQVUscUNBQXVDLFNBQVNDLDJCQUEyQkMsRUFBS0MsR0FBTSxPQUFHQSxHQUF3QixXQUFqQkMsU0FBU0QsSUFBZ0MsbUJBQVBBLEVBQXdDRSx1QkFBdUJILEdBQXBDQyxFQUEyQyxTQUFTRSx1QkFBdUJILEdBQU0sUUFBVSxJQUFQQSxFQUFl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QVNnc0MsRUFBaUJLLGVBQWVyc0MsVUFBaUJnc0MsRUFBaUJFLGVBQWVGLEVBQWlCSyxnQkFna0k5dUMydEYsQ0FBb0JoSSxHQTlqSTRVLDZCQThqSW5UQSxHQS8vSnVwSiIsImZpbGUiOiJwaWNrZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQscHJvcHMpe2Zvcih2YXIgaT0wO2k8cHJvcHMubGVuZ3RoO2krKyl7dmFyIGRlc2NyaXB0b3I9cHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlPWRlc2NyaXB0b3IuZW51bWVyYWJsZXx8ZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGU9dHJ1ZTtpZihcInZhbHVlXCJpbiBkZXNjcmlwdG9yKWRlc2NyaXB0b3Iud3JpdGFibGU9dHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpO319ZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe2lmKHByb3RvUHJvcHMpX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7aWYoY2FsbCYmKF90eXBlb2YyKGNhbGwpPT09XCJvYmplY3RcInx8dHlwZW9mIGNhbGw9PT1cImZ1bmN0aW9uXCIpKXtyZXR1cm4gY2FsbDt9cmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7fWZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZil7aWYoc2VsZj09PXZvaWQgMCl7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gc2VsZjt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLHN1cGVyQ2xhc3Mpe2lmKHR5cGVvZiBzdXBlckNsYXNzIT09XCJmdW5jdGlvblwiJiZzdXBlckNsYXNzIT09bnVsbCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO31zdWJDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzJiZzdXBlckNsYXNzLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnN1YkNsYXNzLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7aWYoc3VwZXJDbGFzcylfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3Msc3VwZXJDbGFzcyk7fWZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3Mpe3ZhciBfY2FjaGU9dHlwZW9mIE1hcD09PVwiZnVuY3Rpb25cIj9uZXcgTWFwKCk6dW5kZWZpbmVkO193cmFwTmF0aXZlU3VwZXI9ZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcyl7aWYoQ2xhc3M9PT1udWxsfHwhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKXJldHVybiBDbGFzcztpZih0eXBlb2YgQ2xhc3MhPT1cImZ1bmN0aW9uXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt9aWYodHlwZW9mIF9jYWNoZSE9PVwidW5kZWZpbmVkXCIpe2lmKF9jYWNoZS5oYXMoQ2xhc3MpKXJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTtfY2FjaGUuc2V0KENsYXNzLFdyYXBwZXIpO31mdW5jdGlvbiBXcmFwcGVyKCl7cmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsYXJndW1lbnRzLF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7fVdyYXBwZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6V3JhcHBlcixlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7cmV0dXJuIF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLENsYXNzKTt9O3JldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTt9ZnVuY3Rpb24gaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCl7aWYodHlwZW9mIFJlZmxlY3Q9PT1cInVuZGVmaW5lZFwifHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuIGZhbHNlO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuIGZhbHNlO2lmKHR5cGVvZiBQcm94eT09PVwiZnVuY3Rpb25cIilyZXR1cm4gdHJ1ZTt0cnl7RGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLGZ1bmN0aW9uKCl7fSkpO3JldHVybiB0cnVlO31jYXRjaChlKXtyZXR1cm4gZmFsc2U7fX1mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCxhcmdzLENsYXNzKXtpZihpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSl7X2NvbnN0cnVjdD1SZWZsZWN0LmNvbnN0cnVjdDt9ZWxzZXtfY29uc3RydWN0PWZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LGFyZ3MsQ2xhc3Mpe3ZhciBhPVtudWxsXTthLnB1c2guYXBwbHkoYSxhcmdzKTt2YXIgQ29uc3RydWN0b3I9RnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsYSk7dmFyIGluc3RhbmNlPW5ldyBDb25zdHJ1Y3RvcigpO2lmKENsYXNzKV9zZXRQcm90b3R5cGVPZihpbnN0YW5jZSxDbGFzcy5wcm90b3R5cGUpO3JldHVybiBpbnN0YW5jZTt9O31yZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLGFyZ3VtZW50cyk7fWZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKXtyZXR1cm4gRnVuY3Rpb24udG9TdHJpbmcuY2FsbChmbikuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikhPT0tMTt9ZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8scCl7X3NldFByb3RvdHlwZU9mPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8scCl7by5fX3Byb3RvX189cDtyZXR1cm4gbzt9O3JldHVybiBfc2V0UHJvdG90eXBlT2YobyxwKTt9ZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pe19nZXRQcm90b3R5cGVPZj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mOmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKXtyZXR1cm4gby5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTt9O3JldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7fWZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpe3JldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKXx8X2l0ZXJhYmxlVG9BcnJheShhcnIpfHxfbm9uSXRlcmFibGVTcHJlYWQoKTt9ZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO31mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpe2lmKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcil8fE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKT09PVwiW29iamVjdCBBcmd1bWVudHNdXCIpcmV0dXJuIEFycmF5LmZyb20oaXRlcik7fWZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpe2lmKEFycmF5LmlzQXJyYXkoYXJyKSl7Zm9yKHZhciBpPTAsYXJyMj1uZXcgQXJyYXkoYXJyLmxlbmd0aCk7aTxhcnIubGVuZ3RoO2krKyl7YXJyMltpXT1hcnJbaV07fXJldHVybiBhcnIyO319ZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsZW51bWVyYWJsZU9ubHkpe3ZhciBrZXlzPU9iamVjdC5rZXlzKG9iamVjdCk7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIHN5bWJvbHM9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO2lmKGVudW1lcmFibGVPbmx5KXN5bWJvbHM9c3ltYm9scy5maWx0ZXIoZnVuY3Rpb24oc3ltKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3Qsc3ltKS5lbnVtZXJhYmxlO30pO2tleXMucHVzaC5hcHBseShrZXlzLHN5bWJvbHMpO31yZXR1cm4ga2V5czt9ZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldIT1udWxsP2FyZ3VtZW50c1tpXTp7fTtpZihpJTIpe293bktleXMoc291cmNlLHRydWUpLmZvckVhY2goZnVuY3Rpb24oa2V5KXtfZGVmaW5lUHJvcGVydHkodGFyZ2V0LGtleSxzb3VyY2Vba2V5XSk7fSk7fWVsc2UgaWYoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpe09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTt9ZWxzZXtvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbihrZXkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsa2V5LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLGtleSkpO30pO319cmV0dXJuIHRhcmdldDt9ZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaixrZXksdmFsdWUpe2lmKGtleSBpbiBvYmope09iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosa2V5LHt2YWx1ZTp2YWx1ZSxlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsd3JpdGFibGU6dHJ1ZX0pO31lbHNle29ialtrZXldPXZhbHVlO31yZXR1cm4gb2JqO31mdW5jdGlvbiBfdHlwZW9mMihvYmope2lmKHR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiKXtfdHlwZW9mMj1mdW5jdGlvbiBfdHlwZW9mMihvYmope3JldHVybiB0eXBlb2Ygb2JqO307fWVsc2V7X3R5cGVvZjI9ZnVuY3Rpb24gX3R5cGVvZjIob2JqKXtyZXR1cm4gb2JqJiZ0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqO307fXJldHVybiBfdHlwZW9mMihvYmopO30vKiB2MS4xMi4wICovdGhpcy5maWxlc3RhY2s9dGhpcy5maWxlc3RhY2t8fHt9O3RoaXMuZmlsZXN0YWNrLnBpY2s9ZnVuY3Rpb24oKXt2YXIgRU5WPXtjc3M6e21haW46J2h0dHBzOi8vc3RhdGljLmZpbGVzdGFja2FwaS5jb20vcGlja2VyLzEuMTIuMC9tYWluLmNzcyd9LHZlbmRvcjp7b3BlbnRvazonaHR0cHM6Ly9zdGF0aWMuZmlsZXN0YWNrYXBpLmNvbS9waWNrZXIvMS4xMi4wL2Fzc2V0cy9zY3JpcHRzL29wZW50b2suanMnLGZhYnJpYzonaHR0cHM6Ly9zdGF0aWMuZmlsZXN0YWNrYXBpLmNvbS9waWNrZXIvMS4xMi4wL2Fzc2V0cy9zY3JpcHRzL2ZhYnJpYy5qcycsY3JvcHBlcjonaHR0cHM6Ly9zdGF0aWMuZmlsZXN0YWNrYXBpLmNvbS9waWNrZXIvMS4xMi4wL2Fzc2V0cy9zY3JpcHRzL2Nyb3BwZXIuanMnfSxzZW50cnlEU046J2h0dHBzOi8vMmZmN2NmYWQyMDJmNDMxZWIwMzkzMGU0Y2M5ZTU2OTZAc2VudHJ5LmlvLzIxMDE5Nid9Oy8qIVxuICAgKiBWdWUuanMgdjIuNi4xMFxuICAgKiAoYykgMjAxNC0yMDE5IEV2YW4gWW91XG4gICAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAgICovIC8qICAqL3ZhciBlbXB0eU9iamVjdD1PYmplY3QuZnJlZXplKHt9KTsvLyBUaGVzZSBoZWxwZXJzIHByb2R1Y2UgYmV0dGVyIFZNIGNvZGUgaW4gSlMgZW5naW5lcyBkdWUgdG8gdGhlaXJcbi8vIGV4cGxpY2l0bmVzcyBhbmQgZnVuY3Rpb24gaW5saW5pbmcuXG5mdW5jdGlvbiBpc1VuZGVmKHYpe3JldHVybiB2PT09dW5kZWZpbmVkfHx2PT09bnVsbDt9ZnVuY3Rpb24gaXNEZWYodil7cmV0dXJuIHYhPT11bmRlZmluZWQmJnYhPT1udWxsO31mdW5jdGlvbiBpc1RydWUodil7cmV0dXJuIHY9PT10cnVlO31mdW5jdGlvbiBpc0ZhbHNlKHYpe3JldHVybiB2PT09ZmFsc2U7fS8qKlxuICAgKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmUuXG4gICAqL2Z1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKXtyZXR1cm4gdHlwZW9mIHZhbHVlPT09J3N0cmluZyd8fHR5cGVvZiB2YWx1ZT09PSdudW1iZXInfHwvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbl90eXBlb2YyKHZhbHVlKT09PSdzeW1ib2wnfHx0eXBlb2YgdmFsdWU9PT0nYm9vbGVhbic7fS8qKlxuICAgKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAgICogT2JqZWN0cyBmcm9tIHByaW1pdGl2ZSB2YWx1ZXMgd2hlbiB3ZSBrbm93IHRoZSB2YWx1ZVxuICAgKiBpcyBhIEpTT04tY29tcGxpYW50IHR5cGUuXG4gICAqL2Z1bmN0aW9uIGlzT2JqZWN0KG9iail7cmV0dXJuIG9iaiE9PW51bGwmJl90eXBlb2YyKG9iaik9PT0nb2JqZWN0Jzt9LyoqXG4gICAqIEdldCB0aGUgcmF3IHR5cGUgc3RyaW5nIG9mIGEgdmFsdWUsIGUuZy4sIFtvYmplY3QgT2JqZWN0XS5cbiAgICovdmFyIF90b1N0cmluZz1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO2Z1bmN0aW9uIHRvUmF3VHlwZSh2YWx1ZSl7cmV0dXJuIF90b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LC0xKTt9LyoqXG4gICAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAgICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAgICovZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmope3JldHVybiBfdG9TdHJpbmcuY2FsbChvYmopPT09J1tvYmplY3QgT2JqZWN0XSc7fWZ1bmN0aW9uIGlzUmVnRXhwKHYpe3JldHVybiBfdG9TdHJpbmcuY2FsbCh2KT09PSdbb2JqZWN0IFJlZ0V4cF0nO30vKipcbiAgICogQ2hlY2sgaWYgdmFsIGlzIGEgdmFsaWQgYXJyYXkgaW5kZXguXG4gICAqL2Z1bmN0aW9uIGlzVmFsaWRBcnJheUluZGV4KHZhbCl7dmFyIG49cGFyc2VGbG9hdChTdHJpbmcodmFsKSk7cmV0dXJuIG4+PTAmJk1hdGguZmxvb3Iobik9PT1uJiZpc0Zpbml0ZSh2YWwpO31mdW5jdGlvbiBpc1Byb21pc2UodmFsKXtyZXR1cm4gaXNEZWYodmFsKSYmdHlwZW9mIHZhbC50aGVuPT09J2Z1bmN0aW9uJyYmdHlwZW9mIHZhbFtcImNhdGNoXCJdPT09J2Z1bmN0aW9uJzt9LyoqXG4gICAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICAgKi9mdW5jdGlvbiB0b1N0cmluZyh2YWwpe3JldHVybiB2YWw9PW51bGw/Jyc6QXJyYXkuaXNBcnJheSh2YWwpfHxpc1BsYWluT2JqZWN0KHZhbCkmJnZhbC50b1N0cmluZz09PV90b1N0cmluZz9KU09OLnN0cmluZ2lmeSh2YWwsbnVsbCwyKTpTdHJpbmcodmFsKTt9LyoqXG4gICAqIENvbnZlcnQgYW4gaW5wdXQgdmFsdWUgdG8gYSBudW1iZXIgZm9yIHBlcnNpc3RlbmNlLlxuICAgKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAgICovZnVuY3Rpb24gdG9OdW1iZXIodmFsKXt2YXIgbj1wYXJzZUZsb2F0KHZhbCk7cmV0dXJuIGlzTmFOKG4pP3ZhbDpuO30vKipcbiAgICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG4gICAqIGlzIGluIHRoYXQgbWFwLlxuICAgKi9mdW5jdGlvbiBtYWtlTWFwKHN0cixleHBlY3RzTG93ZXJDYXNlKXt2YXIgbWFwPU9iamVjdC5jcmVhdGUobnVsbCk7dmFyIGxpc3Q9c3RyLnNwbGl0KCcsJyk7Zm9yKHZhciBpPTA7aTxsaXN0Lmxlbmd0aDtpKyspe21hcFtsaXN0W2ldXT10cnVlO31yZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZT9mdW5jdGlvbih2YWwpe3JldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldO306ZnVuY3Rpb24odmFsKXtyZXR1cm4gbWFwW3ZhbF07fTt9LyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIGEgYnVpbHQtaW4gdGFnLlxuICAgKi92YXIgaXNCdWlsdEluVGFnPW1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50Jyx0cnVlKTsvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICAgKi92YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZT1tYWtlTWFwKCdrZXkscmVmLHNsb3Qsc2xvdC1zY29wZSxpcycpOy8qKlxuICAgKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5LlxuICAgKi9mdW5jdGlvbiByZW1vdmUoYXJyLGl0ZW0pe2lmKGFyci5sZW5ndGgpe3ZhciBpbmRleD1hcnIuaW5kZXhPZihpdGVtKTtpZihpbmRleD4tMSl7cmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsMSk7fX19LyoqXG4gICAqIENoZWNrIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyB0aGUgcHJvcGVydHkuXG4gICAqL3ZhciBoYXNPd25Qcm9wZXJ0eT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2Z1bmN0aW9uIGhhc093bihvYmosa2V5KXtyZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosa2V5KTt9LyoqXG4gICAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cbiAgICovZnVuY3Rpb24gY2FjaGVkKGZuKXt2YXIgY2FjaGU9T2JqZWN0LmNyZWF0ZShudWxsKTtyZXR1cm4gZnVuY3Rpb24gY2FjaGVkRm4oc3RyKXt2YXIgaGl0PWNhY2hlW3N0cl07cmV0dXJuIGhpdHx8KGNhY2hlW3N0cl09Zm4oc3RyKSk7fTt9LyoqXG4gICAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gICAqL3ZhciBjYW1lbGl6ZVJFPS8tKFxcdykvZzt2YXIgY2FtZWxpemU9Y2FjaGVkKGZ1bmN0aW9uKHN0cil7cmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsZnVuY3Rpb24oXyxjKXtyZXR1cm4gYz9jLnRvVXBwZXJDYXNlKCk6Jyc7fSk7fSk7LyoqXG4gICAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gICAqL3ZhciBjYXBpdGFsaXplPWNhY2hlZChmdW5jdGlvbihzdHIpe3JldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrc3RyLnNsaWNlKDEpO30pOy8qKlxuICAgKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLlxuICAgKi92YXIgaHlwaGVuYXRlUkU9L1xcQihbQS1aXSkvZzt2YXIgaHlwaGVuYXRlPWNhY2hlZChmdW5jdGlvbihzdHIpe3JldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwnLSQxJykudG9Mb3dlckNhc2UoKTt9KTsvKipcbiAgICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxuICAgKiBlLmcuLCBQaGFudG9tSlMgMS54LiBUZWNobmljYWxseSwgd2UgZG9uJ3QgbmVlZCB0aGlzIGFueW1vcmVcbiAgICogc2luY2UgbmF0aXZlIGJpbmQgaXMgbm93IHBlcmZvcm1hbnQgZW5vdWdoIGluIG1vc3QgYnJvd3NlcnMuXG4gICAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cbiAgICogUGhhbnRvbUpTIDEueCwgc28gdGhpcyBtdXN0IGJlIGtlcHQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gICAqLyAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL2Z1bmN0aW9uIHBvbHlmaWxsQmluZChmbixjdHgpe2Z1bmN0aW9uIGJvdW5kRm4oYSl7dmFyIGw9YXJndW1lbnRzLmxlbmd0aDtyZXR1cm4gbD9sPjE/Zm4uYXBwbHkoY3R4LGFyZ3VtZW50cyk6Zm4uY2FsbChjdHgsYSk6Zm4uY2FsbChjdHgpO31ib3VuZEZuLl9sZW5ndGg9Zm4ubGVuZ3RoO3JldHVybiBib3VuZEZuO31mdW5jdGlvbiBuYXRpdmVCaW5kKGZuLGN0eCl7cmV0dXJuIGZuLmJpbmQoY3R4KTt9dmFyIGJpbmQ9RnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ/bmF0aXZlQmluZDpwb2x5ZmlsbEJpbmQ7LyoqXG4gICAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICAgKi9mdW5jdGlvbiB0b0FycmF5KGxpc3Qsc3RhcnQpe3N0YXJ0PXN0YXJ0fHwwO3ZhciBpPWxpc3QubGVuZ3RoLXN0YXJ0O3ZhciByZXQ9bmV3IEFycmF5KGkpO3doaWxlKGktLSl7cmV0W2ldPWxpc3RbaStzdGFydF07fXJldHVybiByZXQ7fS8qKlxuICAgKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gICAqL2Z1bmN0aW9uIGV4dGVuZCh0byxfZnJvbSl7Zm9yKHZhciBrZXkgaW4gX2Zyb20pe3RvW2tleV09X2Zyb21ba2V5XTt9cmV0dXJuIHRvO30vKipcbiAgICogTWVyZ2UgYW4gQXJyYXkgb2YgT2JqZWN0cyBpbnRvIGEgc2luZ2xlIE9iamVjdC5cbiAgICovZnVuY3Rpb24gdG9PYmplY3QoYXJyKXt2YXIgcmVzPXt9O2Zvcih2YXIgaT0wO2k8YXJyLmxlbmd0aDtpKyspe2lmKGFycltpXSl7ZXh0ZW5kKHJlcyxhcnJbaV0pO319cmV0dXJuIHJlczt9LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi8gLyoqXG4gICAqIFBlcmZvcm0gbm8gb3BlcmF0aW9uLlxuICAgKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAgICogd2l0aCAuLi5yZXN0IChodHRwczovL2Zsb3cub3JnL2Jsb2cvMjAxNy8wNS8wNy9TdHJpY3QtRnVuY3Rpb24tQ2FsbC1Bcml0eS8pLlxuICAgKi9mdW5jdGlvbiBub29wKGEsYixjKXt9LyoqXG4gICAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG4gICAqL3ZhciBubz1mdW5jdGlvbiBubyhhLGIsYyl7cmV0dXJuIGZhbHNlO307LyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqLyAvKipcbiAgICogUmV0dXJuIHRoZSBzYW1lIHZhbHVlLlxuICAgKi92YXIgaWRlbnRpdHk9ZnVuY3Rpb24gaWRlbnRpdHkoXyl7cmV0dXJuIF87fTsvKipcbiAgICogQ2hlY2sgaWYgdHdvIHZhbHVlcyBhcmUgbG9vc2VseSBlcXVhbCAtIHRoYXQgaXMsXG4gICAqIGlmIHRoZXkgYXJlIHBsYWluIG9iamVjdHMsIGRvIHRoZXkgaGF2ZSB0aGUgc2FtZSBzaGFwZT9cbiAgICovZnVuY3Rpb24gbG9vc2VFcXVhbChhLGIpe2lmKGE9PT1iKXtyZXR1cm4gdHJ1ZTt9dmFyIGlzT2JqZWN0QT1pc09iamVjdChhKTt2YXIgaXNPYmplY3RCPWlzT2JqZWN0KGIpO2lmKGlzT2JqZWN0QSYmaXNPYmplY3RCKXt0cnl7dmFyIGlzQXJyYXlBPUFycmF5LmlzQXJyYXkoYSk7dmFyIGlzQXJyYXlCPUFycmF5LmlzQXJyYXkoYik7aWYoaXNBcnJheUEmJmlzQXJyYXlCKXtyZXR1cm4gYS5sZW5ndGg9PT1iLmxlbmd0aCYmYS5ldmVyeShmdW5jdGlvbihlLGkpe3JldHVybiBsb29zZUVxdWFsKGUsYltpXSk7fSk7fWVsc2UgaWYoYSBpbnN0YW5jZW9mIERhdGUmJmIgaW5zdGFuY2VvZiBEYXRlKXtyZXR1cm4gYS5nZXRUaW1lKCk9PT1iLmdldFRpbWUoKTt9ZWxzZSBpZighaXNBcnJheUEmJiFpc0FycmF5Qil7dmFyIGtleXNBPU9iamVjdC5rZXlzKGEpO3ZhciBrZXlzQj1PYmplY3Qua2V5cyhiKTtyZXR1cm4ga2V5c0EubGVuZ3RoPT09a2V5c0IubGVuZ3RoJiZrZXlzQS5ldmVyeShmdW5jdGlvbihrZXkpe3JldHVybiBsb29zZUVxdWFsKGFba2V5XSxiW2tleV0pO30pO31lbHNley8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovcmV0dXJuIGZhbHNlO319Y2F0Y2goZSl7LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9yZXR1cm4gZmFsc2U7fX1lbHNlIGlmKCFpc09iamVjdEEmJiFpc09iamVjdEIpe3JldHVybiBTdHJpbmcoYSk9PT1TdHJpbmcoYik7fWVsc2V7cmV0dXJuIGZhbHNlO319LyoqXG4gICAqIFJldHVybiB0aGUgZmlyc3QgaW5kZXggYXQgd2hpY2ggYSBsb29zZWx5IGVxdWFsIHZhbHVlIGNhbiBiZVxuICAgKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICAgKiBjb250YWluIGFuIG9iamVjdCBvZiB0aGUgc2FtZSBzaGFwZSksIG9yIC0xIGlmIGl0IGlzIG5vdCBwcmVzZW50LlxuICAgKi9mdW5jdGlvbiBsb29zZUluZGV4T2YoYXJyLHZhbCl7Zm9yKHZhciBpPTA7aTxhcnIubGVuZ3RoO2krKyl7aWYobG9vc2VFcXVhbChhcnJbaV0sdmFsKSl7cmV0dXJuIGk7fX1yZXR1cm4tMTt9LyoqXG4gICAqIEVuc3VyZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmx5IG9uY2UuXG4gICAqL2Z1bmN0aW9uIG9uY2UoZm4pe3ZhciBjYWxsZWQ9ZmFsc2U7cmV0dXJuIGZ1bmN0aW9uKCl7aWYoIWNhbGxlZCl7Y2FsbGVkPXRydWU7Zm4uYXBwbHkodGhpcyxhcmd1bWVudHMpO319O312YXIgU1NSX0FUVFI9J2RhdGEtc2VydmVyLXJlbmRlcmVkJzt2YXIgQVNTRVRfVFlQRVM9Wydjb21wb25lbnQnLCdkaXJlY3RpdmUnLCdmaWx0ZXInXTt2YXIgTElGRUNZQ0xFX0hPT0tTPVsnYmVmb3JlQ3JlYXRlJywnY3JlYXRlZCcsJ2JlZm9yZU1vdW50JywnbW91bnRlZCcsJ2JlZm9yZVVwZGF0ZScsJ3VwZGF0ZWQnLCdiZWZvcmVEZXN0cm95JywnZGVzdHJveWVkJywnYWN0aXZhdGVkJywnZGVhY3RpdmF0ZWQnLCdlcnJvckNhcHR1cmVkJywnc2VydmVyUHJlZmV0Y2gnXTsvKiAgKi92YXIgY29uZmlnPXsvKipcbiAgICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICAgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5vcHRpb25NZXJnZVN0cmF0ZWdpZXM6T2JqZWN0LmNyZWF0ZShudWxsKSwvKipcbiAgICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgICAqL3NpbGVudDpmYWxzZSwvKipcbiAgICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgICAqL3Byb2R1Y3Rpb25UaXA6XCJwcm9kdWN0aW9uXCIhPT0ncHJvZHVjdGlvbicsLyoqXG4gICAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICAgKi9kZXZ0b29sczpcInByb2R1Y3Rpb25cIiE9PSdwcm9kdWN0aW9uJywvKipcbiAgICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAgICovcGVyZm9ybWFuY2U6ZmFsc2UsLyoqXG4gICAgICogRXJyb3IgaGFuZGxlciBmb3Igd2F0Y2hlciBlcnJvcnNcbiAgICAgKi9lcnJvckhhbmRsZXI6bnVsbCwvKipcbiAgICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnNcbiAgICAgKi93YXJuSGFuZGxlcjpudWxsLC8qKlxuICAgICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgICAqL2lnbm9yZWRFbGVtZW50czpbXSwvKipcbiAgICAgKiBDdXN0b20gdXNlciBrZXkgYWxpYXNlcyBmb3Igdi1vblxuICAgICAqLyAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbmtleUNvZGVzOk9iamVjdC5jcmVhdGUobnVsbCksLyoqXG4gICAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAgICogY29tcG9uZW50LiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgICAqL2lzUmVzZXJ2ZWRUYWc6bm8sLyoqXG4gICAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnRcbiAgICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgICAqL2lzUmVzZXJ2ZWRBdHRyOm5vLC8qKlxuICAgICAqIENoZWNrIGlmIGEgdGFnIGlzIGFuIHVua25vd24gZWxlbWVudC5cbiAgICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAgICovaXNVbmtub3duRWxlbWVudDpubywvKipcbiAgICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAgICovZ2V0VGFnTmFtZXNwYWNlOm5vb3AsLyoqXG4gICAgICogUGFyc2UgdGhlIHJlYWwgdGFnIG5hbWUgZm9yIHRoZSBzcGVjaWZpYyBwbGF0Zm9ybS5cbiAgICAgKi9wYXJzZVBsYXRmb3JtVGFnTmFtZTppZGVudGl0eSwvKipcbiAgICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICAgKi9tdXN0VXNlUHJvcDpubywvKipcbiAgICAgKiBQZXJmb3JtIHVwZGF0ZXMgYXN5bmNocm9ub3VzbHkuIEludGVuZGVkIHRvIGJlIHVzZWQgYnkgVnVlIFRlc3QgVXRpbHNcbiAgICAgKiBUaGlzIHdpbGwgc2lnbmlmaWNhbnRseSByZWR1Y2UgcGVyZm9ybWFuY2UgaWYgc2V0IHRvIGZhbHNlLlxuICAgICAqL2FzeW5jOnRydWUsLyoqXG4gICAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICAgKi9fbGlmZWN5Y2xlSG9va3M6TElGRUNZQ0xFX0hPT0tTfTsvKiAgKi8gLyoqXG4gICAqIHVuaWNvZGUgbGV0dGVycyB1c2VkIGZvciBwYXJzaW5nIGh0bWwgdGFncywgY29tcG9uZW50IG5hbWVzIGFuZCBwcm9wZXJ0eSBwYXRocy5cbiAgICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAgICogc2tpcHBpbmcgXFx1MTAwMDAtXFx1RUZGRkYgZHVlIHRvIGl0IGZyZWV6aW5nIHVwIFBoYW50b21KU1xuICAgKi92YXIgdW5pY29kZVJlZ0V4cD0vYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87LyoqXG4gICAqIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoICQgb3IgX1xuICAgKi9mdW5jdGlvbiBpc1Jlc2VydmVkKHN0cil7dmFyIGM9KHN0cisnJykuY2hhckNvZGVBdCgwKTtyZXR1cm4gYz09PTB4MjR8fGM9PT0weDVGO30vKipcbiAgICogRGVmaW5lIGEgcHJvcGVydHkuXG4gICAqL2Z1bmN0aW9uIGRlZihvYmosa2V5LHZhbCxlbnVtZXJhYmxlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLGtleSx7dmFsdWU6dmFsLGVudW1lcmFibGU6ISFlbnVtZXJhYmxlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9KTt9LyoqXG4gICAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICAgKi92YXIgYmFpbFJFPW5ldyBSZWdFeHAoXCJbXlwiK3VuaWNvZGVSZWdFeHAuc291cmNlK1wiLiRfXFxcXGRdXCIpO2Z1bmN0aW9uIHBhcnNlUGF0aChwYXRoKXtpZihiYWlsUkUudGVzdChwYXRoKSl7cmV0dXJuO312YXIgc2VnbWVudHM9cGF0aC5zcGxpdCgnLicpO3JldHVybiBmdW5jdGlvbihvYmope2Zvcih2YXIgaT0wO2k8c2VnbWVudHMubGVuZ3RoO2krKyl7aWYoIW9iail7cmV0dXJuO31vYmo9b2JqW3NlZ21lbnRzW2ldXTt9cmV0dXJuIG9iajt9O30vKiAgKi8gLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG89J19fcHJvdG9fXydpbnt9Oy8vIEJyb3dzZXIgZW52aXJvbm1lbnQgc25pZmZpbmdcbnZhciBpbkJyb3dzZXI9dHlwZW9mIHdpbmRvdyE9PSd1bmRlZmluZWQnO3ZhciBpbldlZXg9dHlwZW9mIFdYRW52aXJvbm1lbnQhPT0ndW5kZWZpbmVkJyYmISFXWEVudmlyb25tZW50LnBsYXRmb3JtO3ZhciB3ZWV4UGxhdGZvcm09aW5XZWV4JiZXWEVudmlyb25tZW50LnBsYXRmb3JtLnRvTG93ZXJDYXNlKCk7dmFyIFVBPWluQnJvd3NlciYmd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTt2YXIgaXNJRT1VQSYmL21zaWV8dHJpZGVudC8udGVzdChVQSk7dmFyIGlzSUU5PVVBJiZVQS5pbmRleE9mKCdtc2llIDkuMCcpPjA7dmFyIGlzRWRnZT1VQSYmVUEuaW5kZXhPZignZWRnZS8nKT4wO3ZhciBpc0FuZHJvaWQ9VUEmJlVBLmluZGV4T2YoJ2FuZHJvaWQnKT4wfHx3ZWV4UGxhdGZvcm09PT0nYW5kcm9pZCc7dmFyIGlzSU9TPVVBJiYvaXBob25lfGlwYWR8aXBvZHxpb3MvLnRlc3QoVUEpfHx3ZWV4UGxhdGZvcm09PT0naW9zJzt2YXIgaXNDaHJvbWU9VUEmJi9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSYmIWlzRWRnZTt2YXIgaXNQaGFudG9tSlM9VUEmJi9waGFudG9tanMvLnRlc3QoVUEpO3ZhciBpc0ZGPVVBJiZVQS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pOy8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbnZhciBuYXRpdmVXYXRjaD17fS53YXRjaDt2YXIgc3VwcG9ydHNQYXNzaXZlPWZhbHNlO2lmKGluQnJvd3Nlcil7dHJ5e3ZhciBvcHRzPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRzLCdwYXNzaXZlJyx7Z2V0OmZ1bmN0aW9uIGdldCgpey8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovc3VwcG9ydHNQYXNzaXZlPXRydWU7fX0pOy8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLG51bGwsb3B0cyk7fWNhdGNoKGUpe319Ly8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjt2YXIgaXNTZXJ2ZXJSZW5kZXJpbmc9ZnVuY3Rpb24gaXNTZXJ2ZXJSZW5kZXJpbmcoKXtpZihfaXNTZXJ2ZXI9PT11bmRlZmluZWQpey8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKCFpbkJyb3dzZXImJiFpbldlZXgmJnR5cGVvZiBnbG9iYWwhPT0ndW5kZWZpbmVkJyl7Ly8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4vLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG5faXNTZXJ2ZXI9Z2xvYmFsWydwcm9jZXNzJ10mJmdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WPT09J3NlcnZlcic7fWVsc2V7X2lzU2VydmVyPWZhbHNlO319cmV0dXJuIF9pc1NlcnZlcjt9Oy8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzPWluQnJvd3NlciYmd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9mdW5jdGlvbiBpc05hdGl2ZShDdG9yKXtyZXR1cm4gdHlwZW9mIEN0b3I9PT0nZnVuY3Rpb24nJiYvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKTt9dmFyIGhhc1N5bWJvbD10eXBlb2YgU3ltYm9sIT09J3VuZGVmaW5lZCcmJmlzTmF0aXZlKFN5bWJvbCkmJnR5cGVvZiBSZWZsZWN0IT09J3VuZGVmaW5lZCcmJmlzTmF0aXZlKFJlZmxlY3Qub3duS2V5cyk7dmFyIF9TZXQ7LyogaXN0YW5idWwgaWdub3JlIGlmICovIC8vICRmbG93LWRpc2FibGUtbGluZVxuaWYodHlwZW9mIFNldCE9PSd1bmRlZmluZWQnJiZpc05hdGl2ZShTZXQpKXsvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbl9TZXQ9U2V0O31lbHNley8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbl9TZXQ9LypAX19QVVJFX18qL2Z1bmN0aW9uKCl7ZnVuY3Rpb24gU2V0KCl7dGhpcy5zZXQ9T2JqZWN0LmNyZWF0ZShudWxsKTt9U2V0LnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24gaGFzKGtleSl7cmV0dXJuIHRoaXMuc2V0W2tleV09PT10cnVlO307U2V0LnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24gYWRkKGtleSl7dGhpcy5zZXRba2V5XT10cnVlO307U2V0LnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbiBjbGVhcigpe3RoaXMuc2V0PU9iamVjdC5jcmVhdGUobnVsbCk7fTtyZXR1cm4gU2V0O30oKTt9LyogICovdmFyIHdhcm49bm9vcDsvKiAgKi92YXIgdWlkPTA7LyoqXG4gICAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICAgKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICAgKi92YXIgRGVwPWZ1bmN0aW9uIERlcCgpe3RoaXMuaWQ9dWlkKys7dGhpcy5zdWJzPVtdO307RGVwLnByb3RvdHlwZS5hZGRTdWI9ZnVuY3Rpb24gYWRkU3ViKHN1Yil7dGhpcy5zdWJzLnB1c2goc3ViKTt9O0RlcC5wcm90b3R5cGUucmVtb3ZlU3ViPWZ1bmN0aW9uIHJlbW92ZVN1YihzdWIpe3JlbW92ZSh0aGlzLnN1YnMsc3ViKTt9O0RlcC5wcm90b3R5cGUuZGVwZW5kPWZ1bmN0aW9uIGRlcGVuZCgpe2lmKERlcC50YXJnZXQpe0RlcC50YXJnZXQuYWRkRGVwKHRoaXMpO319O0RlcC5wcm90b3R5cGUubm90aWZ5PWZ1bmN0aW9uIG5vdGlmeSgpey8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG52YXIgc3Vicz10aGlzLnN1YnMuc2xpY2UoKTtmb3IodmFyIGk9MCxsPXN1YnMubGVuZ3RoO2k8bDtpKyspe3N1YnNbaV0udXBkYXRlKCk7fX07Ly8gVGhlIGN1cnJlbnQgdGFyZ2V0IHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkLlxuLy8gVGhpcyBpcyBnbG9iYWxseSB1bmlxdWUgYmVjYXVzZSBvbmx5IG9uZSB3YXRjaGVyXG4vLyBjYW4gYmUgZXZhbHVhdGVkIGF0IGEgdGltZS5cbkRlcC50YXJnZXQ9bnVsbDt2YXIgdGFyZ2V0U3RhY2s9W107ZnVuY3Rpb24gcHVzaFRhcmdldCh0YXJnZXQpe3RhcmdldFN0YWNrLnB1c2godGFyZ2V0KTtEZXAudGFyZ2V0PXRhcmdldDt9ZnVuY3Rpb24gcG9wVGFyZ2V0KCl7dGFyZ2V0U3RhY2sucG9wKCk7RGVwLnRhcmdldD10YXJnZXRTdGFja1t0YXJnZXRTdGFjay5sZW5ndGgtMV07fS8qICAqL3ZhciBWTm9kZT1mdW5jdGlvbiBWTm9kZSh0YWcsZGF0YSxjaGlsZHJlbix0ZXh0LGVsbSxjb250ZXh0LGNvbXBvbmVudE9wdGlvbnMsYXN5bmNGYWN0b3J5KXt0aGlzLnRhZz10YWc7dGhpcy5kYXRhPWRhdGE7dGhpcy5jaGlsZHJlbj1jaGlsZHJlbjt0aGlzLnRleHQ9dGV4dDt0aGlzLmVsbT1lbG07dGhpcy5ucz11bmRlZmluZWQ7dGhpcy5jb250ZXh0PWNvbnRleHQ7dGhpcy5mbkNvbnRleHQ9dW5kZWZpbmVkO3RoaXMuZm5PcHRpb25zPXVuZGVmaW5lZDt0aGlzLmZuU2NvcGVJZD11bmRlZmluZWQ7dGhpcy5rZXk9ZGF0YSYmZGF0YS5rZXk7dGhpcy5jb21wb25lbnRPcHRpb25zPWNvbXBvbmVudE9wdGlvbnM7dGhpcy5jb21wb25lbnRJbnN0YW5jZT11bmRlZmluZWQ7dGhpcy5wYXJlbnQ9dW5kZWZpbmVkO3RoaXMucmF3PWZhbHNlO3RoaXMuaXNTdGF0aWM9ZmFsc2U7dGhpcy5pc1Jvb3RJbnNlcnQ9dHJ1ZTt0aGlzLmlzQ29tbWVudD1mYWxzZTt0aGlzLmlzQ2xvbmVkPWZhbHNlO3RoaXMuaXNPbmNlPWZhbHNlO3RoaXMuYXN5bmNGYWN0b3J5PWFzeW5jRmFjdG9yeTt0aGlzLmFzeW5jTWV0YT11bmRlZmluZWQ7dGhpcy5pc0FzeW5jUGxhY2Vob2xkZXI9ZmFsc2U7fTt2YXIgcHJvdG90eXBlQWNjZXNzb3JzPXtjaGlsZDp7Y29uZmlndXJhYmxlOnRydWV9fTsvLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL3Byb3RvdHlwZUFjY2Vzc29ycy5jaGlsZC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZTt9O09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFZOb2RlLnByb3RvdHlwZSxwcm90b3R5cGVBY2Nlc3NvcnMpO3ZhciBjcmVhdGVFbXB0eVZOb2RlPWZ1bmN0aW9uIGNyZWF0ZUVtcHR5Vk5vZGUodGV4dCl7aWYodGV4dD09PXZvaWQgMCl0ZXh0PScnO3ZhciBub2RlPW5ldyBWTm9kZSgpO25vZGUudGV4dD10ZXh0O25vZGUuaXNDb21tZW50PXRydWU7cmV0dXJuIG5vZGU7fTtmdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUodmFsKXtyZXR1cm4gbmV3IFZOb2RlKHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkLFN0cmluZyh2YWwpKTt9Ly8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUodm5vZGUpe3ZhciBjbG9uZWQ9bmV3IFZOb2RlKHZub2RlLnRhZyx2bm9kZS5kYXRhLC8vICM3OTc1XG4vLyBjbG9uZSBjaGlsZHJlbiBhcnJheSB0byBhdm9pZCBtdXRhdGluZyBvcmlnaW5hbCBpbiBjYXNlIG9mIGNsb25pbmdcbi8vIGEgY2hpbGQuXG52bm9kZS5jaGlsZHJlbiYmdm5vZGUuY2hpbGRyZW4uc2xpY2UoKSx2bm9kZS50ZXh0LHZub2RlLmVsbSx2bm9kZS5jb250ZXh0LHZub2RlLmNvbXBvbmVudE9wdGlvbnMsdm5vZGUuYXN5bmNGYWN0b3J5KTtjbG9uZWQubnM9dm5vZGUubnM7Y2xvbmVkLmlzU3RhdGljPXZub2RlLmlzU3RhdGljO2Nsb25lZC5rZXk9dm5vZGUua2V5O2Nsb25lZC5pc0NvbW1lbnQ9dm5vZGUuaXNDb21tZW50O2Nsb25lZC5mbkNvbnRleHQ9dm5vZGUuZm5Db250ZXh0O2Nsb25lZC5mbk9wdGlvbnM9dm5vZGUuZm5PcHRpb25zO2Nsb25lZC5mblNjb3BlSWQ9dm5vZGUuZm5TY29wZUlkO2Nsb25lZC5hc3luY01ldGE9dm5vZGUuYXN5bmNNZXRhO2Nsb25lZC5pc0Nsb25lZD10cnVlO3JldHVybiBjbG9uZWQ7fS8qXG4gICAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICAgKiBkeW5hbWljYWxseSBhY2Nlc3NpbmcgbWV0aG9kcyBvbiBBcnJheSBwcm90b3R5cGVcbiAgICovdmFyIGFycmF5UHJvdG89QXJyYXkucHJvdG90eXBlO3ZhciBhcnJheU1ldGhvZHM9T2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTt2YXIgbWV0aG9kc1RvUGF0Y2g9WydwdXNoJywncG9wJywnc2hpZnQnLCd1bnNoaWZ0Jywnc3BsaWNlJywnc29ydCcsJ3JldmVyc2UnXTsvKipcbiAgICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzXG4gICAqL21ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKXsvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2RcbnZhciBvcmlnaW5hbD1hcnJheVByb3RvW21ldGhvZF07ZGVmKGFycmF5TWV0aG9kcyxtZXRob2QsZnVuY3Rpb24gbXV0YXRvcigpe3ZhciBhcmdzPVtdLGxlbj1hcmd1bWVudHMubGVuZ3RoO3doaWxlKGxlbi0tKXthcmdzW2xlbl09YXJndW1lbnRzW2xlbl07fXZhciByZXN1bHQ9b3JpZ2luYWwuYXBwbHkodGhpcyxhcmdzKTt2YXIgb2I9dGhpcy5fX29iX187dmFyIGluc2VydGVkO3N3aXRjaChtZXRob2Qpe2Nhc2UncHVzaCc6Y2FzZSd1bnNoaWZ0JzppbnNlcnRlZD1hcmdzO2JyZWFrO2Nhc2Unc3BsaWNlJzppbnNlcnRlZD1hcmdzLnNsaWNlKDIpO2JyZWFrO31pZihpbnNlcnRlZCl7b2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTt9Ly8gbm90aWZ5IGNoYW5nZVxub2IuZGVwLm5vdGlmeSgpO3JldHVybiByZXN1bHQ7fSk7fSk7LyogICovdmFyIGFycmF5S2V5cz1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcnJheU1ldGhvZHMpOy8qKlxuICAgKiBJbiBzb21lIGNhc2VzIHdlIG1heSB3YW50IHRvIGRpc2FibGUgb2JzZXJ2YXRpb24gaW5zaWRlIGEgY29tcG9uZW50J3NcbiAgICogdXBkYXRlIGNvbXB1dGF0aW9uLlxuICAgKi92YXIgc2hvdWxkT2JzZXJ2ZT10cnVlO2Z1bmN0aW9uIHRvZ2dsZU9ic2VydmluZyh2YWx1ZSl7c2hvdWxkT2JzZXJ2ZT12YWx1ZTt9LyoqXG4gICAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICAgKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gICAqIG9iamVjdCdzIHByb3BlcnR5IGtleXMgaW50byBnZXR0ZXIvc2V0dGVycyB0aGF0XG4gICAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLlxuICAgKi92YXIgT2JzZXJ2ZXI9ZnVuY3Rpb24gT2JzZXJ2ZXIodmFsdWUpe3RoaXMudmFsdWU9dmFsdWU7dGhpcy5kZXA9bmV3IERlcCgpO3RoaXMudm1Db3VudD0wO2RlZih2YWx1ZSwnX19vYl9fJyx0aGlzKTtpZihBcnJheS5pc0FycmF5KHZhbHVlKSl7aWYoaGFzUHJvdG8pe3Byb3RvQXVnbWVudCh2YWx1ZSxhcnJheU1ldGhvZHMpO31lbHNle2NvcHlBdWdtZW50KHZhbHVlLGFycmF5TWV0aG9kcyxhcnJheUtleXMpO310aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7fWVsc2V7dGhpcy53YWxrKHZhbHVlKTt9fTsvKipcbiAgICogV2FsayB0aHJvdWdoIGFsbCBwcm9wZXJ0aWVzIGFuZCBjb252ZXJ0IHRoZW0gaW50b1xuICAgKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cbiAgICogdmFsdWUgdHlwZSBpcyBPYmplY3QuXG4gICAqL09ic2VydmVyLnByb3RvdHlwZS53YWxrPWZ1bmN0aW9uIHdhbGsob2JqKXt2YXIga2V5cz1PYmplY3Qua2V5cyhvYmopO2Zvcih2YXIgaT0wO2k8a2V5cy5sZW5ndGg7aSsrKXtkZWZpbmVSZWFjdGl2ZSQkMShvYmosa2V5c1tpXSk7fX07LyoqXG4gICAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICAgKi9PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5PWZ1bmN0aW9uIG9ic2VydmVBcnJheShpdGVtcyl7Zm9yKHZhciBpPTAsbD1pdGVtcy5sZW5ndGg7aTxsO2krKyl7b2JzZXJ2ZShpdGVtc1tpXSk7fX07Ly8gaGVscGVyc1xuLyoqXG4gICAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICAgKiB0aGUgcHJvdG90eXBlIGNoYWluIHVzaW5nIF9fcHJvdG9fX1xuICAgKi9mdW5jdGlvbiBwcm90b0F1Z21lbnQodGFyZ2V0LHNyYyl7LyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi90YXJnZXQuX19wcm90b19fPXNyYzsvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovfS8qKlxuICAgKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZ1xuICAgKiBoaWRkZW4gcHJvcGVydGllcy5cbiAgICovIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovZnVuY3Rpb24gY29weUF1Z21lbnQodGFyZ2V0LHNyYyxrZXlzKXtmb3IodmFyIGk9MCxsPWtleXMubGVuZ3RoO2k8bDtpKyspe3ZhciBrZXk9a2V5c1tpXTtkZWYodGFyZ2V0LGtleSxzcmNba2V5XSk7fX0vKipcbiAgICogQXR0ZW1wdCB0byBjcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UgZm9yIGEgdmFsdWUsXG4gICAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gICAqIG9yIHRoZSBleGlzdGluZyBvYnNlcnZlciBpZiB0aGUgdmFsdWUgYWxyZWFkeSBoYXMgb25lLlxuICAgKi9mdW5jdGlvbiBvYnNlcnZlKHZhbHVlLGFzUm9vdERhdGEpe2lmKCFpc09iamVjdCh2YWx1ZSl8fHZhbHVlIGluc3RhbmNlb2YgVk5vZGUpe3JldHVybjt9dmFyIG9iO2lmKGhhc093bih2YWx1ZSwnX19vYl9fJykmJnZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKXtvYj12YWx1ZS5fX29iX187fWVsc2UgaWYoc2hvdWxkT2JzZXJ2ZSYmIWlzU2VydmVyUmVuZGVyaW5nKCkmJihBcnJheS5pc0FycmF5KHZhbHVlKXx8aXNQbGFpbk9iamVjdCh2YWx1ZSkpJiZPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSYmIXZhbHVlLl9pc1Z1ZSl7b2I9bmV3IE9ic2VydmVyKHZhbHVlKTt9aWYoYXNSb290RGF0YSYmb2Ipe29iLnZtQ291bnQrKzt9cmV0dXJuIG9iO30vKipcbiAgICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICAgKi9mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSQkMShvYmosa2V5LHZhbCxjdXN0b21TZXR0ZXIsc2hhbGxvdyl7dmFyIGRlcD1uZXcgRGVwKCk7dmFyIHByb3BlcnR5PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLGtleSk7aWYocHJvcGVydHkmJnByb3BlcnR5LmNvbmZpZ3VyYWJsZT09PWZhbHNlKXtyZXR1cm47fS8vIGNhdGVyIGZvciBwcmUtZGVmaW5lZCBnZXR0ZXIvc2V0dGVyc1xudmFyIGdldHRlcj1wcm9wZXJ0eSYmcHJvcGVydHkuZ2V0O3ZhciBzZXR0ZXI9cHJvcGVydHkmJnByb3BlcnR5LnNldDtpZigoIWdldHRlcnx8c2V0dGVyKSYmYXJndW1lbnRzLmxlbmd0aD09PTIpe3ZhbD1vYmpba2V5XTt9dmFyIGNoaWxkT2I9IXNoYWxsb3cmJm9ic2VydmUodmFsKTtPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLGtleSx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLGdldDpmdW5jdGlvbiByZWFjdGl2ZUdldHRlcigpe3ZhciB2YWx1ZT1nZXR0ZXI/Z2V0dGVyLmNhbGwob2JqKTp2YWw7aWYoRGVwLnRhcmdldCl7ZGVwLmRlcGVuZCgpO2lmKGNoaWxkT2Ipe2NoaWxkT2IuZGVwLmRlcGVuZCgpO2lmKEFycmF5LmlzQXJyYXkodmFsdWUpKXtkZXBlbmRBcnJheSh2YWx1ZSk7fX19cmV0dXJuIHZhbHVlO30sc2V0OmZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyKG5ld1ZhbCl7dmFyIHZhbHVlPWdldHRlcj9nZXR0ZXIuY2FsbChvYmopOnZhbDsvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9pZihuZXdWYWw9PT12YWx1ZXx8bmV3VmFsIT09bmV3VmFsJiZ2YWx1ZSE9PXZhbHVlKXtyZXR1cm47fS8vICM3OTgxOiBmb3IgYWNjZXNzb3IgcHJvcGVydGllcyB3aXRob3V0IHNldHRlclxuaWYoZ2V0dGVyJiYhc2V0dGVyKXtyZXR1cm47fWlmKHNldHRlcil7c2V0dGVyLmNhbGwob2JqLG5ld1ZhbCk7fWVsc2V7dmFsPW5ld1ZhbDt9Y2hpbGRPYj0hc2hhbGxvdyYmb2JzZXJ2ZShuZXdWYWwpO2RlcC5ub3RpZnkoKTt9fSk7fS8qKlxuICAgKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAgICogdHJpZ2dlcnMgY2hhbmdlIG5vdGlmaWNhdGlvbiBpZiB0aGUgcHJvcGVydHkgZG9lc24ndFxuICAgKiBhbHJlYWR5IGV4aXN0LlxuICAgKi9mdW5jdGlvbiBzZXQodGFyZ2V0LGtleSx2YWwpe2lmKEFycmF5LmlzQXJyYXkodGFyZ2V0KSYmaXNWYWxpZEFycmF5SW5kZXgoa2V5KSl7dGFyZ2V0Lmxlbmd0aD1NYXRoLm1heCh0YXJnZXQubGVuZ3RoLGtleSk7dGFyZ2V0LnNwbGljZShrZXksMSx2YWwpO3JldHVybiB2YWw7fWlmKGtleSBpbiB0YXJnZXQmJiEoa2V5IGluIE9iamVjdC5wcm90b3R5cGUpKXt0YXJnZXRba2V5XT12YWw7cmV0dXJuIHZhbDt9dmFyIG9iPXRhcmdldC5fX29iX187aWYodGFyZ2V0Ll9pc1Z1ZXx8b2ImJm9iLnZtQ291bnQpe3JldHVybiB2YWw7fWlmKCFvYil7dGFyZ2V0W2tleV09dmFsO3JldHVybiB2YWw7fWRlZmluZVJlYWN0aXZlJCQxKG9iLnZhbHVlLGtleSx2YWwpO29iLmRlcC5ub3RpZnkoKTtyZXR1cm4gdmFsO30vKipcbiAgICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAgICovZnVuY3Rpb24gZGVsKHRhcmdldCxrZXkpe2lmKEFycmF5LmlzQXJyYXkodGFyZ2V0KSYmaXNWYWxpZEFycmF5SW5kZXgoa2V5KSl7dGFyZ2V0LnNwbGljZShrZXksMSk7cmV0dXJuO312YXIgb2I9dGFyZ2V0Ll9fb2JfXztpZih0YXJnZXQuX2lzVnVlfHxvYiYmb2Iudm1Db3VudCl7cmV0dXJuO31pZighaGFzT3duKHRhcmdldCxrZXkpKXtyZXR1cm47fWRlbGV0ZSB0YXJnZXRba2V5XTtpZighb2Ipe3JldHVybjt9b2IuZGVwLm5vdGlmeSgpO30vKipcbiAgICogQ29sbGVjdCBkZXBlbmRlbmNpZXMgb24gYXJyYXkgZWxlbWVudHMgd2hlbiB0aGUgYXJyYXkgaXMgdG91Y2hlZCwgc2luY2VcbiAgICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG4gICAqL2Z1bmN0aW9uIGRlcGVuZEFycmF5KHZhbHVlKXtmb3IodmFyIGU9dm9pZCAwLGk9MCxsPXZhbHVlLmxlbmd0aDtpPGw7aSsrKXtlPXZhbHVlW2ldO2UmJmUuX19vYl9fJiZlLl9fb2JfXy5kZXAuZGVwZW5kKCk7aWYoQXJyYXkuaXNBcnJheShlKSl7ZGVwZW5kQXJyYXkoZSk7fX19LyogICovIC8qKlxuICAgKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gICAqIGhvdyB0byBtZXJnZSBhIHBhcmVudCBvcHRpb24gdmFsdWUgYW5kIGEgY2hpbGQgb3B0aW9uXG4gICAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICAgKi92YXIgc3RyYXRzPWNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7LyoqXG4gICAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICAgKi9mdW5jdGlvbiBtZXJnZURhdGEodG8sZnJvbSl7aWYoIWZyb20pe3JldHVybiB0bzt9dmFyIGtleSx0b1ZhbCxmcm9tVmFsO3ZhciBrZXlzPWhhc1N5bWJvbD9SZWZsZWN0Lm93bktleXMoZnJvbSk6T2JqZWN0LmtleXMoZnJvbSk7Zm9yKHZhciBpPTA7aTxrZXlzLmxlbmd0aDtpKyspe2tleT1rZXlzW2ldOy8vIGluIGNhc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IG9ic2VydmVkLi4uXG5pZihrZXk9PT0nX19vYl9fJyl7Y29udGludWU7fXRvVmFsPXRvW2tleV07ZnJvbVZhbD1mcm9tW2tleV07aWYoIWhhc093bih0byxrZXkpKXtzZXQodG8sa2V5LGZyb21WYWwpO31lbHNlIGlmKHRvVmFsIT09ZnJvbVZhbCYmaXNQbGFpbk9iamVjdCh0b1ZhbCkmJmlzUGxhaW5PYmplY3QoZnJvbVZhbCkpe21lcmdlRGF0YSh0b1ZhbCxmcm9tVmFsKTt9fXJldHVybiB0bzt9LyoqXG4gICAqIERhdGFcbiAgICovZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsY2hpbGRWYWwsdm0pe2lmKCF2bSl7Ly8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnNcbmlmKCFjaGlsZFZhbCl7cmV0dXJuIHBhcmVudFZhbDt9aWYoIXBhcmVudFZhbCl7cmV0dXJuIGNoaWxkVmFsO30vLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXG4vLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbi8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXG4vLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbnJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4oKXtyZXR1cm4gbWVyZ2VEYXRhKHR5cGVvZiBjaGlsZFZhbD09PSdmdW5jdGlvbic/Y2hpbGRWYWwuY2FsbCh0aGlzLHRoaXMpOmNoaWxkVmFsLHR5cGVvZiBwYXJlbnRWYWw9PT0nZnVuY3Rpb24nP3BhcmVudFZhbC5jYWxsKHRoaXMsdGhpcyk6cGFyZW50VmFsKTt9O31lbHNle3JldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbigpey8vIGluc3RhbmNlIG1lcmdlXG52YXIgaW5zdGFuY2VEYXRhPXR5cGVvZiBjaGlsZFZhbD09PSdmdW5jdGlvbic/Y2hpbGRWYWwuY2FsbCh2bSx2bSk6Y2hpbGRWYWw7dmFyIGRlZmF1bHREYXRhPXR5cGVvZiBwYXJlbnRWYWw9PT0nZnVuY3Rpb24nP3BhcmVudFZhbC5jYWxsKHZtLHZtKTpwYXJlbnRWYWw7aWYoaW5zdGFuY2VEYXRhKXtyZXR1cm4gbWVyZ2VEYXRhKGluc3RhbmNlRGF0YSxkZWZhdWx0RGF0YSk7fWVsc2V7cmV0dXJuIGRlZmF1bHREYXRhO319O319c3RyYXRzLmRhdGE9ZnVuY3Rpb24ocGFyZW50VmFsLGNoaWxkVmFsLHZtKXtpZighdm0pe2lmKGNoaWxkVmFsJiZ0eXBlb2YgY2hpbGRWYWwhPT0nZnVuY3Rpb24nKXtyZXR1cm4gcGFyZW50VmFsO31yZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsY2hpbGRWYWwpO31yZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsY2hpbGRWYWwsdm0pO307LyoqXG4gICAqIEhvb2tzIGFuZCBwcm9wcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAgICovZnVuY3Rpb24gbWVyZ2VIb29rKHBhcmVudFZhbCxjaGlsZFZhbCl7dmFyIHJlcz1jaGlsZFZhbD9wYXJlbnRWYWw/cGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbCk6QXJyYXkuaXNBcnJheShjaGlsZFZhbCk/Y2hpbGRWYWw6W2NoaWxkVmFsXTpwYXJlbnRWYWw7cmV0dXJuIHJlcz9kZWR1cGVIb29rcyhyZXMpOnJlczt9ZnVuY3Rpb24gZGVkdXBlSG9va3MoaG9va3Mpe3ZhciByZXM9W107Zm9yKHZhciBpPTA7aTxob29rcy5sZW5ndGg7aSsrKXtpZihyZXMuaW5kZXhPZihob29rc1tpXSk9PT0tMSl7cmVzLnB1c2goaG9va3NbaV0pO319cmV0dXJuIHJlczt9TElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24oaG9vayl7c3RyYXRzW2hvb2tdPW1lcmdlSG9vazt9KTsvKipcbiAgICogQXNzZXRzXG4gICAqXG4gICAqIFdoZW4gYSB2bSBpcyBwcmVzZW50IChpbnN0YW5jZSBjcmVhdGlvbiksIHdlIG5lZWQgdG8gZG9cbiAgICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICAgKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAgICovZnVuY3Rpb24gbWVyZ2VBc3NldHMocGFyZW50VmFsLGNoaWxkVmFsLHZtLGtleSl7dmFyIHJlcz1PYmplY3QuY3JlYXRlKHBhcmVudFZhbHx8bnVsbCk7aWYoY2hpbGRWYWwpe3JldHVybiBleHRlbmQocmVzLGNoaWxkVmFsKTt9ZWxzZXtyZXR1cm4gcmVzO319QVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbih0eXBlKXtzdHJhdHNbdHlwZSsncyddPW1lcmdlQXNzZXRzO30pOy8qKlxuICAgKiBXYXRjaGVycy5cbiAgICpcbiAgICogV2F0Y2hlcnMgaGFzaGVzIHNob3VsZCBub3Qgb3ZlcndyaXRlIG9uZVxuICAgKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAgICovc3RyYXRzLndhdGNoPWZ1bmN0aW9uKHBhcmVudFZhbCxjaGlsZFZhbCx2bSxrZXkpey8vIHdvcmsgYXJvdW5kIEZpcmVmb3gncyBPYmplY3QucHJvdG90eXBlLndhdGNoLi4uXG5pZihwYXJlbnRWYWw9PT1uYXRpdmVXYXRjaCl7cGFyZW50VmFsPXVuZGVmaW5lZDt9aWYoY2hpbGRWYWw9PT1uYXRpdmVXYXRjaCl7Y2hpbGRWYWw9dW5kZWZpbmVkO30vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZighY2hpbGRWYWwpe3JldHVybiBPYmplY3QuY3JlYXRlKHBhcmVudFZhbHx8bnVsbCk7fWlmKCFwYXJlbnRWYWwpe3JldHVybiBjaGlsZFZhbDt9dmFyIHJldD17fTtleHRlbmQocmV0LHBhcmVudFZhbCk7Zm9yKHZhciBrZXkkMSBpbiBjaGlsZFZhbCl7dmFyIHBhcmVudD1yZXRba2V5JDFdO3ZhciBjaGlsZD1jaGlsZFZhbFtrZXkkMV07aWYocGFyZW50JiYhQXJyYXkuaXNBcnJheShwYXJlbnQpKXtwYXJlbnQ9W3BhcmVudF07fXJldFtrZXkkMV09cGFyZW50P3BhcmVudC5jb25jYXQoY2hpbGQpOkFycmF5LmlzQXJyYXkoY2hpbGQpP2NoaWxkOltjaGlsZF07fXJldHVybiByZXQ7fTsvKipcbiAgICogT3RoZXIgb2JqZWN0IGhhc2hlcy5cbiAgICovc3RyYXRzLnByb3BzPXN0cmF0cy5tZXRob2RzPXN0cmF0cy5pbmplY3Q9c3RyYXRzLmNvbXB1dGVkPWZ1bmN0aW9uKHBhcmVudFZhbCxjaGlsZFZhbCx2bSxrZXkpe2lmKGNoaWxkVmFsJiZcInByb2R1Y3Rpb25cIiE9PSdwcm9kdWN0aW9uJyl7YXNzZXJ0T2JqZWN0VHlwZShrZXksY2hpbGRWYWwsdm0pO31pZighcGFyZW50VmFsKXtyZXR1cm4gY2hpbGRWYWw7fXZhciByZXQ9T2JqZWN0LmNyZWF0ZShudWxsKTtleHRlbmQocmV0LHBhcmVudFZhbCk7aWYoY2hpbGRWYWwpe2V4dGVuZChyZXQsY2hpbGRWYWwpO31yZXR1cm4gcmV0O307c3RyYXRzLnByb3ZpZGU9bWVyZ2VEYXRhT3JGbjsvKipcbiAgICogRGVmYXVsdCBzdHJhdGVneS5cbiAgICovdmFyIGRlZmF1bHRTdHJhdD1mdW5jdGlvbiBkZWZhdWx0U3RyYXQocGFyZW50VmFsLGNoaWxkVmFsKXtyZXR1cm4gY2hpbGRWYWw9PT11bmRlZmluZWQ/cGFyZW50VmFsOmNoaWxkVmFsO307LyoqXG4gICAqIEVuc3VyZSBhbGwgcHJvcHMgb3B0aW9uIHN5bnRheCBhcmUgbm9ybWFsaXplZCBpbnRvIHRoZVxuICAgKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICAgKi9mdW5jdGlvbiBub3JtYWxpemVQcm9wcyhvcHRpb25zLHZtKXt2YXIgcHJvcHM9b3B0aW9ucy5wcm9wcztpZighcHJvcHMpe3JldHVybjt9dmFyIHJlcz17fTt2YXIgaSx2YWwsbmFtZTtpZihBcnJheS5pc0FycmF5KHByb3BzKSl7aT1wcm9wcy5sZW5ndGg7d2hpbGUoaS0tKXt2YWw9cHJvcHNbaV07aWYodHlwZW9mIHZhbD09PSdzdHJpbmcnKXtuYW1lPWNhbWVsaXplKHZhbCk7cmVzW25hbWVdPXt0eXBlOm51bGx9O319fWVsc2UgaWYoaXNQbGFpbk9iamVjdChwcm9wcykpe2Zvcih2YXIga2V5IGluIHByb3BzKXt2YWw9cHJvcHNba2V5XTtuYW1lPWNhbWVsaXplKGtleSk7cmVzW25hbWVdPWlzUGxhaW5PYmplY3QodmFsKT92YWw6e3R5cGU6dmFsfTt9fW9wdGlvbnMucHJvcHM9cmVzO30vKipcbiAgICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICAgKi9mdW5jdGlvbiBub3JtYWxpemVJbmplY3Qob3B0aW9ucyx2bSl7dmFyIGluamVjdD1vcHRpb25zLmluamVjdDtpZighaW5qZWN0KXtyZXR1cm47fXZhciBub3JtYWxpemVkPW9wdGlvbnMuaW5qZWN0PXt9O2lmKEFycmF5LmlzQXJyYXkoaW5qZWN0KSl7Zm9yKHZhciBpPTA7aTxpbmplY3QubGVuZ3RoO2krKyl7bm9ybWFsaXplZFtpbmplY3RbaV1dPXtmcm9tOmluamVjdFtpXX07fX1lbHNlIGlmKGlzUGxhaW5PYmplY3QoaW5qZWN0KSl7Zm9yKHZhciBrZXkgaW4gaW5qZWN0KXt2YXIgdmFsPWluamVjdFtrZXldO25vcm1hbGl6ZWRba2V5XT1pc1BsYWluT2JqZWN0KHZhbCk/ZXh0ZW5kKHtmcm9tOmtleX0sdmFsKTp7ZnJvbTp2YWx9O319fS8qKlxuICAgKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICAgKi9mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzKG9wdGlvbnMpe3ZhciBkaXJzPW9wdGlvbnMuZGlyZWN0aXZlcztpZihkaXJzKXtmb3IodmFyIGtleSBpbiBkaXJzKXt2YXIgZGVmJCQxPWRpcnNba2V5XTtpZih0eXBlb2YgZGVmJCQxPT09J2Z1bmN0aW9uJyl7ZGlyc1trZXldPXtiaW5kOmRlZiQkMSx1cGRhdGU6ZGVmJCQxfTt9fX19ZnVuY3Rpb24gYXNzZXJ0T2JqZWN0VHlwZShuYW1lLHZhbHVlLHZtKXtpZighaXNQbGFpbk9iamVjdCh2YWx1ZSkpe3dhcm4oXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcIlwiK25hbWUrXCJcXFwiOiBleHBlY3RlZCBhbiBPYmplY3QsIFwiK1wiYnV0IGdvdCBcIit0b1Jhd1R5cGUodmFsdWUpK1wiLlwiLHZtKTt9fS8qKlxuICAgKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gICAqIENvcmUgdXRpbGl0eSB1c2VkIGluIGJvdGggaW5zdGFudGlhdGlvbiBhbmQgaW5oZXJpdGFuY2UuXG4gICAqL2Z1bmN0aW9uIG1lcmdlT3B0aW9ucyhwYXJlbnQsY2hpbGQsdm0pe2lmKHR5cGVvZiBjaGlsZD09PSdmdW5jdGlvbicpe2NoaWxkPWNoaWxkLm9wdGlvbnM7fW5vcm1hbGl6ZVByb3BzKGNoaWxkKTtub3JtYWxpemVJbmplY3QoY2hpbGQpO25vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpOy8vIEFwcGx5IGV4dGVuZHMgYW5kIG1peGlucyBvbiB0aGUgY2hpbGQgb3B0aW9ucyxcbi8vIGJ1dCBvbmx5IGlmIGl0IGlzIGEgcmF3IG9wdGlvbnMgb2JqZWN0IHRoYXQgaXNuJ3Rcbi8vIHRoZSByZXN1bHQgb2YgYW5vdGhlciBtZXJnZU9wdGlvbnMgY2FsbC5cbi8vIE9ubHkgbWVyZ2VkIG9wdGlvbnMgaGFzIHRoZSBfYmFzZSBwcm9wZXJ0eS5cbmlmKCFjaGlsZC5fYmFzZSl7aWYoY2hpbGRbXCJleHRlbmRzXCJdKXtwYXJlbnQ9bWVyZ2VPcHRpb25zKHBhcmVudCxjaGlsZFtcImV4dGVuZHNcIl0sdm0pO31pZihjaGlsZC5taXhpbnMpe2Zvcih2YXIgaT0wLGw9Y2hpbGQubWl4aW5zLmxlbmd0aDtpPGw7aSsrKXtwYXJlbnQ9bWVyZ2VPcHRpb25zKHBhcmVudCxjaGlsZC5taXhpbnNbaV0sdm0pO319fXZhciBvcHRpb25zPXt9O3ZhciBrZXk7Zm9yKGtleSBpbiBwYXJlbnQpe21lcmdlRmllbGQoa2V5KTt9Zm9yKGtleSBpbiBjaGlsZCl7aWYoIWhhc093bihwYXJlbnQsa2V5KSl7bWVyZ2VGaWVsZChrZXkpO319ZnVuY3Rpb24gbWVyZ2VGaWVsZChrZXkpe3ZhciBzdHJhdD1zdHJhdHNba2V5XXx8ZGVmYXVsdFN0cmF0O29wdGlvbnNba2V5XT1zdHJhdChwYXJlbnRba2V5XSxjaGlsZFtrZXldLHZtLGtleSk7fXJldHVybiBvcHRpb25zO30vKipcbiAgICogUmVzb2x2ZSBhbiBhc3NldC5cbiAgICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJlY2F1c2UgY2hpbGQgaW5zdGFuY2VzIG5lZWQgYWNjZXNzXG4gICAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi5cbiAgICovZnVuY3Rpb24gcmVzb2x2ZUFzc2V0KG9wdGlvbnMsdHlwZSxpZCx3YXJuTWlzc2luZyl7LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYodHlwZW9mIGlkIT09J3N0cmluZycpe3JldHVybjt9dmFyIGFzc2V0cz1vcHRpb25zW3R5cGVdOy8vIGNoZWNrIGxvY2FsIHJlZ2lzdHJhdGlvbiB2YXJpYXRpb25zIGZpcnN0XG5pZihoYXNPd24oYXNzZXRzLGlkKSl7cmV0dXJuIGFzc2V0c1tpZF07fXZhciBjYW1lbGl6ZWRJZD1jYW1lbGl6ZShpZCk7aWYoaGFzT3duKGFzc2V0cyxjYW1lbGl6ZWRJZCkpe3JldHVybiBhc3NldHNbY2FtZWxpemVkSWRdO312YXIgUGFzY2FsQ2FzZUlkPWNhcGl0YWxpemUoY2FtZWxpemVkSWQpO2lmKGhhc093bihhc3NldHMsUGFzY2FsQ2FzZUlkKSl7cmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdO30vLyBmYWxsYmFjayB0byBwcm90b3R5cGUgY2hhaW5cbnZhciByZXM9YXNzZXRzW2lkXXx8YXNzZXRzW2NhbWVsaXplZElkXXx8YXNzZXRzW1Bhc2NhbENhc2VJZF07cmV0dXJuIHJlczt9LyogICovZnVuY3Rpb24gdmFsaWRhdGVQcm9wKGtleSxwcm9wT3B0aW9ucyxwcm9wc0RhdGEsdm0pe3ZhciBwcm9wPXByb3BPcHRpb25zW2tleV07dmFyIGFic2VudD0haGFzT3duKHByb3BzRGF0YSxrZXkpO3ZhciB2YWx1ZT1wcm9wc0RhdGFba2V5XTsvLyBib29sZWFuIGNhc3RpbmdcbnZhciBib29sZWFuSW5kZXg9Z2V0VHlwZUluZGV4KEJvb2xlYW4scHJvcC50eXBlKTtpZihib29sZWFuSW5kZXg+LTEpe2lmKGFic2VudCYmIWhhc093bihwcm9wLCdkZWZhdWx0Jykpe3ZhbHVlPWZhbHNlO31lbHNlIGlmKHZhbHVlPT09Jyd8fHZhbHVlPT09aHlwaGVuYXRlKGtleSkpey8vIG9ubHkgY2FzdCBlbXB0eSBzdHJpbmcgLyBzYW1lIG5hbWUgdG8gYm9vbGVhbiBpZlxuLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG52YXIgc3RyaW5nSW5kZXg9Z2V0VHlwZUluZGV4KFN0cmluZyxwcm9wLnR5cGUpO2lmKHN0cmluZ0luZGV4PDB8fGJvb2xlYW5JbmRleDxzdHJpbmdJbmRleCl7dmFsdWU9dHJ1ZTt9fX0vLyBjaGVjayBkZWZhdWx0IHZhbHVlXG5pZih2YWx1ZT09PXVuZGVmaW5lZCl7dmFsdWU9Z2V0UHJvcERlZmF1bHRWYWx1ZSh2bSxwcm9wLGtleSk7Ly8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG52YXIgcHJldlNob3VsZE9ic2VydmU9c2hvdWxkT2JzZXJ2ZTt0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7b2JzZXJ2ZSh2YWx1ZSk7dG9nZ2xlT2JzZXJ2aW5nKHByZXZTaG91bGRPYnNlcnZlKTt9cmV0dXJuIHZhbHVlO30vKipcbiAgICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAgICovZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSxwcm9wLGtleSl7Ly8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuaWYoIWhhc093bihwcm9wLCdkZWZhdWx0Jykpe3JldHVybiB1bmRlZmluZWQ7fXZhciBkZWY9cHJvcFtcImRlZmF1bHRcIl07Ly8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbi8vIHJldHVybiBwcmV2aW91cyBkZWZhdWx0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhdGNoZXIgdHJpZ2dlclxuaWYodm0mJnZtLiRvcHRpb25zLnByb3BzRGF0YSYmdm0uJG9wdGlvbnMucHJvcHNEYXRhW2tleV09PT11bmRlZmluZWQmJnZtLl9wcm9wc1trZXldIT09dW5kZWZpbmVkKXtyZXR1cm4gdm0uX3Byb3BzW2tleV07fS8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzXG4vLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG5yZXR1cm4gdHlwZW9mIGRlZj09PSdmdW5jdGlvbicmJmdldFR5cGUocHJvcC50eXBlKSE9PSdGdW5jdGlvbic/ZGVmLmNhbGwodm0pOmRlZjt9LyoqXG4gICAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAgICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gICAqIGFjcm9zcyBkaWZmZXJlbnQgdm1zIC8gaWZyYW1lcy5cbiAgICovZnVuY3Rpb24gZ2V0VHlwZShmbil7dmFyIG1hdGNoPWZuJiZmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO3JldHVybiBtYXRjaD9tYXRjaFsxXTonJzt9ZnVuY3Rpb24gaXNTYW1lVHlwZShhLGIpe3JldHVybiBnZXRUeXBlKGEpPT09Z2V0VHlwZShiKTt9ZnVuY3Rpb24gZ2V0VHlwZUluZGV4KHR5cGUsZXhwZWN0ZWRUeXBlcyl7aWYoIUFycmF5LmlzQXJyYXkoZXhwZWN0ZWRUeXBlcykpe3JldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsdHlwZSk/MDotMTt9Zm9yKHZhciBpPTAsbGVuPWV4cGVjdGVkVHlwZXMubGVuZ3RoO2k8bGVuO2krKyl7aWYoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLHR5cGUpKXtyZXR1cm4gaTt9fXJldHVybi0xO30vKiAgKi9mdW5jdGlvbiBoYW5kbGVFcnJvcihlcnIsdm0saW5mbyl7Ly8gRGVhY3RpdmF0ZSBkZXBzIHRyYWNraW5nIHdoaWxlIHByb2Nlc3NpbmcgZXJyb3IgaGFuZGxlciB0byBhdm9pZCBwb3NzaWJsZSBpbmZpbml0ZSByZW5kZXJpbmcuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWV4L2lzc3Vlcy8xNTA1XG5wdXNoVGFyZ2V0KCk7dHJ5e2lmKHZtKXt2YXIgY3VyPXZtO3doaWxlKGN1cj1jdXIuJHBhcmVudCl7dmFyIGhvb2tzPWN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO2lmKGhvb2tzKXtmb3IodmFyIGk9MDtpPGhvb2tzLmxlbmd0aDtpKyspe3RyeXt2YXIgY2FwdHVyZT1ob29rc1tpXS5jYWxsKGN1cixlcnIsdm0saW5mbyk9PT1mYWxzZTtpZihjYXB0dXJlKXtyZXR1cm47fX1jYXRjaChlKXtnbG9iYWxIYW5kbGVFcnJvcihlLGN1ciwnZXJyb3JDYXB0dXJlZCBob29rJyk7fX19fX1nbG9iYWxIYW5kbGVFcnJvcihlcnIsdm0saW5mbyk7fWZpbmFsbHl7cG9wVGFyZ2V0KCk7fX1mdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhoYW5kbGVyLGNvbnRleHQsYXJncyx2bSxpbmZvKXt2YXIgcmVzO3RyeXtyZXM9YXJncz9oYW5kbGVyLmFwcGx5KGNvbnRleHQsYXJncyk6aGFuZGxlci5jYWxsKGNvbnRleHQpO2lmKHJlcyYmIXJlcy5faXNWdWUmJmlzUHJvbWlzZShyZXMpJiYhcmVzLl9oYW5kbGVkKXtyZXNbXCJjYXRjaFwiXShmdW5jdGlvbihlKXtyZXR1cm4gaGFuZGxlRXJyb3IoZSx2bSxpbmZvK1wiIChQcm9taXNlL2FzeW5jKVwiKTt9KTsvLyBpc3N1ZSAjOTUxMVxuLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxsc1xucmVzLl9oYW5kbGVkPXRydWU7fX1jYXRjaChlKXtoYW5kbGVFcnJvcihlLHZtLGluZm8pO31yZXR1cm4gcmVzO31mdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvcihlcnIsdm0saW5mbyl7aWYoY29uZmlnLmVycm9ySGFuZGxlcil7dHJ5e3JldHVybiBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCxlcnIsdm0saW5mbyk7fWNhdGNoKGUpey8vIGlmIHRoZSB1c2VyIGludGVudGlvbmFsbHkgdGhyb3dzIHRoZSBvcmlnaW5hbCBlcnJvciBpbiB0aGUgaGFuZGxlcixcbi8vIGRvIG5vdCBsb2cgaXQgdHdpY2VcbmlmKGUhPT1lcnIpe2xvZ0Vycm9yKGUpO319fWxvZ0Vycm9yKGVycik7fWZ1bmN0aW9uIGxvZ0Vycm9yKGVycix2bSxpbmZvKXsvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL2lmKChpbkJyb3dzZXJ8fGluV2VleCkmJnR5cGVvZiBjb25zb2xlIT09J3VuZGVmaW5lZCcpe2NvbnNvbGUuZXJyb3IoZXJyKTt9ZWxzZXt0aHJvdyBlcnI7fX0vKiAgKi92YXIgaXNVc2luZ01pY3JvVGFzaz1mYWxzZTt2YXIgY2FsbGJhY2tzPVtdO3ZhciBwZW5kaW5nPWZhbHNlO2Z1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzKCl7cGVuZGluZz1mYWxzZTt2YXIgY29waWVzPWNhbGxiYWNrcy5zbGljZSgwKTtjYWxsYmFja3MubGVuZ3RoPTA7Zm9yKHZhciBpPTA7aTxjb3BpZXMubGVuZ3RoO2krKyl7Y29waWVzW2ldKCk7fX0vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIG1pY3JvdGFza3MuXG4vLyBJbiAyLjUgd2UgdXNlZCAobWFjcm8pIHRhc2tzIChpbiBjb21iaW5hdGlvbiB3aXRoIG1pY3JvdGFza3MpLlxuLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbi8vIChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLlxuLy8gQWxzbywgdXNpbmcgKG1hY3JvKSB0YXNrcyBpbiBldmVudCBoYW5kbGVyIHdvdWxkIGNhdXNlIHNvbWUgd2VpcmQgYmVoYXZpb3JzXG4vLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbi8vIFNvIHdlIG5vdyB1c2UgbWljcm90YXNrcyBldmVyeXdoZXJlLCBhZ2Fpbi5cbi8vIEEgbWFqb3IgZHJhd2JhY2sgb2YgdGhpcyB0cmFkZW9mZiBpcyB0aGF0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvc1xuLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTAsIHdoaWNoIGhhdmUgd29ya2Fyb3VuZHMpXG4vLyBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWUgZXZlbnQgKCM2NTY2KS5cbnZhciB0aW1lckZ1bmM7Ly8gVGhlIG5leHRUaWNrIGJlaGF2aW9yIGxldmVyYWdlcyB0aGUgbWljcm90YXNrIHF1ZXVlLCB3aGljaCBjYW4gYmUgYWNjZXNzZWRcbi8vIHZpYSBlaXRoZXIgbmF0aXZlIFByb21pc2UudGhlbiBvciBNdXRhdGlvbk9ic2VydmVyLlxuLy8gTXV0YXRpb25PYnNlcnZlciBoYXMgd2lkZXIgc3VwcG9ydCwgaG93ZXZlciBpdCBpcyBzZXJpb3VzbHkgYnVnZ2VkIGluXG4vLyBVSVdlYlZpZXcgaW4gaU9TID49IDkuMy4zIHdoZW4gdHJpZ2dlcmVkIGluIHRvdWNoIGV2ZW50IGhhbmRsZXJzLiBJdFxuLy8gY29tcGxldGVseSBzdG9wcyB3b3JraW5nIGFmdGVyIHRyaWdnZXJpbmcgYSBmZXcgdGltZXMuLi4gc28sIGlmIG5hdGl2ZVxuLy8gUHJvbWlzZSBpcyBhdmFpbGFibGUsIHdlIHdpbGwgdXNlIGl0OlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQsICRmbG93LWRpc2FibGUtbGluZSAqL2lmKHR5cGVvZiBQcm9taXNlIT09J3VuZGVmaW5lZCcmJmlzTmF0aXZlKFByb21pc2UpKXt2YXIgcD1Qcm9taXNlLnJlc29sdmUoKTt0aW1lckZ1bmM9ZnVuY3Rpb24gdGltZXJGdW5jKCl7cC50aGVuKGZsdXNoQ2FsbGJhY2tzKTsvLyBJbiBwcm9ibGVtYXRpYyBVSVdlYlZpZXdzLCBQcm9taXNlLnRoZW4gZG9lc24ndCBjb21wbGV0ZWx5IGJyZWFrLCBidXRcbi8vIGl0IGNhbiBnZXQgc3R1Y2sgaW4gYSB3ZWlyZCBzdGF0ZSB3aGVyZSBjYWxsYmFja3MgYXJlIHB1c2hlZCBpbnRvIHRoZVxuLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbi8vIG5lZWRzIHRvIGRvIHNvbWUgb3RoZXIgd29yaywgZS5nLiBoYW5kbGUgYSB0aW1lci4gVGhlcmVmb3JlIHdlIGNhblxuLy8gXCJmb3JjZVwiIHRoZSBtaWNyb3Rhc2sgcXVldWUgdG8gYmUgZmx1c2hlZCBieSBhZGRpbmcgYW4gZW1wdHkgdGltZXIuXG5pZihpc0lPUyl7c2V0VGltZW91dChub29wKTt9fTtpc1VzaW5nTWljcm9UYXNrPXRydWU7fWVsc2UgaWYoIWlzSUUmJnR5cGVvZiBNdXRhdGlvbk9ic2VydmVyIT09J3VuZGVmaW5lZCcmJihpc05hdGl2ZShNdXRhdGlvbk9ic2VydmVyKXx8Ly8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG5NdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCk9PT0nW29iamVjdCBNdXRhdGlvbk9ic2VydmVyQ29uc3RydWN0b3JdJykpey8vIFVzZSBNdXRhdGlvbk9ic2VydmVyIHdoZXJlIG5hdGl2ZSBQcm9taXNlIGlzIG5vdCBhdmFpbGFibGUsXG4vLyBlLmcuIFBoYW50b21KUywgaU9TNywgQW5kcm9pZCA0LjRcbi8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbnZhciBjb3VudGVyPTE7dmFyIG9ic2VydmVyPW5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoQ2FsbGJhY2tzKTt2YXIgdGV4dE5vZGU9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKGNvdW50ZXIpKTtvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLHtjaGFyYWN0ZXJEYXRhOnRydWV9KTt0aW1lckZ1bmM9ZnVuY3Rpb24gdGltZXJGdW5jKCl7Y291bnRlcj0oY291bnRlcisxKSUyO3RleHROb2RlLmRhdGE9U3RyaW5nKGNvdW50ZXIpO307aXNVc2luZ01pY3JvVGFzaz10cnVlO31lbHNlIGlmKHR5cGVvZiBzZXRJbW1lZGlhdGUhPT0ndW5kZWZpbmVkJyYmaXNOYXRpdmUoc2V0SW1tZWRpYXRlKSl7Ly8gRmFsbGJhY2sgdG8gc2V0SW1tZWRpYXRlLlxuLy8gVGVjaGluaWNhbGx5IGl0IGxldmVyYWdlcyB0aGUgKG1hY3JvKSB0YXNrIHF1ZXVlLFxuLy8gYnV0IGl0IGlzIHN0aWxsIGEgYmV0dGVyIGNob2ljZSB0aGFuIHNldFRpbWVvdXQuXG50aW1lckZ1bmM9ZnVuY3Rpb24gdGltZXJGdW5jKCl7c2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTt9O31lbHNley8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXG50aW1lckZ1bmM9ZnVuY3Rpb24gdGltZXJGdW5jKCl7c2V0VGltZW91dChmbHVzaENhbGxiYWNrcywwKTt9O31mdW5jdGlvbiBuZXh0VGljayhjYixjdHgpe3ZhciBfcmVzb2x2ZTtjYWxsYmFja3MucHVzaChmdW5jdGlvbigpe2lmKGNiKXt0cnl7Y2IuY2FsbChjdHgpO31jYXRjaChlKXtoYW5kbGVFcnJvcihlLGN0eCwnbmV4dFRpY2snKTt9fWVsc2UgaWYoX3Jlc29sdmUpe19yZXNvbHZlKGN0eCk7fX0pO2lmKCFwZW5kaW5nKXtwZW5kaW5nPXRydWU7dGltZXJGdW5jKCk7fS8vICRmbG93LWRpc2FibGUtbGluZVxuaWYoIWNiJiZ0eXBlb2YgUHJvbWlzZSE9PSd1bmRlZmluZWQnKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSl7X3Jlc29sdmU9cmVzb2x2ZTt9KTt9fS8qICAqL3ZhciBzZWVuT2JqZWN0cz1uZXcgX1NldCgpOy8qKlxuICAgKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSBhbiBvYmplY3QgdG8gZXZva2UgYWxsIGNvbnZlcnRlZFxuICAgKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdFxuICAgKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICAgKi9mdW5jdGlvbiB0cmF2ZXJzZSh2YWwpe190cmF2ZXJzZSh2YWwsc2Vlbk9iamVjdHMpO3NlZW5PYmplY3RzLmNsZWFyKCk7fWZ1bmN0aW9uIF90cmF2ZXJzZSh2YWwsc2Vlbil7dmFyIGksa2V5czt2YXIgaXNBPUFycmF5LmlzQXJyYXkodmFsKTtpZighaXNBJiYhaXNPYmplY3QodmFsKXx8T2JqZWN0LmlzRnJvemVuKHZhbCl8fHZhbCBpbnN0YW5jZW9mIFZOb2RlKXtyZXR1cm47fWlmKHZhbC5fX29iX18pe3ZhciBkZXBJZD12YWwuX19vYl9fLmRlcC5pZDtpZihzZWVuLmhhcyhkZXBJZCkpe3JldHVybjt9c2Vlbi5hZGQoZGVwSWQpO31pZihpc0Epe2k9dmFsLmxlbmd0aDt3aGlsZShpLS0pe190cmF2ZXJzZSh2YWxbaV0sc2Vlbik7fX1lbHNle2tleXM9T2JqZWN0LmtleXModmFsKTtpPWtleXMubGVuZ3RoO3doaWxlKGktLSl7X3RyYXZlcnNlKHZhbFtrZXlzW2ldXSxzZWVuKTt9fX0vKiAgKi92YXIgbm9ybWFsaXplRXZlbnQ9Y2FjaGVkKGZ1bmN0aW9uKG5hbWUpe3ZhciBwYXNzaXZlPW5hbWUuY2hhckF0KDApPT09JyYnO25hbWU9cGFzc2l2ZT9uYW1lLnNsaWNlKDEpOm5hbWU7dmFyIG9uY2UkJDE9bmFtZS5jaGFyQXQoMCk9PT0nfic7Ly8gUHJlZml4ZWQgbGFzdCwgY2hlY2tlZCBmaXJzdFxubmFtZT1vbmNlJCQxP25hbWUuc2xpY2UoMSk6bmFtZTt2YXIgY2FwdHVyZT1uYW1lLmNoYXJBdCgwKT09PSchJztuYW1lPWNhcHR1cmU/bmFtZS5zbGljZSgxKTpuYW1lO3JldHVybntuYW1lOm5hbWUsb25jZTpvbmNlJCQxLGNhcHR1cmU6Y2FwdHVyZSxwYXNzaXZlOnBhc3NpdmV9O30pO2Z1bmN0aW9uIGNyZWF0ZUZuSW52b2tlcihmbnMsdm0pe2Z1bmN0aW9uIGludm9rZXIoKXt2YXIgYXJndW1lbnRzJDE9YXJndW1lbnRzO3ZhciBmbnM9aW52b2tlci5mbnM7aWYoQXJyYXkuaXNBcnJheShmbnMpKXt2YXIgY2xvbmVkPWZucy5zbGljZSgpO2Zvcih2YXIgaT0wO2k8Y2xvbmVkLmxlbmd0aDtpKyspe2ludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNsb25lZFtpXSxudWxsLGFyZ3VtZW50cyQxLHZtLFwidi1vbiBoYW5kbGVyXCIpO319ZWxzZXsvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xucmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZucyxudWxsLGFyZ3VtZW50cyx2bSxcInYtb24gaGFuZGxlclwiKTt9fWludm9rZXIuZm5zPWZucztyZXR1cm4gaW52b2tlcjt9ZnVuY3Rpb24gdXBkYXRlTGlzdGVuZXJzKG9uLG9sZE9uLGFkZCxyZW1vdmUkJDEsY3JlYXRlT25jZUhhbmRsZXIsdm0pe3ZhciBuYW1lLGRlZiQkMSxjdXIsb2xkLGV2ZW50O2ZvcihuYW1lIGluIG9uKXtkZWYkJDE9Y3VyPW9uW25hbWVdO29sZD1vbGRPbltuYW1lXTtldmVudD1ub3JtYWxpemVFdmVudChuYW1lKTtpZihpc1VuZGVmKGN1cikpO2Vsc2UgaWYoaXNVbmRlZihvbGQpKXtpZihpc1VuZGVmKGN1ci5mbnMpKXtjdXI9b25bbmFtZV09Y3JlYXRlRm5JbnZva2VyKGN1cix2bSk7fWlmKGlzVHJ1ZShldmVudC5vbmNlKSl7Y3VyPW9uW25hbWVdPWNyZWF0ZU9uY2VIYW5kbGVyKGV2ZW50Lm5hbWUsY3VyLGV2ZW50LmNhcHR1cmUpO31hZGQoZXZlbnQubmFtZSxjdXIsZXZlbnQuY2FwdHVyZSxldmVudC5wYXNzaXZlLGV2ZW50LnBhcmFtcyk7fWVsc2UgaWYoY3VyIT09b2xkKXtvbGQuZm5zPWN1cjtvbltuYW1lXT1vbGQ7fX1mb3IobmFtZSBpbiBvbGRPbil7aWYoaXNVbmRlZihvbltuYW1lXSkpe2V2ZW50PW5vcm1hbGl6ZUV2ZW50KG5hbWUpO3JlbW92ZSQkMShldmVudC5uYW1lLG9sZE9uW25hbWVdLGV2ZW50LmNhcHR1cmUpO319fS8qICAqL2Z1bmN0aW9uIG1lcmdlVk5vZGVIb29rKGRlZixob29rS2V5LGhvb2spe2lmKGRlZiBpbnN0YW5jZW9mIFZOb2RlKXtkZWY9ZGVmLmRhdGEuaG9va3x8KGRlZi5kYXRhLmhvb2s9e30pO312YXIgaW52b2tlcjt2YXIgb2xkSG9vaz1kZWZbaG9va0tleV07ZnVuY3Rpb24gd3JhcHBlZEhvb2soKXtob29rLmFwcGx5KHRoaXMsYXJndW1lbnRzKTsvLyBpbXBvcnRhbnQ6IHJlbW92ZSBtZXJnZWQgaG9vayB0byBlbnN1cmUgaXQncyBjYWxsZWQgb25seSBvbmNlXG4vLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xucmVtb3ZlKGludm9rZXIuZm5zLHdyYXBwZWRIb29rKTt9aWYoaXNVbmRlZihvbGRIb29rKSl7Ly8gbm8gZXhpc3RpbmcgaG9va1xuaW52b2tlcj1jcmVhdGVGbkludm9rZXIoW3dyYXBwZWRIb29rXSk7fWVsc2V7LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYoaXNEZWYob2xkSG9vay5mbnMpJiZpc1RydWUob2xkSG9vay5tZXJnZWQpKXsvLyBhbHJlYWR5IGEgbWVyZ2VkIGludm9rZXJcbmludm9rZXI9b2xkSG9vaztpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTt9ZWxzZXsvLyBleGlzdGluZyBwbGFpbiBob29rXG5pbnZva2VyPWNyZWF0ZUZuSW52b2tlcihbb2xkSG9vayx3cmFwcGVkSG9va10pO319aW52b2tlci5tZXJnZWQ9dHJ1ZTtkZWZbaG9va0tleV09aW52b2tlcjt9LyogICovZnVuY3Rpb24gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YShkYXRhLEN0b3IsdGFnKXsvLyB3ZSBhcmUgb25seSBleHRyYWN0aW5nIHJhdyB2YWx1ZXMgaGVyZS5cbi8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuLy8gY29tcG9uZW50IGl0c2VsZi5cbnZhciBwcm9wT3B0aW9ucz1DdG9yLm9wdGlvbnMucHJvcHM7aWYoaXNVbmRlZihwcm9wT3B0aW9ucykpe3JldHVybjt9dmFyIHJlcz17fTt2YXIgYXR0cnM9ZGF0YS5hdHRyczt2YXIgcHJvcHM9ZGF0YS5wcm9wcztpZihpc0RlZihhdHRycyl8fGlzRGVmKHByb3BzKSl7Zm9yKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpe3ZhciBhbHRLZXk9aHlwaGVuYXRlKGtleSk7Y2hlY2tQcm9wKHJlcyxwcm9wcyxrZXksYWx0S2V5LHRydWUpfHxjaGVja1Byb3AocmVzLGF0dHJzLGtleSxhbHRLZXksZmFsc2UpO319cmV0dXJuIHJlczt9ZnVuY3Rpb24gY2hlY2tQcm9wKHJlcyxoYXNoLGtleSxhbHRLZXkscHJlc2VydmUpe2lmKGlzRGVmKGhhc2gpKXtpZihoYXNPd24oaGFzaCxrZXkpKXtyZXNba2V5XT1oYXNoW2tleV07aWYoIXByZXNlcnZlKXtkZWxldGUgaGFzaFtrZXldO31yZXR1cm4gdHJ1ZTt9ZWxzZSBpZihoYXNPd24oaGFzaCxhbHRLZXkpKXtyZXNba2V5XT1oYXNoW2FsdEtleV07aWYoIXByZXNlcnZlKXtkZWxldGUgaGFzaFthbHRLZXldO31yZXR1cm4gdHJ1ZTt9fXJldHVybiBmYWxzZTt9LyogICovIC8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuLy8gMS4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29tcG9uZW50cyAtIGJlY2F1c2UgYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxuLy8gbWF5IHJldHVybiBhbiBBcnJheSBpbnN0ZWFkIG9mIGEgc2luZ2xlIHJvb3QuIEluIHRoaXMgY2FzZSwganVzdCBhIHNpbXBsZVxuLy8gbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQgLSBpZiBhbnkgY2hpbGQgaXMgYW4gQXJyYXksIHdlIGZsYXR0ZW4gdGhlIHdob2xlXG4vLyB0aGluZyB3aXRoIEFycmF5LnByb3RvdHlwZS5jb25jYXQuIEl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgb25seSAxLWxldmVsIGRlZXBcbi8vIGJlY2F1c2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIGFscmVhZHkgbm9ybWFsaXplIHRoZWlyIG93biBjaGlsZHJlbi5cbmZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKXtmb3IodmFyIGk9MDtpPGNoaWxkcmVuLmxlbmd0aDtpKyspe2lmKEFycmF5LmlzQXJyYXkoY2hpbGRyZW5baV0pKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSxjaGlsZHJlbik7fX1yZXR1cm4gY2hpbGRyZW47fS8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pe3JldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbik/W2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildOkFycmF5LmlzQXJyYXkoY2hpbGRyZW4pP25vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4pOnVuZGVmaW5lZDt9ZnVuY3Rpb24gaXNUZXh0Tm9kZShub2RlKXtyZXR1cm4gaXNEZWYobm9kZSkmJmlzRGVmKG5vZGUudGV4dCkmJmlzRmFsc2Uobm9kZS5pc0NvbW1lbnQpO31mdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuLG5lc3RlZEluZGV4KXt2YXIgcmVzPVtdO3ZhciBpLGMsbGFzdEluZGV4LGxhc3Q7Zm9yKGk9MDtpPGNoaWxkcmVuLmxlbmd0aDtpKyspe2M9Y2hpbGRyZW5baV07aWYoaXNVbmRlZihjKXx8dHlwZW9mIGM9PT0nYm9vbGVhbicpe2NvbnRpbnVlO31sYXN0SW5kZXg9cmVzLmxlbmd0aC0xO2xhc3Q9cmVzW2xhc3RJbmRleF07Ly8gIG5lc3RlZFxuaWYoQXJyYXkuaXNBcnJheShjKSl7aWYoYy5sZW5ndGg+MCl7Yz1ub3JtYWxpemVBcnJheUNoaWxkcmVuKGMsKG5lc3RlZEluZGV4fHwnJykrXCJfXCIraSk7Ly8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuaWYoaXNUZXh0Tm9kZShjWzBdKSYmaXNUZXh0Tm9kZShsYXN0KSl7cmVzW2xhc3RJbmRleF09Y3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCtjWzBdLnRleHQpO2Muc2hpZnQoKTt9cmVzLnB1c2guYXBwbHkocmVzLGMpO319ZWxzZSBpZihpc1ByaW1pdGl2ZShjKSl7aWYoaXNUZXh0Tm9kZShsYXN0KSl7Ly8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuLy8gZXNzZW50aWFsbHkgbWVyZ2VkIHdoZW4gcmVuZGVyZWQgdG8gSFRNTCBzdHJpbmdzXG5yZXNbbGFzdEluZGV4XT1jcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0K2MpO31lbHNlIGlmKGMhPT0nJyl7Ly8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGVcbnJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7fX1lbHNle2lmKGlzVGV4dE5vZGUoYykmJmlzVGV4dE5vZGUobGFzdCkpey8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbnJlc1tsYXN0SW5kZXhdPWNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQrYy50ZXh0KTt9ZWxzZXsvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuaWYoaXNUcnVlKGNoaWxkcmVuLl9pc1ZMaXN0KSYmaXNEZWYoYy50YWcpJiZpc1VuZGVmKGMua2V5KSYmaXNEZWYobmVzdGVkSW5kZXgpKXtjLmtleT1cIl9fdmxpc3RcIituZXN0ZWRJbmRleCtcIl9cIitpK1wiX19cIjt9cmVzLnB1c2goYyk7fX19cmV0dXJuIHJlczt9LyogICovZnVuY3Rpb24gaW5pdFByb3ZpZGUodm0pe3ZhciBwcm92aWRlPXZtLiRvcHRpb25zLnByb3ZpZGU7aWYocHJvdmlkZSl7dm0uX3Byb3ZpZGVkPXR5cGVvZiBwcm92aWRlPT09J2Z1bmN0aW9uJz9wcm92aWRlLmNhbGwodm0pOnByb3ZpZGU7fX1mdW5jdGlvbiBpbml0SW5qZWN0aW9ucyh2bSl7dmFyIHJlc3VsdD1yZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCx2bSk7aWYocmVzdWx0KXt0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO09iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbihrZXkpey8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICove2RlZmluZVJlYWN0aXZlJCQxKHZtLGtleSxyZXN1bHRba2V5XSk7fX0pO3RvZ2dsZU9ic2VydmluZyh0cnVlKTt9fWZ1bmN0aW9uIHJlc29sdmVJbmplY3QoaW5qZWN0LHZtKXtpZihpbmplY3Qpey8vIGluamVjdCBpcyA6YW55IGJlY2F1c2UgZmxvdyBpcyBub3Qgc21hcnQgZW5vdWdoIHRvIGZpZ3VyZSBvdXQgY2FjaGVkXG52YXIgcmVzdWx0PU9iamVjdC5jcmVhdGUobnVsbCk7dmFyIGtleXM9aGFzU3ltYm9sP1JlZmxlY3Qub3duS2V5cyhpbmplY3QpOk9iamVjdC5rZXlzKGluamVjdCk7Zm9yKHZhciBpPTA7aTxrZXlzLmxlbmd0aDtpKyspe3ZhciBrZXk9a2V5c1tpXTsvLyAjNjU3NCBpbiBjYXNlIHRoZSBpbmplY3Qgb2JqZWN0IGlzIG9ic2VydmVkLi4uXG5pZihrZXk9PT0nX19vYl9fJyl7Y29udGludWU7fXZhciBwcm92aWRlS2V5PWluamVjdFtrZXldLmZyb207dmFyIHNvdXJjZT12bTt3aGlsZShzb3VyY2Upe2lmKHNvdXJjZS5fcHJvdmlkZWQmJmhhc093bihzb3VyY2UuX3Byb3ZpZGVkLHByb3ZpZGVLZXkpKXtyZXN1bHRba2V5XT1zb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO2JyZWFrO31zb3VyY2U9c291cmNlLiRwYXJlbnQ7fWlmKCFzb3VyY2Upe2lmKCdkZWZhdWx0J2luIGluamVjdFtrZXldKXt2YXIgcHJvdmlkZURlZmF1bHQ9aW5qZWN0W2tleV1bXCJkZWZhdWx0XCJdO3Jlc3VsdFtrZXldPXR5cGVvZiBwcm92aWRlRGVmYXVsdD09PSdmdW5jdGlvbic/cHJvdmlkZURlZmF1bHQuY2FsbCh2bSk6cHJvdmlkZURlZmF1bHQ7fX19cmV0dXJuIHJlc3VsdDt9fS8qICAqLyAvKipcbiAgICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyByYXcgY2hpbGRyZW4gVk5vZGVzIGludG8gYSBzbG90IG9iamVjdC5cbiAgICovZnVuY3Rpb24gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLGNvbnRleHQpe2lmKCFjaGlsZHJlbnx8IWNoaWxkcmVuLmxlbmd0aCl7cmV0dXJue307fXZhciBzbG90cz17fTtmb3IodmFyIGk9MCxsPWNoaWxkcmVuLmxlbmd0aDtpPGw7aSsrKXt2YXIgY2hpbGQ9Y2hpbGRyZW5baV07dmFyIGRhdGE9Y2hpbGQuZGF0YTsvLyByZW1vdmUgc2xvdCBhdHRyaWJ1dGUgaWYgdGhlIG5vZGUgaXMgcmVzb2x2ZWQgYXMgYSBWdWUgc2xvdCBub2RlXG5pZihkYXRhJiZkYXRhLmF0dHJzJiZkYXRhLmF0dHJzLnNsb3Qpe2RlbGV0ZSBkYXRhLmF0dHJzLnNsb3Q7fS8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZVxuLy8gc2FtZSBjb250ZXh0LlxuaWYoKGNoaWxkLmNvbnRleHQ9PT1jb250ZXh0fHxjaGlsZC5mbkNvbnRleHQ9PT1jb250ZXh0KSYmZGF0YSYmZGF0YS5zbG90IT1udWxsKXt2YXIgbmFtZT1kYXRhLnNsb3Q7dmFyIHNsb3Q9c2xvdHNbbmFtZV18fChzbG90c1tuYW1lXT1bXSk7aWYoY2hpbGQudGFnPT09J3RlbXBsYXRlJyl7c2xvdC5wdXNoLmFwcGx5KHNsb3QsY2hpbGQuY2hpbGRyZW58fFtdKTt9ZWxzZXtzbG90LnB1c2goY2hpbGQpO319ZWxzZXsoc2xvdHNbXCJkZWZhdWx0XCJdfHwoc2xvdHNbXCJkZWZhdWx0XCJdPVtdKSkucHVzaChjaGlsZCk7fX0vLyBpZ25vcmUgc2xvdHMgdGhhdCBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VcbmZvcih2YXIgbmFtZSQxIGluIHNsb3RzKXtpZihzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpe2RlbGV0ZSBzbG90c1tuYW1lJDFdO319cmV0dXJuIHNsb3RzO31mdW5jdGlvbiBpc1doaXRlc3BhY2Uobm9kZSl7cmV0dXJuIG5vZGUuaXNDb21tZW50JiYhbm9kZS5hc3luY0ZhY3Rvcnl8fG5vZGUudGV4dD09PScgJzt9LyogICovZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdHMoc2xvdHMsbm9ybWFsU2xvdHMscHJldlNsb3RzKXt2YXIgcmVzO3ZhciBoYXNOb3JtYWxTbG90cz1PYmplY3Qua2V5cyhub3JtYWxTbG90cykubGVuZ3RoPjA7dmFyIGlzU3RhYmxlPXNsb3RzPyEhc2xvdHMuJHN0YWJsZTohaGFzTm9ybWFsU2xvdHM7dmFyIGtleT1zbG90cyYmc2xvdHMuJGtleTtpZighc2xvdHMpe3Jlcz17fTt9ZWxzZSBpZihzbG90cy5fbm9ybWFsaXplZCl7Ly8gZmFzdCBwYXRoIDE6IGNoaWxkIGNvbXBvbmVudCByZS1yZW5kZXIgb25seSwgcGFyZW50IGRpZCBub3QgY2hhbmdlXG5yZXR1cm4gc2xvdHMuX25vcm1hbGl6ZWQ7fWVsc2UgaWYoaXNTdGFibGUmJnByZXZTbG90cyYmcHJldlNsb3RzIT09ZW1wdHlPYmplY3QmJmtleT09PXByZXZTbG90cy4ka2V5JiYhaGFzTm9ybWFsU2xvdHMmJiFwcmV2U2xvdHMuJGhhc05vcm1hbCl7Ly8gZmFzdCBwYXRoIDI6IHN0YWJsZSBzY29wZWQgc2xvdHMgdy8gbm8gbm9ybWFsIHNsb3RzIHRvIHByb3h5LFxuLy8gb25seSBuZWVkIHRvIG5vcm1hbGl6ZSBvbmNlXG5yZXR1cm4gcHJldlNsb3RzO31lbHNle3Jlcz17fTtmb3IodmFyIGtleSQxIGluIHNsb3RzKXtpZihzbG90c1trZXkkMV0mJmtleSQxWzBdIT09JyQnKXtyZXNba2V5JDFdPW5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsa2V5JDEsc2xvdHNba2V5JDFdKTt9fX0vLyBleHBvc2Ugbm9ybWFsIHNsb3RzIG9uIHNjb3BlZFNsb3RzXG5mb3IodmFyIGtleSQyIGluIG5vcm1hbFNsb3RzKXtpZighKGtleSQyIGluIHJlcykpe3Jlc1trZXkkMl09cHJveHlOb3JtYWxTbG90KG5vcm1hbFNsb3RzLGtleSQyKTt9fS8vIGF2b3JpYXogc2VlbXMgdG8gbW9jayBhIG5vbi1leHRlbnNpYmxlICRzY29wZWRTbG90cyBvYmplY3Rcbi8vIGFuZCB3aGVuIHRoYXQgaXMgcGFzc2VkIGRvd24gdGhpcyB3b3VsZCBjYXVzZSBhbiBlcnJvclxuaWYoc2xvdHMmJk9iamVjdC5pc0V4dGVuc2libGUoc2xvdHMpKXtzbG90cy5fbm9ybWFsaXplZD1yZXM7fWRlZihyZXMsJyRzdGFibGUnLGlzU3RhYmxlKTtkZWYocmVzLCcka2V5JyxrZXkpO2RlZihyZXMsJyRoYXNOb3JtYWwnLGhhc05vcm1hbFNsb3RzKTtyZXR1cm4gcmVzO31mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLGtleSxmbil7dmFyIG5vcm1hbGl6ZWQ9ZnVuY3Rpb24gbm9ybWFsaXplZCgpe3ZhciByZXM9YXJndW1lbnRzLmxlbmd0aD9mbi5hcHBseShudWxsLGFyZ3VtZW50cyk6Zm4oe30pO3Jlcz1yZXMmJl90eXBlb2YyKHJlcyk9PT0nb2JqZWN0JyYmIUFycmF5LmlzQXJyYXkocmVzKT9bcmVzXS8vIHNpbmdsZSB2bm9kZVxuOm5vcm1hbGl6ZUNoaWxkcmVuKHJlcyk7cmV0dXJuIHJlcyYmKHJlcy5sZW5ndGg9PT0wfHxyZXMubGVuZ3RoPT09MSYmcmVzWzBdLmlzQ29tbWVudC8vICM5NjU4XG4pP3VuZGVmaW5lZDpyZXM7fTsvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbi8vIGNvbXBpbGVkIGFzIGEgc2NvcGVkIHNsb3QsIHJlbmRlciBmbiB1c2VycyB3b3VsZCBleHBlY3QgaXQgdG8gYmUgcHJlc2VudFxuLy8gb24gdGhpcy4kc2xvdHMgYmVjYXVzZSB0aGUgdXNhZ2UgaXMgc2VtYW50aWNhbGx5IGEgbm9ybWFsIHNsb3QuXG5pZihmbi5wcm94eSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KG5vcm1hbFNsb3RzLGtleSx7Z2V0Om5vcm1hbGl6ZWQsZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfSk7fXJldHVybiBub3JtYWxpemVkO31mdW5jdGlvbiBwcm94eU5vcm1hbFNsb3Qoc2xvdHMsa2V5KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gc2xvdHNba2V5XTt9O30vKiAgKi8gLyoqXG4gICAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gICAqL2Z1bmN0aW9uIHJlbmRlckxpc3QodmFsLHJlbmRlcil7dmFyIHJldCxpLGwsa2V5cyxrZXk7aWYoQXJyYXkuaXNBcnJheSh2YWwpfHx0eXBlb2YgdmFsPT09J3N0cmluZycpe3JldD1uZXcgQXJyYXkodmFsLmxlbmd0aCk7Zm9yKGk9MCxsPXZhbC5sZW5ndGg7aTxsO2krKyl7cmV0W2ldPXJlbmRlcih2YWxbaV0saSk7fX1lbHNlIGlmKHR5cGVvZiB2YWw9PT0nbnVtYmVyJyl7cmV0PW5ldyBBcnJheSh2YWwpO2ZvcihpPTA7aTx2YWw7aSsrKXtyZXRbaV09cmVuZGVyKGkrMSxpKTt9fWVsc2UgaWYoaXNPYmplY3QodmFsKSl7aWYoaGFzU3ltYm9sJiZ2YWxbU3ltYm9sLml0ZXJhdG9yXSl7cmV0PVtdO3ZhciBpdGVyYXRvcj12YWxbU3ltYm9sLml0ZXJhdG9yXSgpO3ZhciByZXN1bHQ9aXRlcmF0b3IubmV4dCgpO3doaWxlKCFyZXN1bHQuZG9uZSl7cmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSxyZXQubGVuZ3RoKSk7cmVzdWx0PWl0ZXJhdG9yLm5leHQoKTt9fWVsc2V7a2V5cz1PYmplY3Qua2V5cyh2YWwpO3JldD1uZXcgQXJyYXkoa2V5cy5sZW5ndGgpO2ZvcihpPTAsbD1rZXlzLmxlbmd0aDtpPGw7aSsrKXtrZXk9a2V5c1tpXTtyZXRbaV09cmVuZGVyKHZhbFtrZXldLGtleSxpKTt9fX1pZighaXNEZWYocmV0KSl7cmV0PVtdO31yZXQuX2lzVkxpc3Q9dHJ1ZTtyZXR1cm4gcmV0O30vKiAgKi8gLyoqXG4gICAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgPHNsb3Q+XG4gICAqL2Z1bmN0aW9uIHJlbmRlclNsb3QobmFtZSxmYWxsYmFjayxwcm9wcyxiaW5kT2JqZWN0KXt2YXIgc2NvcGVkU2xvdEZuPXRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO3ZhciBub2RlcztpZihzY29wZWRTbG90Rm4pey8vIHNjb3BlZCBzbG90XG5wcm9wcz1wcm9wc3x8e307aWYoYmluZE9iamVjdCl7cHJvcHM9ZXh0ZW5kKGV4dGVuZCh7fSxiaW5kT2JqZWN0KSxwcm9wcyk7fW5vZGVzPXNjb3BlZFNsb3RGbihwcm9wcyl8fGZhbGxiYWNrO31lbHNle25vZGVzPXRoaXMuJHNsb3RzW25hbWVdfHxmYWxsYmFjazt9dmFyIHRhcmdldD1wcm9wcyYmcHJvcHMuc2xvdDtpZih0YXJnZXQpe3JldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScse3Nsb3Q6dGFyZ2V0fSxub2Rlcyk7fWVsc2V7cmV0dXJuIG5vZGVzO319LyogICovIC8qKlxuICAgKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIGZpbHRlcnNcbiAgICovZnVuY3Rpb24gcmVzb2x2ZUZpbHRlcihpZCl7cmV0dXJuIHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCdmaWx0ZXJzJyxpZCl8fGlkZW50aXR5O30vKiAgKi9mdW5jdGlvbiBpc0tleU5vdE1hdGNoKGV4cGVjdCxhY3R1YWwpe2lmKEFycmF5LmlzQXJyYXkoZXhwZWN0KSl7cmV0dXJuIGV4cGVjdC5pbmRleE9mKGFjdHVhbCk9PT0tMTt9ZWxzZXtyZXR1cm4gZXhwZWN0IT09YWN0dWFsO319LyoqXG4gICAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAgICogZXhwb3NlZCBhcyBWdWUucHJvdG90eXBlLl9rXG4gICAqIHBhc3NpbmcgaW4gZXZlbnRLZXlOYW1lIGFzIGxhc3QgYXJndW1lbnQgc2VwYXJhdGVseSBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICAgKi9mdW5jdGlvbiBjaGVja0tleUNvZGVzKGV2ZW50S2V5Q29kZSxrZXksYnVpbHRJbktleUNvZGUsZXZlbnRLZXlOYW1lLGJ1aWx0SW5LZXlOYW1lKXt2YXIgbWFwcGVkS2V5Q29kZT1jb25maWcua2V5Q29kZXNba2V5XXx8YnVpbHRJbktleUNvZGU7aWYoYnVpbHRJbktleU5hbWUmJmV2ZW50S2V5TmFtZSYmIWNvbmZpZy5rZXlDb2Rlc1trZXldKXtyZXR1cm4gaXNLZXlOb3RNYXRjaChidWlsdEluS2V5TmFtZSxldmVudEtleU5hbWUpO31lbHNlIGlmKG1hcHBlZEtleUNvZGUpe3JldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsZXZlbnRLZXlDb2RlKTt9ZWxzZSBpZihldmVudEtleU5hbWUpe3JldHVybiBoeXBoZW5hdGUoZXZlbnRLZXlOYW1lKSE9PWtleTt9fS8qICAqLyAvKipcbiAgICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgdi1iaW5kPVwib2JqZWN0XCIgaW50byBhIFZOb2RlJ3MgZGF0YS5cbiAgICovZnVuY3Rpb24gYmluZE9iamVjdFByb3BzKGRhdGEsdGFnLHZhbHVlLGFzUHJvcCxpc1N5bmMpe2lmKHZhbHVlKXtpZighaXNPYmplY3QodmFsdWUpKTtlbHNle2lmKEFycmF5LmlzQXJyYXkodmFsdWUpKXt2YWx1ZT10b09iamVjdCh2YWx1ZSk7fXZhciBoYXNoO3ZhciBsb29wPWZ1bmN0aW9uIGxvb3Aoa2V5KXtpZihrZXk9PT0nY2xhc3MnfHxrZXk9PT0nc3R5bGUnfHxpc1Jlc2VydmVkQXR0cmlidXRlKGtleSkpe2hhc2g9ZGF0YTt9ZWxzZXt2YXIgdHlwZT1kYXRhLmF0dHJzJiZkYXRhLmF0dHJzLnR5cGU7aGFzaD1hc1Byb3B8fGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsdHlwZSxrZXkpP2RhdGEuZG9tUHJvcHN8fChkYXRhLmRvbVByb3BzPXt9KTpkYXRhLmF0dHJzfHwoZGF0YS5hdHRycz17fSk7fXZhciBjYW1lbGl6ZWRLZXk9Y2FtZWxpemUoa2V5KTt2YXIgaHlwaGVuYXRlZEtleT1oeXBoZW5hdGUoa2V5KTtpZighKGNhbWVsaXplZEtleSBpbiBoYXNoKSYmIShoeXBoZW5hdGVkS2V5IGluIGhhc2gpKXtoYXNoW2tleV09dmFsdWVba2V5XTtpZihpc1N5bmMpe3ZhciBvbj1kYXRhLm9ufHwoZGF0YS5vbj17fSk7b25bXCJ1cGRhdGU6XCIra2V5XT1mdW5jdGlvbigkZXZlbnQpe3ZhbHVlW2tleV09JGV2ZW50O307fX19O2Zvcih2YXIga2V5IGluIHZhbHVlKXtsb29wKGtleSk7fX19cmV0dXJuIGRhdGE7fS8qICAqLyAvKipcbiAgICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gICAqL2Z1bmN0aW9uIHJlbmRlclN0YXRpYyhpbmRleCxpc0luRm9yKXt2YXIgY2FjaGVkPXRoaXMuX3N0YXRpY1RyZWVzfHwodGhpcy5fc3RhdGljVHJlZXM9W10pO3ZhciB0cmVlPWNhY2hlZFtpbmRleF07Ly8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4vLyB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgdHJlZS5cbmlmKHRyZWUmJiFpc0luRm9yKXtyZXR1cm4gdHJlZTt9Ly8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxudHJlZT1jYWNoZWRbaW5kZXhdPXRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKHRoaXMuX3JlbmRlclByb3h5LG51bGwsdGhpcy8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4pO21hcmtTdGF0aWModHJlZSxcIl9fc3RhdGljX19cIitpbmRleCxmYWxzZSk7cmV0dXJuIHRyZWU7fS8qKlxuICAgKiBSdW50aW1lIGhlbHBlciBmb3Igdi1vbmNlLlxuICAgKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS5cbiAgICovZnVuY3Rpb24gbWFya09uY2UodHJlZSxpbmRleCxrZXkpe21hcmtTdGF0aWModHJlZSxcIl9fb25jZV9fXCIraW5kZXgrKGtleT9cIl9cIitrZXk6XCJcIiksdHJ1ZSk7cmV0dXJuIHRyZWU7fWZ1bmN0aW9uIG1hcmtTdGF0aWModHJlZSxrZXksaXNPbmNlKXtpZihBcnJheS5pc0FycmF5KHRyZWUpKXtmb3IodmFyIGk9MDtpPHRyZWUubGVuZ3RoO2krKyl7aWYodHJlZVtpXSYmdHlwZW9mIHRyZWVbaV0hPT0nc3RyaW5nJyl7bWFya1N0YXRpY05vZGUodHJlZVtpXSxrZXkrXCJfXCIraSxpc09uY2UpO319fWVsc2V7bWFya1N0YXRpY05vZGUodHJlZSxrZXksaXNPbmNlKTt9fWZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlKG5vZGUsa2V5LGlzT25jZSl7bm9kZS5pc1N0YXRpYz10cnVlO25vZGUua2V5PWtleTtub2RlLmlzT25jZT1pc09uY2U7fS8qICAqL2Z1bmN0aW9uIGJpbmRPYmplY3RMaXN0ZW5lcnMoZGF0YSx2YWx1ZSl7aWYodmFsdWUpe2lmKCFpc1BsYWluT2JqZWN0KHZhbHVlKSk7ZWxzZXt2YXIgb249ZGF0YS5vbj1kYXRhLm9uP2V4dGVuZCh7fSxkYXRhLm9uKTp7fTtmb3IodmFyIGtleSBpbiB2YWx1ZSl7dmFyIGV4aXN0aW5nPW9uW2tleV07dmFyIG91cnM9dmFsdWVba2V5XTtvbltrZXldPWV4aXN0aW5nP1tdLmNvbmNhdChleGlzdGluZyxvdXJzKTpvdXJzO319fXJldHVybiBkYXRhO30vKiAgKi9mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMoZm5zLC8vIHNlZSBmbG93L3Zub2RlXG5yZXMsLy8gdGhlIGZvbGxvd2luZyBhcmUgYWRkZWQgaW4gMi42XG5oYXNEeW5hbWljS2V5cyxjb250ZW50SGFzaEtleSl7cmVzPXJlc3x8eyRzdGFibGU6IWhhc0R5bmFtaWNLZXlzfTtmb3IodmFyIGk9MDtpPGZucy5sZW5ndGg7aSsrKXt2YXIgc2xvdD1mbnNbaV07aWYoQXJyYXkuaXNBcnJheShzbG90KSl7cmVzb2x2ZVNjb3BlZFNsb3RzKHNsb3QscmVzLGhhc0R5bmFtaWNLZXlzKTt9ZWxzZSBpZihzbG90KXsvLyBtYXJrZXIgZm9yIHJldmVyc2UgcHJveHlpbmcgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbmlmKHNsb3QucHJveHkpe3Nsb3QuZm4ucHJveHk9dHJ1ZTt9cmVzW3Nsb3Qua2V5XT1zbG90LmZuO319aWYoY29udGVudEhhc2hLZXkpe3Jlcy4ka2V5PWNvbnRlbnRIYXNoS2V5O31yZXR1cm4gcmVzO30vKiAgKi9mdW5jdGlvbiBiaW5kRHluYW1pY0tleXMoYmFzZU9iaix2YWx1ZXMpe2Zvcih2YXIgaT0wO2k8dmFsdWVzLmxlbmd0aDtpKz0yKXt2YXIga2V5PXZhbHVlc1tpXTtpZih0eXBlb2Yga2V5PT09J3N0cmluZycmJmtleSl7YmFzZU9ialt2YWx1ZXNbaV1dPXZhbHVlc1tpKzFdO319cmV0dXJuIGJhc2VPYmo7fS8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLlxuLy8gZW5zdXJlIG9ubHkgYXBwZW5kIHdoZW4gdmFsdWUgaXMgYWxyZWFkeSBzdHJpbmcsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGNhc3Rcbi8vIHRvIHN0cmluZyBhbmQgY2F1c2UgdGhlIHR5cGUgY2hlY2sgdG8gbWlzcy5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllcih2YWx1ZSxzeW1ib2wpe3JldHVybiB0eXBlb2YgdmFsdWU9PT0nc3RyaW5nJz9zeW1ib2wrdmFsdWU6dmFsdWU7fS8qICAqL2Z1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzKHRhcmdldCl7dGFyZ2V0Ll9vPW1hcmtPbmNlO3RhcmdldC5fbj10b051bWJlcjt0YXJnZXQuX3M9dG9TdHJpbmc7dGFyZ2V0Ll9sPXJlbmRlckxpc3Q7dGFyZ2V0Ll90PXJlbmRlclNsb3Q7dGFyZ2V0Ll9xPWxvb3NlRXF1YWw7dGFyZ2V0Ll9pPWxvb3NlSW5kZXhPZjt0YXJnZXQuX209cmVuZGVyU3RhdGljO3RhcmdldC5fZj1yZXNvbHZlRmlsdGVyO3RhcmdldC5faz1jaGVja0tleUNvZGVzO3RhcmdldC5fYj1iaW5kT2JqZWN0UHJvcHM7dGFyZ2V0Ll92PWNyZWF0ZVRleHRWTm9kZTt0YXJnZXQuX2U9Y3JlYXRlRW1wdHlWTm9kZTt0YXJnZXQuX3U9cmVzb2x2ZVNjb3BlZFNsb3RzO3RhcmdldC5fZz1iaW5kT2JqZWN0TGlzdGVuZXJzO3RhcmdldC5fZD1iaW5kRHluYW1pY0tleXM7dGFyZ2V0Ll9wPXByZXBlbmRNb2RpZmllcjt9LyogICovZnVuY3Rpb24gRnVuY3Rpb25hbFJlbmRlckNvbnRleHQoZGF0YSxwcm9wcyxjaGlsZHJlbixwYXJlbnQsQ3Rvcil7dmFyIHRoaXMkMT10aGlzO3ZhciBvcHRpb25zPUN0b3Iub3B0aW9uczsvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4vLyBnZXRzIGEgdW5pcXVlIGNvbnRleHQgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdCBuYW1lZCBzbG90IGNoZWNrXG52YXIgY29udGV4dFZtO2lmKGhhc093bihwYXJlbnQsJ191aWQnKSl7Y29udGV4dFZtPU9iamVjdC5jcmVhdGUocGFyZW50KTsvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbmNvbnRleHRWbS5fb3JpZ2luYWw9cGFyZW50O31lbHNley8vIHRoZSBjb250ZXh0IHZtIHBhc3NlZCBpbiBpcyBhIGZ1bmN0aW9uYWwgY29udGV4dCBhcyB3ZWxsLlxuLy8gaW4gdGhpcyBjYXNlIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFyZSBhYmxlIHRvIGdldCBhIGhvbGQgdG8gdGhlXG4vLyByZWFsIGNvbnRleHQgaW5zdGFuY2UuXG5jb250ZXh0Vm09cGFyZW50Oy8vICRmbG93LWRpc2FibGUtbGluZVxucGFyZW50PXBhcmVudC5fb3JpZ2luYWw7fXZhciBpc0NvbXBpbGVkPWlzVHJ1ZShvcHRpb25zLl9jb21waWxlZCk7dmFyIG5lZWROb3JtYWxpemF0aW9uPSFpc0NvbXBpbGVkO3RoaXMuZGF0YT1kYXRhO3RoaXMucHJvcHM9cHJvcHM7dGhpcy5jaGlsZHJlbj1jaGlsZHJlbjt0aGlzLnBhcmVudD1wYXJlbnQ7dGhpcy5saXN0ZW5lcnM9ZGF0YS5vbnx8ZW1wdHlPYmplY3Q7dGhpcy5pbmplY3Rpb25zPXJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QscGFyZW50KTt0aGlzLnNsb3RzPWZ1bmN0aW9uKCl7aWYoIXRoaXMkMS4kc2xvdHMpe25vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsdGhpcyQxLiRzbG90cz1yZXNvbHZlU2xvdHMoY2hpbGRyZW4scGFyZW50KSk7fXJldHVybiB0aGlzJDEuJHNsb3RzO307T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsJ3Njb3BlZFNsb3RzJyx7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cyx0aGlzLnNsb3RzKCkpO319KTsvLyBzdXBwb3J0IGZvciBjb21waWxlZCBmdW5jdGlvbmFsIHRlbXBsYXRlXG5pZihpc0NvbXBpbGVkKXsvLyBleHBvc2luZyAkb3B0aW9ucyBmb3IgcmVuZGVyU3RhdGljKClcbnRoaXMuJG9wdGlvbnM9b3B0aW9uczsvLyBwcmUtcmVzb2x2ZSBzbG90cyBmb3IgcmVuZGVyU2xvdCgpXG50aGlzLiRzbG90cz10aGlzLnNsb3RzKCk7dGhpcy4kc2NvcGVkU2xvdHM9bm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cyx0aGlzLiRzbG90cyk7fWlmKG9wdGlvbnMuX3Njb3BlSWQpe3RoaXMuX2M9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIHZub2RlPWNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLGEsYixjLGQsbmVlZE5vcm1hbGl6YXRpb24pO2lmKHZub2RlJiYhQXJyYXkuaXNBcnJheSh2bm9kZSkpe3Zub2RlLmZuU2NvcGVJZD1vcHRpb25zLl9zY29wZUlkO3Zub2RlLmZuQ29udGV4dD1wYXJlbnQ7fXJldHVybiB2bm9kZTt9O31lbHNle3RoaXMuX2M9ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLGEsYixjLGQsbmVlZE5vcm1hbGl6YXRpb24pO307fX1pbnN0YWxsUmVuZGVySGVscGVycyhGdW5jdGlvbmFsUmVuZGVyQ29udGV4dC5wcm90b3R5cGUpO2Z1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3Rvcixwcm9wc0RhdGEsZGF0YSxjb250ZXh0Vm0sY2hpbGRyZW4pe3ZhciBvcHRpb25zPUN0b3Iub3B0aW9uczt2YXIgcHJvcHM9e307dmFyIHByb3BPcHRpb25zPW9wdGlvbnMucHJvcHM7aWYoaXNEZWYocHJvcE9wdGlvbnMpKXtmb3IodmFyIGtleSBpbiBwcm9wT3B0aW9ucyl7cHJvcHNba2V5XT12YWxpZGF0ZVByb3Aoa2V5LHByb3BPcHRpb25zLHByb3BzRGF0YXx8ZW1wdHlPYmplY3QpO319ZWxzZXtpZihpc0RlZihkYXRhLmF0dHJzKSl7bWVyZ2VQcm9wcyhwcm9wcyxkYXRhLmF0dHJzKTt9aWYoaXNEZWYoZGF0YS5wcm9wcykpe21lcmdlUHJvcHMocHJvcHMsZGF0YS5wcm9wcyk7fX12YXIgcmVuZGVyQ29udGV4dD1uZXcgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQoZGF0YSxwcm9wcyxjaGlsZHJlbixjb250ZXh0Vm0sQ3Rvcik7dmFyIHZub2RlPW9wdGlvbnMucmVuZGVyLmNhbGwobnVsbCxyZW5kZXJDb250ZXh0Ll9jLHJlbmRlckNvbnRleHQpO2lmKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpe3JldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLGRhdGEscmVuZGVyQ29udGV4dC5wYXJlbnQsb3B0aW9ucyk7fWVsc2UgaWYoQXJyYXkuaXNBcnJheSh2bm9kZSkpe3ZhciB2bm9kZXM9bm9ybWFsaXplQ2hpbGRyZW4odm5vZGUpfHxbXTt2YXIgcmVzPW5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtmb3IodmFyIGk9MDtpPHZub2Rlcy5sZW5ndGg7aSsrKXtyZXNbaV09Y2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sZGF0YSxyZW5kZXJDb250ZXh0LnBhcmVudCxvcHRpb25zKTt9cmV0dXJuIHJlczt9fWZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGUsZGF0YSxjb250ZXh0Vm0sb3B0aW9ucyxyZW5kZXJDb250ZXh0KXsvLyAjNzgxNyBjbG9uZSBub2RlIGJlZm9yZSBzZXR0aW5nIGZuQ29udGV4dCwgb3RoZXJ3aXNlIGlmIHRoZSBub2RlIGlzIHJldXNlZFxuLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4vLyB0aGF0IHNob3VsZCBub3QgYmUgbWF0Y2hlZCB0byBtYXRjaC5cbnZhciBjbG9uZT1jbG9uZVZOb2RlKHZub2RlKTtjbG9uZS5mbkNvbnRleHQ9Y29udGV4dFZtO2Nsb25lLmZuT3B0aW9ucz1vcHRpb25zO2lmKGRhdGEuc2xvdCl7KGNsb25lLmRhdGF8fChjbG9uZS5kYXRhPXt9KSkuc2xvdD1kYXRhLnNsb3Q7fXJldHVybiBjbG9uZTt9ZnVuY3Rpb24gbWVyZ2VQcm9wcyh0byxmcm9tKXtmb3IodmFyIGtleSBpbiBmcm9tKXt0b1tjYW1lbGl6ZShrZXkpXT1mcm9tW2tleV07fX0vKiAgKi8gLyogICovIC8qICAqLyAvKiAgKi8gLy8gaW5saW5lIGhvb2tzIHRvIGJlIGludm9rZWQgb24gY29tcG9uZW50IFZOb2RlcyBkdXJpbmcgcGF0Y2hcbnZhciBjb21wb25lbnRWTm9kZUhvb2tzPXtpbml0OmZ1bmN0aW9uIGluaXQodm5vZGUsaHlkcmF0aW5nKXtpZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSYmIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCYmdm5vZGUuZGF0YS5rZWVwQWxpdmUpey8vIGtlcHQtYWxpdmUgY29tcG9uZW50cywgdHJlYXQgYXMgYSBwYXRjaFxudmFyIG1vdW50ZWROb2RlPXZub2RlOy8vIHdvcmsgYXJvdW5kIGZsb3dcbmNvbXBvbmVudFZOb2RlSG9va3MucHJlcGF0Y2gobW91bnRlZE5vZGUsbW91bnRlZE5vZGUpO31lbHNle3ZhciBjaGlsZD12bm9kZS5jb21wb25lbnRJbnN0YW5jZT1jcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlKHZub2RlLGFjdGl2ZUluc3RhbmNlKTtjaGlsZC4kbW91bnQoaHlkcmF0aW5nP3Zub2RlLmVsbTp1bmRlZmluZWQsaHlkcmF0aW5nKTt9fSxwcmVwYXRjaDpmdW5jdGlvbiBwcmVwYXRjaChvbGRWbm9kZSx2bm9kZSl7dmFyIG9wdGlvbnM9dm5vZGUuY29tcG9uZW50T3B0aW9uczt2YXIgY2hpbGQ9dm5vZGUuY29tcG9uZW50SW5zdGFuY2U9b2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7dXBkYXRlQ2hpbGRDb21wb25lbnQoY2hpbGQsb3B0aW9ucy5wcm9wc0RhdGEsLy8gdXBkYXRlZCBwcm9wc1xub3B0aW9ucy5saXN0ZW5lcnMsLy8gdXBkYXRlZCBsaXN0ZW5lcnNcbnZub2RlLC8vIG5ldyBwYXJlbnQgdm5vZGVcbm9wdGlvbnMuY2hpbGRyZW4vLyBuZXcgY2hpbGRyZW5cbik7fSxpbnNlcnQ6ZnVuY3Rpb24gaW5zZXJ0KHZub2RlKXt2YXIgY29udGV4dD12bm9kZS5jb250ZXh0O3ZhciBjb21wb25lbnRJbnN0YW5jZT12bm9kZS5jb21wb25lbnRJbnN0YW5jZTtpZighY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCl7Y29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZD10cnVlO2NhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCdtb3VudGVkJyk7fWlmKHZub2RlLmRhdGEua2VlcEFsaXZlKXtpZihjb250ZXh0Ll9pc01vdW50ZWQpey8vIHZ1ZS1yb3V0ZXIjMTIxMlxuLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4vLyBvbiBpbmNvcnJlY3QgY2hpbGRyZW4uIEluc3RlYWQgd2UgcHVzaCB0aGVtIGludG8gYSBxdWV1ZSB3aGljaCB3aWxsXG4vLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG5xdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7fWVsc2V7YWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSx0cnVlLyogZGlyZWN0ICovKTt9fX0sZGVzdHJveTpmdW5jdGlvbiBkZXN0cm95KHZub2RlKXt2YXIgY29tcG9uZW50SW5zdGFuY2U9dm5vZGUuY29tcG9uZW50SW5zdGFuY2U7aWYoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCl7aWYoIXZub2RlLmRhdGEua2VlcEFsaXZlKXtjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO31lbHNle2RlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSx0cnVlLyogZGlyZWN0ICovKTt9fX19O3ZhciBob29rc1RvTWVyZ2U9T2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7ZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50KEN0b3IsZGF0YSxjb250ZXh0LGNoaWxkcmVuLHRhZyl7aWYoaXNVbmRlZihDdG9yKSl7cmV0dXJuO312YXIgYmFzZUN0b3I9Y29udGV4dC4kb3B0aW9ucy5fYmFzZTsvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbmlmKGlzT2JqZWN0KEN0b3IpKXtDdG9yPWJhc2VDdG9yLmV4dGVuZChDdG9yKTt9Ly8gaWYgYXQgdGhpcyBzdGFnZSBpdCdzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIGFuIGFzeW5jIGNvbXBvbmVudCBmYWN0b3J5LFxuLy8gcmVqZWN0LlxuaWYodHlwZW9mIEN0b3IhPT0nZnVuY3Rpb24nKXtyZXR1cm47fS8vIGFzeW5jIGNvbXBvbmVudFxudmFyIGFzeW5jRmFjdG9yeTtpZihpc1VuZGVmKEN0b3IuY2lkKSl7YXN5bmNGYWN0b3J5PUN0b3I7Q3Rvcj1yZXNvbHZlQXN5bmNDb21wb25lbnQoYXN5bmNGYWN0b3J5LGJhc2VDdG9yKTtpZihDdG9yPT09dW5kZWZpbmVkKXsvLyByZXR1cm4gYSBwbGFjZWhvbGRlciBub2RlIGZvciBhc3luYyBjb21wb25lbnQsIHdoaWNoIGlzIHJlbmRlcmVkXG4vLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cbi8vIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGFzeW5jIHNlcnZlci1yZW5kZXJpbmcgYW5kIGh5ZHJhdGlvbi5cbnJldHVybiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKGFzeW5jRmFjdG9yeSxkYXRhLGNvbnRleHQsY2hpbGRyZW4sdGFnKTt9fWRhdGE9ZGF0YXx8e307Ly8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uXG5yZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpOy8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHNcbmlmKGlzRGVmKGRhdGEubW9kZWwpKXt0cmFuc2Zvcm1Nb2RlbChDdG9yLm9wdGlvbnMsZGF0YSk7fS8vIGV4dHJhY3QgcHJvcHNcbnZhciBwcm9wc0RhdGE9ZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YShkYXRhLEN0b3IpOy8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG5pZihpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKXtyZXR1cm4gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudChDdG9yLHByb3BzRGF0YSxkYXRhLGNvbnRleHQsY2hpbGRyZW4pO30vLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuLy8gY2hpbGQgY29tcG9uZW50IGxpc3RlbmVycyBpbnN0ZWFkIG9mIERPTSBsaXN0ZW5lcnNcbnZhciBsaXN0ZW5lcnM9ZGF0YS5vbjsvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guXG5kYXRhLm9uPWRhdGEubmF0aXZlT247aWYoaXNUcnVlKEN0b3Iub3B0aW9uc1tcImFic3RyYWN0XCJdKSl7Ly8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuLy8gb3RoZXIgdGhhbiBwcm9wcyAmIGxpc3RlbmVycyAmIHNsb3Rcbi8vIHdvcmsgYXJvdW5kIGZsb3dcbnZhciBzbG90PWRhdGEuc2xvdDtkYXRhPXt9O2lmKHNsb3Qpe2RhdGEuc2xvdD1zbG90O319Ly8gaW5zdGFsbCBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXG5pbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7Ly8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbnZhciBuYW1lPUN0b3Iub3B0aW9ucy5uYW1lfHx0YWc7dmFyIHZub2RlPW5ldyBWTm9kZShcInZ1ZS1jb21wb25lbnQtXCIrQ3Rvci5jaWQrKG5hbWU/XCItXCIrbmFtZTonJyksZGF0YSx1bmRlZmluZWQsdW5kZWZpbmVkLHVuZGVmaW5lZCxjb250ZXh0LHtDdG9yOkN0b3IscHJvcHNEYXRhOnByb3BzRGF0YSxsaXN0ZW5lcnM6bGlzdGVuZXJzLHRhZzp0YWcsY2hpbGRyZW46Y2hpbGRyZW59LGFzeW5jRmFjdG9yeSk7cmV0dXJuIHZub2RlO31mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlKHZub2RlLC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxucGFyZW50Ly8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4pe3ZhciBvcHRpb25zPXtfaXNDb21wb25lbnQ6dHJ1ZSxfcGFyZW50Vm5vZGU6dm5vZGUscGFyZW50OnBhcmVudH07Ly8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbnZhciBpbmxpbmVUZW1wbGF0ZT12bm9kZS5kYXRhLmlubGluZVRlbXBsYXRlO2lmKGlzRGVmKGlubGluZVRlbXBsYXRlKSl7b3B0aW9ucy5yZW5kZXI9aW5saW5lVGVtcGxhdGUucmVuZGVyO29wdGlvbnMuc3RhdGljUmVuZGVyRm5zPWlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZuczt9cmV0dXJuIG5ldyB2bm9kZS5jb21wb25lbnRPcHRpb25zLkN0b3Iob3B0aW9ucyk7fWZ1bmN0aW9uIGluc3RhbGxDb21wb25lbnRIb29rcyhkYXRhKXt2YXIgaG9va3M9ZGF0YS5ob29rfHwoZGF0YS5ob29rPXt9KTtmb3IodmFyIGk9MDtpPGhvb2tzVG9NZXJnZS5sZW5ndGg7aSsrKXt2YXIga2V5PWhvb2tzVG9NZXJnZVtpXTt2YXIgZXhpc3Rpbmc9aG9va3Nba2V5XTt2YXIgdG9NZXJnZT1jb21wb25lbnRWTm9kZUhvb2tzW2tleV07aWYoZXhpc3RpbmchPT10b01lcmdlJiYhKGV4aXN0aW5nJiZleGlzdGluZy5fbWVyZ2VkKSl7aG9va3Nba2V5XT1leGlzdGluZz9tZXJnZUhvb2skMSh0b01lcmdlLGV4aXN0aW5nKTp0b01lcmdlO319fWZ1bmN0aW9uIG1lcmdlSG9vayQxKGYxLGYyKXt2YXIgbWVyZ2VkPWZ1bmN0aW9uIG1lcmdlZChhLGIpey8vIGZsb3cgY29tcGxhaW5zIGFib3V0IGV4dHJhIGFyZ3Mgd2hpY2ggaXMgd2h5IHdlIHVzZSBhbnlcbmYxKGEsYik7ZjIoYSxiKTt9O21lcmdlZC5fbWVyZ2VkPXRydWU7cmV0dXJuIG1lcmdlZDt9Ly8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGluZm8gKHZhbHVlIGFuZCBjYWxsYmFjaykgaW50b1xuLy8gcHJvcCBhbmQgZXZlbnQgaGFuZGxlciByZXNwZWN0aXZlbHkuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbChvcHRpb25zLGRhdGEpe3ZhciBwcm9wPW9wdGlvbnMubW9kZWwmJm9wdGlvbnMubW9kZWwucHJvcHx8J3ZhbHVlJzt2YXIgZXZlbnQ9b3B0aW9ucy5tb2RlbCYmb3B0aW9ucy5tb2RlbC5ldmVudHx8J2lucHV0JzsoZGF0YS5hdHRyc3x8KGRhdGEuYXR0cnM9e30pKVtwcm9wXT1kYXRhLm1vZGVsLnZhbHVlO3ZhciBvbj1kYXRhLm9ufHwoZGF0YS5vbj17fSk7dmFyIGV4aXN0aW5nPW9uW2V2ZW50XTt2YXIgY2FsbGJhY2s9ZGF0YS5tb2RlbC5jYWxsYmFjaztpZihpc0RlZihleGlzdGluZykpe2lmKEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpP2V4aXN0aW5nLmluZGV4T2YoY2FsbGJhY2spPT09LTE6ZXhpc3RpbmchPT1jYWxsYmFjayl7b25bZXZlbnRdPVtjYWxsYmFja10uY29uY2F0KGV4aXN0aW5nKTt9fWVsc2V7b25bZXZlbnRdPWNhbGxiYWNrO319LyogICovdmFyIFNJTVBMRV9OT1JNQUxJWkU9MTt2YXIgQUxXQVlTX05PUk1BTElaRT0yOy8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQoY29udGV4dCx0YWcsZGF0YSxjaGlsZHJlbixub3JtYWxpemF0aW9uVHlwZSxhbHdheXNOb3JtYWxpemUpe2lmKEFycmF5LmlzQXJyYXkoZGF0YSl8fGlzUHJpbWl0aXZlKGRhdGEpKXtub3JtYWxpemF0aW9uVHlwZT1jaGlsZHJlbjtjaGlsZHJlbj1kYXRhO2RhdGE9dW5kZWZpbmVkO31pZihpc1RydWUoYWx3YXlzTm9ybWFsaXplKSl7bm9ybWFsaXphdGlvblR5cGU9QUxXQVlTX05PUk1BTElaRTt9cmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsdGFnLGRhdGEsY2hpbGRyZW4sbm9ybWFsaXphdGlvblR5cGUpO31mdW5jdGlvbiBfY3JlYXRlRWxlbWVudChjb250ZXh0LHRhZyxkYXRhLGNoaWxkcmVuLG5vcm1hbGl6YXRpb25UeXBlKXtpZihpc0RlZihkYXRhKSYmaXNEZWYoZGF0YS5fX29iX18pKXtyZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpO30vLyBvYmplY3Qgc3ludGF4IGluIHYtYmluZFxuaWYoaXNEZWYoZGF0YSkmJmlzRGVmKGRhdGEuaXMpKXt0YWc9ZGF0YS5pczt9aWYoIXRhZyl7Ly8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZVxucmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKTt9Ly8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuaWYoQXJyYXkuaXNBcnJheShjaGlsZHJlbikmJnR5cGVvZiBjaGlsZHJlblswXT09PSdmdW5jdGlvbicpe2RhdGE9ZGF0YXx8e307ZGF0YS5zY29wZWRTbG90cz17XCJkZWZhdWx0XCI6Y2hpbGRyZW5bMF19O2NoaWxkcmVuLmxlbmd0aD0wO31pZihub3JtYWxpemF0aW9uVHlwZT09PUFMV0FZU19OT1JNQUxJWkUpe2NoaWxkcmVuPW5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTt9ZWxzZSBpZihub3JtYWxpemF0aW9uVHlwZT09PVNJTVBMRV9OT1JNQUxJWkUpe2NoaWxkcmVuPXNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTt9dmFyIHZub2RlLG5zO2lmKHR5cGVvZiB0YWc9PT0nc3RyaW5nJyl7dmFyIEN0b3I7bnM9Y29udGV4dC4kdm5vZGUmJmNvbnRleHQuJHZub2RlLm5zfHxjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7aWYoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSl7Ly8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbnZub2RlPW5ldyBWTm9kZShjb25maWcucGFyc2VQbGF0Zm9ybVRhZ05hbWUodGFnKSxkYXRhLGNoaWxkcmVuLHVuZGVmaW5lZCx1bmRlZmluZWQsY29udGV4dCk7fWVsc2UgaWYoKCFkYXRhfHwhZGF0YS5wcmUpJiZpc0RlZihDdG9yPXJlc29sdmVBc3NldChjb250ZXh0LiRvcHRpb25zLCdjb21wb25lbnRzJyx0YWcpKSl7Ly8gY29tcG9uZW50XG52bm9kZT1jcmVhdGVDb21wb25lbnQoQ3RvcixkYXRhLGNvbnRleHQsY2hpbGRyZW4sdGFnKTt9ZWxzZXsvLyB1bmtub3duIG9yIHVubGlzdGVkIG5hbWVzcGFjZWQgZWxlbWVudHNcbi8vIGNoZWNrIGF0IHJ1bnRpbWUgYmVjYXVzZSBpdCBtYXkgZ2V0IGFzc2lnbmVkIGEgbmFtZXNwYWNlIHdoZW4gaXRzXG4vLyBwYXJlbnQgbm9ybWFsaXplcyBjaGlsZHJlblxudm5vZGU9bmV3IFZOb2RlKHRhZyxkYXRhLGNoaWxkcmVuLHVuZGVmaW5lZCx1bmRlZmluZWQsY29udGV4dCk7fX1lbHNley8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG52bm9kZT1jcmVhdGVDb21wb25lbnQodGFnLGRhdGEsY29udGV4dCxjaGlsZHJlbik7fWlmKEFycmF5LmlzQXJyYXkodm5vZGUpKXtyZXR1cm4gdm5vZGU7fWVsc2UgaWYoaXNEZWYodm5vZGUpKXtpZihpc0RlZihucykpe2FwcGx5TlModm5vZGUsbnMpO31pZihpc0RlZihkYXRhKSl7cmVnaXN0ZXJEZWVwQmluZGluZ3MoZGF0YSk7fXJldHVybiB2bm9kZTt9ZWxzZXtyZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpO319ZnVuY3Rpb24gYXBwbHlOUyh2bm9kZSxucyxmb3JjZSl7dm5vZGUubnM9bnM7aWYodm5vZGUudGFnPT09J2ZvcmVpZ25PYmplY3QnKXsvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3Rcbm5zPXVuZGVmaW5lZDtmb3JjZT10cnVlO31pZihpc0RlZih2bm9kZS5jaGlsZHJlbikpe2Zvcih2YXIgaT0wLGw9dm5vZGUuY2hpbGRyZW4ubGVuZ3RoO2k8bDtpKyspe3ZhciBjaGlsZD12bm9kZS5jaGlsZHJlbltpXTtpZihpc0RlZihjaGlsZC50YWcpJiYoaXNVbmRlZihjaGlsZC5ucyl8fGlzVHJ1ZShmb3JjZSkmJmNoaWxkLnRhZyE9PSdzdmcnKSl7YXBwbHlOUyhjaGlsZCxucyxmb3JjZSk7fX19fS8vIHJlZiAjNTMxOFxuLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmRcbi8vIDpjbGFzcyBhcmUgdXNlZCBvbiBzbG90IG5vZGVzXG5mdW5jdGlvbiByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKXtpZihpc09iamVjdChkYXRhLnN0eWxlKSl7dHJhdmVyc2UoZGF0YS5zdHlsZSk7fWlmKGlzT2JqZWN0KGRhdGFbXCJjbGFzc1wiXSkpe3RyYXZlcnNlKGRhdGFbXCJjbGFzc1wiXSk7fX0vKiAgKi9mdW5jdGlvbiBpbml0UmVuZGVyKHZtKXt2bS5fdm5vZGU9bnVsbDsvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxudm0uX3N0YXRpY1RyZWVzPW51bGw7Ly8gdi1vbmNlIGNhY2hlZCB0cmVlc1xudmFyIG9wdGlvbnM9dm0uJG9wdGlvbnM7dmFyIHBhcmVudFZub2RlPXZtLiR2bm9kZT1vcHRpb25zLl9wYXJlbnRWbm9kZTsvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxudmFyIHJlbmRlckNvbnRleHQ9cGFyZW50Vm5vZGUmJnBhcmVudFZub2RlLmNvbnRleHQ7dm0uJHNsb3RzPXJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbixyZW5kZXJDb250ZXh0KTt2bS4kc2NvcGVkU2xvdHM9ZW1wdHlPYmplY3Q7Ly8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4vLyBzbyB0aGF0IHdlIGdldCBwcm9wZXIgcmVuZGVyIGNvbnRleHQgaW5zaWRlIGl0LlxuLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbnZtLl9jPWZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiBjcmVhdGVFbGVtZW50KHZtLGEsYixjLGQsZmFsc2UpO307Ly8gbm9ybWFsaXphdGlvbiBpcyBhbHdheXMgYXBwbGllZCBmb3IgdGhlIHB1YmxpYyB2ZXJzaW9uLCB1c2VkIGluXG4vLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbnZtLiRjcmVhdGVFbGVtZW50PWZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiBjcmVhdGVFbGVtZW50KHZtLGEsYixjLGQsdHJ1ZSk7fTsvLyAkYXR0cnMgJiAkbGlzdGVuZXJzIGFyZSBleHBvc2VkIGZvciBlYXNpZXIgSE9DIGNyZWF0aW9uLlxuLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxudmFyIHBhcmVudERhdGE9cGFyZW50Vm5vZGUmJnBhcmVudFZub2RlLmRhdGE7LyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi97ZGVmaW5lUmVhY3RpdmUkJDEodm0sJyRhdHRycycscGFyZW50RGF0YSYmcGFyZW50RGF0YS5hdHRyc3x8ZW1wdHlPYmplY3QsbnVsbCx0cnVlKTtkZWZpbmVSZWFjdGl2ZSQkMSh2bSwnJGxpc3RlbmVycycsb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzfHxlbXB0eU9iamVjdCxudWxsLHRydWUpO319dmFyIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZT1udWxsO2Z1bmN0aW9uIHJlbmRlck1peGluKFZ1ZSl7Ly8gaW5zdGFsbCBydW50aW1lIGNvbnZlbmllbmNlIGhlbHBlcnNcbmluc3RhbGxSZW5kZXJIZWxwZXJzKFZ1ZS5wcm90b3R5cGUpO1Z1ZS5wcm90b3R5cGUuJG5leHRUaWNrPWZ1bmN0aW9uKGZuKXtyZXR1cm4gbmV4dFRpY2soZm4sdGhpcyk7fTtWdWUucHJvdG90eXBlLl9yZW5kZXI9ZnVuY3Rpb24oKXt2YXIgdm09dGhpczt2YXIgcmVmPXZtLiRvcHRpb25zO3ZhciByZW5kZXI9cmVmLnJlbmRlcjt2YXIgX3BhcmVudFZub2RlPXJlZi5fcGFyZW50Vm5vZGU7aWYoX3BhcmVudFZub2RlKXt2bS4kc2NvcGVkU2xvdHM9bm9ybWFsaXplU2NvcGVkU2xvdHMoX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMsdm0uJHNsb3RzLHZtLiRzY29wZWRTbG90cyk7fS8vIHNldCBwYXJlbnQgdm5vZGUuIHRoaXMgYWxsb3dzIHJlbmRlciBmdW5jdGlvbnMgdG8gaGF2ZSBhY2Nlc3Ncbi8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxudm0uJHZub2RlPV9wYXJlbnRWbm9kZTsvLyByZW5kZXIgc2VsZlxudmFyIHZub2RlO3RyeXsvLyBUaGVyZSdzIG5vIG5lZWQgdG8gbWFpbnRhaW4gYSBzdGFjayBiZWNhdWVzIGFsbCByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbi8vIHNlcGFyYXRlbHkgZnJvbSBvbmUgYW5vdGhlci4gTmVzdGVkIGNvbXBvbmVudCdzIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuLy8gd2hlbiBwYXJlbnQgY29tcG9uZW50IGlzIHBhdGNoZWQuXG5jdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U9dm07dm5vZGU9cmVuZGVyLmNhbGwodm0uX3JlbmRlclByb3h5LHZtLiRjcmVhdGVFbGVtZW50KTt9Y2F0Y2goZSl7aGFuZGxlRXJyb3IoZSx2bSxcInJlbmRlclwiKTsvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCxcbi8vIG9yIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4vKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL3t2bm9kZT12bS5fdm5vZGU7fX1maW5hbGx5e2N1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZT1udWxsO30vLyBpZiB0aGUgcmV0dXJuZWQgYXJyYXkgY29udGFpbnMgb25seSBhIHNpbmdsZSBub2RlLCBhbGxvdyBpdFxuaWYoQXJyYXkuaXNBcnJheSh2bm9kZSkmJnZub2RlLmxlbmd0aD09PTEpe3Zub2RlPXZub2RlWzBdO30vLyByZXR1cm4gZW1wdHkgdm5vZGUgaW4gY2FzZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGVycm9yZWQgb3V0XG5pZighKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpKXt2bm9kZT1jcmVhdGVFbXB0eVZOb2RlKCk7fS8vIHNldCBwYXJlbnRcbnZub2RlLnBhcmVudD1fcGFyZW50Vm5vZGU7cmV0dXJuIHZub2RlO307fS8qICAqL2Z1bmN0aW9uIGVuc3VyZUN0b3IoY29tcCxiYXNlKXtpZihjb21wLl9fZXNNb2R1bGV8fGhhc1N5bWJvbCYmY29tcFtTeW1ib2wudG9TdHJpbmdUYWddPT09J01vZHVsZScpe2NvbXA9Y29tcFtcImRlZmF1bHRcIl07fXJldHVybiBpc09iamVjdChjb21wKT9iYXNlLmV4dGVuZChjb21wKTpjb21wO31mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKGZhY3RvcnksZGF0YSxjb250ZXh0LGNoaWxkcmVuLHRhZyl7dmFyIG5vZGU9Y3JlYXRlRW1wdHlWTm9kZSgpO25vZGUuYXN5bmNGYWN0b3J5PWZhY3Rvcnk7bm9kZS5hc3luY01ldGE9e2RhdGE6ZGF0YSxjb250ZXh0OmNvbnRleHQsY2hpbGRyZW46Y2hpbGRyZW4sdGFnOnRhZ307cmV0dXJuIG5vZGU7fWZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudChmYWN0b3J5LGJhc2VDdG9yKXtpZihpc1RydWUoZmFjdG9yeS5lcnJvcikmJmlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSl7cmV0dXJuIGZhY3RvcnkuZXJyb3JDb21wO31pZihpc0RlZihmYWN0b3J5LnJlc29sdmVkKSl7cmV0dXJuIGZhY3RvcnkucmVzb2x2ZWQ7fXZhciBvd25lcj1jdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7aWYob3duZXImJmlzRGVmKGZhY3Rvcnkub3duZXJzKSYmZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcik9PT0tMSl7Ly8gYWxyZWFkeSBwZW5kaW5nXG5mYWN0b3J5Lm93bmVycy5wdXNoKG93bmVyKTt9aWYoaXNUcnVlKGZhY3RvcnkubG9hZGluZykmJmlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKXtyZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcDt9aWYob3duZXImJiFpc0RlZihmYWN0b3J5Lm93bmVycykpe3ZhciBvd25lcnM9ZmFjdG9yeS5vd25lcnM9W293bmVyXTt2YXIgc3luYz10cnVlO3ZhciB0aW1lckxvYWRpbmc9bnVsbDt2YXIgdGltZXJUaW1lb3V0PW51bGw7b3duZXIuJG9uKCdob29rOmRlc3Ryb3llZCcsZnVuY3Rpb24oKXtyZXR1cm4gcmVtb3ZlKG93bmVycyxvd25lcik7fSk7dmFyIGZvcmNlUmVuZGVyPWZ1bmN0aW9uIGZvcmNlUmVuZGVyKHJlbmRlckNvbXBsZXRlZCl7Zm9yKHZhciBpPTAsbD1vd25lcnMubGVuZ3RoO2k8bDtpKyspe293bmVyc1tpXS4kZm9yY2VVcGRhdGUoKTt9aWYocmVuZGVyQ29tcGxldGVkKXtvd25lcnMubGVuZ3RoPTA7aWYodGltZXJMb2FkaW5nIT09bnVsbCl7Y2xlYXJUaW1lb3V0KHRpbWVyTG9hZGluZyk7dGltZXJMb2FkaW5nPW51bGw7fWlmKHRpbWVyVGltZW91dCE9PW51bGwpe2NsZWFyVGltZW91dCh0aW1lclRpbWVvdXQpO3RpbWVyVGltZW91dD1udWxsO319fTt2YXIgcmVzb2x2ZT1vbmNlKGZ1bmN0aW9uKHJlcyl7Ly8gY2FjaGUgcmVzb2x2ZWRcbmZhY3RvcnkucmVzb2x2ZWQ9ZW5zdXJlQ3RvcihyZXMsYmFzZUN0b3IpOy8vIGludm9rZSBjYWxsYmFja3Mgb25seSBpZiB0aGlzIGlzIG5vdCBhIHN5bmNocm9ub3VzIHJlc29sdmVcbi8vIChhc3luYyByZXNvbHZlcyBhcmUgc2hpbW1lZCBhcyBzeW5jaHJvbm91cyBkdXJpbmcgU1NSKVxuaWYoIXN5bmMpe2ZvcmNlUmVuZGVyKHRydWUpO31lbHNle293bmVycy5sZW5ndGg9MDt9fSk7dmFyIHJlamVjdD1vbmNlKGZ1bmN0aW9uKHJlYXNvbil7aWYoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKXtmYWN0b3J5LmVycm9yPXRydWU7Zm9yY2VSZW5kZXIodHJ1ZSk7fX0pO3ZhciByZXM9ZmFjdG9yeShyZXNvbHZlLHJlamVjdCk7aWYoaXNPYmplY3QocmVzKSl7aWYoaXNQcm9taXNlKHJlcykpey8vICgpID0+IFByb21pc2VcbmlmKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpe3Jlcy50aGVuKHJlc29sdmUscmVqZWN0KTt9fWVsc2UgaWYoaXNQcm9taXNlKHJlcy5jb21wb25lbnQpKXtyZXMuY29tcG9uZW50LnRoZW4ocmVzb2x2ZSxyZWplY3QpO2lmKGlzRGVmKHJlcy5lcnJvcikpe2ZhY3RvcnkuZXJyb3JDb21wPWVuc3VyZUN0b3IocmVzLmVycm9yLGJhc2VDdG9yKTt9aWYoaXNEZWYocmVzLmxvYWRpbmcpKXtmYWN0b3J5LmxvYWRpbmdDb21wPWVuc3VyZUN0b3IocmVzLmxvYWRpbmcsYmFzZUN0b3IpO2lmKHJlcy5kZWxheT09PTApe2ZhY3RvcnkubG9hZGluZz10cnVlO31lbHNle3RpbWVyTG9hZGluZz1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGltZXJMb2FkaW5nPW51bGw7aWYoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSYmaXNVbmRlZihmYWN0b3J5LmVycm9yKSl7ZmFjdG9yeS5sb2FkaW5nPXRydWU7Zm9yY2VSZW5kZXIoZmFsc2UpO319LHJlcy5kZWxheXx8MjAwKTt9fWlmKGlzRGVmKHJlcy50aW1lb3V0KSl7dGltZXJUaW1lb3V0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXt0aW1lclRpbWVvdXQ9bnVsbDtpZihpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKXtyZWplY3QobnVsbCk7fX0scmVzLnRpbWVvdXQpO319fXN5bmM9ZmFsc2U7Ly8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxucmV0dXJuIGZhY3RvcnkubG9hZGluZz9mYWN0b3J5LmxvYWRpbmdDb21wOmZhY3RvcnkucmVzb2x2ZWQ7fX0vKiAgKi9mdW5jdGlvbiBpc0FzeW5jUGxhY2Vob2xkZXIobm9kZSl7cmV0dXJuIG5vZGUuaXNDb21tZW50JiZub2RlLmFzeW5jRmFjdG9yeTt9LyogICovZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjaGlsZHJlbil7aWYoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpe2Zvcih2YXIgaT0wO2k8Y2hpbGRyZW4ubGVuZ3RoO2krKyl7dmFyIGM9Y2hpbGRyZW5baV07aWYoaXNEZWYoYykmJihpc0RlZihjLmNvbXBvbmVudE9wdGlvbnMpfHxpc0FzeW5jUGxhY2Vob2xkZXIoYykpKXtyZXR1cm4gYzt9fX19LyogICovIC8qICAqL2Z1bmN0aW9uIGluaXRFdmVudHModm0pe3ZtLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTt2bS5faGFzSG9va0V2ZW50PWZhbHNlOy8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xudmFyIGxpc3RlbmVycz12bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO2lmKGxpc3RlbmVycyl7dXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLGxpc3RlbmVycyk7fX12YXIgdGFyZ2V0O2Z1bmN0aW9uIGFkZChldmVudCxmbil7dGFyZ2V0LiRvbihldmVudCxmbik7fWZ1bmN0aW9uIHJlbW92ZSQxKGV2ZW50LGZuKXt0YXJnZXQuJG9mZihldmVudCxmbik7fWZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyKGV2ZW50LGZuKXt2YXIgX3RhcmdldD10YXJnZXQ7cmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKCl7dmFyIHJlcz1mbi5hcHBseShudWxsLGFyZ3VtZW50cyk7aWYocmVzIT09bnVsbCl7X3RhcmdldC4kb2ZmKGV2ZW50LG9uY2VIYW5kbGVyKTt9fTt9ZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLGxpc3RlbmVycyxvbGRMaXN0ZW5lcnMpe3RhcmdldD12bTt1cGRhdGVMaXN0ZW5lcnMobGlzdGVuZXJzLG9sZExpc3RlbmVyc3x8e30sYWRkLHJlbW92ZSQxLGNyZWF0ZU9uY2VIYW5kbGVyLHZtKTt0YXJnZXQ9dW5kZWZpbmVkO31mdW5jdGlvbiBldmVudHNNaXhpbihWdWUpe3ZhciBob29rUkU9L15ob29rOi87VnVlLnByb3RvdHlwZS4kb249ZnVuY3Rpb24oZXZlbnQsZm4pe3ZhciB2bT10aGlzO2lmKEFycmF5LmlzQXJyYXkoZXZlbnQpKXtmb3IodmFyIGk9MCxsPWV2ZW50Lmxlbmd0aDtpPGw7aSsrKXt2bS4kb24oZXZlbnRbaV0sZm4pO319ZWxzZXsodm0uX2V2ZW50c1tldmVudF18fCh2bS5fZXZlbnRzW2V2ZW50XT1bXSkpLnB1c2goZm4pOy8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4vLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbmlmKGhvb2tSRS50ZXN0KGV2ZW50KSl7dm0uX2hhc0hvb2tFdmVudD10cnVlO319cmV0dXJuIHZtO307VnVlLnByb3RvdHlwZS4kb25jZT1mdW5jdGlvbihldmVudCxmbil7dmFyIHZtPXRoaXM7ZnVuY3Rpb24gb24oKXt2bS4kb2ZmKGV2ZW50LG9uKTtmbi5hcHBseSh2bSxhcmd1bWVudHMpO31vbi5mbj1mbjt2bS4kb24oZXZlbnQsb24pO3JldHVybiB2bTt9O1Z1ZS5wcm90b3R5cGUuJG9mZj1mdW5jdGlvbihldmVudCxmbil7dmFyIHZtPXRoaXM7Ly8gYWxsXG5pZighYXJndW1lbnRzLmxlbmd0aCl7dm0uX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpO3JldHVybiB2bTt9Ly8gYXJyYXkgb2YgZXZlbnRzXG5pZihBcnJheS5pc0FycmF5KGV2ZW50KSl7Zm9yKHZhciBpJDE9MCxsPWV2ZW50Lmxlbmd0aDtpJDE8bDtpJDErKyl7dm0uJG9mZihldmVudFtpJDFdLGZuKTt9cmV0dXJuIHZtO30vLyBzcGVjaWZpYyBldmVudFxudmFyIGNicz12bS5fZXZlbnRzW2V2ZW50XTtpZighY2JzKXtyZXR1cm4gdm07fWlmKCFmbil7dm0uX2V2ZW50c1tldmVudF09bnVsbDtyZXR1cm4gdm07fS8vIHNwZWNpZmljIGhhbmRsZXJcbnZhciBjYjt2YXIgaT1jYnMubGVuZ3RoO3doaWxlKGktLSl7Y2I9Y2JzW2ldO2lmKGNiPT09Zm58fGNiLmZuPT09Zm4pe2Nicy5zcGxpY2UoaSwxKTticmVhazt9fXJldHVybiB2bTt9O1Z1ZS5wcm90b3R5cGUuJGVtaXQ9ZnVuY3Rpb24oZXZlbnQpe3ZhciB2bT10aGlzO3ZhciBjYnM9dm0uX2V2ZW50c1tldmVudF07aWYoY2JzKXtjYnM9Y2JzLmxlbmd0aD4xP3RvQXJyYXkoY2JzKTpjYnM7dmFyIGFyZ3M9dG9BcnJheShhcmd1bWVudHMsMSk7dmFyIGluZm89XCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIrZXZlbnQrXCJcXFwiXCI7Zm9yKHZhciBpPTAsbD1jYnMubGVuZ3RoO2k8bDtpKyspe2ludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSx2bSxhcmdzLHZtLGluZm8pO319cmV0dXJuIHZtO307fS8qICAqL3ZhciBhY3RpdmVJbnN0YW5jZT1udWxsO2Z1bmN0aW9uIHNldEFjdGl2ZUluc3RhbmNlKHZtKXt2YXIgcHJldkFjdGl2ZUluc3RhbmNlPWFjdGl2ZUluc3RhbmNlO2FjdGl2ZUluc3RhbmNlPXZtO3JldHVybiBmdW5jdGlvbigpe2FjdGl2ZUluc3RhbmNlPXByZXZBY3RpdmVJbnN0YW5jZTt9O31mdW5jdGlvbiBpbml0TGlmZWN5Y2xlKHZtKXt2YXIgb3B0aW9ucz12bS4kb3B0aW9uczsvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxudmFyIHBhcmVudD1vcHRpb25zLnBhcmVudDtpZihwYXJlbnQmJiFvcHRpb25zW1wiYWJzdHJhY3RcIl0pe3doaWxlKHBhcmVudC4kb3B0aW9uc1tcImFic3RyYWN0XCJdJiZwYXJlbnQuJHBhcmVudCl7cGFyZW50PXBhcmVudC4kcGFyZW50O31wYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pO312bS4kcGFyZW50PXBhcmVudDt2bS4kcm9vdD1wYXJlbnQ/cGFyZW50LiRyb290OnZtO3ZtLiRjaGlsZHJlbj1bXTt2bS4kcmVmcz17fTt2bS5fd2F0Y2hlcj1udWxsO3ZtLl9pbmFjdGl2ZT1udWxsO3ZtLl9kaXJlY3RJbmFjdGl2ZT1mYWxzZTt2bS5faXNNb3VudGVkPWZhbHNlO3ZtLl9pc0Rlc3Ryb3llZD1mYWxzZTt2bS5faXNCZWluZ0Rlc3Ryb3llZD1mYWxzZTt9ZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4oVnVlKXtWdWUucHJvdG90eXBlLl91cGRhdGU9ZnVuY3Rpb24odm5vZGUsaHlkcmF0aW5nKXt2YXIgdm09dGhpczt2YXIgcHJldkVsPXZtLiRlbDt2YXIgcHJldlZub2RlPXZtLl92bm9kZTt2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlPXNldEFjdGl2ZUluc3RhbmNlKHZtKTt2bS5fdm5vZGU9dm5vZGU7Ly8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4vLyBiYXNlZCBvbiB0aGUgcmVuZGVyaW5nIGJhY2tlbmQgdXNlZC5cbmlmKCFwcmV2Vm5vZGUpey8vIGluaXRpYWwgcmVuZGVyXG52bS4kZWw9dm0uX19wYXRjaF9fKHZtLiRlbCx2bm9kZSxoeWRyYXRpbmcsZmFsc2UvKiByZW1vdmVPbmx5ICovKTt9ZWxzZXsvLyB1cGRhdGVzXG52bS4kZWw9dm0uX19wYXRjaF9fKHByZXZWbm9kZSx2bm9kZSk7fXJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpOy8vIHVwZGF0ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuaWYocHJldkVsKXtwcmV2RWwuX192dWVfXz1udWxsO31pZih2bS4kZWwpe3ZtLiRlbC5fX3Z1ZV9fPXZtO30vLyBpZiBwYXJlbnQgaXMgYW4gSE9DLCB1cGRhdGUgaXRzICRlbCBhcyB3ZWxsXG5pZih2bS4kdm5vZGUmJnZtLiRwYXJlbnQmJnZtLiR2bm9kZT09PXZtLiRwYXJlbnQuX3Zub2RlKXt2bS4kcGFyZW50LiRlbD12bS4kZWw7fS8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbi8vIHVwZGF0ZWQgaW4gYSBwYXJlbnQncyB1cGRhdGVkIGhvb2suXG59O1Z1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlPWZ1bmN0aW9uKCl7dmFyIHZtPXRoaXM7aWYodm0uX3dhdGNoZXIpe3ZtLl93YXRjaGVyLnVwZGF0ZSgpO319O1Z1ZS5wcm90b3R5cGUuJGRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgdm09dGhpcztpZih2bS5faXNCZWluZ0Rlc3Ryb3llZCl7cmV0dXJuO31jYWxsSG9vayh2bSwnYmVmb3JlRGVzdHJveScpO3ZtLl9pc0JlaW5nRGVzdHJveWVkPXRydWU7Ly8gcmVtb3ZlIHNlbGYgZnJvbSBwYXJlbnRcbnZhciBwYXJlbnQ9dm0uJHBhcmVudDtpZihwYXJlbnQmJiFwYXJlbnQuX2lzQmVpbmdEZXN0cm95ZWQmJiF2bS4kb3B0aW9uc1tcImFic3RyYWN0XCJdKXtyZW1vdmUocGFyZW50LiRjaGlsZHJlbix2bSk7fS8vIHRlYXJkb3duIHdhdGNoZXJzXG5pZih2bS5fd2F0Y2hlcil7dm0uX3dhdGNoZXIudGVhcmRvd24oKTt9dmFyIGk9dm0uX3dhdGNoZXJzLmxlbmd0aDt3aGlsZShpLS0pe3ZtLl93YXRjaGVyc1tpXS50ZWFyZG93bigpO30vLyByZW1vdmUgcmVmZXJlbmNlIGZyb20gZGF0YSBvYlxuLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG5pZih2bS5fZGF0YS5fX29iX18pe3ZtLl9kYXRhLl9fb2JfXy52bUNvdW50LS07fS8vIGNhbGwgdGhlIGxhc3QgaG9vay4uLlxudm0uX2lzRGVzdHJveWVkPXRydWU7Ly8gaW52b2tlIGRlc3Ryb3kgaG9va3Mgb24gY3VycmVudCByZW5kZXJlZCB0cmVlXG52bS5fX3BhdGNoX18odm0uX3Zub2RlLG51bGwpOy8vIGZpcmUgZGVzdHJveWVkIGhvb2tcbmNhbGxIb29rKHZtLCdkZXN0cm95ZWQnKTsvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxudm0uJG9mZigpOy8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuaWYodm0uJGVsKXt2bS4kZWwuX192dWVfXz1udWxsO30vLyByZWxlYXNlIGNpcmN1bGFyIHJlZmVyZW5jZSAoIzY3NTkpXG5pZih2bS4kdm5vZGUpe3ZtLiR2bm9kZS5wYXJlbnQ9bnVsbDt9fTt9ZnVuY3Rpb24gbW91bnRDb21wb25lbnQodm0sZWwsaHlkcmF0aW5nKXt2bS4kZWw9ZWw7aWYoIXZtLiRvcHRpb25zLnJlbmRlcil7dm0uJG9wdGlvbnMucmVuZGVyPWNyZWF0ZUVtcHR5Vk5vZGU7fWNhbGxIb29rKHZtLCdiZWZvcmVNb3VudCcpO3ZhciB1cGRhdGVDb21wb25lbnQ7LyogaXN0YW5idWwgaWdub3JlIGlmICove3VwZGF0ZUNvbXBvbmVudD1mdW5jdGlvbiB1cGRhdGVDb21wb25lbnQoKXt2bS5fdXBkYXRlKHZtLl9yZW5kZXIoKSxoeWRyYXRpbmcpO307fS8vIHdlIHNldCB0aGlzIHRvIHZtLl93YXRjaGVyIGluc2lkZSB0aGUgd2F0Y2hlcidzIGNvbnN0cnVjdG9yXG4vLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuLy8gY29tcG9uZW50J3MgbW91bnRlZCBob29rKSwgd2hpY2ggcmVsaWVzIG9uIHZtLl93YXRjaGVyIGJlaW5nIGFscmVhZHkgZGVmaW5lZFxubmV3IFdhdGNoZXIodm0sdXBkYXRlQ29tcG9uZW50LG5vb3Ase2JlZm9yZTpmdW5jdGlvbiBiZWZvcmUoKXtpZih2bS5faXNNb3VudGVkJiYhdm0uX2lzRGVzdHJveWVkKXtjYWxsSG9vayh2bSwnYmVmb3JlVXBkYXRlJyk7fX19LHRydWUvKiBpc1JlbmRlcldhdGNoZXIgKi8pO2h5ZHJhdGluZz1mYWxzZTsvLyBtYW51YWxseSBtb3VudGVkIGluc3RhbmNlLCBjYWxsIG1vdW50ZWQgb24gc2VsZlxuLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbmlmKHZtLiR2bm9kZT09bnVsbCl7dm0uX2lzTW91bnRlZD10cnVlO2NhbGxIb29rKHZtLCdtb3VudGVkJyk7fXJldHVybiB2bTt9ZnVuY3Rpb24gdXBkYXRlQ2hpbGRDb21wb25lbnQodm0scHJvcHNEYXRhLGxpc3RlbmVycyxwYXJlbnRWbm9kZSxyZW5kZXJDaGlsZHJlbil7Ly8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4vLyB3ZSBuZWVkIHRvIGRvIHRoaXMgYmVmb3JlIG92ZXJ3cml0aW5nICRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbi5cbi8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbi8vIGR5bmFtaWMgc2xvdCBuYW1lcykuIFN0YXRpYyBzY29wZWQgc2xvdHMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZSBoYXMgdGhlXG4vLyBcIiRzdGFibGVcIiBtYXJrZXIuXG52YXIgbmV3U2NvcGVkU2xvdHM9cGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90czt2YXIgb2xkU2NvcGVkU2xvdHM9dm0uJHNjb3BlZFNsb3RzO3ZhciBoYXNEeW5hbWljU2NvcGVkU2xvdD0hIShuZXdTY29wZWRTbG90cyYmIW5ld1Njb3BlZFNsb3RzLiRzdGFibGV8fG9sZFNjb3BlZFNsb3RzIT09ZW1wdHlPYmplY3QmJiFvbGRTY29wZWRTbG90cy4kc3RhYmxlfHxuZXdTY29wZWRTbG90cyYmdm0uJHNjb3BlZFNsb3RzLiRrZXkhPT1uZXdTY29wZWRTbG90cy4ka2V5KTsvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXG4vLyB1cGRhdGUuIER5bmFtaWMgc2NvcGVkIHNsb3RzIG1heSBhbHNvIGhhdmUgY2hhbmdlZC4gSW4gc3VjaCBjYXNlcywgYSBmb3JjZWRcbi8vIHVwZGF0ZSBpcyBuZWNlc3NhcnkgdG8gZW5zdXJlIGNvcnJlY3RuZXNzLlxudmFyIG5lZWRzRm9yY2VVcGRhdGU9ISEocmVuZGVyQ2hpbGRyZW58fC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG52bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW58fC8vIGhhcyBvbGQgc3RhdGljIHNsb3RzXG5oYXNEeW5hbWljU2NvcGVkU2xvdCk7dm0uJG9wdGlvbnMuX3BhcmVudFZub2RlPXBhcmVudFZub2RlO3ZtLiR2bm9kZT1wYXJlbnRWbm9kZTsvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5pZih2bS5fdm5vZGUpey8vIHVwZGF0ZSBjaGlsZCB0cmVlJ3MgcGFyZW50XG52bS5fdm5vZGUucGFyZW50PXBhcmVudFZub2RlO312bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW49cmVuZGVyQ2hpbGRyZW47Ly8gdXBkYXRlICRhdHRycyBhbmQgJGxpc3RlbmVycyBoYXNoXG4vLyB0aGVzZSBhcmUgYWxzbyByZWFjdGl2ZSBzbyB0aGV5IG1heSB0cmlnZ2VyIGNoaWxkIHVwZGF0ZSBpZiB0aGUgY2hpbGRcbi8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG52bS4kYXR0cnM9cGFyZW50Vm5vZGUuZGF0YS5hdHRyc3x8ZW1wdHlPYmplY3Q7dm0uJGxpc3RlbmVycz1saXN0ZW5lcnN8fGVtcHR5T2JqZWN0Oy8vIHVwZGF0ZSBwcm9wc1xuaWYocHJvcHNEYXRhJiZ2bS4kb3B0aW9ucy5wcm9wcyl7dG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTt2YXIgcHJvcHM9dm0uX3Byb3BzO3ZhciBwcm9wS2V5cz12bS4kb3B0aW9ucy5fcHJvcEtleXN8fFtdO2Zvcih2YXIgaT0wO2k8cHJvcEtleXMubGVuZ3RoO2krKyl7dmFyIGtleT1wcm9wS2V5c1tpXTt2YXIgcHJvcE9wdGlvbnM9dm0uJG9wdGlvbnMucHJvcHM7Ly8gd3RmIGZsb3c/XG5wcm9wc1trZXldPXZhbGlkYXRlUHJvcChrZXkscHJvcE9wdGlvbnMscHJvcHNEYXRhLHZtKTt9dG9nZ2xlT2JzZXJ2aW5nKHRydWUpOy8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbnZtLiRvcHRpb25zLnByb3BzRGF0YT1wcm9wc0RhdGE7fS8vIHVwZGF0ZSBsaXN0ZW5lcnNcbmxpc3RlbmVycz1saXN0ZW5lcnN8fGVtcHR5T2JqZWN0O3ZhciBvbGRMaXN0ZW5lcnM9dm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVyczt2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzPWxpc3RlbmVyczt1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sbGlzdGVuZXJzLG9sZExpc3RlbmVycyk7Ly8gcmVzb2x2ZSBzbG90cyArIGZvcmNlIHVwZGF0ZSBpZiBoYXMgY2hpbGRyZW5cbmlmKG5lZWRzRm9yY2VVcGRhdGUpe3ZtLiRzbG90cz1yZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4scGFyZW50Vm5vZGUuY29udGV4dCk7dm0uJGZvcmNlVXBkYXRlKCk7fX1mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlKHZtKXt3aGlsZSh2bSYmKHZtPXZtLiRwYXJlbnQpKXtpZih2bS5faW5hY3RpdmUpe3JldHVybiB0cnVlO319cmV0dXJuIGZhbHNlO31mdW5jdGlvbiBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLGRpcmVjdCl7aWYoZGlyZWN0KXt2bS5fZGlyZWN0SW5hY3RpdmU9ZmFsc2U7aWYoaXNJbkluYWN0aXZlVHJlZSh2bSkpe3JldHVybjt9fWVsc2UgaWYodm0uX2RpcmVjdEluYWN0aXZlKXtyZXR1cm47fWlmKHZtLl9pbmFjdGl2ZXx8dm0uX2luYWN0aXZlPT09bnVsbCl7dm0uX2luYWN0aXZlPWZhbHNlO2Zvcih2YXIgaT0wO2k8dm0uJGNoaWxkcmVuLmxlbmd0aDtpKyspe2FjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTt9Y2FsbEhvb2sodm0sJ2FjdGl2YXRlZCcpO319ZnVuY3Rpb24gZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLGRpcmVjdCl7aWYoZGlyZWN0KXt2bS5fZGlyZWN0SW5hY3RpdmU9dHJ1ZTtpZihpc0luSW5hY3RpdmVUcmVlKHZtKSl7cmV0dXJuO319aWYoIXZtLl9pbmFjdGl2ZSl7dm0uX2luYWN0aXZlPXRydWU7Zm9yKHZhciBpPTA7aTx2bS4kY2hpbGRyZW4ubGVuZ3RoO2krKyl7ZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7fWNhbGxIb29rKHZtLCdkZWFjdGl2YXRlZCcpO319ZnVuY3Rpb24gY2FsbEhvb2sodm0saG9vayl7Ly8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGxpZmVjeWNsZSBob29rc1xucHVzaFRhcmdldCgpO3ZhciBoYW5kbGVycz12bS4kb3B0aW9uc1tob29rXTt2YXIgaW5mbz1ob29rK1wiIGhvb2tcIjtpZihoYW5kbGVycyl7Zm9yKHZhciBpPTAsaj1oYW5kbGVycy5sZW5ndGg7aTxqO2krKyl7aW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sdm0sbnVsbCx2bSxpbmZvKTt9fWlmKHZtLl9oYXNIb29rRXZlbnQpe3ZtLiRlbWl0KCdob29rOicraG9vayk7fXBvcFRhcmdldCgpO312YXIgcXVldWU9W107dmFyIGFjdGl2YXRlZENoaWxkcmVuPVtdO3ZhciBoYXM9e307dmFyIHdhaXRpbmc9ZmFsc2U7dmFyIGZsdXNoaW5nPWZhbHNlO3ZhciBpbmRleD0wOy8qKlxuICAgKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gICAqL2Z1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUoKXtpbmRleD1xdWV1ZS5sZW5ndGg9YWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoPTA7aGFzPXt9O3dhaXRpbmc9Zmx1c2hpbmc9ZmFsc2U7fS8vIEFzeW5jIGVkZ2UgY2FzZSAjNjU2NiByZXF1aXJlcyBzYXZpbmcgdGhlIHRpbWVzdGFtcCB3aGVuIGV2ZW50IGxpc3RlbmVycyBhcmVcbi8vIGF0dGFjaGVkLiBIb3dldmVyLCBjYWxsaW5nIHBlcmZvcm1hbmNlLm5vdygpIGhhcyBhIHBlcmYgb3ZlcmhlYWQgZXNwZWNpYWxseVxuLy8gaWYgdGhlIHBhZ2UgaGFzIHRob3VzYW5kcyBvZiBldmVudCBsaXN0ZW5lcnMuIEluc3RlYWQsIHdlIHRha2UgYSB0aW1lc3RhbXBcbi8vIGV2ZXJ5IHRpbWUgdGhlIHNjaGVkdWxlciBmbHVzaGVzIGFuZCB1c2UgdGhhdCBmb3IgYWxsIGV2ZW50IGxpc3RlbmVyc1xuLy8gYXR0YWNoZWQgZHVyaW5nIHRoYXQgZmx1c2guXG52YXIgY3VycmVudEZsdXNoVGltZXN0YW1wPTA7Ly8gQXN5bmMgZWRnZSBjYXNlIGZpeCByZXF1aXJlcyBzdG9yaW5nIGFuIGV2ZW50IGxpc3RlbmVyJ3MgYXR0YWNoIHRpbWVzdGFtcC5cbnZhciBnZXROb3c9RGF0ZS5ub3c7Ly8gRGV0ZXJtaW5lIHdoYXQgZXZlbnQgdGltZXN0YW1wIHRoZSBicm93c2VyIGlzIHVzaW5nLiBBbm5veWluZ2x5LCB0aGVcbi8vIHRpbWVzdGFtcCBjYW4gZWl0aGVyIGJlIGhpLXJlcyAocmVsYXRpdmUgdG8gcGFnZSBsb2FkKSBvciBsb3ctcmVzXG4vLyAocmVsYXRpdmUgdG8gVU5JWCBlcG9jaCksIHNvIGluIG9yZGVyIHRvIGNvbXBhcmUgdGltZSB3ZSBoYXZlIHRvIHVzZSB0aGVcbi8vIHNhbWUgdGltZXN0YW1wIHR5cGUgd2hlbiBzYXZpbmcgdGhlIGZsdXNoIHRpbWVzdGFtcC5cbi8vIEFsbCBJRSB2ZXJzaW9ucyB1c2UgbG93LXJlcyBldmVudCB0aW1lc3RhbXBzLCBhbmQgaGF2ZSBwcm9ibGVtYXRpYyBjbG9ja1xuLy8gaW1wbGVtZW50YXRpb25zICgjOTYzMilcbmlmKGluQnJvd3NlciYmIWlzSUUpe3ZhciBwZXJmb3JtYW5jZT13aW5kb3cucGVyZm9ybWFuY2U7aWYocGVyZm9ybWFuY2UmJnR5cGVvZiBwZXJmb3JtYW5jZS5ub3c9PT0nZnVuY3Rpb24nJiZnZXROb3coKT5kb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKS50aW1lU3RhbXApey8vIGlmIHRoZSBldmVudCB0aW1lc3RhbXAsIGFsdGhvdWdoIGV2YWx1YXRlZCBBRlRFUiB0aGUgRGF0ZS5ub3coKSwgaXNcbi8vIHNtYWxsZXIgdGhhbiBpdCwgaXQgbWVhbnMgdGhlIGV2ZW50IGlzIHVzaW5nIGEgaGktcmVzIHRpbWVzdGFtcCxcbi8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXNcbi8vIHdlbGwuXG5nZXROb3c9ZnVuY3Rpb24gZ2V0Tm93KCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpO307fX0vKipcbiAgICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gICAqL2Z1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUoKXtjdXJyZW50Rmx1c2hUaW1lc3RhbXA9Z2V0Tm93KCk7Zmx1c2hpbmc9dHJ1ZTt2YXIgd2F0Y2hlcixpZDsvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbi8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKVxuLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1bixcbi8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cbnF1ZXVlLnNvcnQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5pZC1iLmlkO30pOy8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG5mb3IoaW5kZXg9MDtpbmRleDxxdWV1ZS5sZW5ndGg7aW5kZXgrKyl7d2F0Y2hlcj1xdWV1ZVtpbmRleF07aWYod2F0Y2hlci5iZWZvcmUpe3dhdGNoZXIuYmVmb3JlKCk7fWlkPXdhdGNoZXIuaWQ7aGFzW2lkXT1udWxsO3dhdGNoZXIucnVuKCk7fS8vIGtlZXAgY29waWVzIG9mIHBvc3QgcXVldWVzIGJlZm9yZSByZXNldHRpbmcgc3RhdGVcbnZhciBhY3RpdmF0ZWRRdWV1ZT1hY3RpdmF0ZWRDaGlsZHJlbi5zbGljZSgpO3ZhciB1cGRhdGVkUXVldWU9cXVldWUuc2xpY2UoKTtyZXNldFNjaGVkdWxlclN0YXRlKCk7Ly8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG5jYWxsQWN0aXZhdGVkSG9va3MoYWN0aXZhdGVkUXVldWUpO2NhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTsvLyBkZXZ0b29sIGhvb2tcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKGRldnRvb2xzJiZjb25maWcuZGV2dG9vbHMpe2RldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7fX1mdW5jdGlvbiBjYWxsVXBkYXRlZEhvb2tzKHF1ZXVlKXt2YXIgaT1xdWV1ZS5sZW5ndGg7d2hpbGUoaS0tKXt2YXIgd2F0Y2hlcj1xdWV1ZVtpXTt2YXIgdm09d2F0Y2hlci52bTtpZih2bS5fd2F0Y2hlcj09PXdhdGNoZXImJnZtLl9pc01vdW50ZWQmJiF2bS5faXNEZXN0cm95ZWQpe2NhbGxIb29rKHZtLCd1cGRhdGVkJyk7fX19LyoqXG4gICAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAgICogVGhlIHF1ZXVlIHdpbGwgYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSBlbnRpcmUgdHJlZSBoYXMgYmVlbiBwYXRjaGVkLlxuICAgKi9mdW5jdGlvbiBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudCh2bSl7Ly8gc2V0dGluZyBfaW5hY3RpdmUgdG8gZmFsc2UgaGVyZSBzbyB0aGF0IGEgcmVuZGVyIGZ1bmN0aW9uIGNhblxuLy8gcmVseSBvbiBjaGVja2luZyB3aGV0aGVyIGl0J3MgaW4gYW4gaW5hY3RpdmUgdHJlZSAoZS5nLiByb3V0ZXItdmlldylcbnZtLl9pbmFjdGl2ZT1mYWxzZTthY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTt9ZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzKHF1ZXVlKXtmb3IodmFyIGk9MDtpPHF1ZXVlLmxlbmd0aDtpKyspe3F1ZXVlW2ldLl9pbmFjdGl2ZT10cnVlO2FjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sdHJ1ZS8qIHRydWUgKi8pO319LyoqXG4gICAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXG4gICAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICAgKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAgICovZnVuY3Rpb24gcXVldWVXYXRjaGVyKHdhdGNoZXIpe3ZhciBpZD13YXRjaGVyLmlkO2lmKGhhc1tpZF09PW51bGwpe2hhc1tpZF09dHJ1ZTtpZighZmx1c2hpbmcpe3F1ZXVlLnB1c2god2F0Y2hlcik7fWVsc2V7Ly8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbnZhciBpPXF1ZXVlLmxlbmd0aC0xO3doaWxlKGk+aW5kZXgmJnF1ZXVlW2ldLmlkPndhdGNoZXIuaWQpe2ktLTt9cXVldWUuc3BsaWNlKGkrMSwwLHdhdGNoZXIpO30vLyBxdWV1ZSB0aGUgZmx1c2hcbmlmKCF3YWl0aW5nKXt3YWl0aW5nPXRydWU7bmV4dFRpY2soZmx1c2hTY2hlZHVsZXJRdWV1ZSk7fX19LyogICovdmFyIHVpZCQyPTA7LyoqXG4gICAqIEEgd2F0Y2hlciBwYXJzZXMgYW4gZXhwcmVzc2lvbiwgY29sbGVjdHMgZGVwZW5kZW5jaWVzLFxuICAgKiBhbmQgZmlyZXMgY2FsbGJhY2sgd2hlbiB0aGUgZXhwcmVzc2lvbiB2YWx1ZSBjaGFuZ2VzLlxuICAgKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAgICovdmFyIFdhdGNoZXI9ZnVuY3Rpb24gV2F0Y2hlcih2bSxleHBPckZuLGNiLG9wdGlvbnMsaXNSZW5kZXJXYXRjaGVyKXt0aGlzLnZtPXZtO2lmKGlzUmVuZGVyV2F0Y2hlcil7dm0uX3dhdGNoZXI9dGhpczt9dm0uX3dhdGNoZXJzLnB1c2godGhpcyk7Ly8gb3B0aW9uc1xuaWYob3B0aW9ucyl7dGhpcy5kZWVwPSEhb3B0aW9ucy5kZWVwO3RoaXMudXNlcj0hIW9wdGlvbnMudXNlcjt0aGlzLmxhenk9ISFvcHRpb25zLmxhenk7dGhpcy5zeW5jPSEhb3B0aW9ucy5zeW5jO3RoaXMuYmVmb3JlPW9wdGlvbnMuYmVmb3JlO31lbHNle3RoaXMuZGVlcD10aGlzLnVzZXI9dGhpcy5sYXp5PXRoaXMuc3luYz1mYWxzZTt9dGhpcy5jYj1jYjt0aGlzLmlkPSsrdWlkJDI7Ly8gdWlkIGZvciBiYXRjaGluZ1xudGhpcy5hY3RpdmU9dHJ1ZTt0aGlzLmRpcnR5PXRoaXMubGF6eTsvLyBmb3IgbGF6eSB3YXRjaGVyc1xudGhpcy5kZXBzPVtdO3RoaXMubmV3RGVwcz1bXTt0aGlzLmRlcElkcz1uZXcgX1NldCgpO3RoaXMubmV3RGVwSWRzPW5ldyBfU2V0KCk7dGhpcy5leHByZXNzaW9uPScnOy8vIHBhcnNlIGV4cHJlc3Npb24gZm9yIGdldHRlclxuaWYodHlwZW9mIGV4cE9yRm49PT0nZnVuY3Rpb24nKXt0aGlzLmdldHRlcj1leHBPckZuO31lbHNle3RoaXMuZ2V0dGVyPXBhcnNlUGF0aChleHBPckZuKTtpZighdGhpcy5nZXR0ZXIpe3RoaXMuZ2V0dGVyPW5vb3A7fX10aGlzLnZhbHVlPXRoaXMubGF6eT91bmRlZmluZWQ6dGhpcy5nZXQoKTt9Oy8qKlxuICAgKiBFdmFsdWF0ZSB0aGUgZ2V0dGVyLCBhbmQgcmUtY29sbGVjdCBkZXBlbmRlbmNpZXMuXG4gICAqL1dhdGNoZXIucHJvdG90eXBlLmdldD1mdW5jdGlvbiBnZXQoKXtwdXNoVGFyZ2V0KHRoaXMpO3ZhciB2YWx1ZTt2YXIgdm09dGhpcy52bTt0cnl7dmFsdWU9dGhpcy5nZXR0ZXIuY2FsbCh2bSx2bSk7fWNhdGNoKGUpe2lmKHRoaXMudXNlcil7aGFuZGxlRXJyb3IoZSx2bSxcImdldHRlciBmb3Igd2F0Y2hlciBcXFwiXCIrdGhpcy5leHByZXNzaW9uK1wiXFxcIlwiKTt9ZWxzZXt0aHJvdyBlO319ZmluYWxseXsvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbi8vIGRlcGVuZGVuY2llcyBmb3IgZGVlcCB3YXRjaGluZ1xuaWYodGhpcy5kZWVwKXt0cmF2ZXJzZSh2YWx1ZSk7fXBvcFRhcmdldCgpO3RoaXMuY2xlYW51cERlcHMoKTt9cmV0dXJuIHZhbHVlO307LyoqXG4gICAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuXG4gICAqL1dhdGNoZXIucHJvdG90eXBlLmFkZERlcD1mdW5jdGlvbiBhZGREZXAoZGVwKXt2YXIgaWQ9ZGVwLmlkO2lmKCF0aGlzLm5ld0RlcElkcy5oYXMoaWQpKXt0aGlzLm5ld0RlcElkcy5hZGQoaWQpO3RoaXMubmV3RGVwcy5wdXNoKGRlcCk7aWYoIXRoaXMuZGVwSWRzLmhhcyhpZCkpe2RlcC5hZGRTdWIodGhpcyk7fX19Oy8qKlxuICAgKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICAgKi9XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcz1mdW5jdGlvbiBjbGVhbnVwRGVwcygpe3ZhciBpPXRoaXMuZGVwcy5sZW5ndGg7d2hpbGUoaS0tKXt2YXIgZGVwPXRoaXMuZGVwc1tpXTtpZighdGhpcy5uZXdEZXBJZHMuaGFzKGRlcC5pZCkpe2RlcC5yZW1vdmVTdWIodGhpcyk7fX12YXIgdG1wPXRoaXMuZGVwSWRzO3RoaXMuZGVwSWRzPXRoaXMubmV3RGVwSWRzO3RoaXMubmV3RGVwSWRzPXRtcDt0aGlzLm5ld0RlcElkcy5jbGVhcigpO3RtcD10aGlzLmRlcHM7dGhpcy5kZXBzPXRoaXMubmV3RGVwczt0aGlzLm5ld0RlcHM9dG1wO3RoaXMubmV3RGVwcy5sZW5ndGg9MDt9Oy8qKlxuICAgKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAgICogV2lsbCBiZSBjYWxsZWQgd2hlbiBhIGRlcGVuZGVuY3kgY2hhbmdlcy5cbiAgICovV2F0Y2hlci5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uIHVwZGF0ZSgpey8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovaWYodGhpcy5sYXp5KXt0aGlzLmRpcnR5PXRydWU7fWVsc2UgaWYodGhpcy5zeW5jKXt0aGlzLnJ1bigpO31lbHNle3F1ZXVlV2F0Y2hlcih0aGlzKTt9fTsvKipcbiAgICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gICAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gICAqL1dhdGNoZXIucHJvdG90eXBlLnJ1bj1mdW5jdGlvbiBydW4oKXtpZih0aGlzLmFjdGl2ZSl7dmFyIHZhbHVlPXRoaXMuZ2V0KCk7aWYodmFsdWUhPT10aGlzLnZhbHVlfHwvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbi8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbi8vIGhhdmUgbXV0YXRlZC5cbmlzT2JqZWN0KHZhbHVlKXx8dGhpcy5kZWVwKXsvLyBzZXQgbmV3IHZhbHVlXG52YXIgb2xkVmFsdWU9dGhpcy52YWx1ZTt0aGlzLnZhbHVlPXZhbHVlO2lmKHRoaXMudXNlcil7dHJ5e3RoaXMuY2IuY2FsbCh0aGlzLnZtLHZhbHVlLG9sZFZhbHVlKTt9Y2F0Y2goZSl7aGFuZGxlRXJyb3IoZSx0aGlzLnZtLFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiK3RoaXMuZXhwcmVzc2lvbitcIlxcXCJcIik7fX1lbHNle3RoaXMuY2IuY2FsbCh0aGlzLnZtLHZhbHVlLG9sZFZhbHVlKTt9fX19Oy8qKlxuICAgKiBFdmFsdWF0ZSB0aGUgdmFsdWUgb2YgdGhlIHdhdGNoZXIuXG4gICAqIFRoaXMgb25seSBnZXRzIGNhbGxlZCBmb3IgbGF6eSB3YXRjaGVycy5cbiAgICovV2F0Y2hlci5wcm90b3R5cGUuZXZhbHVhdGU9ZnVuY3Rpb24gZXZhbHVhdGUoKXt0aGlzLnZhbHVlPXRoaXMuZ2V0KCk7dGhpcy5kaXJ0eT1mYWxzZTt9Oy8qKlxuICAgKiBEZXBlbmQgb24gYWxsIGRlcHMgY29sbGVjdGVkIGJ5IHRoaXMgd2F0Y2hlci5cbiAgICovV2F0Y2hlci5wcm90b3R5cGUuZGVwZW5kPWZ1bmN0aW9uIGRlcGVuZCgpe3ZhciBpPXRoaXMuZGVwcy5sZW5ndGg7d2hpbGUoaS0tKXt0aGlzLmRlcHNbaV0uZGVwZW5kKCk7fX07LyoqXG4gICAqIFJlbW92ZSBzZWxmIGZyb20gYWxsIGRlcGVuZGVuY2llcycgc3Vic2NyaWJlciBsaXN0LlxuICAgKi9XYXRjaGVyLnByb3RvdHlwZS50ZWFyZG93bj1mdW5jdGlvbiB0ZWFyZG93bigpe2lmKHRoaXMuYWN0aXZlKXsvLyByZW1vdmUgc2VsZiBmcm9tIHZtJ3Mgd2F0Y2hlciBsaXN0XG4vLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4vLyBpZiB0aGUgdm0gaXMgYmVpbmcgZGVzdHJveWVkLlxuaWYoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpe3JlbW92ZSh0aGlzLnZtLl93YXRjaGVycyx0aGlzKTt9dmFyIGk9dGhpcy5kZXBzLmxlbmd0aDt3aGlsZShpLS0pe3RoaXMuZGVwc1tpXS5yZW1vdmVTdWIodGhpcyk7fXRoaXMuYWN0aXZlPWZhbHNlO319Oy8qICAqL3ZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb249e2VudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSxnZXQ6bm9vcCxzZXQ6bm9vcH07ZnVuY3Rpb24gcHJveHkodGFyZ2V0LHNvdXJjZUtleSxrZXkpe3NoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQ9ZnVuY3Rpb24gcHJveHlHZXR0ZXIoKXtyZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV07fTtzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0PWZ1bmN0aW9uIHByb3h5U2V0dGVyKHZhbCl7dGhpc1tzb3VyY2VLZXldW2tleV09dmFsO307T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxrZXksc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTt9ZnVuY3Rpb24gaW5pdFN0YXRlKHZtKXt2bS5fd2F0Y2hlcnM9W107dmFyIG9wdHM9dm0uJG9wdGlvbnM7aWYob3B0cy5wcm9wcyl7aW5pdFByb3BzKHZtLG9wdHMucHJvcHMpO31pZihvcHRzLm1ldGhvZHMpe2luaXRNZXRob2RzKHZtLG9wdHMubWV0aG9kcyk7fWlmKG9wdHMuZGF0YSl7aW5pdERhdGEodm0pO31lbHNle29ic2VydmUodm0uX2RhdGE9e30sdHJ1ZS8qIGFzUm9vdERhdGEgKi8pO31pZihvcHRzLmNvbXB1dGVkKXtpbml0Q29tcHV0ZWQodm0sb3B0cy5jb21wdXRlZCk7fWlmKG9wdHMud2F0Y2gmJm9wdHMud2F0Y2ghPT1uYXRpdmVXYXRjaCl7aW5pdFdhdGNoKHZtLG9wdHMud2F0Y2gpO319ZnVuY3Rpb24gaW5pdFByb3BzKHZtLHByb3BzT3B0aW9ucyl7dmFyIHByb3BzRGF0YT12bS4kb3B0aW9ucy5wcm9wc0RhdGF8fHt9O3ZhciBwcm9wcz12bS5fcHJvcHM9e307Ly8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbi8vIGluc3RlYWQgb2YgZHluYW1pYyBvYmplY3Qga2V5IGVudW1lcmF0aW9uLlxudmFyIGtleXM9dm0uJG9wdGlvbnMuX3Byb3BLZXlzPVtdO3ZhciBpc1Jvb3Q9IXZtLiRwYXJlbnQ7Ly8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG5pZighaXNSb290KXt0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO312YXIgbG9vcD1mdW5jdGlvbiBsb29wKGtleSl7a2V5cy5wdXNoKGtleSk7dmFyIHZhbHVlPXZhbGlkYXRlUHJvcChrZXkscHJvcHNPcHRpb25zLHByb3BzRGF0YSx2bSk7LyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi97ZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsa2V5LHZhbHVlKTt9Ly8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbi8vIGluc3RhbnRpYXRpb24gaGVyZS5cbmlmKCEoa2V5IGluIHZtKSl7cHJveHkodm0sXCJfcHJvcHNcIixrZXkpO319O2Zvcih2YXIga2V5IGluIHByb3BzT3B0aW9ucyl7bG9vcChrZXkpO310b2dnbGVPYnNlcnZpbmcodHJ1ZSk7fWZ1bmN0aW9uIGluaXREYXRhKHZtKXt2YXIgZGF0YT12bS4kb3B0aW9ucy5kYXRhO2RhdGE9dm0uX2RhdGE9dHlwZW9mIGRhdGE9PT0nZnVuY3Rpb24nP2dldERhdGEoZGF0YSx2bSk6ZGF0YXx8e307aWYoIWlzUGxhaW5PYmplY3QoZGF0YSkpe2RhdGE9e307fS8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbnZhciBrZXlzPU9iamVjdC5rZXlzKGRhdGEpO3ZhciBwcm9wcz12bS4kb3B0aW9ucy5wcm9wczt2YXIgbWV0aG9kcz12bS4kb3B0aW9ucy5tZXRob2RzO3ZhciBpPWtleXMubGVuZ3RoO3doaWxlKGktLSl7dmFyIGtleT1rZXlzW2ldO2lmKHByb3BzJiZoYXNPd24ocHJvcHMsa2V5KSk7ZWxzZSBpZighaXNSZXNlcnZlZChrZXkpKXtwcm94eSh2bSxcIl9kYXRhXCIsa2V5KTt9fS8vIG9ic2VydmUgZGF0YVxub2JzZXJ2ZShkYXRhLHRydWUvKiBhc1Jvb3REYXRhICovKTt9ZnVuY3Rpb24gZ2V0RGF0YShkYXRhLHZtKXsvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzXG5wdXNoVGFyZ2V0KCk7dHJ5e3JldHVybiBkYXRhLmNhbGwodm0sdm0pO31jYXRjaChlKXtoYW5kbGVFcnJvcihlLHZtLFwiZGF0YSgpXCIpO3JldHVybnt9O31maW5hbGx5e3BvcFRhcmdldCgpO319dmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnM9e2xhenk6dHJ1ZX07ZnVuY3Rpb24gaW5pdENvbXB1dGVkKHZtLGNvbXB1dGVkKXsvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbnZhciB3YXRjaGVycz12bS5fY29tcHV0ZWRXYXRjaGVycz1PYmplY3QuY3JlYXRlKG51bGwpOy8vIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGp1c3QgZ2V0dGVycyBkdXJpbmcgU1NSXG52YXIgaXNTU1I9aXNTZXJ2ZXJSZW5kZXJpbmcoKTtmb3IodmFyIGtleSBpbiBjb21wdXRlZCl7dmFyIHVzZXJEZWY9Y29tcHV0ZWRba2V5XTt2YXIgZ2V0dGVyPXR5cGVvZiB1c2VyRGVmPT09J2Z1bmN0aW9uJz91c2VyRGVmOnVzZXJEZWYuZ2V0O2lmKCFpc1NTUil7Ly8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbndhdGNoZXJzW2tleV09bmV3IFdhdGNoZXIodm0sZ2V0dGVyfHxub29wLG5vb3AsY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyk7fS8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbi8vIGNvbXBvbmVudCBwcm90b3R5cGUuIFdlIG9ubHkgbmVlZCB0byBkZWZpbmUgY29tcHV0ZWQgcHJvcGVydGllcyBkZWZpbmVkXG4vLyBhdCBpbnN0YW50aWF0aW9uIGhlcmUuXG5pZighKGtleSBpbiB2bSkpe2RlZmluZUNvbXB1dGVkKHZtLGtleSx1c2VyRGVmKTt9fX1mdW5jdGlvbiBkZWZpbmVDb21wdXRlZCh0YXJnZXQsa2V5LHVzZXJEZWYpe3ZhciBzaG91bGRDYWNoZT0haXNTZXJ2ZXJSZW5kZXJpbmcoKTtpZih0eXBlb2YgdXNlckRlZj09PSdmdW5jdGlvbicpe3NoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQ9c2hvdWxkQ2FjaGU/Y3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KTpjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYpO3NoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQ9bm9vcDt9ZWxzZXtzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0PXVzZXJEZWYuZ2V0P3Nob3VsZENhY2hlJiZ1c2VyRGVmLmNhY2hlIT09ZmFsc2U/Y3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KTpjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYuZ2V0KTpub29wO3NoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQ9dXNlckRlZi5zZXR8fG5vb3A7fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsa2V5LHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbik7fWZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSl7cmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyKCl7dmFyIHdhdGNoZXI9dGhpcy5fY29tcHV0ZWRXYXRjaGVycyYmdGhpcy5fY29tcHV0ZWRXYXRjaGVyc1trZXldO2lmKHdhdGNoZXIpe2lmKHdhdGNoZXIuZGlydHkpe3dhdGNoZXIuZXZhbHVhdGUoKTt9aWYoRGVwLnRhcmdldCl7d2F0Y2hlci5kZXBlbmQoKTt9cmV0dXJuIHdhdGNoZXIudmFsdWU7fX07fWZ1bmN0aW9uIGNyZWF0ZUdldHRlckludm9rZXIoZm4pe3JldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlcigpe3JldHVybiBmbi5jYWxsKHRoaXMsdGhpcyk7fTt9ZnVuY3Rpb24gaW5pdE1ldGhvZHModm0sbWV0aG9kcyl7dmFyIHByb3BzPXZtLiRvcHRpb25zLnByb3BzO2Zvcih2YXIga2V5IGluIG1ldGhvZHMpe3ZtW2tleV09dHlwZW9mIG1ldGhvZHNba2V5XSE9PSdmdW5jdGlvbic/bm9vcDpiaW5kKG1ldGhvZHNba2V5XSx2bSk7fX1mdW5jdGlvbiBpbml0V2F0Y2godm0sd2F0Y2gpe2Zvcih2YXIga2V5IGluIHdhdGNoKXt2YXIgaGFuZGxlcj13YXRjaFtrZXldO2lmKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpe2Zvcih2YXIgaT0wO2k8aGFuZGxlci5sZW5ndGg7aSsrKXtjcmVhdGVXYXRjaGVyKHZtLGtleSxoYW5kbGVyW2ldKTt9fWVsc2V7Y3JlYXRlV2F0Y2hlcih2bSxrZXksaGFuZGxlcik7fX19ZnVuY3Rpb24gY3JlYXRlV2F0Y2hlcih2bSxleHBPckZuLGhhbmRsZXIsb3B0aW9ucyl7aWYoaXNQbGFpbk9iamVjdChoYW5kbGVyKSl7b3B0aW9ucz1oYW5kbGVyO2hhbmRsZXI9aGFuZGxlci5oYW5kbGVyO31pZih0eXBlb2YgaGFuZGxlcj09PSdzdHJpbmcnKXtoYW5kbGVyPXZtW2hhbmRsZXJdO31yZXR1cm4gdm0uJHdhdGNoKGV4cE9yRm4saGFuZGxlcixvcHRpb25zKTt9ZnVuY3Rpb24gc3RhdGVNaXhpbihWdWUpey8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuLy8gd2hlbiB1c2luZyBPYmplY3QuZGVmaW5lUHJvcGVydHksIHNvIHdlIGhhdmUgdG8gcHJvY2VkdXJhbGx5IGJ1aWxkIHVwXG4vLyB0aGUgb2JqZWN0IGhlcmUuXG52YXIgZGF0YURlZj17fTtkYXRhRGVmLmdldD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9kYXRhO307dmFyIHByb3BzRGVmPXt9O3Byb3BzRGVmLmdldD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9wcm9wczt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCckZGF0YScsZGF0YURlZik7T2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsJyRwcm9wcycscHJvcHNEZWYpO1Z1ZS5wcm90b3R5cGUuJHNldD1zZXQ7VnVlLnByb3RvdHlwZS4kZGVsZXRlPWRlbDtWdWUucHJvdG90eXBlLiR3YXRjaD1mdW5jdGlvbihleHBPckZuLGNiLG9wdGlvbnMpe3ZhciB2bT10aGlzO2lmKGlzUGxhaW5PYmplY3QoY2IpKXtyZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSxleHBPckZuLGNiLG9wdGlvbnMpO31vcHRpb25zPW9wdGlvbnN8fHt9O29wdGlvbnMudXNlcj10cnVlO3ZhciB3YXRjaGVyPW5ldyBXYXRjaGVyKHZtLGV4cE9yRm4sY2Isb3B0aW9ucyk7aWYob3B0aW9ucy5pbW1lZGlhdGUpe3RyeXtjYi5jYWxsKHZtLHdhdGNoZXIudmFsdWUpO31jYXRjaChlcnJvcil7aGFuZGxlRXJyb3IoZXJyb3Isdm0sXCJjYWxsYmFjayBmb3IgaW1tZWRpYXRlIHdhdGNoZXIgXFxcIlwiK3dhdGNoZXIuZXhwcmVzc2lvbitcIlxcXCJcIik7fX1yZXR1cm4gZnVuY3Rpb24gdW53YXRjaEZuKCl7d2F0Y2hlci50ZWFyZG93bigpO307fTt9LyogICovdmFyIHVpZCQzPTA7ZnVuY3Rpb24gaW5pdE1peGluKFZ1ZSl7VnVlLnByb3RvdHlwZS5faW5pdD1mdW5jdGlvbihvcHRpb25zKXt2YXIgdm09dGhpczsvLyBhIHVpZFxudm0uX3VpZD11aWQkMysrOy8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG52bS5faXNWdWU9dHJ1ZTsvLyBtZXJnZSBvcHRpb25zXG5pZihvcHRpb25zJiZvcHRpb25zLl9pc0NvbXBvbmVudCl7Ly8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cbi8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcbi8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LlxuaW5pdEludGVybmFsQ29tcG9uZW50KHZtLG9wdGlvbnMpO31lbHNle3ZtLiRvcHRpb25zPW1lcmdlT3B0aW9ucyhyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKHZtLmNvbnN0cnVjdG9yKSxvcHRpb25zfHx7fSx2bSk7fS8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICove3ZtLl9yZW5kZXJQcm94eT12bTt9Ly8gZXhwb3NlIHJlYWwgc2VsZlxudm0uX3NlbGY9dm07aW5pdExpZmVjeWNsZSh2bSk7aW5pdEV2ZW50cyh2bSk7aW5pdFJlbmRlcih2bSk7Y2FsbEhvb2sodm0sJ2JlZm9yZUNyZWF0ZScpO2luaXRJbmplY3Rpb25zKHZtKTsvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbmluaXRTdGF0ZSh2bSk7aW5pdFByb3ZpZGUodm0pOy8vIHJlc29sdmUgcHJvdmlkZSBhZnRlciBkYXRhL3Byb3BzXG5jYWxsSG9vayh2bSwnY3JlYXRlZCcpO2lmKHZtLiRvcHRpb25zLmVsKXt2bS4kbW91bnQodm0uJG9wdGlvbnMuZWwpO319O31mdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sb3B0aW9ucyl7dmFyIG9wdHM9dm0uJG9wdGlvbnM9T2JqZWN0LmNyZWF0ZSh2bS5jb25zdHJ1Y3Rvci5vcHRpb25zKTsvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxudmFyIHBhcmVudFZub2RlPW9wdGlvbnMuX3BhcmVudFZub2RlO29wdHMucGFyZW50PW9wdGlvbnMucGFyZW50O29wdHMuX3BhcmVudFZub2RlPXBhcmVudFZub2RlO3ZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnM9cGFyZW50Vm5vZGUuY29tcG9uZW50T3B0aW9ucztvcHRzLnByb3BzRGF0YT12bm9kZUNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhO29wdHMuX3BhcmVudExpc3RlbmVycz12bm9kZUNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzO29wdHMuX3JlbmRlckNoaWxkcmVuPXZub2RlQ29tcG9uZW50T3B0aW9ucy5jaGlsZHJlbjtvcHRzLl9jb21wb25lbnRUYWc9dm5vZGVDb21wb25lbnRPcHRpb25zLnRhZztpZihvcHRpb25zLnJlbmRlcil7b3B0cy5yZW5kZXI9b3B0aW9ucy5yZW5kZXI7b3B0cy5zdGF0aWNSZW5kZXJGbnM9b3B0aW9ucy5zdGF0aWNSZW5kZXJGbnM7fX1mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Ipe3ZhciBvcHRpb25zPUN0b3Iub3B0aW9ucztpZihDdG9yW1wic3VwZXJcIl0pe3ZhciBzdXBlck9wdGlvbnM9cmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yW1wic3VwZXJcIl0pO3ZhciBjYWNoZWRTdXBlck9wdGlvbnM9Q3Rvci5zdXBlck9wdGlvbnM7aWYoc3VwZXJPcHRpb25zIT09Y2FjaGVkU3VwZXJPcHRpb25zKXsvLyBzdXBlciBvcHRpb24gY2hhbmdlZCxcbi8vIG5lZWQgdG8gcmVzb2x2ZSBuZXcgb3B0aW9ucy5cbkN0b3Iuc3VwZXJPcHRpb25zPXN1cGVyT3B0aW9uczsvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG52YXIgbW9kaWZpZWRPcHRpb25zPXJlc29sdmVNb2RpZmllZE9wdGlvbnMoQ3Rvcik7Ly8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbmlmKG1vZGlmaWVkT3B0aW9ucyl7ZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucyxtb2RpZmllZE9wdGlvbnMpO31vcHRpb25zPUN0b3Iub3B0aW9ucz1tZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLEN0b3IuZXh0ZW5kT3B0aW9ucyk7aWYob3B0aW9ucy5uYW1lKXtvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXT1DdG9yO319fXJldHVybiBvcHRpb25zO31mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zKEN0b3Ipe3ZhciBtb2RpZmllZDt2YXIgbGF0ZXN0PUN0b3Iub3B0aW9uczt2YXIgc2VhbGVkPUN0b3Iuc2VhbGVkT3B0aW9ucztmb3IodmFyIGtleSBpbiBsYXRlc3Qpe2lmKGxhdGVzdFtrZXldIT09c2VhbGVkW2tleV0pe2lmKCFtb2RpZmllZCl7bW9kaWZpZWQ9e307fW1vZGlmaWVkW2tleV09bGF0ZXN0W2tleV07fX1yZXR1cm4gbW9kaWZpZWQ7fWZ1bmN0aW9uIFZ1ZShvcHRpb25zKXt0aGlzLl9pbml0KG9wdGlvbnMpO31pbml0TWl4aW4oVnVlKTtzdGF0ZU1peGluKFZ1ZSk7ZXZlbnRzTWl4aW4oVnVlKTtsaWZlY3ljbGVNaXhpbihWdWUpO3JlbmRlck1peGluKFZ1ZSk7LyogICovZnVuY3Rpb24gaW5pdFVzZShWdWUpe1Z1ZS51c2U9ZnVuY3Rpb24ocGx1Z2luKXt2YXIgaW5zdGFsbGVkUGx1Z2lucz10aGlzLl9pbnN0YWxsZWRQbHVnaW5zfHwodGhpcy5faW5zdGFsbGVkUGx1Z2lucz1bXSk7aWYoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbik+LTEpe3JldHVybiB0aGlzO30vLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbnZhciBhcmdzPXRvQXJyYXkoYXJndW1lbnRzLDEpO2FyZ3MudW5zaGlmdCh0aGlzKTtpZih0eXBlb2YgcGx1Z2luLmluc3RhbGw9PT0nZnVuY3Rpb24nKXtwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sYXJncyk7fWVsc2UgaWYodHlwZW9mIHBsdWdpbj09PSdmdW5jdGlvbicpe3BsdWdpbi5hcHBseShudWxsLGFyZ3MpO31pbnN0YWxsZWRQbHVnaW5zLnB1c2gocGx1Z2luKTtyZXR1cm4gdGhpczt9O30vKiAgKi9mdW5jdGlvbiBpbml0TWl4aW4kMShWdWUpe1Z1ZS5taXhpbj1mdW5jdGlvbihtaXhpbil7dGhpcy5vcHRpb25zPW1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsbWl4aW4pO3JldHVybiB0aGlzO307fS8qICAqL2Z1bmN0aW9uIGluaXRFeHRlbmQoVnVlKXsvKipcbiAgICAgKiBFYWNoIGluc3RhbmNlIGNvbnN0cnVjdG9yLCBpbmNsdWRpbmcgVnVlLCBoYXMgYSB1bmlxdWVcbiAgICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAgICogY29uc3RydWN0b3JzXCIgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UgYW5kIGNhY2hlIHRoZW0uXG4gICAgICovVnVlLmNpZD0wO3ZhciBjaWQ9MTsvKipcbiAgICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgICAqL1Z1ZS5leHRlbmQ9ZnVuY3Rpb24oZXh0ZW5kT3B0aW9ucyl7ZXh0ZW5kT3B0aW9ucz1leHRlbmRPcHRpb25zfHx7fTt2YXIgU3VwZXI9dGhpczt2YXIgU3VwZXJJZD1TdXBlci5jaWQ7dmFyIGNhY2hlZEN0b3JzPWV4dGVuZE9wdGlvbnMuX0N0b3J8fChleHRlbmRPcHRpb25zLl9DdG9yPXt9KTtpZihjYWNoZWRDdG9yc1tTdXBlcklkXSl7cmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdO312YXIgbmFtZT1leHRlbmRPcHRpb25zLm5hbWV8fFN1cGVyLm9wdGlvbnMubmFtZTt2YXIgU3ViPWZ1bmN0aW9uIFZ1ZUNvbXBvbmVudChvcHRpb25zKXt0aGlzLl9pbml0KG9wdGlvbnMpO307U3ViLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7U3ViLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1TdWI7U3ViLmNpZD1jaWQrKztTdWIub3B0aW9ucz1tZXJnZU9wdGlvbnMoU3VwZXIub3B0aW9ucyxleHRlbmRPcHRpb25zKTtTdWJbJ3N1cGVyJ109U3VwZXI7Ly8gRm9yIHByb3BzIGFuZCBjb21wdXRlZCBwcm9wZXJ0aWVzLCB3ZSBkZWZpbmUgdGhlIHByb3h5IGdldHRlcnMgb25cbi8vIHRoZSBWdWUgaW5zdGFuY2VzIGF0IGV4dGVuc2lvbiB0aW1lLCBvbiB0aGUgZXh0ZW5kZWQgcHJvdG90eXBlLiBUaGlzXG4vLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG5pZihTdWIub3B0aW9ucy5wcm9wcyl7aW5pdFByb3BzJDEoU3ViKTt9aWYoU3ViLm9wdGlvbnMuY29tcHV0ZWQpe2luaXRDb21wdXRlZCQxKFN1Yik7fS8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuU3ViLmV4dGVuZD1TdXBlci5leHRlbmQ7U3ViLm1peGluPVN1cGVyLm1peGluO1N1Yi51c2U9U3VwZXIudXNlOy8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbi8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbkFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24odHlwZSl7U3ViW3R5cGVdPVN1cGVyW3R5cGVdO30pOy8vIGVuYWJsZSByZWN1cnNpdmUgc2VsZi1sb29rdXBcbmlmKG5hbWUpe1N1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV09U3ViO30vLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBzdXBlciBvcHRpb25zIGF0IGV4dGVuc2lvbiB0aW1lLlxuLy8gbGF0ZXIgYXQgaW5zdGFudGlhdGlvbiB3ZSBjYW4gY2hlY2sgaWYgU3VwZXIncyBvcHRpb25zIGhhdmVcbi8vIGJlZW4gdXBkYXRlZC5cblN1Yi5zdXBlck9wdGlvbnM9U3VwZXIub3B0aW9ucztTdWIuZXh0ZW5kT3B0aW9ucz1leHRlbmRPcHRpb25zO1N1Yi5zZWFsZWRPcHRpb25zPWV4dGVuZCh7fSxTdWIub3B0aW9ucyk7Ly8gY2FjaGUgY29uc3RydWN0b3JcbmNhY2hlZEN0b3JzW1N1cGVySWRdPVN1YjtyZXR1cm4gU3ViO307fWZ1bmN0aW9uIGluaXRQcm9wcyQxKENvbXApe3ZhciBwcm9wcz1Db21wLm9wdGlvbnMucHJvcHM7Zm9yKHZhciBrZXkgaW4gcHJvcHMpe3Byb3h5KENvbXAucHJvdG90eXBlLFwiX3Byb3BzXCIsa2V5KTt9fWZ1bmN0aW9uIGluaXRDb21wdXRlZCQxKENvbXApe3ZhciBjb21wdXRlZD1Db21wLm9wdGlvbnMuY29tcHV0ZWQ7Zm9yKHZhciBrZXkgaW4gY29tcHV0ZWQpe2RlZmluZUNvbXB1dGVkKENvbXAucHJvdG90eXBlLGtleSxjb21wdXRlZFtrZXldKTt9fS8qICAqL2Z1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyhWdWUpey8qKlxuICAgICAqIENyZWF0ZSBhc3NldCByZWdpc3RyYXRpb24gbWV0aG9kcy5cbiAgICAgKi9BU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUpe1Z1ZVt0eXBlXT1mdW5jdGlvbihpZCxkZWZpbml0aW9uKXtpZighZGVmaW5pdGlvbil7cmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlKydzJ11baWRdO31lbHNle2lmKHR5cGU9PT0nY29tcG9uZW50JyYmaXNQbGFpbk9iamVjdChkZWZpbml0aW9uKSl7ZGVmaW5pdGlvbi5uYW1lPWRlZmluaXRpb24ubmFtZXx8aWQ7ZGVmaW5pdGlvbj10aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKGRlZmluaXRpb24pO31pZih0eXBlPT09J2RpcmVjdGl2ZScmJnR5cGVvZiBkZWZpbml0aW9uPT09J2Z1bmN0aW9uJyl7ZGVmaW5pdGlvbj17YmluZDpkZWZpbml0aW9uLHVwZGF0ZTpkZWZpbml0aW9ufTt9dGhpcy5vcHRpb25zW3R5cGUrJ3MnXVtpZF09ZGVmaW5pdGlvbjtyZXR1cm4gZGVmaW5pdGlvbjt9fTt9KTt9LyogICovZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZShvcHRzKXtyZXR1cm4gb3B0cyYmKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWV8fG9wdHMudGFnKTt9ZnVuY3Rpb24gbWF0Y2hlcyhwYXR0ZXJuLG5hbWUpe2lmKEFycmF5LmlzQXJyYXkocGF0dGVybikpe3JldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSk+LTE7fWVsc2UgaWYodHlwZW9mIHBhdHRlcm49PT0nc3RyaW5nJyl7cmV0dXJuIHBhdHRlcm4uc3BsaXQoJywnKS5pbmRleE9mKG5hbWUpPi0xO31lbHNlIGlmKGlzUmVnRXhwKHBhdHRlcm4pKXtyZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpO30vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL3JldHVybiBmYWxzZTt9ZnVuY3Rpb24gcHJ1bmVDYWNoZShrZWVwQWxpdmVJbnN0YW5jZSxmaWx0ZXIpe3ZhciBjYWNoZT1rZWVwQWxpdmVJbnN0YW5jZS5jYWNoZTt2YXIga2V5cz1rZWVwQWxpdmVJbnN0YW5jZS5rZXlzO3ZhciBfdm5vZGU9a2VlcEFsaXZlSW5zdGFuY2UuX3Zub2RlO2Zvcih2YXIga2V5IGluIGNhY2hlKXt2YXIgY2FjaGVkTm9kZT1jYWNoZVtrZXldO2lmKGNhY2hlZE5vZGUpe3ZhciBuYW1lPWdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtpZihuYW1lJiYhZmlsdGVyKG5hbWUpKXtwcnVuZUNhY2hlRW50cnkoY2FjaGUsa2V5LGtleXMsX3Zub2RlKTt9fX19ZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLGtleSxrZXlzLGN1cnJlbnQpe3ZhciBjYWNoZWQkJDE9Y2FjaGVba2V5XTtpZihjYWNoZWQkJDEmJighY3VycmVudHx8Y2FjaGVkJCQxLnRhZyE9PWN1cnJlbnQudGFnKSl7Y2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7fWNhY2hlW2tleV09bnVsbDtyZW1vdmUoa2V5cyxrZXkpO312YXIgcGF0dGVyblR5cGVzPVtTdHJpbmcsUmVnRXhwLEFycmF5XTt2YXIgS2VlcEFsaXZlPXtuYW1lOidrZWVwLWFsaXZlJyxcImFic3RyYWN0XCI6dHJ1ZSxwcm9wczp7aW5jbHVkZTpwYXR0ZXJuVHlwZXMsZXhjbHVkZTpwYXR0ZXJuVHlwZXMsbWF4OltTdHJpbmcsTnVtYmVyXX0sY3JlYXRlZDpmdW5jdGlvbiBjcmVhdGVkKCl7dGhpcy5jYWNoZT1PYmplY3QuY3JlYXRlKG51bGwpO3RoaXMua2V5cz1bXTt9LGRlc3Ryb3llZDpmdW5jdGlvbiBkZXN0cm95ZWQoKXtmb3IodmFyIGtleSBpbiB0aGlzLmNhY2hlKXtwcnVuZUNhY2hlRW50cnkodGhpcy5jYWNoZSxrZXksdGhpcy5rZXlzKTt9fSxtb3VudGVkOmZ1bmN0aW9uIG1vdW50ZWQoKXt2YXIgdGhpcyQxPXRoaXM7dGhpcy4kd2F0Y2goJ2luY2x1ZGUnLGZ1bmN0aW9uKHZhbCl7cHJ1bmVDYWNoZSh0aGlzJDEsZnVuY3Rpb24obmFtZSl7cmV0dXJuIG1hdGNoZXModmFsLG5hbWUpO30pO30pO3RoaXMuJHdhdGNoKCdleGNsdWRlJyxmdW5jdGlvbih2YWwpe3BydW5lQ2FjaGUodGhpcyQxLGZ1bmN0aW9uKG5hbWUpe3JldHVybiFtYXRjaGVzKHZhbCxuYW1lKTt9KTt9KTt9LHJlbmRlcjpmdW5jdGlvbiByZW5kZXIoKXt2YXIgc2xvdD10aGlzLiRzbG90c1tcImRlZmF1bHRcIl07dmFyIHZub2RlPWdldEZpcnN0Q29tcG9uZW50Q2hpbGQoc2xvdCk7dmFyIGNvbXBvbmVudE9wdGlvbnM9dm5vZGUmJnZub2RlLmNvbXBvbmVudE9wdGlvbnM7aWYoY29tcG9uZW50T3B0aW9ucyl7Ly8gY2hlY2sgcGF0dGVyblxudmFyIG5hbWU9Z2V0Q29tcG9uZW50TmFtZShjb21wb25lbnRPcHRpb25zKTt2YXIgcmVmPXRoaXM7dmFyIGluY2x1ZGU9cmVmLmluY2x1ZGU7dmFyIGV4Y2x1ZGU9cmVmLmV4Y2x1ZGU7aWYoLy8gbm90IGluY2x1ZGVkXG5pbmNsdWRlJiYoIW5hbWV8fCFtYXRjaGVzKGluY2x1ZGUsbmFtZSkpfHwvLyBleGNsdWRlZFxuZXhjbHVkZSYmbmFtZSYmbWF0Y2hlcyhleGNsdWRlLG5hbWUpKXtyZXR1cm4gdm5vZGU7fXZhciByZWYkMT10aGlzO3ZhciBjYWNoZT1yZWYkMS5jYWNoZTt2YXIga2V5cz1yZWYkMS5rZXlzO3ZhciBrZXk9dm5vZGUua2V5PT1udWxsLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcbi8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbj9jb21wb25lbnRPcHRpb25zLkN0b3IuY2lkKyhjb21wb25lbnRPcHRpb25zLnRhZz9cIjo6XCIrY29tcG9uZW50T3B0aW9ucy50YWc6JycpOnZub2RlLmtleTtpZihjYWNoZVtrZXldKXt2bm9kZS5jb21wb25lbnRJbnN0YW5jZT1jYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlOy8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3RcbnJlbW92ZShrZXlzLGtleSk7a2V5cy5wdXNoKGtleSk7fWVsc2V7Y2FjaGVba2V5XT12bm9kZTtrZXlzLnB1c2goa2V5KTsvLyBwcnVuZSBvbGRlc3QgZW50cnlcbmlmKHRoaXMubWF4JiZrZXlzLmxlbmd0aD5wYXJzZUludCh0aGlzLm1heCkpe3BydW5lQ2FjaGVFbnRyeShjYWNoZSxrZXlzWzBdLGtleXMsdGhpcy5fdm5vZGUpO319dm5vZGUuZGF0YS5rZWVwQWxpdmU9dHJ1ZTt9cmV0dXJuIHZub2RlfHxzbG90JiZzbG90WzBdO319O3ZhciBidWlsdEluQ29tcG9uZW50cz17S2VlcEFsaXZlOktlZXBBbGl2ZX07LyogICovZnVuY3Rpb24gaW5pdEdsb2JhbEFQSShWdWUpey8vIGNvbmZpZ1xudmFyIGNvbmZpZ0RlZj17fTtjb25maWdEZWYuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIGNvbmZpZzt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsJ2NvbmZpZycsY29uZmlnRGVmKTsvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbi8vIE5PVEU6IHRoZXNlIGFyZSBub3QgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJIC0gYXZvaWQgcmVseWluZyBvblxuLy8gdGhlbSB1bmxlc3MgeW91IGFyZSBhd2FyZSBvZiB0aGUgcmlzay5cblZ1ZS51dGlsPXt3YXJuOndhcm4sZXh0ZW5kOmV4dGVuZCxtZXJnZU9wdGlvbnM6bWVyZ2VPcHRpb25zLGRlZmluZVJlYWN0aXZlOmRlZmluZVJlYWN0aXZlJCQxfTtWdWUuc2V0PXNldDtWdWVbXCJkZWxldGVcIl09ZGVsO1Z1ZS5uZXh0VGljaz1uZXh0VGljazsvLyAyLjYgZXhwbGljaXQgb2JzZXJ2YWJsZSBBUElcblZ1ZS5vYnNlcnZhYmxlPWZ1bmN0aW9uKG9iail7b2JzZXJ2ZShvYmopO3JldHVybiBvYmo7fTtWdWUub3B0aW9ucz1PYmplY3QuY3JlYXRlKG51bGwpO0FTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24odHlwZSl7VnVlLm9wdGlvbnNbdHlwZSsncyddPU9iamVjdC5jcmVhdGUobnVsbCk7fSk7Ly8gdGhpcyBpcyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBcImJhc2VcIiBjb25zdHJ1Y3RvciB0byBleHRlbmQgYWxsIHBsYWluLW9iamVjdFxuLy8gY29tcG9uZW50cyB3aXRoIGluIFdlZXgncyBtdWx0aS1pbnN0YW5jZSBzY2VuYXJpb3MuXG5WdWUub3B0aW9ucy5fYmFzZT1WdWU7ZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsYnVpbHRJbkNvbXBvbmVudHMpO2luaXRVc2UoVnVlKTtpbml0TWl4aW4kMShWdWUpO2luaXRFeHRlbmQoVnVlKTtpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTt9aW5pdEdsb2JhbEFQSShWdWUpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCckaXNTZXJ2ZXInLHtnZXQ6aXNTZXJ2ZXJSZW5kZXJpbmd9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwnJHNzckNvbnRleHQnLHtnZXQ6ZnVuY3Rpb24gZ2V0KCl7LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9yZXR1cm4gdGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHQ7fX0pOy8vIGV4cG9zZSBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCBmb3Igc3NyIHJ1bnRpbWUgaGVscGVyIGluc3RhbGxhdGlvblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwnRnVuY3Rpb25hbFJlbmRlckNvbnRleHQnLHt2YWx1ZTpGdW5jdGlvbmFsUmVuZGVyQ29udGV4dH0pO1Z1ZS52ZXJzaW9uPScyLjYuMTAnOy8qICAqLyAvLyB0aGVzZSBhcmUgcmVzZXJ2ZWQgZm9yIHdlYiBiZWNhdXNlIHRoZXkgYXJlIGRpcmVjdGx5IGNvbXBpbGVkIGF3YXlcbi8vIGR1cmluZyB0ZW1wbGF0ZSBjb21waWxhdGlvblxudmFyIGlzUmVzZXJ2ZWRBdHRyPW1ha2VNYXAoJ3N0eWxlLGNsYXNzJyk7Ly8gYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSB1c2luZyBwcm9wcyBmb3IgYmluZGluZ1xudmFyIGFjY2VwdFZhbHVlPW1ha2VNYXAoJ2lucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QscHJvZ3Jlc3MnKTt2YXIgbXVzdFVzZVByb3A9ZnVuY3Rpb24gbXVzdFVzZVByb3AodGFnLHR5cGUsYXR0cil7cmV0dXJuIGF0dHI9PT0ndmFsdWUnJiZhY2NlcHRWYWx1ZSh0YWcpJiZ0eXBlIT09J2J1dHRvbid8fGF0dHI9PT0nc2VsZWN0ZWQnJiZ0YWc9PT0nb3B0aW9uJ3x8YXR0cj09PSdjaGVja2VkJyYmdGFnPT09J2lucHV0J3x8YXR0cj09PSdtdXRlZCcmJnRhZz09PSd2aWRlbyc7fTt2YXIgaXNFbnVtZXJhdGVkQXR0cj1tYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTt2YXIgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlPW1ha2VNYXAoJ2V2ZW50cyxjYXJldCx0eXBpbmcscGxhaW50ZXh0LW9ubHknKTt2YXIgY29udmVydEVudW1lcmF0ZWRWYWx1ZT1mdW5jdGlvbiBjb252ZXJ0RW51bWVyYXRlZFZhbHVlKGtleSx2YWx1ZSl7cmV0dXJuIGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpfHx2YWx1ZT09PSdmYWxzZSc/J2ZhbHNlJy8vIGFsbG93IGFyYml0cmFyeSBzdHJpbmcgdmFsdWUgZm9yIGNvbnRlbnRlZGl0YWJsZVxuOmtleT09PSdjb250ZW50ZWRpdGFibGUnJiZpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUodmFsdWUpP3ZhbHVlOid0cnVlJzt9O3ZhciBpc0Jvb2xlYW5BdHRyPW1ha2VNYXAoJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJysnZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLCcrJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJysnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnKydyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLCcrJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnKTt2YXIgeGxpbmtOUz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7dmFyIGlzWGxpbms9ZnVuY3Rpb24gaXNYbGluayhuYW1lKXtyZXR1cm4gbmFtZS5jaGFyQXQoNSk9PT0nOicmJm5hbWUuc2xpY2UoMCw1KT09PSd4bGluayc7fTt2YXIgZ2V0WGxpbmtQcm9wPWZ1bmN0aW9uIGdldFhsaW5rUHJvcChuYW1lKXtyZXR1cm4gaXNYbGluayhuYW1lKT9uYW1lLnNsaWNlKDYsbmFtZS5sZW5ndGgpOicnO307dmFyIGlzRmFsc3lBdHRyVmFsdWU9ZnVuY3Rpb24gaXNGYWxzeUF0dHJWYWx1ZSh2YWwpe3JldHVybiB2YWw9PW51bGx8fHZhbD09PWZhbHNlO307LyogICovZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSl7dmFyIGRhdGE9dm5vZGUuZGF0YTt2YXIgcGFyZW50Tm9kZT12bm9kZTt2YXIgY2hpbGROb2RlPXZub2RlO3doaWxlKGlzRGVmKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkpe2NoaWxkTm9kZT1jaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO2lmKGNoaWxkTm9kZSYmY2hpbGROb2RlLmRhdGEpe2RhdGE9bWVyZ2VDbGFzc0RhdGEoY2hpbGROb2RlLmRhdGEsZGF0YSk7fX13aGlsZShpc0RlZihwYXJlbnROb2RlPXBhcmVudE5vZGUucGFyZW50KSl7aWYocGFyZW50Tm9kZSYmcGFyZW50Tm9kZS5kYXRhKXtkYXRhPW1lcmdlQ2xhc3NEYXRhKGRhdGEscGFyZW50Tm9kZS5kYXRhKTt9fXJldHVybiByZW5kZXJDbGFzcyhkYXRhLnN0YXRpY0NsYXNzLGRhdGFbXCJjbGFzc1wiXSk7fWZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhKGNoaWxkLHBhcmVudCl7cmV0dXJue3N0YXRpY0NsYXNzOmNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcyxwYXJlbnQuc3RhdGljQ2xhc3MpLFwiY2xhc3NcIjppc0RlZihjaGlsZFtcImNsYXNzXCJdKT9bY2hpbGRbXCJjbGFzc1wiXSxwYXJlbnRbXCJjbGFzc1wiXV06cGFyZW50W1wiY2xhc3NcIl19O31mdW5jdGlvbiByZW5kZXJDbGFzcyhzdGF0aWNDbGFzcyxkeW5hbWljQ2xhc3Mpe2lmKGlzRGVmKHN0YXRpY0NsYXNzKXx8aXNEZWYoZHluYW1pY0NsYXNzKSl7cmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcyxzdHJpbmdpZnlDbGFzcyhkeW5hbWljQ2xhc3MpKTt9LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9yZXR1cm4nJzt9ZnVuY3Rpb24gY29uY2F0KGEsYil7cmV0dXJuIGE/Yj9hKycgJytiOmE6Ynx8Jyc7fWZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzKHZhbHVlKXtpZihBcnJheS5pc0FycmF5KHZhbHVlKSl7cmV0dXJuIHN0cmluZ2lmeUFycmF5KHZhbHVlKTt9aWYoaXNPYmplY3QodmFsdWUpKXtyZXR1cm4gc3RyaW5naWZ5T2JqZWN0KHZhbHVlKTt9aWYodHlwZW9mIHZhbHVlPT09J3N0cmluZycpe3JldHVybiB2YWx1ZTt9LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9yZXR1cm4nJzt9ZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkodmFsdWUpe3ZhciByZXM9Jyc7dmFyIHN0cmluZ2lmaWVkO2Zvcih2YXIgaT0wLGw9dmFsdWUubGVuZ3RoO2k8bDtpKyspe2lmKGlzRGVmKHN0cmluZ2lmaWVkPXN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkmJnN0cmluZ2lmaWVkIT09Jycpe2lmKHJlcyl7cmVzKz0nICc7fXJlcys9c3RyaW5naWZpZWQ7fX1yZXR1cm4gcmVzO31mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QodmFsdWUpe3ZhciByZXM9Jyc7Zm9yKHZhciBrZXkgaW4gdmFsdWUpe2lmKHZhbHVlW2tleV0pe2lmKHJlcyl7cmVzKz0nICc7fXJlcys9a2V5O319cmV0dXJuIHJlczt9LyogICovdmFyIG5hbWVzcGFjZU1hcD17c3ZnOidodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsbWF0aDonaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCd9O3ZhciBpc0hUTUxUYWc9bWFrZU1hcCgnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJysnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcrJ2RpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcrJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnKydzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnKydlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnKydjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnKydidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcrJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJysnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcrJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnKTsvLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcbi8vIGNvbnRhaW4gY2hpbGQgZWxlbWVudHMuXG52YXIgaXNTVkc9bWFrZU1hcCgnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLCcrJ2ZvcmVpZ25PYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLCcrJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLHRydWUpO3ZhciBpc1Jlc2VydmVkVGFnPWZ1bmN0aW9uIGlzUmVzZXJ2ZWRUYWcodGFnKXtyZXR1cm4gaXNIVE1MVGFnKHRhZyl8fGlzU1ZHKHRhZyk7fTtmdW5jdGlvbiBnZXRUYWdOYW1lc3BhY2UodGFnKXtpZihpc1NWRyh0YWcpKXtyZXR1cm4nc3ZnJzt9Ly8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG4vLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG5pZih0YWc9PT0nbWF0aCcpe3JldHVybidtYXRoJzt9fXZhciB1bmtub3duRWxlbWVudENhY2hlPU9iamVjdC5jcmVhdGUobnVsbCk7ZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCh0YWcpey8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKCFpbkJyb3dzZXIpe3JldHVybiB0cnVlO31pZihpc1Jlc2VydmVkVGFnKHRhZykpe3JldHVybiBmYWxzZTt9dGFnPXRhZy50b0xvd2VyQ2FzZSgpOy8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSE9bnVsbCl7cmV0dXJuIHVua25vd25FbGVtZW50Q2FjaGVbdGFnXTt9dmFyIGVsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtpZih0YWcuaW5kZXhPZignLScpPi0xKXsvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG5yZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddPWVsLmNvbnN0cnVjdG9yPT09d2luZG93LkhUTUxVbmtub3duRWxlbWVudHx8ZWwuY29uc3RydWN0b3I9PT13aW5kb3cuSFRNTEVsZW1lbnQ7fWVsc2V7cmV0dXJuIHVua25vd25FbGVtZW50Q2FjaGVbdGFnXT0vSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpO319dmFyIGlzVGV4dElucHV0VHlwZT1tYWtlTWFwKCd0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCcpOy8qICAqLyAvKipcbiAgICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gICAqL2Z1bmN0aW9uIHF1ZXJ5KGVsKXtpZih0eXBlb2YgZWw9PT0nc3RyaW5nJyl7dmFyIHNlbGVjdGVkPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO2lmKCFzZWxlY3RlZCl7cmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO31yZXR1cm4gc2VsZWN0ZWQ7fWVsc2V7cmV0dXJuIGVsO319LyogICovZnVuY3Rpb24gY3JlYXRlRWxlbWVudCQxKHRhZ05hbWUsdm5vZGUpe3ZhciBlbG09ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtpZih0YWdOYW1lIT09J3NlbGVjdCcpe3JldHVybiBlbG07fS8vIGZhbHNlIG9yIG51bGwgd2lsbCByZW1vdmUgdGhlIGF0dHJpYnV0ZSBidXQgdW5kZWZpbmVkIHdpbGwgbm90XG5pZih2bm9kZS5kYXRhJiZ2bm9kZS5kYXRhLmF0dHJzJiZ2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlIT09dW5kZWZpbmVkKXtlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsJ211bHRpcGxlJyk7fXJldHVybiBlbG07fWZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsdGFnTmFtZSl7cmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSx0YWdOYW1lKTt9ZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUodGV4dCl7cmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpO31mdW5jdGlvbiBjcmVhdGVDb21tZW50KHRleHQpe3JldHVybiBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRleHQpO31mdW5jdGlvbiBpbnNlcnRCZWZvcmUocGFyZW50Tm9kZSxuZXdOb2RlLHJlZmVyZW5jZU5vZGUpe3BhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUscmVmZXJlbmNlTm9kZSk7fWZ1bmN0aW9uIHJlbW92ZUNoaWxkKG5vZGUsY2hpbGQpe25vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO31mdW5jdGlvbiBhcHBlbmRDaGlsZChub2RlLGNoaWxkKXtub2RlLmFwcGVuZENoaWxkKGNoaWxkKTt9ZnVuY3Rpb24gcGFyZW50Tm9kZShub2RlKXtyZXR1cm4gbm9kZS5wYXJlbnROb2RlO31mdW5jdGlvbiBuZXh0U2libGluZyhub2RlKXtyZXR1cm4gbm9kZS5uZXh0U2libGluZzt9ZnVuY3Rpb24gdGFnTmFtZShub2RlKXtyZXR1cm4gbm9kZS50YWdOYW1lO31mdW5jdGlvbiBzZXRUZXh0Q29udGVudChub2RlLHRleHQpe25vZGUudGV4dENvbnRlbnQ9dGV4dDt9ZnVuY3Rpb24gc2V0U3R5bGVTY29wZShub2RlLHNjb3BlSWQpe25vZGUuc2V0QXR0cmlidXRlKHNjb3BlSWQsJycpO312YXIgbm9kZU9wcz0vKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7Y3JlYXRlRWxlbWVudDpjcmVhdGVFbGVtZW50JDEsY3JlYXRlRWxlbWVudE5TOmNyZWF0ZUVsZW1lbnROUyxjcmVhdGVUZXh0Tm9kZTpjcmVhdGVUZXh0Tm9kZSxjcmVhdGVDb21tZW50OmNyZWF0ZUNvbW1lbnQsaW5zZXJ0QmVmb3JlOmluc2VydEJlZm9yZSxyZW1vdmVDaGlsZDpyZW1vdmVDaGlsZCxhcHBlbmRDaGlsZDphcHBlbmRDaGlsZCxwYXJlbnROb2RlOnBhcmVudE5vZGUsbmV4dFNpYmxpbmc6bmV4dFNpYmxpbmcsdGFnTmFtZTp0YWdOYW1lLHNldFRleHRDb250ZW50OnNldFRleHRDb250ZW50LHNldFN0eWxlU2NvcGU6c2V0U3R5bGVTY29wZX0pOy8qICAqL3ZhciByZWY9e2NyZWF0ZTpmdW5jdGlvbiBjcmVhdGUoXyx2bm9kZSl7cmVnaXN0ZXJSZWYodm5vZGUpO30sdXBkYXRlOmZ1bmN0aW9uIHVwZGF0ZShvbGRWbm9kZSx2bm9kZSl7aWYob2xkVm5vZGUuZGF0YS5yZWYhPT12bm9kZS5kYXRhLnJlZil7cmVnaXN0ZXJSZWYob2xkVm5vZGUsdHJ1ZSk7cmVnaXN0ZXJSZWYodm5vZGUpO319LGRlc3Ryb3k6ZnVuY3Rpb24gZGVzdHJveSh2bm9kZSl7cmVnaXN0ZXJSZWYodm5vZGUsdHJ1ZSk7fX07ZnVuY3Rpb24gcmVnaXN0ZXJSZWYodm5vZGUsaXNSZW1vdmFsKXt2YXIga2V5PXZub2RlLmRhdGEucmVmO2lmKCFpc0RlZihrZXkpKXtyZXR1cm47fXZhciB2bT12bm9kZS5jb250ZXh0O3ZhciByZWY9dm5vZGUuY29tcG9uZW50SW5zdGFuY2V8fHZub2RlLmVsbTt2YXIgcmVmcz12bS4kcmVmcztpZihpc1JlbW92YWwpe2lmKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSl7cmVtb3ZlKHJlZnNba2V5XSxyZWYpO31lbHNlIGlmKHJlZnNba2V5XT09PXJlZil7cmVmc1trZXldPXVuZGVmaW5lZDt9fWVsc2V7aWYodm5vZGUuZGF0YS5yZWZJbkZvcil7aWYoIUFycmF5LmlzQXJyYXkocmVmc1trZXldKSl7cmVmc1trZXldPVtyZWZdO31lbHNlIGlmKHJlZnNba2V5XS5pbmRleE9mKHJlZik8MCl7Ly8gJGZsb3ctZGlzYWJsZS1saW5lXG5yZWZzW2tleV0ucHVzaChyZWYpO319ZWxzZXtyZWZzW2tleV09cmVmO319fS8qKlxuICAgKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnlcbiAgICogU2ltb24gRnJpaXMgVmluZHVtIChAcGFsZGVwaW5kKVxuICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGRlcGluZC9zbmFiYmRvbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gICAqXG4gICAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICAgKlxuICAgKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGJlY2F1c2UgdGhpcyBmaWxlIGlzIHBlcmYtY3JpdGljYWwgYW5kIHRoZSBjb3N0XG4gICAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICAgKi92YXIgZW1wdHlOb2RlPW5ldyBWTm9kZSgnJyx7fSxbXSk7dmFyIGhvb2tzPVsnY3JlYXRlJywnYWN0aXZhdGUnLCd1cGRhdGUnLCdyZW1vdmUnLCdkZXN0cm95J107ZnVuY3Rpb24gc2FtZVZub2RlKGEsYil7cmV0dXJuIGEua2V5PT09Yi5rZXkmJihhLnRhZz09PWIudGFnJiZhLmlzQ29tbWVudD09PWIuaXNDb21tZW50JiZpc0RlZihhLmRhdGEpPT09aXNEZWYoYi5kYXRhKSYmc2FtZUlucHV0VHlwZShhLGIpfHxpc1RydWUoYS5pc0FzeW5jUGxhY2Vob2xkZXIpJiZhLmFzeW5jRmFjdG9yeT09PWIuYXN5bmNGYWN0b3J5JiZpc1VuZGVmKGIuYXN5bmNGYWN0b3J5LmVycm9yKSk7fWZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUoYSxiKXtpZihhLnRhZyE9PSdpbnB1dCcpe3JldHVybiB0cnVlO312YXIgaTt2YXIgdHlwZUE9aXNEZWYoaT1hLmRhdGEpJiZpc0RlZihpPWkuYXR0cnMpJiZpLnR5cGU7dmFyIHR5cGVCPWlzRGVmKGk9Yi5kYXRhKSYmaXNEZWYoaT1pLmF0dHJzKSYmaS50eXBlO3JldHVybiB0eXBlQT09PXR5cGVCfHxpc1RleHRJbnB1dFR5cGUodHlwZUEpJiZpc1RleHRJbnB1dFR5cGUodHlwZUIpO31mdW5jdGlvbiBjcmVhdGVLZXlUb09sZElkeChjaGlsZHJlbixiZWdpbklkeCxlbmRJZHgpe3ZhciBpLGtleTt2YXIgbWFwPXt9O2ZvcihpPWJlZ2luSWR4O2k8PWVuZElkeDsrK2kpe2tleT1jaGlsZHJlbltpXS5rZXk7aWYoaXNEZWYoa2V5KSl7bWFwW2tleV09aTt9fXJldHVybiBtYXA7fWZ1bmN0aW9uIGNyZWF0ZVBhdGNoRnVuY3Rpb24oYmFja2VuZCl7dmFyIGksajt2YXIgY2JzPXt9O3ZhciBtb2R1bGVzPWJhY2tlbmQubW9kdWxlczt2YXIgbm9kZU9wcz1iYWNrZW5kLm5vZGVPcHM7Zm9yKGk9MDtpPGhvb2tzLmxlbmd0aDsrK2kpe2Nic1tob29rc1tpXV09W107Zm9yKGo9MDtqPG1vZHVsZXMubGVuZ3RoOysrail7aWYoaXNEZWYobW9kdWxlc1tqXVtob29rc1tpXV0pKXtjYnNbaG9va3NbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rc1tpXV0pO319fWZ1bmN0aW9uIGVtcHR5Tm9kZUF0KGVsbSl7cmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLHt9LFtdLHVuZGVmaW5lZCxlbG0pO31mdW5jdGlvbiBjcmVhdGVSbUNiKGNoaWxkRWxtLGxpc3RlbmVycyl7ZnVuY3Rpb24gcmVtb3ZlJCQxKCl7aWYoLS1yZW1vdmUkJDEubGlzdGVuZXJzPT09MCl7cmVtb3ZlTm9kZShjaGlsZEVsbSk7fX1yZW1vdmUkJDEubGlzdGVuZXJzPWxpc3RlbmVycztyZXR1cm4gcmVtb3ZlJCQxO31mdW5jdGlvbiByZW1vdmVOb2RlKGVsKXt2YXIgcGFyZW50PW5vZGVPcHMucGFyZW50Tm9kZShlbCk7Ly8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG5pZihpc0RlZihwYXJlbnQpKXtub2RlT3BzLnJlbW92ZUNoaWxkKHBhcmVudCxlbCk7fX1mdW5jdGlvbiBjcmVhdGVFbG0odm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlLHBhcmVudEVsbSxyZWZFbG0sbmVzdGVkLG93bmVyQXJyYXksaW5kZXgpe2lmKGlzRGVmKHZub2RlLmVsbSkmJmlzRGVmKG93bmVyQXJyYXkpKXsvLyBUaGlzIHZub2RlIHdhcyB1c2VkIGluIGEgcHJldmlvdXMgcmVuZGVyIVxuLy8gbm93IGl0J3MgdXNlZCBhcyBhIG5ldyBub2RlLCBvdmVyd3JpdGluZyBpdHMgZWxtIHdvdWxkIGNhdXNlXG4vLyBwb3RlbnRpYWwgcGF0Y2ggZXJyb3JzIGRvd24gdGhlIHJvYWQgd2hlbiBpdCdzIHVzZWQgYXMgYW4gaW5zZXJ0aW9uXG4vLyByZWZlcmVuY2Ugbm9kZS4gSW5zdGVhZCwgd2UgY2xvbmUgdGhlIG5vZGUgb24tZGVtYW5kIGJlZm9yZSBjcmVhdGluZ1xuLy8gYXNzb2NpYXRlZCBET00gZWxlbWVudCBmb3IgaXQuXG52bm9kZT1vd25lckFycmF5W2luZGV4XT1jbG9uZVZOb2RlKHZub2RlKTt9dm5vZGUuaXNSb290SW5zZXJ0PSFuZXN0ZWQ7Ly8gZm9yIHRyYW5zaXRpb24gZW50ZXIgY2hlY2tcbmlmKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSxpbnNlcnRlZFZub2RlUXVldWUscGFyZW50RWxtLHJlZkVsbSkpe3JldHVybjt9dmFyIGRhdGE9dm5vZGUuZGF0YTt2YXIgY2hpbGRyZW49dm5vZGUuY2hpbGRyZW47dmFyIHRhZz12bm9kZS50YWc7aWYoaXNEZWYodGFnKSl7dm5vZGUuZWxtPXZub2RlLm5zP25vZGVPcHMuY3JlYXRlRWxlbWVudE5TKHZub2RlLm5zLHRhZyk6bm9kZU9wcy5jcmVhdGVFbGVtZW50KHRhZyx2bm9kZSk7c2V0U2NvcGUodm5vZGUpOy8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL3tjcmVhdGVDaGlsZHJlbih2bm9kZSxjaGlsZHJlbixpbnNlcnRlZFZub2RlUXVldWUpO2lmKGlzRGVmKGRhdGEpKXtpbnZva2VDcmVhdGVIb29rcyh2bm9kZSxpbnNlcnRlZFZub2RlUXVldWUpO31pbnNlcnQocGFyZW50RWxtLHZub2RlLmVsbSxyZWZFbG0pO319ZWxzZSBpZihpc1RydWUodm5vZGUuaXNDb21tZW50KSl7dm5vZGUuZWxtPW5vZGVPcHMuY3JlYXRlQ29tbWVudCh2bm9kZS50ZXh0KTtpbnNlcnQocGFyZW50RWxtLHZub2RlLmVsbSxyZWZFbG0pO31lbHNle3Zub2RlLmVsbT1ub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO2luc2VydChwYXJlbnRFbG0sdm5vZGUuZWxtLHJlZkVsbSk7fX1mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQodm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlLHBhcmVudEVsbSxyZWZFbG0pe3ZhciBpPXZub2RlLmRhdGE7aWYoaXNEZWYoaSkpe3ZhciBpc1JlYWN0aXZhdGVkPWlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSYmaS5rZWVwQWxpdmU7aWYoaXNEZWYoaT1pLmhvb2spJiZpc0RlZihpPWkuaW5pdCkpe2kodm5vZGUsZmFsc2UvKiBoeWRyYXRpbmcgKi8pO30vLyBhZnRlciBjYWxsaW5nIHRoZSBpbml0IGhvb2ssIGlmIHRoZSB2bm9kZSBpcyBhIGNoaWxkIGNvbXBvbmVudFxuLy8gaXQgc2hvdWxkJ3ZlIGNyZWF0ZWQgYSBjaGlsZCBpbnN0YW5jZSBhbmQgbW91bnRlZCBpdC4gdGhlIGNoaWxkXG4vLyBjb21wb25lbnQgYWxzbyBoYXMgc2V0IHRoZSBwbGFjZWhvbGRlciB2bm9kZSdzIGVsbS5cbi8vIGluIHRoYXQgY2FzZSB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGVsZW1lbnQgYW5kIGJlIGRvbmUuXG5pZihpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpe2luaXRDb21wb25lbnQodm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtpbnNlcnQocGFyZW50RWxtLHZub2RlLmVsbSxyZWZFbG0pO2lmKGlzVHJ1ZShpc1JlYWN0aXZhdGVkKSl7cmVhY3RpdmF0ZUNvbXBvbmVudCh2bm9kZSxpbnNlcnRlZFZub2RlUXVldWUscGFyZW50RWxtLHJlZkVsbSk7fXJldHVybiB0cnVlO319fWZ1bmN0aW9uIGluaXRDb21wb25lbnQodm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlKXtpZihpc0RlZih2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpKXtpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KTt2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQ9bnVsbDt9dm5vZGUuZWxtPXZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRlbDtpZihpc1BhdGNoYWJsZSh2bm9kZSkpe2ludm9rZUNyZWF0ZUhvb2tzKHZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSk7c2V0U2NvcGUodm5vZGUpO31lbHNley8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KVxucmVnaXN0ZXJSZWYodm5vZGUpOy8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG5pbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7fX1mdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSxwYXJlbnRFbG0scmVmRWxtKXt2YXIgaTsvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4vLyBkb2VzIG5vdCB0cmlnZ2VyIGJlY2F1c2UgdGhlIGlubmVyIG5vZGUncyBjcmVhdGVkIGhvb2tzIGFyZSBub3QgY2FsbGVkXG4vLyBhZ2Fpbi4gSXQncyBub3QgaWRlYWwgdG8gaW52b2x2ZSBtb2R1bGUtc3BlY2lmaWMgbG9naWMgaW4gaGVyZSBidXRcbi8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG52YXIgaW5uZXJOb2RlPXZub2RlO3doaWxlKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSl7aW5uZXJOb2RlPWlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7aWYoaXNEZWYoaT1pbm5lck5vZGUuZGF0YSkmJmlzRGVmKGk9aS50cmFuc2l0aW9uKSl7Zm9yKGk9MDtpPGNicy5hY3RpdmF0ZS5sZW5ndGg7KytpKXtjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLGlubmVyTm9kZSk7fWluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7YnJlYWs7fX0vLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbi8vIGEgcmVhY3RpdmF0ZWQga2VlcC1hbGl2ZSBjb21wb25lbnQgZG9lc24ndCBpbnNlcnQgaXRzZWxmXG5pbnNlcnQocGFyZW50RWxtLHZub2RlLmVsbSxyZWZFbG0pO31mdW5jdGlvbiBpbnNlcnQocGFyZW50LGVsbSxyZWYkJDEpe2lmKGlzRGVmKHBhcmVudCkpe2lmKGlzRGVmKHJlZiQkMSkpe2lmKG5vZGVPcHMucGFyZW50Tm9kZShyZWYkJDEpPT09cGFyZW50KXtub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnQsZWxtLHJlZiQkMSk7fX1lbHNle25vZGVPcHMuYXBwZW5kQ2hpbGQocGFyZW50LGVsbSk7fX19ZnVuY3Rpb24gY3JlYXRlQ2hpbGRyZW4odm5vZGUsY2hpbGRyZW4saW5zZXJ0ZWRWbm9kZVF1ZXVlKXtpZihBcnJheS5pc0FycmF5KGNoaWxkcmVuKSl7Zm9yKHZhciBpPTA7aTxjaGlsZHJlbi5sZW5ndGg7KytpKXtjcmVhdGVFbG0oY2hpbGRyZW5baV0saW5zZXJ0ZWRWbm9kZVF1ZXVlLHZub2RlLmVsbSxudWxsLHRydWUsY2hpbGRyZW4saSk7fX1lbHNlIGlmKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKXtub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSxub2RlT3BzLmNyZWF0ZVRleHROb2RlKFN0cmluZyh2bm9kZS50ZXh0KSkpO319ZnVuY3Rpb24gaXNQYXRjaGFibGUodm5vZGUpe3doaWxlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKXt2bm9kZT12bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7fXJldHVybiBpc0RlZih2bm9kZS50YWcpO31mdW5jdGlvbiBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSxpbnNlcnRlZFZub2RlUXVldWUpe2Zvcih2YXIgaSQxPTA7aSQxPGNicy5jcmVhdGUubGVuZ3RoOysraSQxKXtjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLHZub2RlKTt9aT12bm9kZS5kYXRhLmhvb2s7Ly8gUmV1c2UgdmFyaWFibGVcbmlmKGlzRGVmKGkpKXtpZihpc0RlZihpLmNyZWF0ZSkpe2kuY3JlYXRlKGVtcHR5Tm9kZSx2bm9kZSk7fWlmKGlzRGVmKGkuaW5zZXJ0KSl7aW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpO319fS8vIHNldCBzY29wZSBpZCBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBDU1MuXG4vLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZFxuLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuZnVuY3Rpb24gc2V0U2NvcGUodm5vZGUpe3ZhciBpO2lmKGlzRGVmKGk9dm5vZGUuZm5TY29wZUlkKSl7bm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSxpKTt9ZWxzZXt2YXIgYW5jZXN0b3I9dm5vZGU7d2hpbGUoYW5jZXN0b3Ipe2lmKGlzRGVmKGk9YW5jZXN0b3IuY29udGV4dCkmJmlzRGVmKGk9aS4kb3B0aW9ucy5fc2NvcGVJZCkpe25vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0saSk7fWFuY2VzdG9yPWFuY2VzdG9yLnBhcmVudDt9fS8vIGZvciBzbG90IGNvbnRlbnQgdGhleSBzaG91bGQgYWxzbyBnZXQgdGhlIHNjb3BlSWQgZnJvbSB0aGUgaG9zdCBpbnN0YW5jZS5cbmlmKGlzRGVmKGk9YWN0aXZlSW5zdGFuY2UpJiZpIT09dm5vZGUuY29udGV4dCYmaSE9PXZub2RlLmZuQ29udGV4dCYmaXNEZWYoaT1pLiRvcHRpb25zLl9zY29wZUlkKSl7bm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSxpKTt9fWZ1bmN0aW9uIGFkZFZub2RlcyhwYXJlbnRFbG0scmVmRWxtLHZub2RlcyxzdGFydElkeCxlbmRJZHgsaW5zZXJ0ZWRWbm9kZVF1ZXVlKXtmb3IoO3N0YXJ0SWR4PD1lbmRJZHg7KytzdGFydElkeCl7Y3JlYXRlRWxtKHZub2Rlc1tzdGFydElkeF0saW5zZXJ0ZWRWbm9kZVF1ZXVlLHBhcmVudEVsbSxyZWZFbG0sZmFsc2Usdm5vZGVzLHN0YXJ0SWR4KTt9fWZ1bmN0aW9uIGludm9rZURlc3Ryb3lIb29rKHZub2RlKXt2YXIgaSxqO3ZhciBkYXRhPXZub2RlLmRhdGE7aWYoaXNEZWYoZGF0YSkpe2lmKGlzRGVmKGk9ZGF0YS5ob29rKSYmaXNEZWYoaT1pLmRlc3Ryb3kpKXtpKHZub2RlKTt9Zm9yKGk9MDtpPGNicy5kZXN0cm95Lmxlbmd0aDsrK2kpe2Nicy5kZXN0cm95W2ldKHZub2RlKTt9fWlmKGlzRGVmKGk9dm5vZGUuY2hpbGRyZW4pKXtmb3Ioaj0wO2o8dm5vZGUuY2hpbGRyZW4ubGVuZ3RoOysrail7aW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO319fWZ1bmN0aW9uIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sdm5vZGVzLHN0YXJ0SWR4LGVuZElkeCl7Zm9yKDtzdGFydElkeDw9ZW5kSWR4Oysrc3RhcnRJZHgpe3ZhciBjaD12bm9kZXNbc3RhcnRJZHhdO2lmKGlzRGVmKGNoKSl7aWYoaXNEZWYoY2gudGFnKSl7cmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7aW52b2tlRGVzdHJveUhvb2soY2gpO31lbHNley8vIFRleHQgbm9kZVxucmVtb3ZlTm9kZShjaC5lbG0pO319fX1mdW5jdGlvbiByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKHZub2RlLHJtKXtpZihpc0RlZihybSl8fGlzRGVmKHZub2RlLmRhdGEpKXt2YXIgaTt2YXIgbGlzdGVuZXJzPWNicy5yZW1vdmUubGVuZ3RoKzE7aWYoaXNEZWYocm0pKXsvLyB3ZSBoYXZlIGEgcmVjdXJzaXZlbHkgcGFzc2VkIGRvd24gcm0gY2FsbGJhY2tcbi8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbnJtLmxpc3RlbmVycys9bGlzdGVuZXJzO31lbHNley8vIGRpcmVjdGx5IHJlbW92aW5nXG5ybT1jcmVhdGVSbUNiKHZub2RlLmVsbSxsaXN0ZW5lcnMpO30vLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuaWYoaXNEZWYoaT12bm9kZS5jb21wb25lbnRJbnN0YW5jZSkmJmlzRGVmKGk9aS5fdm5vZGUpJiZpc0RlZihpLmRhdGEpKXtyZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGkscm0pO31mb3IoaT0wO2k8Y2JzLnJlbW92ZS5sZW5ndGg7KytpKXtjYnMucmVtb3ZlW2ldKHZub2RlLHJtKTt9aWYoaXNEZWYoaT12bm9kZS5kYXRhLmhvb2spJiZpc0RlZihpPWkucmVtb3ZlKSl7aSh2bm9kZSxybSk7fWVsc2V7cm0oKTt9fWVsc2V7cmVtb3ZlTm9kZSh2bm9kZS5lbG0pO319ZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4ocGFyZW50RWxtLG9sZENoLG5ld0NoLGluc2VydGVkVm5vZGVRdWV1ZSxyZW1vdmVPbmx5KXt2YXIgb2xkU3RhcnRJZHg9MDt2YXIgbmV3U3RhcnRJZHg9MDt2YXIgb2xkRW5kSWR4PW9sZENoLmxlbmd0aC0xO3ZhciBvbGRTdGFydFZub2RlPW9sZENoWzBdO3ZhciBvbGRFbmRWbm9kZT1vbGRDaFtvbGRFbmRJZHhdO3ZhciBuZXdFbmRJZHg9bmV3Q2gubGVuZ3RoLTE7dmFyIG5ld1N0YXJ0Vm5vZGU9bmV3Q2hbMF07dmFyIG5ld0VuZFZub2RlPW5ld0NoW25ld0VuZElkeF07dmFyIG9sZEtleVRvSWR4LGlkeEluT2xkLHZub2RlVG9Nb3ZlLHJlZkVsbTsvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbi8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbi8vIGR1cmluZyBsZWF2aW5nIHRyYW5zaXRpb25zXG52YXIgY2FuTW92ZT0hcmVtb3ZlT25seTt3aGlsZShvbGRTdGFydElkeDw9b2xkRW5kSWR4JiZuZXdTdGFydElkeDw9bmV3RW5kSWR4KXtpZihpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKXtvbGRTdGFydFZub2RlPW9sZENoWysrb2xkU3RhcnRJZHhdOy8vIFZub2RlIGhhcyBiZWVuIG1vdmVkIGxlZnRcbn1lbHNlIGlmKGlzVW5kZWYob2xkRW5kVm5vZGUpKXtvbGRFbmRWbm9kZT1vbGRDaFstLW9sZEVuZElkeF07fWVsc2UgaWYoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsbmV3U3RhcnRWbm9kZSkpe3BhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSxuZXdTdGFydFZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSxuZXdDaCxuZXdTdGFydElkeCk7b2xkU3RhcnRWbm9kZT1vbGRDaFsrK29sZFN0YXJ0SWR4XTtuZXdTdGFydFZub2RlPW5ld0NoWysrbmV3U3RhcnRJZHhdO31lbHNlIGlmKHNhbWVWbm9kZShvbGRFbmRWbm9kZSxuZXdFbmRWbm9kZSkpe3BhdGNoVm5vZGUob2xkRW5kVm5vZGUsbmV3RW5kVm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlLG5ld0NoLG5ld0VuZElkeCk7b2xkRW5kVm5vZGU9b2xkQ2hbLS1vbGRFbmRJZHhdO25ld0VuZFZub2RlPW5ld0NoWy0tbmV3RW5kSWR4XTt9ZWxzZSBpZihzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSxuZXdFbmRWbm9kZSkpey8vIFZub2RlIG1vdmVkIHJpZ2h0XG5wYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsbmV3RW5kVm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlLG5ld0NoLG5ld0VuZElkeCk7Y2FuTW92ZSYmbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLG9sZFN0YXJ0Vm5vZGUuZWxtLG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRW5kVm5vZGUuZWxtKSk7b2xkU3RhcnRWbm9kZT1vbGRDaFsrK29sZFN0YXJ0SWR4XTtuZXdFbmRWbm9kZT1uZXdDaFstLW5ld0VuZElkeF07fWVsc2UgaWYoc2FtZVZub2RlKG9sZEVuZFZub2RlLG5ld1N0YXJ0Vm5vZGUpKXsvLyBWbm9kZSBtb3ZlZCBsZWZ0XG5wYXRjaFZub2RlKG9sZEVuZFZub2RlLG5ld1N0YXJ0Vm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlLG5ld0NoLG5ld1N0YXJ0SWR4KTtjYW5Nb3ZlJiZub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sb2xkRW5kVm5vZGUuZWxtLG9sZFN0YXJ0Vm5vZGUuZWxtKTtvbGRFbmRWbm9kZT1vbGRDaFstLW9sZEVuZElkeF07bmV3U3RhcnRWbm9kZT1uZXdDaFsrK25ld1N0YXJ0SWR4XTt9ZWxzZXtpZihpc1VuZGVmKG9sZEtleVRvSWR4KSl7b2xkS2V5VG9JZHg9Y3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsb2xkU3RhcnRJZHgsb2xkRW5kSWR4KTt9aWR4SW5PbGQ9aXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpP29sZEtleVRvSWR4W25ld1N0YXJ0Vm5vZGUua2V5XTpmaW5kSWR4SW5PbGQobmV3U3RhcnRWbm9kZSxvbGRDaCxvbGRTdGFydElkeCxvbGRFbmRJZHgpO2lmKGlzVW5kZWYoaWR4SW5PbGQpKXsvLyBOZXcgZWxlbWVudFxuY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlLHBhcmVudEVsbSxvbGRTdGFydFZub2RlLmVsbSxmYWxzZSxuZXdDaCxuZXdTdGFydElkeCk7fWVsc2V7dm5vZGVUb01vdmU9b2xkQ2hbaWR4SW5PbGRdO2lmKHNhbWVWbm9kZSh2bm9kZVRvTW92ZSxuZXdTdGFydFZub2RlKSl7cGF0Y2hWbm9kZSh2bm9kZVRvTW92ZSxuZXdTdGFydFZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSxuZXdDaCxuZXdTdGFydElkeCk7b2xkQ2hbaWR4SW5PbGRdPXVuZGVmaW5lZDtjYW5Nb3ZlJiZub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sdm5vZGVUb01vdmUuZWxtLG9sZFN0YXJ0Vm5vZGUuZWxtKTt9ZWxzZXsvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG5jcmVhdGVFbG0obmV3U3RhcnRWbm9kZSxpbnNlcnRlZFZub2RlUXVldWUscGFyZW50RWxtLG9sZFN0YXJ0Vm5vZGUuZWxtLGZhbHNlLG5ld0NoLG5ld1N0YXJ0SWR4KTt9fW5ld1N0YXJ0Vm5vZGU9bmV3Q2hbKytuZXdTdGFydElkeF07fX1pZihvbGRTdGFydElkeD5vbGRFbmRJZHgpe3JlZkVsbT1pc1VuZGVmKG5ld0NoW25ld0VuZElkeCsxXSk/bnVsbDpuZXdDaFtuZXdFbmRJZHgrMV0uZWxtO2FkZFZub2RlcyhwYXJlbnRFbG0scmVmRWxtLG5ld0NoLG5ld1N0YXJ0SWR4LG5ld0VuZElkeCxpbnNlcnRlZFZub2RlUXVldWUpO31lbHNlIGlmKG5ld1N0YXJ0SWR4Pm5ld0VuZElkeCl7cmVtb3ZlVm5vZGVzKHBhcmVudEVsbSxvbGRDaCxvbGRTdGFydElkeCxvbGRFbmRJZHgpO319ZnVuY3Rpb24gZmluZElkeEluT2xkKG5vZGUsb2xkQ2gsc3RhcnQsZW5kKXtmb3IodmFyIGk9c3RhcnQ7aTxlbmQ7aSsrKXt2YXIgYz1vbGRDaFtpXTtpZihpc0RlZihjKSYmc2FtZVZub2RlKG5vZGUsYykpe3JldHVybiBpO319fWZ1bmN0aW9uIHBhdGNoVm5vZGUob2xkVm5vZGUsdm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlLG93bmVyQXJyYXksaW5kZXgscmVtb3ZlT25seSl7aWYob2xkVm5vZGU9PT12bm9kZSl7cmV0dXJuO31pZihpc0RlZih2bm9kZS5lbG0pJiZpc0RlZihvd25lckFycmF5KSl7Ly8gY2xvbmUgcmV1c2VkIHZub2RlXG52bm9kZT1vd25lckFycmF5W2luZGV4XT1jbG9uZVZOb2RlKHZub2RlKTt9dmFyIGVsbT12bm9kZS5lbG09b2xkVm5vZGUuZWxtO2lmKGlzVHJ1ZShvbGRWbm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIpKXtpZihpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkucmVzb2x2ZWQpKXtoeWRyYXRlKG9sZFZub2RlLmVsbSx2bm9kZSxpbnNlcnRlZFZub2RlUXVldWUpO31lbHNle3Zub2RlLmlzQXN5bmNQbGFjZWhvbGRlcj10cnVlO31yZXR1cm47fS8vIHJldXNlIGVsZW1lbnQgZm9yIHN0YXRpYyB0cmVlcy5cbi8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuLy8gaWYgdGhlIG5ldyBub2RlIGlzIG5vdCBjbG9uZWQgaXQgbWVhbnMgdGhlIHJlbmRlciBmdW5jdGlvbnMgaGF2ZSBiZWVuXG4vLyByZXNldCBieSB0aGUgaG90LXJlbG9hZC1hcGkgYW5kIHdlIG5lZWQgdG8gZG8gYSBwcm9wZXIgcmUtcmVuZGVyLlxuaWYoaXNUcnVlKHZub2RlLmlzU3RhdGljKSYmaXNUcnVlKG9sZFZub2RlLmlzU3RhdGljKSYmdm5vZGUua2V5PT09b2xkVm5vZGUua2V5JiYoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKXx8aXNUcnVlKHZub2RlLmlzT25jZSkpKXt2bm9kZS5jb21wb25lbnRJbnN0YW5jZT1vbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtyZXR1cm47fXZhciBpO3ZhciBkYXRhPXZub2RlLmRhdGE7aWYoaXNEZWYoZGF0YSkmJmlzRGVmKGk9ZGF0YS5ob29rKSYmaXNEZWYoaT1pLnByZXBhdGNoKSl7aShvbGRWbm9kZSx2bm9kZSk7fXZhciBvbGRDaD1vbGRWbm9kZS5jaGlsZHJlbjt2YXIgY2g9dm5vZGUuY2hpbGRyZW47aWYoaXNEZWYoZGF0YSkmJmlzUGF0Y2hhYmxlKHZub2RlKSl7Zm9yKGk9MDtpPGNicy51cGRhdGUubGVuZ3RoOysraSl7Y2JzLnVwZGF0ZVtpXShvbGRWbm9kZSx2bm9kZSk7fWlmKGlzRGVmKGk9ZGF0YS5ob29rKSYmaXNEZWYoaT1pLnVwZGF0ZSkpe2kob2xkVm5vZGUsdm5vZGUpO319aWYoaXNVbmRlZih2bm9kZS50ZXh0KSl7aWYoaXNEZWYob2xkQ2gpJiZpc0RlZihjaCkpe2lmKG9sZENoIT09Y2gpe3VwZGF0ZUNoaWxkcmVuKGVsbSxvbGRDaCxjaCxpbnNlcnRlZFZub2RlUXVldWUscmVtb3ZlT25seSk7fX1lbHNlIGlmKGlzRGVmKGNoKSl7aWYoaXNEZWYob2xkVm5vZGUudGV4dCkpe25vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCcnKTt9YWRkVm5vZGVzKGVsbSxudWxsLGNoLDAsY2gubGVuZ3RoLTEsaW5zZXJ0ZWRWbm9kZVF1ZXVlKTt9ZWxzZSBpZihpc0RlZihvbGRDaCkpe3JlbW92ZVZub2RlcyhlbG0sb2xkQ2gsMCxvbGRDaC5sZW5ndGgtMSk7fWVsc2UgaWYoaXNEZWYob2xkVm5vZGUudGV4dCkpe25vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCcnKTt9fWVsc2UgaWYob2xkVm5vZGUudGV4dCE9PXZub2RlLnRleHQpe25vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLHZub2RlLnRleHQpO31pZihpc0RlZihkYXRhKSl7aWYoaXNEZWYoaT1kYXRhLmhvb2spJiZpc0RlZihpPWkucG9zdHBhdGNoKSl7aShvbGRWbm9kZSx2bm9kZSk7fX19ZnVuY3Rpb24gaW52b2tlSW5zZXJ0SG9vayh2bm9kZSxxdWV1ZSxpbml0aWFsKXsvLyBkZWxheSBpbnNlcnQgaG9va3MgZm9yIGNvbXBvbmVudCByb290IG5vZGVzLCBpbnZva2UgdGhlbSBhZnRlciB0aGVcbi8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG5pZihpc1RydWUoaW5pdGlhbCkmJmlzRGVmKHZub2RlLnBhcmVudCkpe3Zub2RlLnBhcmVudC5kYXRhLnBlbmRpbmdJbnNlcnQ9cXVldWU7fWVsc2V7Zm9yKHZhciBpPTA7aTxxdWV1ZS5sZW5ndGg7KytpKXtxdWV1ZVtpXS5kYXRhLmhvb2suaW5zZXJ0KHF1ZXVlW2ldKTt9fX0vLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuLy8gYXJlIGFscmVhZHkgcmVuZGVyZWQgb24gdGhlIGNsaWVudCBvciBoYXMgbm8gbmVlZCBmb3IgaW5pdGlhbGl6YXRpb25cbi8vIE5vdGU6IHN0eWxlIGlzIGV4Y2x1ZGVkIGJlY2F1c2UgaXQgcmVsaWVzIG9uIGluaXRpYWwgY2xvbmUgZm9yIGZ1dHVyZVxuLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG52YXIgaXNSZW5kZXJlZE1vZHVsZT1tYWtlTWFwKCdhdHRycyxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXknKTsvLyBOb3RlOiB0aGlzIGlzIGEgYnJvd3Nlci1vbmx5IGZ1bmN0aW9uIHNvIHdlIGNhbiBhc3N1bWUgZWxtcyBhcmUgRE9NIG5vZGVzLlxuZnVuY3Rpb24gaHlkcmF0ZShlbG0sdm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlLGluVlByZSl7dmFyIGk7dmFyIHRhZz12bm9kZS50YWc7dmFyIGRhdGE9dm5vZGUuZGF0YTt2YXIgY2hpbGRyZW49dm5vZGUuY2hpbGRyZW47aW5WUHJlPWluVlByZXx8ZGF0YSYmZGF0YS5wcmU7dm5vZGUuZWxtPWVsbTtpZihpc1RydWUodm5vZGUuaXNDb21tZW50KSYmaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5KSl7dm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyPXRydWU7cmV0dXJuIHRydWU7fWlmKGlzRGVmKGRhdGEpKXtpZihpc0RlZihpPWRhdGEuaG9vaykmJmlzRGVmKGk9aS5pbml0KSl7aSh2bm9kZSx0cnVlLyogaHlkcmF0aW5nICovKTt9aWYoaXNEZWYoaT12bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpey8vIGNoaWxkIGNvbXBvbmVudC4gaXQgc2hvdWxkIGhhdmUgaHlkcmF0ZWQgaXRzIG93biB0cmVlLlxuaW5pdENvbXBvbmVudCh2bm9kZSxpbnNlcnRlZFZub2RlUXVldWUpO3JldHVybiB0cnVlO319aWYoaXNEZWYodGFnKSl7aWYoaXNEZWYoY2hpbGRyZW4pKXsvLyBlbXB0eSBlbGVtZW50LCBhbGxvdyBjbGllbnQgdG8gcGljayB1cCBhbmQgcG9wdWxhdGUgY2hpbGRyZW5cbmlmKCFlbG0uaGFzQ2hpbGROb2RlcygpKXtjcmVhdGVDaGlsZHJlbih2bm9kZSxjaGlsZHJlbixpbnNlcnRlZFZub2RlUXVldWUpO31lbHNley8vIHYtaHRtbCBhbmQgZG9tUHJvcHM6IGlubmVySFRNTFxuaWYoaXNEZWYoaT1kYXRhKSYmaXNEZWYoaT1pLmRvbVByb3BzKSYmaXNEZWYoaT1pLmlubmVySFRNTCkpe2lmKGkhPT1lbG0uaW5uZXJIVE1MKXtyZXR1cm4gZmFsc2U7fX1lbHNley8vIGl0ZXJhdGUgYW5kIGNvbXBhcmUgY2hpbGRyZW4gbGlzdHNcbnZhciBjaGlsZHJlbk1hdGNoPXRydWU7dmFyIGNoaWxkTm9kZT1lbG0uZmlyc3RDaGlsZDtmb3IodmFyIGkkMT0wO2kkMTxjaGlsZHJlbi5sZW5ndGg7aSQxKyspe2lmKCFjaGlsZE5vZGV8fCFoeWRyYXRlKGNoaWxkTm9kZSxjaGlsZHJlbltpJDFdLGluc2VydGVkVm5vZGVRdWV1ZSxpblZQcmUpKXtjaGlsZHJlbk1hdGNoPWZhbHNlO2JyZWFrO31jaGlsZE5vZGU9Y2hpbGROb2RlLm5leHRTaWJsaW5nO30vLyBpZiBjaGlsZE5vZGUgaXMgbm90IG51bGwsIGl0IG1lYW5zIHRoZSBhY3R1YWwgY2hpbGROb2RlcyBsaXN0IGlzXG4vLyBsb25nZXIgdGhhbiB0aGUgdmlydHVhbCBjaGlsZHJlbiBsaXN0LlxuaWYoIWNoaWxkcmVuTWF0Y2h8fGNoaWxkTm9kZSl7cmV0dXJuIGZhbHNlO319fX1pZihpc0RlZihkYXRhKSl7dmFyIGZ1bGxJbnZva2U9ZmFsc2U7Zm9yKHZhciBrZXkgaW4gZGF0YSl7aWYoIWlzUmVuZGVyZWRNb2R1bGUoa2V5KSl7ZnVsbEludm9rZT10cnVlO2ludm9rZUNyZWF0ZUhvb2tzKHZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSk7YnJlYWs7fX1pZighZnVsbEludm9rZSYmZGF0YVsnY2xhc3MnXSl7Ly8gZW5zdXJlIGNvbGxlY3RpbmcgZGVwcyBmb3IgZGVlcCBjbGFzcyBiaW5kaW5ncyBmb3IgZnV0dXJlIHVwZGF0ZXNcbnRyYXZlcnNlKGRhdGFbJ2NsYXNzJ10pO319fWVsc2UgaWYoZWxtLmRhdGEhPT12bm9kZS50ZXh0KXtlbG0uZGF0YT12bm9kZS50ZXh0O31yZXR1cm4gdHJ1ZTt9cmV0dXJuIGZ1bmN0aW9uIHBhdGNoKG9sZFZub2RlLHZub2RlLGh5ZHJhdGluZyxyZW1vdmVPbmx5KXtpZihpc1VuZGVmKHZub2RlKSl7aWYoaXNEZWYob2xkVm5vZGUpKXtpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7fXJldHVybjt9dmFyIGlzSW5pdGlhbFBhdGNoPWZhbHNlO3ZhciBpbnNlcnRlZFZub2RlUXVldWU9W107aWYoaXNVbmRlZihvbGRWbm9kZSkpey8vIGVtcHR5IG1vdW50IChsaWtlbHkgYXMgY29tcG9uZW50KSwgY3JlYXRlIG5ldyByb290IGVsZW1lbnRcbmlzSW5pdGlhbFBhdGNoPXRydWU7Y3JlYXRlRWxtKHZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSk7fWVsc2V7dmFyIGlzUmVhbEVsZW1lbnQ9aXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO2lmKCFpc1JlYWxFbGVtZW50JiZzYW1lVm5vZGUob2xkVm5vZGUsdm5vZGUpKXsvLyBwYXRjaCBleGlzdGluZyByb290IG5vZGVcbnBhdGNoVm5vZGUob2xkVm5vZGUsdm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlLG51bGwsbnVsbCxyZW1vdmVPbmx5KTt9ZWxzZXtpZihpc1JlYWxFbGVtZW50KXsvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuLy8gY2hlY2sgaWYgdGhpcyBpcyBzZXJ2ZXItcmVuZGVyZWQgY29udGVudCBhbmQgaWYgd2UgY2FuIHBlcmZvcm1cbi8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG5pZihvbGRWbm9kZS5ub2RlVHlwZT09PTEmJm9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpe29sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7aHlkcmF0aW5nPXRydWU7fWlmKGlzVHJ1ZShoeWRyYXRpbmcpKXtpZihoeWRyYXRlKG9sZFZub2RlLHZub2RlLGluc2VydGVkVm5vZGVRdWV1ZSkpe2ludm9rZUluc2VydEhvb2sodm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlLHRydWUpO3JldHVybiBvbGRWbm9kZTt9fS8vIGVpdGhlciBub3Qgc2VydmVyLXJlbmRlcmVkLCBvciBoeWRyYXRpb24gZmFpbGVkLlxuLy8gY3JlYXRlIGFuIGVtcHR5IG5vZGUgYW5kIHJlcGxhY2UgaXRcbm9sZFZub2RlPWVtcHR5Tm9kZUF0KG9sZFZub2RlKTt9Ly8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbnZhciBvbGRFbG09b2xkVm5vZGUuZWxtO3ZhciBwYXJlbnRFbG09bm9kZU9wcy5wYXJlbnROb2RlKG9sZEVsbSk7Ly8gY3JlYXRlIG5ldyBub2RlXG5jcmVhdGVFbG0odm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlLC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4vLyBsZWF2aW5nIHRyYW5zaXRpb24uIE9ubHkgaGFwcGVucyB3aGVuIGNvbWJpbmluZyB0cmFuc2l0aW9uICtcbi8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG5vbGRFbG0uX2xlYXZlQ2I/bnVsbDpwYXJlbnRFbG0sbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbG0pKTsvLyB1cGRhdGUgcGFyZW50IHBsYWNlaG9sZGVyIG5vZGUgZWxlbWVudCwgcmVjdXJzaXZlbHlcbmlmKGlzRGVmKHZub2RlLnBhcmVudCkpe3ZhciBhbmNlc3Rvcj12bm9kZS5wYXJlbnQ7dmFyIHBhdGNoYWJsZT1pc1BhdGNoYWJsZSh2bm9kZSk7d2hpbGUoYW5jZXN0b3Ipe2Zvcih2YXIgaT0wO2k8Y2JzLmRlc3Ryb3kubGVuZ3RoOysraSl7Y2JzLmRlc3Ryb3lbaV0oYW5jZXN0b3IpO31hbmNlc3Rvci5lbG09dm5vZGUuZWxtO2lmKHBhdGNoYWJsZSl7Zm9yKHZhciBpJDE9MDtpJDE8Y2JzLmNyZWF0ZS5sZW5ndGg7KytpJDEpe2Nicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsYW5jZXN0b3IpO30vLyAjNjUxM1xuLy8gaW52b2tlIGluc2VydCBob29rcyB0aGF0IG1heSBoYXZlIGJlZW4gbWVyZ2VkIGJ5IGNyZWF0ZSBob29rcy5cbi8vIGUuZy4gZm9yIGRpcmVjdGl2ZXMgdGhhdCB1c2VzIHRoZSBcImluc2VydGVkXCIgaG9vay5cbnZhciBpbnNlcnQ9YW5jZXN0b3IuZGF0YS5ob29rLmluc2VydDtpZihpbnNlcnQubWVyZ2VkKXsvLyBzdGFydCBhdCBpbmRleCAxIHRvIGF2b2lkIHJlLWludm9raW5nIGNvbXBvbmVudCBtb3VudGVkIGhvb2tcbmZvcih2YXIgaSQyPTE7aSQyPGluc2VydC5mbnMubGVuZ3RoO2kkMisrKXtpbnNlcnQuZm5zW2kkMl0oKTt9fX1lbHNle3JlZ2lzdGVyUmVmKGFuY2VzdG9yKTt9YW5jZXN0b3I9YW5jZXN0b3IucGFyZW50O319Ly8gZGVzdHJveSBvbGQgbm9kZVxuaWYoaXNEZWYocGFyZW50RWxtKSl7cmVtb3ZlVm5vZGVzKHBhcmVudEVsbSxbb2xkVm5vZGVdLDAsMCk7fWVsc2UgaWYoaXNEZWYob2xkVm5vZGUudGFnKSl7aW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO319fWludm9rZUluc2VydEhvb2sodm5vZGUsaW5zZXJ0ZWRWbm9kZVF1ZXVlLGlzSW5pdGlhbFBhdGNoKTtyZXR1cm4gdm5vZGUuZWxtO307fS8qICAqL3ZhciBkaXJlY3RpdmVzPXtjcmVhdGU6dXBkYXRlRGlyZWN0aXZlcyx1cGRhdGU6dXBkYXRlRGlyZWN0aXZlcyxkZXN0cm95OmZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXModm5vZGUpe3VwZGF0ZURpcmVjdGl2ZXModm5vZGUsZW1wdHlOb2RlKTt9fTtmdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzKG9sZFZub2RlLHZub2RlKXtpZihvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXN8fHZub2RlLmRhdGEuZGlyZWN0aXZlcyl7X3VwZGF0ZShvbGRWbm9kZSx2bm9kZSk7fX1mdW5jdGlvbiBfdXBkYXRlKG9sZFZub2RlLHZub2RlKXt2YXIgaXNDcmVhdGU9b2xkVm5vZGU9PT1lbXB0eU5vZGU7dmFyIGlzRGVzdHJveT12bm9kZT09PWVtcHR5Tm9kZTt2YXIgb2xkRGlycz1ub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLG9sZFZub2RlLmNvbnRleHQpO3ZhciBuZXdEaXJzPW5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsdm5vZGUuY29udGV4dCk7dmFyIGRpcnNXaXRoSW5zZXJ0PVtdO3ZhciBkaXJzV2l0aFBvc3RwYXRjaD1bXTt2YXIga2V5LG9sZERpcixkaXI7Zm9yKGtleSBpbiBuZXdEaXJzKXtvbGREaXI9b2xkRGlyc1trZXldO2Rpcj1uZXdEaXJzW2tleV07aWYoIW9sZERpcil7Ly8gbmV3IGRpcmVjdGl2ZSwgYmluZFxuY2FsbEhvb2skMShkaXIsJ2JpbmQnLHZub2RlLG9sZFZub2RlKTtpZihkaXIuZGVmJiZkaXIuZGVmLmluc2VydGVkKXtkaXJzV2l0aEluc2VydC5wdXNoKGRpcik7fX1lbHNley8vIGV4aXN0aW5nIGRpcmVjdGl2ZSwgdXBkYXRlXG5kaXIub2xkVmFsdWU9b2xkRGlyLnZhbHVlO2Rpci5vbGRBcmc9b2xkRGlyLmFyZztjYWxsSG9vayQxKGRpciwndXBkYXRlJyx2bm9kZSxvbGRWbm9kZSk7aWYoZGlyLmRlZiYmZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKXtkaXJzV2l0aFBvc3RwYXRjaC5wdXNoKGRpcik7fX19aWYoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKXt2YXIgY2FsbEluc2VydD1mdW5jdGlvbiBjYWxsSW5zZXJ0KCl7Zm9yKHZhciBpPTA7aTxkaXJzV2l0aEluc2VydC5sZW5ndGg7aSsrKXtjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCdpbnNlcnRlZCcsdm5vZGUsb2xkVm5vZGUpO319O2lmKGlzQ3JlYXRlKXttZXJnZVZOb2RlSG9vayh2bm9kZSwnaW5zZXJ0JyxjYWxsSW5zZXJ0KTt9ZWxzZXtjYWxsSW5zZXJ0KCk7fX1pZihkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGgpe21lcmdlVk5vZGVIb29rKHZub2RlLCdwb3N0cGF0Y2gnLGZ1bmN0aW9uKCl7Zm9yKHZhciBpPTA7aTxkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGg7aSsrKXtjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCdjb21wb25lbnRVcGRhdGVkJyx2bm9kZSxvbGRWbm9kZSk7fX0pO31pZighaXNDcmVhdGUpe2ZvcihrZXkgaW4gb2xkRGlycyl7aWYoIW5ld0RpcnNba2V5XSl7Ly8gbm8gbG9uZ2VyIHByZXNlbnQsIHVuYmluZFxuY2FsbEhvb2skMShvbGREaXJzW2tleV0sJ3VuYmluZCcsb2xkVm5vZGUsb2xkVm5vZGUsaXNEZXN0cm95KTt9fX19dmFyIGVtcHR5TW9kaWZpZXJzPU9iamVjdC5jcmVhdGUobnVsbCk7ZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyQxKGRpcnMsdm0pe3ZhciByZXM9T2JqZWN0LmNyZWF0ZShudWxsKTtpZighZGlycyl7Ly8gJGZsb3ctZGlzYWJsZS1saW5lXG5yZXR1cm4gcmVzO312YXIgaSxkaXI7Zm9yKGk9MDtpPGRpcnMubGVuZ3RoO2krKyl7ZGlyPWRpcnNbaV07aWYoIWRpci5tb2RpZmllcnMpey8vICRmbG93LWRpc2FibGUtbGluZVxuZGlyLm1vZGlmaWVycz1lbXB0eU1vZGlmaWVyczt9cmVzW2dldFJhd0Rpck5hbWUoZGlyKV09ZGlyO2Rpci5kZWY9cmVzb2x2ZUFzc2V0KHZtLiRvcHRpb25zLCdkaXJlY3RpdmVzJyxkaXIubmFtZSk7fS8vICRmbG93LWRpc2FibGUtbGluZVxucmV0dXJuIHJlczt9ZnVuY3Rpb24gZ2V0UmF3RGlyTmFtZShkaXIpe3JldHVybiBkaXIucmF3TmFtZXx8ZGlyLm5hbWUrXCIuXCIrT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVyc3x8e30pLmpvaW4oJy4nKTt9ZnVuY3Rpb24gY2FsbEhvb2skMShkaXIsaG9vayx2bm9kZSxvbGRWbm9kZSxpc0Rlc3Ryb3kpe3ZhciBmbj1kaXIuZGVmJiZkaXIuZGVmW2hvb2tdO2lmKGZuKXt0cnl7Zm4odm5vZGUuZWxtLGRpcix2bm9kZSxvbGRWbm9kZSxpc0Rlc3Ryb3kpO31jYXRjaChlKXtoYW5kbGVFcnJvcihlLHZub2RlLmNvbnRleHQsXCJkaXJlY3RpdmUgXCIrZGlyLm5hbWUrXCIgXCIraG9vaytcIiBob29rXCIpO319fXZhciBiYXNlTW9kdWxlcz1bcmVmLGRpcmVjdGl2ZXNdOy8qICAqL2Z1bmN0aW9uIHVwZGF0ZUF0dHJzKG9sZFZub2RlLHZub2RlKXt2YXIgb3B0cz12bm9kZS5jb21wb25lbnRPcHRpb25zO2lmKGlzRGVmKG9wdHMpJiZvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnM9PT1mYWxzZSl7cmV0dXJuO31pZihpc1VuZGVmKG9sZFZub2RlLmRhdGEuYXR0cnMpJiZpc1VuZGVmKHZub2RlLmRhdGEuYXR0cnMpKXtyZXR1cm47fXZhciBrZXksY3VyLG9sZDt2YXIgZWxtPXZub2RlLmVsbTt2YXIgb2xkQXR0cnM9b2xkVm5vZGUuZGF0YS5hdHRyc3x8e307dmFyIGF0dHJzPXZub2RlLmRhdGEuYXR0cnN8fHt9Oy8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuaWYoaXNEZWYoYXR0cnMuX19vYl9fKSl7YXR0cnM9dm5vZGUuZGF0YS5hdHRycz1leHRlbmQoe30sYXR0cnMpO31mb3Ioa2V5IGluIGF0dHJzKXtjdXI9YXR0cnNba2V5XTtvbGQ9b2xkQXR0cnNba2V5XTtpZihvbGQhPT1jdXIpe3NldEF0dHIoZWxtLGtleSxjdXIpO319Ly8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbi8vICM2NjY2OiBJRS9FZGdlIGZvcmNlcyBwcm9ncmVzcyB2YWx1ZSBkb3duIHRvIDEgYmVmb3JlIHNldHRpbmcgYSBtYXhcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKChpc0lFfHxpc0VkZ2UpJiZhdHRycy52YWx1ZSE9PW9sZEF0dHJzLnZhbHVlKXtzZXRBdHRyKGVsbSwndmFsdWUnLGF0dHJzLnZhbHVlKTt9Zm9yKGtleSBpbiBvbGRBdHRycyl7aWYoaXNVbmRlZihhdHRyc1trZXldKSl7aWYoaXNYbGluayhrZXkpKXtlbG0ucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUyxnZXRYbGlua1Byb3Aoa2V5KSk7fWVsc2UgaWYoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSl7ZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO319fX1mdW5jdGlvbiBzZXRBdHRyKGVsLGtleSx2YWx1ZSl7aWYoZWwudGFnTmFtZS5pbmRleE9mKCctJyk+LTEpe2Jhc2VTZXRBdHRyKGVsLGtleSx2YWx1ZSk7fWVsc2UgaWYoaXNCb29sZWFuQXR0cihrZXkpKXsvLyBzZXQgYXR0cmlidXRlIGZvciBibGFuayB2YWx1ZVxuLy8gZS5nLiA8b3B0aW9uIGRpc2FibGVkPlNlbGVjdCBvbmU8L29wdGlvbj5cbmlmKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKXtlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTt9ZWxzZXsvLyB0ZWNobmljYWxseSBhbGxvd2Z1bGxzY3JlZW4gaXMgYSBib29sZWFuIGF0dHJpYnV0ZSBmb3IgPGlmcmFtZT4sXG4vLyBidXQgRmxhc2ggZXhwZWN0cyBhIHZhbHVlIG9mIFwidHJ1ZVwiIHdoZW4gdXNlZCBvbiA8ZW1iZWQ+IHRhZ1xudmFsdWU9a2V5PT09J2FsbG93ZnVsbHNjcmVlbicmJmVsLnRhZ05hbWU9PT0nRU1CRUQnPyd0cnVlJzprZXk7ZWwuc2V0QXR0cmlidXRlKGtleSx2YWx1ZSk7fX1lbHNlIGlmKGlzRW51bWVyYXRlZEF0dHIoa2V5KSl7ZWwuc2V0QXR0cmlidXRlKGtleSxjb252ZXJ0RW51bWVyYXRlZFZhbHVlKGtleSx2YWx1ZSkpO31lbHNlIGlmKGlzWGxpbmsoa2V5KSl7aWYoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpe2VsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsZ2V0WGxpbmtQcm9wKGtleSkpO31lbHNle2VsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsa2V5LHZhbHVlKTt9fWVsc2V7YmFzZVNldEF0dHIoZWwsa2V5LHZhbHVlKTt9fWZ1bmN0aW9uIGJhc2VTZXRBdHRyKGVsLGtleSx2YWx1ZSl7aWYoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpe2VsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO31lbHNley8vICM3MTM4OiBJRTEwICYgMTEgZmlyZXMgaW5wdXQgZXZlbnQgd2hlbiBzZXR0aW5nIHBsYWNlaG9sZGVyIG9uXG4vLyA8dGV4dGFyZWE+Li4uIGJsb2NrIHRoZSBmaXJzdCBpbnB1dCBldmVudCBhbmQgcmVtb3ZlIHRoZSBibG9ja2VyXG4vLyBpbW1lZGlhdGVseS5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKGlzSUUmJiFpc0lFOSYmZWwudGFnTmFtZT09PSdURVhUQVJFQScmJmtleT09PSdwbGFjZWhvbGRlcicmJnZhbHVlIT09JycmJiFlbC5fX2llcGgpe3ZhciBibG9ja2VyPWZ1bmN0aW9uIGJsb2NrZXIoZSl7ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdpbnB1dCcsYmxvY2tlcik7fTtlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsYmxvY2tlcik7Ly8gJGZsb3ctZGlzYWJsZS1saW5lXG5lbC5fX2llcGg9dHJ1ZTsvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovfWVsLnNldEF0dHJpYnV0ZShrZXksdmFsdWUpO319dmFyIGF0dHJzPXtjcmVhdGU6dXBkYXRlQXR0cnMsdXBkYXRlOnVwZGF0ZUF0dHJzfTsvKiAgKi9mdW5jdGlvbiB1cGRhdGVDbGFzcyhvbGRWbm9kZSx2bm9kZSl7dmFyIGVsPXZub2RlLmVsbTt2YXIgZGF0YT12bm9kZS5kYXRhO3ZhciBvbGREYXRhPW9sZFZub2RlLmRhdGE7aWYoaXNVbmRlZihkYXRhLnN0YXRpY0NsYXNzKSYmaXNVbmRlZihkYXRhW1wiY2xhc3NcIl0pJiYoaXNVbmRlZihvbGREYXRhKXx8aXNVbmRlZihvbGREYXRhLnN0YXRpY0NsYXNzKSYmaXNVbmRlZihvbGREYXRhW1wiY2xhc3NcIl0pKSl7cmV0dXJuO312YXIgY2xzPWdlbkNsYXNzRm9yVm5vZGUodm5vZGUpOy8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXNcbnZhciB0cmFuc2l0aW9uQ2xhc3M9ZWwuX3RyYW5zaXRpb25DbGFzc2VzO2lmKGlzRGVmKHRyYW5zaXRpb25DbGFzcykpe2Nscz1jb25jYXQoY2xzLHN0cmluZ2lmeUNsYXNzKHRyYW5zaXRpb25DbGFzcykpO30vLyBzZXQgdGhlIGNsYXNzXG5pZihjbHMhPT1lbC5fcHJldkNsYXNzKXtlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJyxjbHMpO2VsLl9wcmV2Q2xhc3M9Y2xzO319dmFyIGtsYXNzPXtjcmVhdGU6dXBkYXRlQ2xhc3MsdXBkYXRlOnVwZGF0ZUNsYXNzfTsvKiAgKi8gLyogICovIC8qICAqLyAvKiAgKi8gLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZVxuLy8gc28gd2UgdXNlZCBzb21lIHJlc2VydmVkIHRva2VucyBkdXJpbmcgY29tcGlsZS5cbnZhciBSQU5HRV9UT0tFTj0nX19yJzt2YXIgQ0hFQ0tCT1hfUkFESU9fVE9LRU49J19fYyc7LyogICovIC8vIG5vcm1hbGl6ZSB2LW1vZGVsIGV2ZW50IHRva2VucyB0aGF0IGNhbiBvbmx5IGJlIGRldGVybWluZWQgYXQgcnVudGltZS5cbi8vIGl0J3MgaW1wb3J0YW50IHRvIHBsYWNlIHRoZSBldmVudCBhcyB0aGUgZmlyc3QgaW4gdGhlIGFycmF5IGJlY2F1c2Vcbi8vIHRoZSB3aG9sZSBwb2ludCBpcyBlbnN1cmluZyB0aGUgdi1tb2RlbCBjYWxsYmFjayBnZXRzIGNhbGxlZCBiZWZvcmVcbi8vIHVzZXItYXR0YWNoZWQgaGFuZGxlcnMuXG5mdW5jdGlvbiBub3JtYWxpemVFdmVudHMob24pey8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKGlzRGVmKG9uW1JBTkdFX1RPS0VOXSkpey8vIElFIGlucHV0W3R5cGU9cmFuZ2VdIG9ubHkgc3VwcG9ydHMgYGNoYW5nZWAgZXZlbnRcbnZhciBldmVudD1pc0lFPydjaGFuZ2UnOidpbnB1dCc7b25bZXZlbnRdPVtdLmNvbmNhdChvbltSQU5HRV9UT0tFTl0sb25bZXZlbnRdfHxbXSk7ZGVsZXRlIG9uW1JBTkdFX1RPS0VOXTt9Ly8gVGhpcyB3YXMgb3JpZ2luYWxseSBpbnRlbmRlZCB0byBmaXggIzQ1MjEgYnV0IG5vIGxvbmdlciBuZWNlc3Nhcnlcbi8vIGFmdGVyIDIuNS4gS2VlcGluZyBpdCBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGdlbmVyYXRlZCBjb2RlIGZyb20gPCAyLjRcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKGlzRGVmKG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSkpe29uLmNoYW5nZT1bXS5jb25jYXQob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dLG9uLmNoYW5nZXx8W10pO2RlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07fX12YXIgdGFyZ2V0JDE7ZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIkMShldmVudCxoYW5kbGVyLGNhcHR1cmUpe3ZhciBfdGFyZ2V0PXRhcmdldCQxOy8vIHNhdmUgY3VycmVudCB0YXJnZXQgZWxlbWVudCBpbiBjbG9zdXJlXG5yZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIoKXt2YXIgcmVzPWhhbmRsZXIuYXBwbHkobnVsbCxhcmd1bWVudHMpO2lmKHJlcyE9PW51bGwpe3JlbW92ZSQyKGV2ZW50LG9uY2VIYW5kbGVyLGNhcHR1cmUsX3RhcmdldCk7fX07fS8vICM5NDQ2OiBGaXJlZm94IDw9IDUzIChpbiBwYXJ0aWN1bGFyLCBFU1IgNTIpIGhhcyBpbmNvcnJlY3QgRXZlbnQudGltZVN0YW1wXG4vLyBpbXBsZW1lbnRhdGlvbiBhbmQgZG9lcyBub3QgZmlyZSBtaWNyb3Rhc2tzIGluIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24sIHNvXG4vLyBzYWZlIHRvIGV4Y2x1ZGUuXG52YXIgdXNlTWljcm90YXNrRml4PWlzVXNpbmdNaWNyb1Rhc2smJiEoaXNGRiYmTnVtYmVyKGlzRkZbMV0pPD01Myk7ZnVuY3Rpb24gYWRkJDEobmFtZSxoYW5kbGVyLGNhcHR1cmUscGFzc2l2ZSl7Ly8gYXN5bmMgZWRnZSBjYXNlICM2NTY2OiBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxuLy8gYXR0YWNoZWQgdG8gb3V0ZXIgZWxlbWVudCBkdXJpbmcgcGF0Y2gsIGFuZCB0cmlnZ2VyZWQgYWdhaW4uIFRoaXNcbi8vIGhhcHBlbnMgYmVjYXVzZSBicm93c2VycyBmaXJlIG1pY3JvdGFzayB0aWNrcyBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLlxuLy8gdGhlIHNvbHV0aW9uIGlzIHNpbXBsZTogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxuLy8gYW5kIHRoZSBoYW5kbGVyIHdvdWxkIG9ubHkgZmlyZSBpZiB0aGUgZXZlbnQgcGFzc2VkIHRvIGl0IHdhcyBmaXJlZFxuLy8gQUZURVIgaXQgd2FzIGF0dGFjaGVkLlxuaWYodXNlTWljcm90YXNrRml4KXt2YXIgYXR0YWNoZWRUaW1lc3RhbXA9Y3VycmVudEZsdXNoVGltZXN0YW1wO3ZhciBvcmlnaW5hbD1oYW5kbGVyO2hhbmRsZXI9b3JpZ2luYWwuX3dyYXBwZXI9ZnVuY3Rpb24oZSl7aWYoLy8gbm8gYnViYmxpbmcsIHNob3VsZCBhbHdheXMgZmlyZS5cbi8vIHRoaXMgaXMganVzdCBhIHNhZmV0eSBuZXQgaW4gY2FzZSBldmVudC50aW1lU3RhbXAgaXMgdW5yZWxpYWJsZSBpblxuLy8gY2VydGFpbiB3ZWlyZCBlbnZpcm9ubWVudHMuLi5cbmUudGFyZ2V0PT09ZS5jdXJyZW50VGFyZ2V0fHwvLyBldmVudCBpcyBmaXJlZCBhZnRlciBoYW5kbGVyIGF0dGFjaG1lbnRcbmUudGltZVN0YW1wPj1hdHRhY2hlZFRpbWVzdGFtcHx8Ly8gYmFpbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgaGF2ZSBidWdneSBldmVudC50aW1lU3RhbXAgaW1wbGVtZW50YXRpb25zXG4vLyAjOTQ2MiBpT1MgOSBidWc6IGV2ZW50LnRpbWVTdGFtcCBpcyAwIGFmdGVyIGhpc3RvcnkucHVzaFN0YXRlXG4vLyAjOTY4MSBRdFdlYkVuZ2luZSBldmVudC50aW1lU3RhbXAgaXMgbmVnYXRpdmUgdmFsdWVcbmUudGltZVN0YW1wPD0wfHwvLyAjOTQ0OCBiYWlsIGlmIGV2ZW50IGlzIGZpcmVkIGluIGFub3RoZXIgZG9jdW1lbnQgaW4gYSBtdWx0aS1wYWdlXG4vLyBlbGVjdHJvbi9udy5qcyBhcHAsIHNpbmNlIGV2ZW50LnRpbWVTdGFtcCB3aWxsIGJlIHVzaW5nIGEgZGlmZmVyZW50XG4vLyBzdGFydGluZyByZWZlcmVuY2VcbmUudGFyZ2V0Lm93bmVyRG9jdW1lbnQhPT1kb2N1bWVudCl7cmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9fTt9dGFyZ2V0JDEuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLGhhbmRsZXIsc3VwcG9ydHNQYXNzaXZlP3tjYXB0dXJlOmNhcHR1cmUscGFzc2l2ZTpwYXNzaXZlfTpjYXB0dXJlKTt9ZnVuY3Rpb24gcmVtb3ZlJDIobmFtZSxoYW5kbGVyLGNhcHR1cmUsX3RhcmdldCl7KF90YXJnZXR8fHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsaGFuZGxlci5fd3JhcHBlcnx8aGFuZGxlcixjYXB0dXJlKTt9ZnVuY3Rpb24gdXBkYXRlRE9NTGlzdGVuZXJzKG9sZFZub2RlLHZub2RlKXtpZihpc1VuZGVmKG9sZFZub2RlLmRhdGEub24pJiZpc1VuZGVmKHZub2RlLmRhdGEub24pKXtyZXR1cm47fXZhciBvbj12bm9kZS5kYXRhLm9ufHx7fTt2YXIgb2xkT249b2xkVm5vZGUuZGF0YS5vbnx8e307dGFyZ2V0JDE9dm5vZGUuZWxtO25vcm1hbGl6ZUV2ZW50cyhvbik7dXBkYXRlTGlzdGVuZXJzKG9uLG9sZE9uLGFkZCQxLHJlbW92ZSQyLGNyZWF0ZU9uY2VIYW5kbGVyJDEsdm5vZGUuY29udGV4dCk7dGFyZ2V0JDE9dW5kZWZpbmVkO312YXIgZXZlbnRzPXtjcmVhdGU6dXBkYXRlRE9NTGlzdGVuZXJzLHVwZGF0ZTp1cGRhdGVET01MaXN0ZW5lcnN9Oy8qICAqL3ZhciBzdmdDb250YWluZXI7ZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMob2xkVm5vZGUsdm5vZGUpe2lmKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5kb21Qcm9wcykmJmlzVW5kZWYodm5vZGUuZGF0YS5kb21Qcm9wcykpe3JldHVybjt9dmFyIGtleSxjdXI7dmFyIGVsbT12bm9kZS5lbG07dmFyIG9sZFByb3BzPW9sZFZub2RlLmRhdGEuZG9tUHJvcHN8fHt9O3ZhciBwcm9wcz12bm9kZS5kYXRhLmRvbVByb3BzfHx7fTsvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbmlmKGlzRGVmKHByb3BzLl9fb2JfXykpe3Byb3BzPXZub2RlLmRhdGEuZG9tUHJvcHM9ZXh0ZW5kKHt9LHByb3BzKTt9Zm9yKGtleSBpbiBvbGRQcm9wcyl7aWYoIShrZXkgaW4gcHJvcHMpKXtlbG1ba2V5XT0nJzt9fWZvcihrZXkgaW4gcHJvcHMpe2N1cj1wcm9wc1trZXldOy8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLFxuLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbi8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApXG5pZihrZXk9PT0ndGV4dENvbnRlbnQnfHxrZXk9PT0naW5uZXJIVE1MJyl7aWYodm5vZGUuY2hpbGRyZW4pe3Zub2RlLmNoaWxkcmVuLmxlbmd0aD0wO31pZihjdXI9PT1vbGRQcm9wc1trZXldKXtjb250aW51ZTt9Ly8gIzY2MDEgd29yayBhcm91bmQgQ2hyb21lIHZlcnNpb24gPD0gNTUgYnVnIHdoZXJlIHNpbmdsZSB0ZXh0Tm9kZVxuLy8gcmVwbGFjZWQgYnkgaW5uZXJIVE1ML3RleHRDb250ZW50IHJldGFpbnMgaXRzIHBhcmVudE5vZGUgcHJvcGVydHlcbmlmKGVsbS5jaGlsZE5vZGVzLmxlbmd0aD09PTEpe2VsbS5yZW1vdmVDaGlsZChlbG0uY2hpbGROb2Rlc1swXSk7fX1pZihrZXk9PT0ndmFsdWUnJiZlbG0udGFnTmFtZSE9PSdQUk9HUkVTUycpey8vIHN0b3JlIHZhbHVlIGFzIF92YWx1ZSBhcyB3ZWxsIHNpbmNlXG4vLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkXG5lbG0uX3ZhbHVlPWN1cjsvLyBhdm9pZCByZXNldHRpbmcgY3Vyc29yIHBvc2l0aW9uIHdoZW4gdmFsdWUgaXMgdGhlIHNhbWVcbnZhciBzdHJDdXI9aXNVbmRlZihjdXIpPycnOlN0cmluZyhjdXIpO2lmKHNob3VsZFVwZGF0ZVZhbHVlKGVsbSxzdHJDdXIpKXtlbG0udmFsdWU9c3RyQ3VyO319ZWxzZSBpZihrZXk9PT0naW5uZXJIVE1MJyYmaXNTVkcoZWxtLnRhZ05hbWUpJiZpc1VuZGVmKGVsbS5pbm5lckhUTUwpKXsvLyBJRSBkb2Vzbid0IHN1cHBvcnQgaW5uZXJIVE1MIGZvciBTVkcgZWxlbWVudHNcbnN2Z0NvbnRhaW5lcj1zdmdDb250YWluZXJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO3N2Z0NvbnRhaW5lci5pbm5lckhUTUw9XCI8c3ZnPlwiK2N1citcIjwvc3ZnPlwiO3ZhciBzdmc9c3ZnQ29udGFpbmVyLmZpcnN0Q2hpbGQ7d2hpbGUoZWxtLmZpcnN0Q2hpbGQpe2VsbS5yZW1vdmVDaGlsZChlbG0uZmlyc3RDaGlsZCk7fXdoaWxlKHN2Zy5maXJzdENoaWxkKXtlbG0uYXBwZW5kQ2hpbGQoc3ZnLmZpcnN0Q2hpbGQpO319ZWxzZSBpZigvLyBza2lwIHRoZSB1cGRhdGUgaWYgb2xkIGFuZCBuZXcgVkRPTSBzdGF0ZSBpcyB0aGUgc2FtZS5cbi8vIGB2YWx1ZWAgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5IGJlY2F1c2UgdGhlIERPTSB2YWx1ZSBtYXkgYmUgdGVtcG9yYXJpbHlcbi8vIG91dCBvZiBzeW5jIHdpdGggVkRPTSBzdGF0ZSBkdWUgdG8gZm9jdXMsIGNvbXBvc2l0aW9uIGFuZCBtb2RpZmllcnMuXG4vLyBUaGlzICAjNDUyMSBieSBza2lwcGluZyB0aGUgdW5uZWNlc2FycnkgYGNoZWNrZWRgIHVwZGF0ZS5cbmN1ciE9PW9sZFByb3BzW2tleV0pey8vIHNvbWUgcHJvcGVydHkgdXBkYXRlcyBjYW4gdGhyb3dcbi8vIGUuZy4gYHZhbHVlYCBvbiA8cHJvZ3Jlc3M+IHcvIG5vbi1maW5pdGUgdmFsdWVcbnRyeXtlbG1ba2V5XT1jdXI7fWNhdGNoKGUpe319fX0vLyBjaGVjayBwbGF0Zm9ybXMvd2ViL3V0aWwvYXR0cnMuanMgYWNjZXB0VmFsdWVcbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVZhbHVlKGVsbSxjaGVja1ZhbCl7cmV0dXJuIWVsbS5jb21wb3NpbmcmJihlbG0udGFnTmFtZT09PSdPUFRJT04nfHxpc05vdEluRm9jdXNBbmREaXJ0eShlbG0sY2hlY2tWYWwpfHxpc0RpcnR5V2l0aE1vZGlmaWVycyhlbG0sY2hlY2tWYWwpKTt9ZnVuY3Rpb24gaXNOb3RJbkZvY3VzQW5kRGlydHkoZWxtLGNoZWNrVmFsKXsvLyByZXR1cm4gdHJ1ZSB3aGVuIHRleHRib3ggKC5udW1iZXIgYW5kIC50cmltKSBsb3NlcyBmb2N1cyBhbmQgaXRzIHZhbHVlIGlzXG4vLyBub3QgZXF1YWwgdG8gdGhlIHVwZGF0ZWQgdmFsdWVcbnZhciBub3RJbkZvY3VzPXRydWU7Ly8gIzYxNTdcbi8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZVxudHJ5e25vdEluRm9jdXM9ZG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWVsbTt9Y2F0Y2goZSl7fXJldHVybiBub3RJbkZvY3VzJiZlbG0udmFsdWUhPT1jaGVja1ZhbDt9ZnVuY3Rpb24gaXNEaXJ0eVdpdGhNb2RpZmllcnMoZWxtLG5ld1ZhbCl7dmFyIHZhbHVlPWVsbS52YWx1ZTt2YXIgbW9kaWZpZXJzPWVsbS5fdk1vZGlmaWVyczsvLyBpbmplY3RlZCBieSB2LW1vZGVsIHJ1bnRpbWVcbmlmKGlzRGVmKG1vZGlmaWVycykpe2lmKG1vZGlmaWVycy5udW1iZXIpe3JldHVybiB0b051bWJlcih2YWx1ZSkhPT10b051bWJlcihuZXdWYWwpO31pZihtb2RpZmllcnMudHJpbSl7cmV0dXJuIHZhbHVlLnRyaW0oKSE9PW5ld1ZhbC50cmltKCk7fX1yZXR1cm4gdmFsdWUhPT1uZXdWYWw7fXZhciBkb21Qcm9wcz17Y3JlYXRlOnVwZGF0ZURPTVByb3BzLHVwZGF0ZTp1cGRhdGVET01Qcm9wc307LyogICovdmFyIHBhcnNlU3R5bGVUZXh0PWNhY2hlZChmdW5jdGlvbihjc3NUZXh0KXt2YXIgcmVzPXt9O3ZhciBsaXN0RGVsaW1pdGVyPS87KD8hW14oXSpcXCkpL2c7dmFyIHByb3BlcnR5RGVsaW1pdGVyPS86KC4rKS87Y3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe2lmKGl0ZW0pe3ZhciB0bXA9aXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlcik7dG1wLmxlbmd0aD4xJiYocmVzW3RtcFswXS50cmltKCldPXRtcFsxXS50cmltKCkpO319KTtyZXR1cm4gcmVzO30pOy8vIG1lcmdlIHN0YXRpYyBhbmQgZHluYW1pYyBzdHlsZSBkYXRhIG9uIHRoZSBzYW1lIHZub2RlXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZURhdGEoZGF0YSl7dmFyIHN0eWxlPW5vcm1hbGl6ZVN0eWxlQmluZGluZyhkYXRhLnN0eWxlKTsvLyBzdGF0aWMgc3R5bGUgaXMgcHJlLXByb2Nlc3NlZCBpbnRvIGFuIG9iamVjdCBkdXJpbmcgY29tcGlsYXRpb25cbi8vIGFuZCBpcyBhbHdheXMgYSBmcmVzaCBvYmplY3QsIHNvIGl0J3Mgc2FmZSB0byBtZXJnZSBpbnRvIGl0XG5yZXR1cm4gZGF0YS5zdGF0aWNTdHlsZT9leHRlbmQoZGF0YS5zdGF0aWNTdHlsZSxzdHlsZSk6c3R5bGU7fS8vIG5vcm1hbGl6ZSBwb3NzaWJsZSBhcnJheSAvIHN0cmluZyB2YWx1ZXMgaW50byBPYmplY3RcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlQmluZGluZyhiaW5kaW5nU3R5bGUpe2lmKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSl7cmV0dXJuIHRvT2JqZWN0KGJpbmRpbmdTdHlsZSk7fWlmKHR5cGVvZiBiaW5kaW5nU3R5bGU9PT0nc3RyaW5nJyl7cmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSk7fXJldHVybiBiaW5kaW5nU3R5bGU7fS8qKlxuICAgKiBwYXJlbnQgY29tcG9uZW50IHN0eWxlIHNob3VsZCBiZSBhZnRlciBjaGlsZCdzXG4gICAqIHNvIHRoYXQgcGFyZW50IGNvbXBvbmVudCdzIHN0eWxlIGNvdWxkIG92ZXJyaWRlIGl0XG4gICAqL2Z1bmN0aW9uIGdldFN0eWxlKHZub2RlLGNoZWNrQ2hpbGQpe3ZhciByZXM9e307dmFyIHN0eWxlRGF0YTtpZihjaGVja0NoaWxkKXt2YXIgY2hpbGROb2RlPXZub2RlO3doaWxlKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSl7Y2hpbGROb2RlPWNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7aWYoY2hpbGROb2RlJiZjaGlsZE5vZGUuZGF0YSYmKHN0eWxlRGF0YT1ub3JtYWxpemVTdHlsZURhdGEoY2hpbGROb2RlLmRhdGEpKSl7ZXh0ZW5kKHJlcyxzdHlsZURhdGEpO319fWlmKHN0eWxlRGF0YT1ub3JtYWxpemVTdHlsZURhdGEodm5vZGUuZGF0YSkpe2V4dGVuZChyZXMsc3R5bGVEYXRhKTt9dmFyIHBhcmVudE5vZGU9dm5vZGU7d2hpbGUocGFyZW50Tm9kZT1wYXJlbnROb2RlLnBhcmVudCl7aWYocGFyZW50Tm9kZS5kYXRhJiYoc3R5bGVEYXRhPW5vcm1hbGl6ZVN0eWxlRGF0YShwYXJlbnROb2RlLmRhdGEpKSl7ZXh0ZW5kKHJlcyxzdHlsZURhdGEpO319cmV0dXJuIHJlczt9LyogICovdmFyIGNzc1ZhclJFPS9eLS0vO3ZhciBpbXBvcnRhbnRSRT0vXFxzKiFpbXBvcnRhbnQkLzt2YXIgc2V0UHJvcD1mdW5jdGlvbiBzZXRQcm9wKGVsLG5hbWUsdmFsKXsvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZihjc3NWYXJSRS50ZXN0KG5hbWUpKXtlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLHZhbCk7fWVsc2UgaWYoaW1wb3J0YW50UkUudGVzdCh2YWwpKXtlbC5zdHlsZS5zZXRQcm9wZXJ0eShoeXBoZW5hdGUobmFtZSksdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsJycpLCdpbXBvcnRhbnQnKTt9ZWxzZXt2YXIgbm9ybWFsaXplZE5hbWU9bm9ybWFsaXplKG5hbWUpO2lmKEFycmF5LmlzQXJyYXkodmFsKSl7Ly8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy5cbi8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbi8vIFNldCB0aGVtIG9uZSBieSBvbmUsIGFuZCB0aGUgYnJvd3NlciB3aWxsIG9ubHkgc2V0IHRob3NlIGl0IGNhbiByZWNvZ25pemVcbmZvcih2YXIgaT0wLGxlbj12YWwubGVuZ3RoO2k8bGVuO2krKyl7ZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdPXZhbFtpXTt9fWVsc2V7ZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdPXZhbDt9fX07dmFyIHZlbmRvck5hbWVzPVsnV2Via2l0JywnTW96JywnbXMnXTt2YXIgZW1wdHlTdHlsZTt2YXIgbm9ybWFsaXplPWNhY2hlZChmdW5jdGlvbihwcm9wKXtlbXB0eVN0eWxlPWVtcHR5U3R5bGV8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO3Byb3A9Y2FtZWxpemUocHJvcCk7aWYocHJvcCE9PSdmaWx0ZXInJiZwcm9wIGluIGVtcHR5U3R5bGUpe3JldHVybiBwcm9wO312YXIgY2FwTmFtZT1wcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Byb3Auc2xpY2UoMSk7Zm9yKHZhciBpPTA7aTx2ZW5kb3JOYW1lcy5sZW5ndGg7aSsrKXt2YXIgbmFtZT12ZW5kb3JOYW1lc1tpXStjYXBOYW1lO2lmKG5hbWUgaW4gZW1wdHlTdHlsZSl7cmV0dXJuIG5hbWU7fX19KTtmdW5jdGlvbiB1cGRhdGVTdHlsZShvbGRWbm9kZSx2bm9kZSl7dmFyIGRhdGE9dm5vZGUuZGF0YTt2YXIgb2xkRGF0YT1vbGRWbm9kZS5kYXRhO2lmKGlzVW5kZWYoZGF0YS5zdGF0aWNTdHlsZSkmJmlzVW5kZWYoZGF0YS5zdHlsZSkmJmlzVW5kZWYob2xkRGF0YS5zdGF0aWNTdHlsZSkmJmlzVW5kZWYob2xkRGF0YS5zdHlsZSkpe3JldHVybjt9dmFyIGN1cixuYW1lO3ZhciBlbD12bm9kZS5lbG07dmFyIG9sZFN0YXRpY1N0eWxlPW9sZERhdGEuc3RhdGljU3R5bGU7dmFyIG9sZFN0eWxlQmluZGluZz1vbGREYXRhLm5vcm1hbGl6ZWRTdHlsZXx8b2xkRGF0YS5zdHlsZXx8e307Ly8gaWYgc3RhdGljIHN0eWxlIGV4aXN0cywgc3R5bGViaW5kaW5nIGFscmVhZHkgbWVyZ2VkIGludG8gaXQgd2hlbiBkb2luZyBub3JtYWxpemVTdHlsZURhdGFcbnZhciBvbGRTdHlsZT1vbGRTdGF0aWNTdHlsZXx8b2xkU3R5bGVCaW5kaW5nO3ZhciBzdHlsZT1ub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSl8fHt9Oy8vIHN0b3JlIG5vcm1hbGl6ZWQgc3R5bGUgdW5kZXIgYSBkaWZmZXJlbnQga2V5IGZvciBuZXh0IGRpZmZcbi8vIG1ha2Ugc3VyZSB0byBjbG9uZSBpdCBpZiBpdCdzIHJlYWN0aXZlLCBzaW5jZSB0aGUgdXNlciBsaWtlbHkgd2FudHNcbi8vIHRvIG11dGF0ZSBpdC5cbnZub2RlLmRhdGEubm9ybWFsaXplZFN0eWxlPWlzRGVmKHN0eWxlLl9fb2JfXyk/ZXh0ZW5kKHt9LHN0eWxlKTpzdHlsZTt2YXIgbmV3U3R5bGU9Z2V0U3R5bGUodm5vZGUsdHJ1ZSk7Zm9yKG5hbWUgaW4gb2xkU3R5bGUpe2lmKGlzVW5kZWYobmV3U3R5bGVbbmFtZV0pKXtzZXRQcm9wKGVsLG5hbWUsJycpO319Zm9yKG5hbWUgaW4gbmV3U3R5bGUpe2N1cj1uZXdTdHlsZVtuYW1lXTtpZihjdXIhPT1vbGRTdHlsZVtuYW1lXSl7Ly8gaWU5IHNldHRpbmcgdG8gbnVsbCBoYXMgbm8gZWZmZWN0LCBtdXN0IHVzZSBlbXB0eSBzdHJpbmdcbnNldFByb3AoZWwsbmFtZSxjdXI9PW51bGw/Jyc6Y3VyKTt9fX12YXIgc3R5bGU9e2NyZWF0ZTp1cGRhdGVTdHlsZSx1cGRhdGU6dXBkYXRlU3R5bGV9Oy8qICAqL3ZhciB3aGl0ZXNwYWNlUkU9L1xccysvOy8qKlxuICAgKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAgICogU1ZHIGVsZW1lbnRzIGluIElFXG4gICAqL2Z1bmN0aW9uIGFkZENsYXNzKGVsLGNscyl7LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYoIWNsc3x8IShjbHM9Y2xzLnRyaW0oKSkpe3JldHVybjt9LyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9pZihlbC5jbGFzc0xpc3Qpe2lmKGNscy5pbmRleE9mKCcgJyk+LTEpe2Nscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24oYyl7cmV0dXJuIGVsLmNsYXNzTGlzdC5hZGQoYyk7fSk7fWVsc2V7ZWwuY2xhc3NMaXN0LmFkZChjbHMpO319ZWxzZXt2YXIgY3VyPVwiIFwiKyhlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJyl8fCcnKStcIiBcIjtpZihjdXIuaW5kZXhPZignICcrY2xzKycgJyk8MCl7ZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsKGN1citjbHMpLnRyaW0oKSk7fX19LyoqXG4gICAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICAgKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAgICovZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsY2xzKXsvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZighY2xzfHwhKGNscz1jbHMudHJpbSgpKSl7cmV0dXJuO30vKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL2lmKGVsLmNsYXNzTGlzdCl7aWYoY2xzLmluZGV4T2YoJyAnKT4tMSl7Y2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbihjKXtyZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTt9KTt9ZWxzZXtlbC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7fWlmKCFlbC5jbGFzc0xpc3QubGVuZ3RoKXtlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7fX1lbHNle3ZhciBjdXI9XCIgXCIrKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKXx8JycpK1wiIFwiO3ZhciB0YXI9JyAnK2NscysnICc7d2hpbGUoY3VyLmluZGV4T2YodGFyKT49MCl7Y3VyPWN1ci5yZXBsYWNlKHRhciwnICcpO31jdXI9Y3VyLnRyaW0oKTtpZihjdXIpe2VsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLGN1cik7fWVsc2V7ZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO319fS8qICAqL2Z1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uKGRlZiQkMSl7aWYoIWRlZiQkMSl7cmV0dXJuO30vKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL2lmKF90eXBlb2YyKGRlZiQkMSk9PT0nb2JqZWN0Jyl7dmFyIHJlcz17fTtpZihkZWYkJDEuY3NzIT09ZmFsc2Upe2V4dGVuZChyZXMsYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxLm5hbWV8fCd2JykpO31leHRlbmQocmVzLGRlZiQkMSk7cmV0dXJuIHJlczt9ZWxzZSBpZih0eXBlb2YgZGVmJCQxPT09J3N0cmluZycpe3JldHVybiBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEpO319dmFyIGF1dG9Dc3NUcmFuc2l0aW9uPWNhY2hlZChmdW5jdGlvbihuYW1lKXtyZXR1cm57ZW50ZXJDbGFzczpuYW1lK1wiLWVudGVyXCIsZW50ZXJUb0NsYXNzOm5hbWUrXCItZW50ZXItdG9cIixlbnRlckFjdGl2ZUNsYXNzOm5hbWUrXCItZW50ZXItYWN0aXZlXCIsbGVhdmVDbGFzczpuYW1lK1wiLWxlYXZlXCIsbGVhdmVUb0NsYXNzOm5hbWUrXCItbGVhdmUtdG9cIixsZWF2ZUFjdGl2ZUNsYXNzOm5hbWUrXCItbGVhdmUtYWN0aXZlXCJ9O30pO3ZhciBoYXNUcmFuc2l0aW9uPWluQnJvd3NlciYmIWlzSUU5O3ZhciBUUkFOU0lUSU9OPSd0cmFuc2l0aW9uJzt2YXIgQU5JTUFUSU9OPSdhbmltYXRpb24nOy8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmdcbnZhciB0cmFuc2l0aW9uUHJvcD0ndHJhbnNpdGlvbic7dmFyIHRyYW5zaXRpb25FbmRFdmVudD0ndHJhbnNpdGlvbmVuZCc7dmFyIGFuaW1hdGlvblByb3A9J2FuaW1hdGlvbic7dmFyIGFuaW1hdGlvbkVuZEV2ZW50PSdhbmltYXRpb25lbmQnO2lmKGhhc1RyYW5zaXRpb24pey8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQ9PT11bmRlZmluZWQmJndpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQhPT11bmRlZmluZWQpe3RyYW5zaXRpb25Qcm9wPSdXZWJraXRUcmFuc2l0aW9uJzt0cmFuc2l0aW9uRW5kRXZlbnQ9J3dlYmtpdFRyYW5zaXRpb25FbmQnO31pZih3aW5kb3cub25hbmltYXRpb25lbmQ9PT11bmRlZmluZWQmJndpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCE9PXVuZGVmaW5lZCl7YW5pbWF0aW9uUHJvcD0nV2Via2l0QW5pbWF0aW9uJzthbmltYXRpb25FbmRFdmVudD0nd2Via2l0QW5pbWF0aW9uRW5kJzt9fS8vIGJpbmRpbmcgdG8gd2luZG93IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGhvdCByZWxvYWQgd29yayBpbiBJRSBpbiBzdHJpY3QgbW9kZVxudmFyIHJhZj1pbkJyb3dzZXI/d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZT93aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KTpzZXRUaW1lb3V0Oi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovZnVuY3Rpb24oZm4pe3JldHVybiBmbigpO307ZnVuY3Rpb24gbmV4dEZyYW1lKGZuKXtyYWYoZnVuY3Rpb24oKXtyYWYoZm4pO30pO31mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsY2xzKXt2YXIgdHJhbnNpdGlvbkNsYXNzZXM9ZWwuX3RyYW5zaXRpb25DbGFzc2VzfHwoZWwuX3RyYW5zaXRpb25DbGFzc2VzPVtdKTtpZih0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscyk8MCl7dHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO2FkZENsYXNzKGVsLGNscyk7fX1mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsY2xzKXtpZihlbC5fdHJhbnNpdGlvbkNsYXNzZXMpe3JlbW92ZShlbC5fdHJhbnNpdGlvbkNsYXNzZXMsY2xzKTt9cmVtb3ZlQ2xhc3MoZWwsY2xzKTt9ZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzKGVsLGV4cGVjdGVkVHlwZSxjYil7dmFyIHJlZj1nZXRUcmFuc2l0aW9uSW5mbyhlbCxleHBlY3RlZFR5cGUpO3ZhciB0eXBlPXJlZi50eXBlO3ZhciB0aW1lb3V0PXJlZi50aW1lb3V0O3ZhciBwcm9wQ291bnQ9cmVmLnByb3BDb3VudDtpZighdHlwZSl7cmV0dXJuIGNiKCk7fXZhciBldmVudD10eXBlPT09VFJBTlNJVElPTj90cmFuc2l0aW9uRW5kRXZlbnQ6YW5pbWF0aW9uRW5kRXZlbnQ7dmFyIGVuZGVkPTA7dmFyIGVuZD1mdW5jdGlvbiBlbmQoKXtlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LG9uRW5kKTtjYigpO307dmFyIG9uRW5kPWZ1bmN0aW9uIG9uRW5kKGUpe2lmKGUudGFyZ2V0PT09ZWwpe2lmKCsrZW5kZWQ+PXByb3BDb3VudCl7ZW5kKCk7fX19O3NldFRpbWVvdXQoZnVuY3Rpb24oKXtpZihlbmRlZDxwcm9wQ291bnQpe2VuZCgpO319LHRpbWVvdXQrMSk7ZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCxvbkVuZCk7fXZhciB0cmFuc2Zvcm1SRT0vXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO2Z1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvKGVsLGV4cGVjdGVkVHlwZSl7dmFyIHN0eWxlcz13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7Ly8gSlNET00gbWF5IHJldHVybiB1bmRlZmluZWQgZm9yIHRyYW5zaXRpb24gcHJvcGVydGllc1xudmFyIHRyYW5zaXRpb25EZWxheXM9KHN0eWxlc1t0cmFuc2l0aW9uUHJvcCsnRGVsYXknXXx8JycpLnNwbGl0KCcsICcpO3ZhciB0cmFuc2l0aW9uRHVyYXRpb25zPShzdHlsZXNbdHJhbnNpdGlvblByb3ArJ0R1cmF0aW9uJ118fCcnKS5zcGxpdCgnLCAnKTt2YXIgdHJhbnNpdGlvblRpbWVvdXQ9Z2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLHRyYW5zaXRpb25EdXJhdGlvbnMpO3ZhciBhbmltYXRpb25EZWxheXM9KHN0eWxlc1thbmltYXRpb25Qcm9wKydEZWxheSddfHwnJykuc3BsaXQoJywgJyk7dmFyIGFuaW1hdGlvbkR1cmF0aW9ucz0oc3R5bGVzW2FuaW1hdGlvblByb3ArJ0R1cmF0aW9uJ118fCcnKS5zcGxpdCgnLCAnKTt2YXIgYW5pbWF0aW9uVGltZW91dD1nZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cyxhbmltYXRpb25EdXJhdGlvbnMpO3ZhciB0eXBlO3ZhciB0aW1lb3V0PTA7dmFyIHByb3BDb3VudD0wOy8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKGV4cGVjdGVkVHlwZT09PVRSQU5TSVRJT04pe2lmKHRyYW5zaXRpb25UaW1lb3V0PjApe3R5cGU9VFJBTlNJVElPTjt0aW1lb3V0PXRyYW5zaXRpb25UaW1lb3V0O3Byb3BDb3VudD10cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDt9fWVsc2UgaWYoZXhwZWN0ZWRUeXBlPT09QU5JTUFUSU9OKXtpZihhbmltYXRpb25UaW1lb3V0PjApe3R5cGU9QU5JTUFUSU9OO3RpbWVvdXQ9YW5pbWF0aW9uVGltZW91dDtwcm9wQ291bnQ9YW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDt9fWVsc2V7dGltZW91dD1NYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCxhbmltYXRpb25UaW1lb3V0KTt0eXBlPXRpbWVvdXQ+MD90cmFuc2l0aW9uVGltZW91dD5hbmltYXRpb25UaW1lb3V0P1RSQU5TSVRJT046QU5JTUFUSU9OOm51bGw7cHJvcENvdW50PXR5cGU/dHlwZT09PVRSQU5TSVRJT04/dHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg6YW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDowO312YXIgaGFzVHJhbnNmb3JtPXR5cGU9PT1UUkFOU0lUSU9OJiZ0cmFuc2Zvcm1SRS50ZXN0KHN0eWxlc1t0cmFuc2l0aW9uUHJvcCsnUHJvcGVydHknXSk7cmV0dXJue3R5cGU6dHlwZSx0aW1lb3V0OnRpbWVvdXQscHJvcENvdW50OnByb3BDb3VudCxoYXNUcmFuc2Zvcm06aGFzVHJhbnNmb3JtfTt9ZnVuY3Rpb24gZ2V0VGltZW91dChkZWxheXMsZHVyYXRpb25zKXsvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL3doaWxlKGRlbGF5cy5sZW5ndGg8ZHVyYXRpb25zLmxlbmd0aCl7ZGVsYXlzPWRlbGF5cy5jb25jYXQoZGVsYXlzKTt9cmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsZHVyYXRpb25zLm1hcChmdW5jdGlvbihkLGkpe3JldHVybiB0b01zKGQpK3RvTXMoZGVsYXlzW2ldKTt9KSk7fS8vIE9sZCB2ZXJzaW9ucyBvZiBDaHJvbWl1bSAoYmVsb3cgNjEuMC4zMTYzLjEwMCkgZm9ybWF0cyBmbG9hdGluZyBwb2ludGVyIG51bWJlcnNcbi8vIGluIGEgbG9jYWxlLWRlcGVuZGVudCB3YXksIHVzaW5nIGEgY29tbWEgaW5zdGVhZCBvZiBhIGRvdC5cbi8vIElmIGNvbW1hIGlzIG5vdCByZXBsYWNlZCB3aXRoIGEgZG90LCB0aGUgaW5wdXQgd2lsbCBiZSByb3VuZGVkIGRvd24gKGkuZS4gYWN0aW5nXG4vLyBhcyBhIGZsb29yIGZ1bmN0aW9uKSBjYXVzaW5nIHVuZXhwZWN0ZWQgYmVoYXZpb3JzXG5mdW5jdGlvbiB0b01zKHMpe3JldHVybiBOdW1iZXIocy5zbGljZSgwLC0xKS5yZXBsYWNlKCcsJywnLicpKSoxMDAwO30vKiAgKi9mdW5jdGlvbiBlbnRlcih2bm9kZSx0b2dnbGVEaXNwbGF5KXt2YXIgZWw9dm5vZGUuZWxtOy8vIGNhbGwgbGVhdmUgY2FsbGJhY2sgbm93XG5pZihpc0RlZihlbC5fbGVhdmVDYikpe2VsLl9sZWF2ZUNiLmNhbmNlbGxlZD10cnVlO2VsLl9sZWF2ZUNiKCk7fXZhciBkYXRhPXJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7aWYoaXNVbmRlZihkYXRhKSl7cmV0dXJuO30vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZihpc0RlZihlbC5fZW50ZXJDYil8fGVsLm5vZGVUeXBlIT09MSl7cmV0dXJuO312YXIgY3NzPWRhdGEuY3NzO3ZhciB0eXBlPWRhdGEudHlwZTt2YXIgZW50ZXJDbGFzcz1kYXRhLmVudGVyQ2xhc3M7dmFyIGVudGVyVG9DbGFzcz1kYXRhLmVudGVyVG9DbGFzczt2YXIgZW50ZXJBY3RpdmVDbGFzcz1kYXRhLmVudGVyQWN0aXZlQ2xhc3M7dmFyIGFwcGVhckNsYXNzPWRhdGEuYXBwZWFyQ2xhc3M7dmFyIGFwcGVhclRvQ2xhc3M9ZGF0YS5hcHBlYXJUb0NsYXNzO3ZhciBhcHBlYXJBY3RpdmVDbGFzcz1kYXRhLmFwcGVhckFjdGl2ZUNsYXNzO3ZhciBiZWZvcmVFbnRlcj1kYXRhLmJlZm9yZUVudGVyO3ZhciBlbnRlcj1kYXRhLmVudGVyO3ZhciBhZnRlckVudGVyPWRhdGEuYWZ0ZXJFbnRlcjt2YXIgZW50ZXJDYW5jZWxsZWQ9ZGF0YS5lbnRlckNhbmNlbGxlZDt2YXIgYmVmb3JlQXBwZWFyPWRhdGEuYmVmb3JlQXBwZWFyO3ZhciBhcHBlYXI9ZGF0YS5hcHBlYXI7dmFyIGFmdGVyQXBwZWFyPWRhdGEuYWZ0ZXJBcHBlYXI7dmFyIGFwcGVhckNhbmNlbGxlZD1kYXRhLmFwcGVhckNhbmNlbGxlZDt2YXIgZHVyYXRpb249ZGF0YS5kdXJhdGlvbjsvLyBhY3RpdmVJbnN0YW5jZSB3aWxsIGFsd2F5cyBiZSB0aGUgPHRyYW5zaXRpb24+IGNvbXBvbmVudCBtYW5hZ2luZyB0aGlzXG4vLyB0cmFuc2l0aW9uLiBPbmUgZWRnZSBjYXNlIHRvIGNoZWNrIGlzIHdoZW4gdGhlIDx0cmFuc2l0aW9uPiBpcyBwbGFjZWRcbi8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4vLyA8dHJhbnNpdGlvbj4ncyBwYXJlbnQgZm9yIGFwcGVhciBjaGVjay5cbnZhciBjb250ZXh0PWFjdGl2ZUluc3RhbmNlO3ZhciB0cmFuc2l0aW9uTm9kZT1hY3RpdmVJbnN0YW5jZS4kdm5vZGU7d2hpbGUodHJhbnNpdGlvbk5vZGUmJnRyYW5zaXRpb25Ob2RlLnBhcmVudCl7Y29udGV4dD10cmFuc2l0aW9uTm9kZS5jb250ZXh0O3RyYW5zaXRpb25Ob2RlPXRyYW5zaXRpb25Ob2RlLnBhcmVudDt9dmFyIGlzQXBwZWFyPSFjb250ZXh0Ll9pc01vdW50ZWR8fCF2bm9kZS5pc1Jvb3RJbnNlcnQ7aWYoaXNBcHBlYXImJiFhcHBlYXImJmFwcGVhciE9PScnKXtyZXR1cm47fXZhciBzdGFydENsYXNzPWlzQXBwZWFyJiZhcHBlYXJDbGFzcz9hcHBlYXJDbGFzczplbnRlckNsYXNzO3ZhciBhY3RpdmVDbGFzcz1pc0FwcGVhciYmYXBwZWFyQWN0aXZlQ2xhc3M/YXBwZWFyQWN0aXZlQ2xhc3M6ZW50ZXJBY3RpdmVDbGFzczt2YXIgdG9DbGFzcz1pc0FwcGVhciYmYXBwZWFyVG9DbGFzcz9hcHBlYXJUb0NsYXNzOmVudGVyVG9DbGFzczt2YXIgYmVmb3JlRW50ZXJIb29rPWlzQXBwZWFyP2JlZm9yZUFwcGVhcnx8YmVmb3JlRW50ZXI6YmVmb3JlRW50ZXI7dmFyIGVudGVySG9vaz1pc0FwcGVhcj90eXBlb2YgYXBwZWFyPT09J2Z1bmN0aW9uJz9hcHBlYXI6ZW50ZXI6ZW50ZXI7dmFyIGFmdGVyRW50ZXJIb29rPWlzQXBwZWFyP2FmdGVyQXBwZWFyfHxhZnRlckVudGVyOmFmdGVyRW50ZXI7dmFyIGVudGVyQ2FuY2VsbGVkSG9vaz1pc0FwcGVhcj9hcHBlYXJDYW5jZWxsZWR8fGVudGVyQ2FuY2VsbGVkOmVudGVyQ2FuY2VsbGVkO3ZhciBleHBsaWNpdEVudGVyRHVyYXRpb249dG9OdW1iZXIoaXNPYmplY3QoZHVyYXRpb24pP2R1cmF0aW9uLmVudGVyOmR1cmF0aW9uKTt2YXIgZXhwZWN0c0NTUz1jc3MhPT1mYWxzZSYmIWlzSUU5O3ZhciB1c2VyV2FudHNDb250cm9sPWdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTt2YXIgY2I9ZWwuX2VudGVyQ2I9b25jZShmdW5jdGlvbigpe2lmKGV4cGVjdHNDU1Mpe3JlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCx0b0NsYXNzKTtyZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsYWN0aXZlQ2xhc3MpO31pZihjYi5jYW5jZWxsZWQpe2lmKGV4cGVjdHNDU1Mpe3JlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCxzdGFydENsYXNzKTt9ZW50ZXJDYW5jZWxsZWRIb29rJiZlbnRlckNhbmNlbGxlZEhvb2soZWwpO31lbHNle2FmdGVyRW50ZXJIb29rJiZhZnRlckVudGVySG9vayhlbCk7fWVsLl9lbnRlckNiPW51bGw7fSk7aWYoIXZub2RlLmRhdGEuc2hvdyl7Ly8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbm1lcmdlVk5vZGVIb29rKHZub2RlLCdpbnNlcnQnLGZ1bmN0aW9uKCl7dmFyIHBhcmVudD1lbC5wYXJlbnROb2RlO3ZhciBwZW5kaW5nTm9kZT1wYXJlbnQmJnBhcmVudC5fcGVuZGluZyYmcGFyZW50Ll9wZW5kaW5nW3Zub2RlLmtleV07aWYocGVuZGluZ05vZGUmJnBlbmRpbmdOb2RlLnRhZz09PXZub2RlLnRhZyYmcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKXtwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTt9ZW50ZXJIb29rJiZlbnRlckhvb2soZWwsY2IpO30pO30vLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG5iZWZvcmVFbnRlckhvb2smJmJlZm9yZUVudGVySG9vayhlbCk7aWYoZXhwZWN0c0NTUyl7YWRkVHJhbnNpdGlvbkNsYXNzKGVsLHN0YXJ0Q2xhc3MpO2FkZFRyYW5zaXRpb25DbGFzcyhlbCxhY3RpdmVDbGFzcyk7bmV4dEZyYW1lKGZ1bmN0aW9uKCl7cmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLHN0YXJ0Q2xhc3MpO2lmKCFjYi5jYW5jZWxsZWQpe2FkZFRyYW5zaXRpb25DbGFzcyhlbCx0b0NsYXNzKTtpZighdXNlcldhbnRzQ29udHJvbCl7aWYoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbikpe3NldFRpbWVvdXQoY2IsZXhwbGljaXRFbnRlckR1cmF0aW9uKTt9ZWxzZXt3aGVuVHJhbnNpdGlvbkVuZHMoZWwsdHlwZSxjYik7fX19fSk7fWlmKHZub2RlLmRhdGEuc2hvdyl7dG9nZ2xlRGlzcGxheSYmdG9nZ2xlRGlzcGxheSgpO2VudGVySG9vayYmZW50ZXJIb29rKGVsLGNiKTt9aWYoIWV4cGVjdHNDU1MmJiF1c2VyV2FudHNDb250cm9sKXtjYigpO319ZnVuY3Rpb24gbGVhdmUodm5vZGUscm0pe3ZhciBlbD12bm9kZS5lbG07Ly8gY2FsbCBlbnRlciBjYWxsYmFjayBub3dcbmlmKGlzRGVmKGVsLl9lbnRlckNiKSl7ZWwuX2VudGVyQ2IuY2FuY2VsbGVkPXRydWU7ZWwuX2VudGVyQ2IoKTt9dmFyIGRhdGE9cmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtpZihpc1VuZGVmKGRhdGEpfHxlbC5ub2RlVHlwZSE9PTEpe3JldHVybiBybSgpO30vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZihpc0RlZihlbC5fbGVhdmVDYikpe3JldHVybjt9dmFyIGNzcz1kYXRhLmNzczt2YXIgdHlwZT1kYXRhLnR5cGU7dmFyIGxlYXZlQ2xhc3M9ZGF0YS5sZWF2ZUNsYXNzO3ZhciBsZWF2ZVRvQ2xhc3M9ZGF0YS5sZWF2ZVRvQ2xhc3M7dmFyIGxlYXZlQWN0aXZlQ2xhc3M9ZGF0YS5sZWF2ZUFjdGl2ZUNsYXNzO3ZhciBiZWZvcmVMZWF2ZT1kYXRhLmJlZm9yZUxlYXZlO3ZhciBsZWF2ZT1kYXRhLmxlYXZlO3ZhciBhZnRlckxlYXZlPWRhdGEuYWZ0ZXJMZWF2ZTt2YXIgbGVhdmVDYW5jZWxsZWQ9ZGF0YS5sZWF2ZUNhbmNlbGxlZDt2YXIgZGVsYXlMZWF2ZT1kYXRhLmRlbGF5TGVhdmU7dmFyIGR1cmF0aW9uPWRhdGEuZHVyYXRpb247dmFyIGV4cGVjdHNDU1M9Y3NzIT09ZmFsc2UmJiFpc0lFOTt2YXIgdXNlcldhbnRzQ29udHJvbD1nZXRIb29rQXJndW1lbnRzTGVuZ3RoKGxlYXZlKTt2YXIgZXhwbGljaXRMZWF2ZUR1cmF0aW9uPXRvTnVtYmVyKGlzT2JqZWN0KGR1cmF0aW9uKT9kdXJhdGlvbi5sZWF2ZTpkdXJhdGlvbik7dmFyIGNiPWVsLl9sZWF2ZUNiPW9uY2UoZnVuY3Rpb24oKXtpZihlbC5wYXJlbnROb2RlJiZlbC5wYXJlbnROb2RlLl9wZW5kaW5nKXtlbC5wYXJlbnROb2RlLl9wZW5kaW5nW3Zub2RlLmtleV09bnVsbDt9aWYoZXhwZWN0c0NTUyl7cmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLGxlYXZlVG9DbGFzcyk7cmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLGxlYXZlQWN0aXZlQ2xhc3MpO31pZihjYi5jYW5jZWxsZWQpe2lmKGV4cGVjdHNDU1Mpe3JlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCxsZWF2ZUNsYXNzKTt9bGVhdmVDYW5jZWxsZWQmJmxlYXZlQ2FuY2VsbGVkKGVsKTt9ZWxzZXtybSgpO2FmdGVyTGVhdmUmJmFmdGVyTGVhdmUoZWwpO31lbC5fbGVhdmVDYj1udWxsO30pO2lmKGRlbGF5TGVhdmUpe2RlbGF5TGVhdmUocGVyZm9ybUxlYXZlKTt9ZWxzZXtwZXJmb3JtTGVhdmUoKTt9ZnVuY3Rpb24gcGVyZm9ybUxlYXZlKCl7Ly8gdGhlIGRlbGF5ZWQgbGVhdmUgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIGNhbmNlbGxlZFxuaWYoY2IuY2FuY2VsbGVkKXtyZXR1cm47fS8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbmlmKCF2bm9kZS5kYXRhLnNob3cmJmVsLnBhcmVudE5vZGUpeyhlbC5wYXJlbnROb2RlLl9wZW5kaW5nfHwoZWwucGFyZW50Tm9kZS5fcGVuZGluZz17fSkpW3Zub2RlLmtleV09dm5vZGU7fWJlZm9yZUxlYXZlJiZiZWZvcmVMZWF2ZShlbCk7aWYoZXhwZWN0c0NTUyl7YWRkVHJhbnNpdGlvbkNsYXNzKGVsLGxlYXZlQ2xhc3MpO2FkZFRyYW5zaXRpb25DbGFzcyhlbCxsZWF2ZUFjdGl2ZUNsYXNzKTtuZXh0RnJhbWUoZnVuY3Rpb24oKXtyZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsbGVhdmVDbGFzcyk7aWYoIWNiLmNhbmNlbGxlZCl7YWRkVHJhbnNpdGlvbkNsYXNzKGVsLGxlYXZlVG9DbGFzcyk7aWYoIXVzZXJXYW50c0NvbnRyb2wpe2lmKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKXtzZXRUaW1lb3V0KGNiLGV4cGxpY2l0TGVhdmVEdXJhdGlvbik7fWVsc2V7d2hlblRyYW5zaXRpb25FbmRzKGVsLHR5cGUsY2IpO319fX0pO31sZWF2ZSYmbGVhdmUoZWwsY2IpO2lmKCFleHBlY3RzQ1NTJiYhdXNlcldhbnRzQ29udHJvbCl7Y2IoKTt9fX1mdW5jdGlvbiBpc1ZhbGlkRHVyYXRpb24odmFsKXtyZXR1cm4gdHlwZW9mIHZhbD09PSdudW1iZXInJiYhaXNOYU4odmFsKTt9LyoqXG4gICAqIE5vcm1hbGl6ZSBhIHRyYW5zaXRpb24gaG9vaydzIGFyZ3VtZW50IGxlbmd0aC4gVGhlIGhvb2sgbWF5IGJlOlxuICAgKiAtIGEgbWVyZ2VkIGhvb2sgKGludm9rZXIpIHdpdGggdGhlIG9yaWdpbmFsIGluIC5mbnNcbiAgICogLSBhIHdyYXBwZWQgY29tcG9uZW50IG1ldGhvZCAoY2hlY2sgLl9sZW5ndGgpXG4gICAqIC0gYSBwbGFpbiBmdW5jdGlvbiAoLmxlbmd0aClcbiAgICovZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChmbil7aWYoaXNVbmRlZihmbikpe3JldHVybiBmYWxzZTt9dmFyIGludm9rZXJGbnM9Zm4uZm5zO2lmKGlzRGVmKGludm9rZXJGbnMpKXsvLyBpbnZva2VyXG5yZXR1cm4gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChBcnJheS5pc0FycmF5KGludm9rZXJGbnMpP2ludm9rZXJGbnNbMF06aW52b2tlckZucyk7fWVsc2V7cmV0dXJuKGZuLl9sZW5ndGh8fGZuLmxlbmd0aCk+MTt9fWZ1bmN0aW9uIF9lbnRlcihfLHZub2RlKXtpZih2bm9kZS5kYXRhLnNob3chPT10cnVlKXtlbnRlcih2bm9kZSk7fX12YXIgdHJhbnNpdGlvbj1pbkJyb3dzZXI/e2NyZWF0ZTpfZW50ZXIsYWN0aXZhdGU6X2VudGVyLHJlbW92ZTpmdW5jdGlvbiByZW1vdmUkJDEodm5vZGUscm0pey8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovaWYodm5vZGUuZGF0YS5zaG93IT09dHJ1ZSl7bGVhdmUodm5vZGUscm0pO31lbHNle3JtKCk7fX19Ont9O3ZhciBwbGF0Zm9ybU1vZHVsZXM9W2F0dHJzLGtsYXNzLGV2ZW50cyxkb21Qcm9wcyxzdHlsZSx0cmFuc2l0aW9uXTsvKiAgKi8gLy8gdGhlIGRpcmVjdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIGFwcGxpZWQgbGFzdCwgYWZ0ZXIgYWxsXG4vLyBidWlsdC1pbiBtb2R1bGVzIGhhdmUgYmVlbiBhcHBsaWVkLlxudmFyIG1vZHVsZXM9cGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7dmFyIHBhdGNoPWNyZWF0ZVBhdGNoRnVuY3Rpb24oe25vZGVPcHM6bm9kZU9wcyxtb2R1bGVzOm1vZHVsZXN9KTsvKipcbiAgICogTm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IGxpa2UgYXR0YWNoaW5nXG4gICAqIHByb3BlcnRpZXMgdG8gRWxlbWVudHMuXG4gICAqLyAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZihpc0lFOSl7Ly8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLGZ1bmN0aW9uKCl7dmFyIGVsPWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7aWYoZWwmJmVsLnZtb2RlbCl7dHJpZ2dlcihlbCwnaW5wdXQnKTt9fSk7fXZhciBkaXJlY3RpdmU9e2luc2VydGVkOmZ1bmN0aW9uIGluc2VydGVkKGVsLGJpbmRpbmcsdm5vZGUsb2xkVm5vZGUpe2lmKHZub2RlLnRhZz09PSdzZWxlY3QnKXsvLyAjNjkwM1xuaWYob2xkVm5vZGUuZWxtJiYhb2xkVm5vZGUuZWxtLl92T3B0aW9ucyl7bWVyZ2VWTm9kZUhvb2sodm5vZGUsJ3Bvc3RwYXRjaCcsZnVuY3Rpb24oKXtkaXJlY3RpdmUuY29tcG9uZW50VXBkYXRlZChlbCxiaW5kaW5nLHZub2RlKTt9KTt9ZWxzZXtzZXRTZWxlY3RlZChlbCxiaW5kaW5nLHZub2RlLmNvbnRleHQpO31lbC5fdk9wdGlvbnM9W10ubWFwLmNhbGwoZWwub3B0aW9ucyxnZXRWYWx1ZSk7fWVsc2UgaWYodm5vZGUudGFnPT09J3RleHRhcmVhJ3x8aXNUZXh0SW5wdXRUeXBlKGVsLnR5cGUpKXtlbC5fdk1vZGlmaWVycz1iaW5kaW5nLm1vZGlmaWVycztpZighYmluZGluZy5tb2RpZmllcnMubGF6eSl7ZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsb25Db21wb3NpdGlvblN0YXJ0KTtlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsb25Db21wb3NpdGlvbkVuZCk7Ly8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuLy8gc3dpdGNoaW5nIGZvY3VzIGJlZm9yZSBjb25maXJtaW5nIGNvbXBvc2l0aW9uIGNob2ljZVxuLy8gdGhpcyBhbHNvIGZpeGVzIHRoZSBpc3N1ZSB3aGVyZSBzb21lIGJyb3dzZXJzIGUuZy4gaU9TIENocm9tZVxuLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG5lbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLG9uQ29tcG9zaXRpb25FbmQpOy8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKGlzSUU5KXtlbC52bW9kZWw9dHJ1ZTt9fX19LGNvbXBvbmVudFVwZGF0ZWQ6ZnVuY3Rpb24gY29tcG9uZW50VXBkYXRlZChlbCxiaW5kaW5nLHZub2RlKXtpZih2bm9kZS50YWc9PT0nc2VsZWN0Jyl7c2V0U2VsZWN0ZWQoZWwsYmluZGluZyx2bm9kZS5jb250ZXh0KTsvLyBpbiBjYXNlIHRoZSBvcHRpb25zIHJlbmRlcmVkIGJ5IHYtZm9yIGhhdmUgY2hhbmdlZCxcbi8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbi8vIGRldGVjdCBzdWNoIGNhc2VzIGFuZCBmaWx0ZXIgb3V0IHZhbHVlcyB0aGF0IG5vIGxvbmdlciBoYXMgYSBtYXRjaGluZ1xuLy8gb3B0aW9uIGluIHRoZSBET00uXG52YXIgcHJldk9wdGlvbnM9ZWwuX3ZPcHRpb25zO3ZhciBjdXJPcHRpb25zPWVsLl92T3B0aW9ucz1bXS5tYXAuY2FsbChlbC5vcHRpb25zLGdldFZhbHVlKTtpZihjdXJPcHRpb25zLnNvbWUoZnVuY3Rpb24obyxpKXtyZXR1cm4hbG9vc2VFcXVhbChvLHByZXZPcHRpb25zW2ldKTt9KSl7Ly8gdHJpZ2dlciBjaGFuZ2UgZXZlbnQgaWZcbi8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlXG52YXIgbmVlZFJlc2V0PWVsLm11bHRpcGxlP2JpbmRpbmcudmFsdWUuc29tZShmdW5jdGlvbih2KXtyZXR1cm4gaGFzTm9NYXRjaGluZ09wdGlvbih2LGN1ck9wdGlvbnMpO30pOmJpbmRpbmcudmFsdWUhPT1iaW5kaW5nLm9sZFZhbHVlJiZoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsY3VyT3B0aW9ucyk7aWYobmVlZFJlc2V0KXt0cmlnZ2VyKGVsLCdjaGFuZ2UnKTt9fX19fTtmdW5jdGlvbiBzZXRTZWxlY3RlZChlbCxiaW5kaW5nLHZtKXthY3R1YWxseVNldFNlbGVjdGVkKGVsLGJpbmRpbmcpOy8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKGlzSUV8fGlzRWRnZSl7c2V0VGltZW91dChmdW5jdGlvbigpe2FjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsYmluZGluZyk7fSwwKTt9fWZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsYmluZGluZyx2bSl7dmFyIHZhbHVlPWJpbmRpbmcudmFsdWU7dmFyIGlzTXVsdGlwbGU9ZWwubXVsdGlwbGU7aWYoaXNNdWx0aXBsZSYmIUFycmF5LmlzQXJyYXkodmFsdWUpKXtyZXR1cm47fXZhciBzZWxlY3RlZCxvcHRpb247Zm9yKHZhciBpPTAsbD1lbC5vcHRpb25zLmxlbmd0aDtpPGw7aSsrKXtvcHRpb249ZWwub3B0aW9uc1tpXTtpZihpc011bHRpcGxlKXtzZWxlY3RlZD1sb29zZUluZGV4T2YodmFsdWUsZ2V0VmFsdWUob3B0aW9uKSk+LTE7aWYob3B0aW9uLnNlbGVjdGVkIT09c2VsZWN0ZWQpe29wdGlvbi5zZWxlY3RlZD1zZWxlY3RlZDt9fWVsc2V7aWYobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLHZhbHVlKSl7aWYoZWwuc2VsZWN0ZWRJbmRleCE9PWkpe2VsLnNlbGVjdGVkSW5kZXg9aTt9cmV0dXJuO319fWlmKCFpc011bHRpcGxlKXtlbC5zZWxlY3RlZEluZGV4PS0xO319ZnVuY3Rpb24gaGFzTm9NYXRjaGluZ09wdGlvbih2YWx1ZSxvcHRpb25zKXtyZXR1cm4gb3B0aW9ucy5ldmVyeShmdW5jdGlvbihvKXtyZXR1cm4hbG9vc2VFcXVhbChvLHZhbHVlKTt9KTt9ZnVuY3Rpb24gZ2V0VmFsdWUob3B0aW9uKXtyZXR1cm4nX3ZhbHVlJ2luIG9wdGlvbj9vcHRpb24uX3ZhbHVlOm9wdGlvbi52YWx1ZTt9ZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0KGUpe2UudGFyZ2V0LmNvbXBvc2luZz10cnVlO31mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kKGUpey8vIHByZXZlbnQgdHJpZ2dlcmluZyBhbiBpbnB1dCBldmVudCBmb3Igbm8gcmVhc29uXG5pZighZS50YXJnZXQuY29tcG9zaW5nKXtyZXR1cm47fWUudGFyZ2V0LmNvbXBvc2luZz1mYWxzZTt0cmlnZ2VyKGUudGFyZ2V0LCdpbnB1dCcpO31mdW5jdGlvbiB0cmlnZ2VyKGVsLHR5cGUpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7ZS5pbml0RXZlbnQodHlwZSx0cnVlLHRydWUpO2VsLmRpc3BhdGNoRXZlbnQoZSk7fS8qICAqLyAvLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHBvc3NpYmxlIHRyYW5zaXRpb24gZGVmaW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCByb290XG5mdW5jdGlvbiBsb2NhdGVOb2RlKHZub2RlKXtyZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UmJighdm5vZGUuZGF0YXx8IXZub2RlLmRhdGEudHJhbnNpdGlvbik/bG9jYXRlTm9kZSh2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpOnZub2RlO312YXIgc2hvdz17YmluZDpmdW5jdGlvbiBiaW5kKGVsLHJlZix2bm9kZSl7dmFyIHZhbHVlPXJlZi52YWx1ZTt2bm9kZT1sb2NhdGVOb2RlKHZub2RlKTt2YXIgdHJhbnNpdGlvbiQkMT12bm9kZS5kYXRhJiZ2bm9kZS5kYXRhLnRyYW5zaXRpb247dmFyIG9yaWdpbmFsRGlzcGxheT1lbC5fX3ZPcmlnaW5hbERpc3BsYXk9ZWwuc3R5bGUuZGlzcGxheT09PSdub25lJz8nJzplbC5zdHlsZS5kaXNwbGF5O2lmKHZhbHVlJiZ0cmFuc2l0aW9uJCQxKXt2bm9kZS5kYXRhLnNob3c9dHJ1ZTtlbnRlcih2bm9kZSxmdW5jdGlvbigpe2VsLnN0eWxlLmRpc3BsYXk9b3JpZ2luYWxEaXNwbGF5O30pO31lbHNle2VsLnN0eWxlLmRpc3BsYXk9dmFsdWU/b3JpZ2luYWxEaXNwbGF5Oidub25lJzt9fSx1cGRhdGU6ZnVuY3Rpb24gdXBkYXRlKGVsLHJlZix2bm9kZSl7dmFyIHZhbHVlPXJlZi52YWx1ZTt2YXIgb2xkVmFsdWU9cmVmLm9sZFZhbHVlOy8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKCF2YWx1ZT09PSFvbGRWYWx1ZSl7cmV0dXJuO312bm9kZT1sb2NhdGVOb2RlKHZub2RlKTt2YXIgdHJhbnNpdGlvbiQkMT12bm9kZS5kYXRhJiZ2bm9kZS5kYXRhLnRyYW5zaXRpb247aWYodHJhbnNpdGlvbiQkMSl7dm5vZGUuZGF0YS5zaG93PXRydWU7aWYodmFsdWUpe2VudGVyKHZub2RlLGZ1bmN0aW9uKCl7ZWwuc3R5bGUuZGlzcGxheT1lbC5fX3ZPcmlnaW5hbERpc3BsYXk7fSk7fWVsc2V7bGVhdmUodm5vZGUsZnVuY3Rpb24oKXtlbC5zdHlsZS5kaXNwbGF5PSdub25lJzt9KTt9fWVsc2V7ZWwuc3R5bGUuZGlzcGxheT12YWx1ZT9lbC5fX3ZPcmlnaW5hbERpc3BsYXk6J25vbmUnO319LHVuYmluZDpmdW5jdGlvbiB1bmJpbmQoZWwsYmluZGluZyx2bm9kZSxvbGRWbm9kZSxpc0Rlc3Ryb3kpe2lmKCFpc0Rlc3Ryb3kpe2VsLnN0eWxlLmRpc3BsYXk9ZWwuX192T3JpZ2luYWxEaXNwbGF5O319fTt2YXIgcGxhdGZvcm1EaXJlY3RpdmVzPXttb2RlbDpkaXJlY3RpdmUsc2hvdzpzaG93fTsvKiAgKi92YXIgdHJhbnNpdGlvblByb3BzPXtuYW1lOlN0cmluZyxhcHBlYXI6Qm9vbGVhbixjc3M6Qm9vbGVhbixtb2RlOlN0cmluZyx0eXBlOlN0cmluZyxlbnRlckNsYXNzOlN0cmluZyxsZWF2ZUNsYXNzOlN0cmluZyxlbnRlclRvQ2xhc3M6U3RyaW5nLGxlYXZlVG9DbGFzczpTdHJpbmcsZW50ZXJBY3RpdmVDbGFzczpTdHJpbmcsbGVhdmVBY3RpdmVDbGFzczpTdHJpbmcsYXBwZWFyQ2xhc3M6U3RyaW5nLGFwcGVhckFjdGl2ZUNsYXNzOlN0cmluZyxhcHBlYXJUb0NsYXNzOlN0cmluZyxkdXJhdGlvbjpbTnVtYmVyLFN0cmluZyxPYmplY3RdfTsvLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cbi8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5mdW5jdGlvbiBnZXRSZWFsQ2hpbGQodm5vZGUpe3ZhciBjb21wT3B0aW9ucz12bm9kZSYmdm5vZGUuY29tcG9uZW50T3B0aW9ucztpZihjb21wT3B0aW9ucyYmY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zW1wiYWJzdHJhY3RcIl0pe3JldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpO31lbHNle3JldHVybiB2bm9kZTt9fWZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YShjb21wKXt2YXIgZGF0YT17fTt2YXIgb3B0aW9ucz1jb21wLiRvcHRpb25zOy8vIHByb3BzXG5mb3IodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSl7ZGF0YVtrZXldPWNvbXBba2V5XTt9Ly8gZXZlbnRzLlxuLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzXG52YXIgbGlzdGVuZXJzPW9wdGlvbnMuX3BhcmVudExpc3RlbmVycztmb3IodmFyIGtleSQxIGluIGxpc3RlbmVycyl7ZGF0YVtjYW1lbGl6ZShrZXkkMSldPWxpc3RlbmVyc1trZXkkMV07fXJldHVybiBkYXRhO31mdW5jdGlvbiBwbGFjZWhvbGRlcihoLHJhd0NoaWxkKXtpZigvXFxkLWtlZXAtYWxpdmUkLy50ZXN0KHJhd0NoaWxkLnRhZykpe3JldHVybiBoKCdrZWVwLWFsaXZlJyx7cHJvcHM6cmF3Q2hpbGQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGF9KTt9fWZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24odm5vZGUpe3doaWxlKHZub2RlPXZub2RlLnBhcmVudCl7aWYodm5vZGUuZGF0YS50cmFuc2l0aW9uKXtyZXR1cm4gdHJ1ZTt9fX1mdW5jdGlvbiBpc1NhbWVDaGlsZChjaGlsZCxvbGRDaGlsZCl7cmV0dXJuIG9sZENoaWxkLmtleT09PWNoaWxkLmtleSYmb2xkQ2hpbGQudGFnPT09Y2hpbGQudGFnO312YXIgaXNOb3RUZXh0Tm9kZT1mdW5jdGlvbiBpc05vdFRleHROb2RlKGMpe3JldHVybiBjLnRhZ3x8aXNBc3luY1BsYWNlaG9sZGVyKGMpO307dmFyIGlzVlNob3dEaXJlY3RpdmU9ZnVuY3Rpb24gaXNWU2hvd0RpcmVjdGl2ZShkKXtyZXR1cm4gZC5uYW1lPT09J3Nob3cnO307dmFyIFRyYW5zaXRpb249e25hbWU6J3RyYW5zaXRpb24nLHByb3BzOnRyYW5zaXRpb25Qcm9wcyxcImFic3RyYWN0XCI6dHJ1ZSxyZW5kZXI6ZnVuY3Rpb24gcmVuZGVyKGgpe3ZhciB0aGlzJDE9dGhpczt2YXIgY2hpbGRyZW49dGhpcy4kc2xvdHNbXCJkZWZhdWx0XCJdO2lmKCFjaGlsZHJlbil7cmV0dXJuO30vLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuY2hpbGRyZW49Y2hpbGRyZW4uZmlsdGVyKGlzTm90VGV4dE5vZGUpOy8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKCFjaGlsZHJlbi5sZW5ndGgpe3JldHVybjt9dmFyIG1vZGU9dGhpcy5tb2RlO3ZhciByYXdDaGlsZD1jaGlsZHJlblswXTsvLyBpZiB0aGlzIGlzIGEgY29tcG9uZW50IHJvb3Qgbm9kZSBhbmQgdGhlIGNvbXBvbmVudCdzXG4vLyBwYXJlbnQgY29udGFpbmVyIG5vZGUgYWxzbyBoYXMgdHJhbnNpdGlvbiwgc2tpcC5cbmlmKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKXtyZXR1cm4gcmF3Q2hpbGQ7fS8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxudmFyIGNoaWxkPWdldFJlYWxDaGlsZChyYXdDaGlsZCk7LyogaXN0YW5idWwgaWdub3JlIGlmICovaWYoIWNoaWxkKXtyZXR1cm4gcmF3Q2hpbGQ7fWlmKHRoaXMuX2xlYXZpbmcpe3JldHVybiBwbGFjZWhvbGRlcihoLHJhd0NoaWxkKTt9Ly8gZW5zdXJlIGEga2V5IHRoYXQgaXMgdW5pcXVlIHRvIHRoZSB2bm9kZSB0eXBlIGFuZCB0byB0aGlzIHRyYW5zaXRpb25cbi8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXNcbi8vIGR1cmluZyBlbnRlcmluZy5cbnZhciBpZD1cIl9fdHJhbnNpdGlvbi1cIit0aGlzLl91aWQrXCItXCI7Y2hpbGQua2V5PWNoaWxkLmtleT09bnVsbD9jaGlsZC5pc0NvbW1lbnQ/aWQrJ2NvbW1lbnQnOmlkK2NoaWxkLnRhZzppc1ByaW1pdGl2ZShjaGlsZC5rZXkpP1N0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpPT09MD9jaGlsZC5rZXk6aWQrY2hpbGQua2V5OmNoaWxkLmtleTt2YXIgZGF0YT0oY2hpbGQuZGF0YXx8KGNoaWxkLmRhdGE9e30pKS50cmFuc2l0aW9uPWV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTt2YXIgb2xkUmF3Q2hpbGQ9dGhpcy5fdm5vZGU7dmFyIG9sZENoaWxkPWdldFJlYWxDaGlsZChvbGRSYXdDaGlsZCk7Ly8gbWFyayB2LXNob3dcbi8vIHNvIHRoYXQgdGhlIHRyYW5zaXRpb24gbW9kdWxlIGNhbiBoYW5kIG92ZXIgdGhlIGNvbnRyb2wgdG8gdGhlIGRpcmVjdGl2ZVxuaWYoY2hpbGQuZGF0YS5kaXJlY3RpdmVzJiZjaGlsZC5kYXRhLmRpcmVjdGl2ZXMuc29tZShpc1ZTaG93RGlyZWN0aXZlKSl7Y2hpbGQuZGF0YS5zaG93PXRydWU7fWlmKG9sZENoaWxkJiZvbGRDaGlsZC5kYXRhJiYhaXNTYW1lQ2hpbGQoY2hpbGQsb2xkQ2hpbGQpJiYhaXNBc3luY1BsYWNlaG9sZGVyKG9sZENoaWxkKSYmLy8gIzY2ODcgY29tcG9uZW50IHJvb3QgaXMgYSBjb21tZW50IG5vZGVcbiEob2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UmJm9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpKXsvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcbi8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbnZhciBvbGREYXRhPW9sZENoaWxkLmRhdGEudHJhbnNpdGlvbj1leHRlbmQoe30sZGF0YSk7Ly8gaGFuZGxlIHRyYW5zaXRpb24gbW9kZVxuaWYobW9kZT09PSdvdXQtaW4nKXsvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbnRoaXMuX2xlYXZpbmc9dHJ1ZTttZXJnZVZOb2RlSG9vayhvbGREYXRhLCdhZnRlckxlYXZlJyxmdW5jdGlvbigpe3RoaXMkMS5fbGVhdmluZz1mYWxzZTt0aGlzJDEuJGZvcmNlVXBkYXRlKCk7fSk7cmV0dXJuIHBsYWNlaG9sZGVyKGgscmF3Q2hpbGQpO31lbHNlIGlmKG1vZGU9PT0naW4tb3V0Jyl7aWYoaXNBc3luY1BsYWNlaG9sZGVyKGNoaWxkKSl7cmV0dXJuIG9sZFJhd0NoaWxkO312YXIgZGVsYXllZExlYXZlO3ZhciBwZXJmb3JtTGVhdmU9ZnVuY3Rpb24gcGVyZm9ybUxlYXZlKCl7ZGVsYXllZExlYXZlKCk7fTttZXJnZVZOb2RlSG9vayhkYXRhLCdhZnRlckVudGVyJyxwZXJmb3JtTGVhdmUpO21lcmdlVk5vZGVIb29rKGRhdGEsJ2VudGVyQ2FuY2VsbGVkJyxwZXJmb3JtTGVhdmUpO21lcmdlVk5vZGVIb29rKG9sZERhdGEsJ2RlbGF5TGVhdmUnLGZ1bmN0aW9uKGxlYXZlKXtkZWxheWVkTGVhdmU9bGVhdmU7fSk7fX1yZXR1cm4gcmF3Q2hpbGQ7fX07LyogICovdmFyIHByb3BzPWV4dGVuZCh7dGFnOlN0cmluZyxtb3ZlQ2xhc3M6U3RyaW5nfSx0cmFuc2l0aW9uUHJvcHMpO2RlbGV0ZSBwcm9wcy5tb2RlO3ZhciBUcmFuc2l0aW9uR3JvdXA9e3Byb3BzOnByb3BzLGJlZm9yZU1vdW50OmZ1bmN0aW9uIGJlZm9yZU1vdW50KCl7dmFyIHRoaXMkMT10aGlzO3ZhciB1cGRhdGU9dGhpcy5fdXBkYXRlO3RoaXMuX3VwZGF0ZT1mdW5jdGlvbih2bm9kZSxoeWRyYXRpbmcpe3ZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2U9c2V0QWN0aXZlSW5zdGFuY2UodGhpcyQxKTsvLyBmb3JjZSByZW1vdmluZyBwYXNzXG50aGlzJDEuX19wYXRjaF9fKHRoaXMkMS5fdm5vZGUsdGhpcyQxLmtlcHQsZmFsc2UsLy8gaHlkcmF0aW5nXG50cnVlLy8gcmVtb3ZlT25seSAoIWltcG9ydGFudCwgYXZvaWRzIHVubmVjZXNzYXJ5IG1vdmVzKVxuKTt0aGlzJDEuX3Zub2RlPXRoaXMkMS5rZXB0O3Jlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO3VwZGF0ZS5jYWxsKHRoaXMkMSx2bm9kZSxoeWRyYXRpbmcpO307fSxyZW5kZXI6ZnVuY3Rpb24gcmVuZGVyKGgpe3ZhciB0YWc9dGhpcy50YWd8fHRoaXMuJHZub2RlLmRhdGEudGFnfHwnc3Bhbic7dmFyIG1hcD1PYmplY3QuY3JlYXRlKG51bGwpO3ZhciBwcmV2Q2hpbGRyZW49dGhpcy5wcmV2Q2hpbGRyZW49dGhpcy5jaGlsZHJlbjt2YXIgcmF3Q2hpbGRyZW49dGhpcy4kc2xvdHNbXCJkZWZhdWx0XCJdfHxbXTt2YXIgY2hpbGRyZW49dGhpcy5jaGlsZHJlbj1bXTt2YXIgdHJhbnNpdGlvbkRhdGE9ZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO2Zvcih2YXIgaT0wO2k8cmF3Q2hpbGRyZW4ubGVuZ3RoO2krKyl7dmFyIGM9cmF3Q2hpbGRyZW5baV07aWYoYy50YWcpe2lmKGMua2V5IT1udWxsJiZTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSE9PTApe2NoaWxkcmVuLnB1c2goYyk7bWFwW2Mua2V5XT1jOyhjLmRhdGF8fChjLmRhdGE9e30pKS50cmFuc2l0aW9uPXRyYW5zaXRpb25EYXRhO319fWlmKHByZXZDaGlsZHJlbil7dmFyIGtlcHQ9W107dmFyIHJlbW92ZWQ9W107Zm9yKHZhciBpJDE9MDtpJDE8cHJldkNoaWxkcmVuLmxlbmd0aDtpJDErKyl7dmFyIGMkMT1wcmV2Q2hpbGRyZW5baSQxXTtjJDEuZGF0YS50cmFuc2l0aW9uPXRyYW5zaXRpb25EYXRhO2MkMS5kYXRhLnBvcz1jJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2lmKG1hcFtjJDEua2V5XSl7a2VwdC5wdXNoKGMkMSk7fWVsc2V7cmVtb3ZlZC5wdXNoKGMkMSk7fX10aGlzLmtlcHQ9aCh0YWcsbnVsbCxrZXB0KTt0aGlzLnJlbW92ZWQ9cmVtb3ZlZDt9cmV0dXJuIGgodGFnLG51bGwsY2hpbGRyZW4pO30sdXBkYXRlZDpmdW5jdGlvbiB1cGRhdGVkKCl7dmFyIGNoaWxkcmVuPXRoaXMucHJldkNoaWxkcmVuO3ZhciBtb3ZlQ2xhc3M9dGhpcy5tb3ZlQ2xhc3N8fCh0aGlzLm5hbWV8fCd2JykrJy1tb3ZlJztpZighY2hpbGRyZW4ubGVuZ3RofHwhdGhpcy5oYXNNb3ZlKGNoaWxkcmVuWzBdLmVsbSxtb3ZlQ2xhc3MpKXtyZXR1cm47fS8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuLy8gaW4gZWFjaCBpdGVyYXRpb24gLSB3aGljaCBoZWxwcyBwcmV2ZW50IGxheW91dCB0aHJhc2hpbmcuXG5jaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtjaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pOy8vIGZvcmNlIHJlZmxvdyB0byBwdXQgZXZlcnl0aGluZyBpbiBwb3NpdGlvblxuLy8gYXNzaWduIHRvIHRoaXMgdG8gYXZvaWQgYmVpbmcgcmVtb3ZlZCBpbiB0cmVlLXNoYWtpbmdcbi8vICRmbG93LWRpc2FibGUtbGluZVxudGhpcy5fcmVmbG93PWRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O2NoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oYyl7aWYoYy5kYXRhLm1vdmVkKXt2YXIgZWw9Yy5lbG07dmFyIHM9ZWwuc3R5bGU7YWRkVHJhbnNpdGlvbkNsYXNzKGVsLG1vdmVDbGFzcyk7cy50cmFuc2Zvcm09cy5XZWJraXRUcmFuc2Zvcm09cy50cmFuc2l0aW9uRHVyYXRpb249Jyc7ZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsZWwuX21vdmVDYj1mdW5jdGlvbiBjYihlKXtpZihlJiZlLnRhcmdldCE9PWVsKXtyZXR1cm47fWlmKCFlfHwvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpe2VsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LGNiKTtlbC5fbW92ZUNiPW51bGw7cmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLG1vdmVDbGFzcyk7fX0pO319KTt9LG1ldGhvZHM6e2hhc01vdmU6ZnVuY3Rpb24gaGFzTW92ZShlbCxtb3ZlQ2xhc3Mpey8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKCFoYXNUcmFuc2l0aW9uKXtyZXR1cm4gZmFsc2U7fS8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKHRoaXMuX2hhc01vdmUpe3JldHVybiB0aGlzLl9oYXNNb3ZlO30vLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXNcbi8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZ1xuLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxuLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzXG4vLyBpcyBhcHBsaWVkLlxudmFyIGNsb25lPWVsLmNsb25lTm9kZSgpO2lmKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcyl7ZWwuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24oY2xzKXtyZW1vdmVDbGFzcyhjbG9uZSxjbHMpO30pO31hZGRDbGFzcyhjbG9uZSxtb3ZlQ2xhc3MpO2Nsb25lLnN0eWxlLmRpc3BsYXk9J25vbmUnO3RoaXMuJGVsLmFwcGVuZENoaWxkKGNsb25lKTt2YXIgaW5mbz1nZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7dGhpcy4kZWwucmVtb3ZlQ2hpbGQoY2xvbmUpO3JldHVybiB0aGlzLl9oYXNNb3ZlPWluZm8uaGFzVHJhbnNmb3JtO319fTtmdW5jdGlvbiBjYWxsUGVuZGluZ0NicyhjKXsvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9pZihjLmVsbS5fbW92ZUNiKXtjLmVsbS5fbW92ZUNiKCk7fS8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL2lmKGMuZWxtLl9lbnRlckNiKXtjLmVsbS5fZW50ZXJDYigpO319ZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24oYyl7Yy5kYXRhLm5ld1Bvcz1jLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTt9ZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbihjKXt2YXIgb2xkUG9zPWMuZGF0YS5wb3M7dmFyIG5ld1Bvcz1jLmRhdGEubmV3UG9zO3ZhciBkeD1vbGRQb3MubGVmdC1uZXdQb3MubGVmdDt2YXIgZHk9b2xkUG9zLnRvcC1uZXdQb3MudG9wO2lmKGR4fHxkeSl7Yy5kYXRhLm1vdmVkPXRydWU7dmFyIHM9Yy5lbG0uc3R5bGU7cy50cmFuc2Zvcm09cy5XZWJraXRUcmFuc2Zvcm09XCJ0cmFuc2xhdGUoXCIrZHgrXCJweCxcIitkeStcInB4KVwiO3MudHJhbnNpdGlvbkR1cmF0aW9uPScwcyc7fX12YXIgcGxhdGZvcm1Db21wb25lbnRzPXtUcmFuc2l0aW9uOlRyYW5zaXRpb24sVHJhbnNpdGlvbkdyb3VwOlRyYW5zaXRpb25Hcm91cH07LyogICovIC8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHNcblZ1ZS5jb25maWcubXVzdFVzZVByb3A9bXVzdFVzZVByb3A7VnVlLmNvbmZpZy5pc1Jlc2VydmVkVGFnPWlzUmVzZXJ2ZWRUYWc7VnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0cj1pc1Jlc2VydmVkQXR0cjtWdWUuY29uZmlnLmdldFRhZ05hbWVzcGFjZT1nZXRUYWdOYW1lc3BhY2U7VnVlLmNvbmZpZy5pc1Vua25vd25FbGVtZW50PWlzVW5rbm93bkVsZW1lbnQ7Ly8gaW5zdGFsbCBwbGF0Zm9ybSBydW50aW1lIGRpcmVjdGl2ZXMgJiBjb21wb25lbnRzXG5leHRlbmQoVnVlLm9wdGlvbnMuZGlyZWN0aXZlcyxwbGF0Zm9ybURpcmVjdGl2ZXMpO2V4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLHBsYXRmb3JtQ29tcG9uZW50cyk7Ly8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuVnVlLnByb3RvdHlwZS5fX3BhdGNoX189aW5Ccm93c2VyP3BhdGNoOm5vb3A7Ly8gcHVibGljIG1vdW50IG1ldGhvZFxuVnVlLnByb3RvdHlwZS4kbW91bnQ9ZnVuY3Rpb24oZWwsaHlkcmF0aW5nKXtlbD1lbCYmaW5Ccm93c2VyP3F1ZXJ5KGVsKTp1bmRlZmluZWQ7cmV0dXJuIG1vdW50Q29tcG9uZW50KHRoaXMsZWwsaHlkcmF0aW5nKTt9Oy8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL2lmKGluQnJvd3Nlcil7c2V0VGltZW91dChmdW5jdGlvbigpe2lmKGNvbmZpZy5kZXZ0b29scyl7aWYoZGV2dG9vbHMpe2RldnRvb2xzLmVtaXQoJ2luaXQnLFZ1ZSk7fX19LDApO312YXIgX3R5cGVvZj10eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpPT09XCJzeW1ib2xcIj9mdW5jdGlvbihvYmope3JldHVybiBfdHlwZW9mMihvYmopO306ZnVuY3Rpb24ob2JqKXtyZXR1cm4gb2JqJiZ0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjpfdHlwZW9mMihvYmopO307Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEluaXRcbnZhciBpbml0aWFsaXplR2xvYmFsTmFtZXNwYWNlPWZ1bmN0aW9uIGluaXRpYWxpemVHbG9iYWxOYW1lc3BhY2UoKXt2YXIgbmFtZXNwYWNlPXZvaWQgMDtpZigodHlwZW9mIHdpbmRvdz09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2Yod2luZG93KSk9PT0nb2JqZWN0Jyl7bmFtZXNwYWNlPXdpbmRvdy5maWxlc3RhY2tJbnRlcm5hbHM7aWYoIW5hbWVzcGFjZSl7bmFtZXNwYWNlPXt9O3dpbmRvdy5maWxlc3RhY2tJbnRlcm5hbHM9bmFtZXNwYWNlO31pZighbmFtZXNwYWNlLmxvYWRlcil7bmFtZXNwYWNlLmxvYWRlcj17bW9kdWxlczp7fX07fX1yZXR1cm4gbmFtZXNwYWNlO307dmFyIGZpbGVzdGFja0ludGVybmFscz1pbml0aWFsaXplR2xvYmFsTmFtZXNwYWNlKCk7Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIE1vZHVsZXMgbG9hZGluZ1xuLy8gQWxsIG1vZHVsZXMgc2hhcmUgZ2xvYmFsIFwicmVnaXN0ZXJcIiwgc28gZGlmZmVyZW50IGluc3RhbmNlcyBvZiBsb2FkZXIgY2FuXG4vLyBjb21tdW5pY2F0ZSB3aGljaCBtb2R1bGVzIHdlcmUgYWxyZWFkeSBsb2FkZWQgYW5kIHdoaWNoIG5vdC5cbnZhciBtb2R1bGVzJDE9ZmlsZXN0YWNrSW50ZXJuYWxzJiZmaWxlc3RhY2tJbnRlcm5hbHMubG9hZGVyLm1vZHVsZXM7dmFyIGxvYWRNb2R1bGU9ZnVuY3Rpb24gbG9hZE1vZHVsZSh1cmwsbW9kdWxlSWQpe3ZhciBtb2R1bGVEZWZpbml0aW9uPW1vZHVsZXMkMVt1cmxdO2lmKCFtb2R1bGVEZWZpbml0aW9uKXttb2R1bGVzJDFbdXJsXT17fTttb2R1bGVEZWZpbml0aW9uPW1vZHVsZXMkMVt1cmxdO31pZihtb2R1bGVEZWZpbml0aW9uLmluc3RhbmNlKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1vZHVsZURlZmluaXRpb24uaW5zdGFuY2UpO31pZihtb2R1bGVEZWZpbml0aW9uLnByb21pc2Upe3JldHVybiBtb2R1bGVEZWZpbml0aW9uLnByb21pc2U7fXZhciBwcm9taXNlPW5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXt2YXIgZW1iZWRTY3JpcHQ9ZnVuY3Rpb24gZW1iZWRTY3JpcHQoKXttb2R1bGVEZWZpbml0aW9uLnJlc29sdmVQcm9taXNlPXJlc29sdmU7dmFyIHNjcmlwdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtzY3JpcHQuc3JjPXVybDtzY3JpcHQub25lcnJvcj1yZWplY3Q7aWYobW9kdWxlSWQpc2NyaXB0LmlkPW1vZHVsZUlkO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTt9O3ZhciBjaGVja0lmRG9tUmVhZHk9ZnVuY3Rpb24gY2hlY2tJZkRvbVJlYWR5KCl7aWYoZG9jdW1lbnQucmVhZHlTdGF0ZT09PSdjb21wbGV0ZScpe2VtYmVkU2NyaXB0KCk7fWVsc2V7c2V0VGltZW91dChjaGVja0lmRG9tUmVhZHksNTApO319O2NoZWNrSWZEb21SZWFkeSgpO30pO21vZHVsZURlZmluaXRpb24ucHJvbWlzZT1wcm9taXNlO3JldHVybiBwcm9taXNlO307dmFyIHJlZ2lzdGVyUmVhZHlNb2R1bGU9ZnVuY3Rpb24gcmVnaXN0ZXJSZWFkeU1vZHVsZShpbnN0YW5jZSxtb2R1bGVJZCl7dmFyIHRoaXNTY3JpcHQ9dm9pZCAwO2lmKG1vZHVsZUlkJiZkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtb2R1bGVJZCkpe3RoaXNTY3JpcHQ9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobW9kdWxlSWQpO31lbHNle3ZhciBzY3JpcHRUYWdzPWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTt0aGlzU2NyaXB0PXNjcmlwdFRhZ3Nbc2NyaXB0VGFncy5sZW5ndGgtMV07fXZhciB1cmw9dGhpc1NjcmlwdC5nZXRBdHRyaWJ1dGUoJ3NyYycpO3ZhciBtb2R1bGVEZWZpbml0aW9uPW1vZHVsZXMkMVt1cmxdO2lmKG1vZHVsZURlZmluaXRpb24mJm1vZHVsZURlZmluaXRpb24ucmVzb2x2ZVByb21pc2Upe21vZHVsZURlZmluaXRpb24uaW5zdGFuY2U9aW5zdGFuY2U7bW9kdWxlRGVmaW5pdGlvbi5yZXNvbHZlUHJvbWlzZShpbnN0YW5jZSk7ZGVsZXRlIG1vZHVsZURlZmluaXRpb24ucHJvbWlzZTtkZWxldGUgbW9kdWxlRGVmaW5pdGlvbi5yZXNvbHZlUHJvbWlzZTt9fTsvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQ1NTIGxvYWRpbmdcbnZhciBsb2FkQ3NzPWZ1bmN0aW9uIGxvYWRDc3ModXJsKXt2YXIgYWxyZWFkeUFkZGVkVGhpc1RhZz1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdsaW5rW2hyZWY9XCInK3VybCsnXCJdJyk7aWYoYWxyZWFkeUFkZGVkVGhpc1RhZyE9PW51bGwpe3JldHVybiBQcm9taXNlLnJlc29sdmUoKTt9cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpe3ZhciBoZWFkPWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07dmFyIGxpbms9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO3ZhciBsb2FkZWQ9ZnVuY3Rpb24gbG9hZGVkKCl7cmVzb2x2ZSgpO2xpbmsucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsbG9hZGVkKTt9O2xpbmsucmVsPSdzdHlsZXNoZWV0JztsaW5rLmhyZWY9dXJsO2xpbmsuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsbG9hZGVkKTtoZWFkLmFwcGVuZENoaWxkKGxpbmspO30pO307dmFyIGtub3duTW9kdWxlSWRzPXtwaWNrZXI6J19fZmlsZXN0YWNrLXBpY2tlci1tb2R1bGUnfTsvLyBMb2dnZXIgY2FuIGJlIHVzZWQgYW5kIHJlcXVpcmVkIGZyb20gbWFueSBwbGFjZXMuXG4vLyBUaGlzIGlzIGdsb2JhbCBvbiAvIG9mZiBzd2l0Y2ggZm9yIGl0LCB3aGljaCBhbGxcbi8vIGNyZWF0ZWQgbG9nZ2VyIGNvbnRleHRzIHJlc3BlY3QuXG52YXIgb25PZmY9e2luaXQ6ZnVuY3Rpb24gaW5pdCgpe3dpbmRvdy5maWxlc3RhY2tJbnRlcm5hbHMubG9nZ2VyLndvcmtpbmc9ZmFsc2U7fSxpc1dvcmtpbmc6ZnVuY3Rpb24gaXNXb3JraW5nKCl7cmV0dXJuIHdpbmRvdy5maWxlc3RhY2tJbnRlcm5hbHMubG9nZ2VyLndvcmtpbmc7fSxvbjpmdW5jdGlvbiBvbigpe3dpbmRvdy5maWxlc3RhY2tJbnRlcm5hbHMubG9nZ2VyLndvcmtpbmc9dHJ1ZTt9LG9mZjpmdW5jdGlvbiBvZmYoKXt3aW5kb3cuZmlsZXN0YWNrSW50ZXJuYWxzLmxvZ2dlci53b3JraW5nPWZhbHNlO319O3ZhciBfdHlwZW9mJDE9dHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKT09PVwic3ltYm9sXCI/ZnVuY3Rpb24ob2JqKXtyZXR1cm4gX3R5cGVvZjIob2JqKTt9OmZ1bmN0aW9uKG9iail7cmV0dXJuIG9iaiYmdHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmb2JqLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZvYmohPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6X3R5cGVvZjIob2JqKTt9O3ZhciB0b0NvbnN1bWFibGVBcnJheT1mdW5jdGlvbiB0b0NvbnN1bWFibGVBcnJheShhcnIpe2lmKEFycmF5LmlzQXJyYXkoYXJyKSl7Zm9yKHZhciBpPTAsYXJyMj1BcnJheShhcnIubGVuZ3RoKTtpPGFyci5sZW5ndGg7aSsrKXthcnIyW2ldPWFycltpXTt9cmV0dXJuIGFycjI7fWVsc2V7cmV0dXJuIEFycmF5LmZyb20oYXJyKTt9fTsvKiBlc2xpbnQgbm8tY29uc29sZTowICovdmFyIGNvbnRleHQ9ZnVuY3Rpb24gY29udGV4dChjb250ZXh0TmFtZSxvbk9mZil7dmFyIGFwaT1mdW5jdGlvbiBsb2coKXtmb3IodmFyIF9sZW49YXJndW1lbnRzLmxlbmd0aCxzdHVmZj1BcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7c3R1ZmZbX2tleV09YXJndW1lbnRzW19rZXldO312YXIgY29udmVydGVkVG9TdHJpbmdzPVtdLmNvbmNhdChzdHVmZikubWFwKGZ1bmN0aW9uKHRoaW5nKXtpZigodHlwZW9mIHRoaW5nPT09J3VuZGVmaW5lZCc/J3VuZGVmaW5lZCc6X3R5cGVvZiQxKHRoaW5nKSk9PT0nb2JqZWN0Jyl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaW5nLGZ1bmN0aW9uKGtleSx2YWx1ZSl7aWYodHlwZW9mIHZhbHVlPT09J2Z1bmN0aW9uJyl7Ly8gSWYgYW55IGZ1bmN0aW9uIG5hbWVkIGpzb24gaXMgZm91bmQgdGhlbiBjYWxsIHRoYXQgZnVuY3Rpb24gdG8gZ2V0IHRoZSBqc29uIG9iamVjdC5cbmlmKGtleT09PSdqc29uJyl7dHJ5e3JldHVybiB2YWx1ZSgpO31jYXRjaChlcnIpey8vIFRocm93cz8gTm8gd29ycmllcy4gSnVzdCBnbyBvbiBhbmQgcmV0dXJuIHN0cmluZy5cbn19cmV0dXJuJ1tGdW5jdGlvbl0nO31pZih2YWx1ZSBpbnN0YW5jZW9mIEZpbGUpe3JldHVybidbRmlsZSBuYW1lOiAnK3ZhbHVlLm5hbWUrJywgbWltZXR5cGU6ICcrdmFsdWUudHlwZSsnLCBzaXplOiAnK3ZhbHVlLnNpemUrJ10nO31yZXR1cm4gdmFsdWU7fSwyKTt9cmV0dXJuIHRoaW5nO30pO2lmKG9uT2ZmLmlzV29ya2luZygpKXt2YXIgX2NvbnNvbGU7KF9jb25zb2xlPWNvbnNvbGUpLmxvZy5hcHBseShfY29uc29sZSxbJ1snK2NvbnRleHROYW1lKyddJ10uY29uY2F0KHRvQ29uc3VtYWJsZUFycmF5KGNvbnZlcnRlZFRvU3RyaW5ncykpKTt9fTthcGkuY29udGV4dD1mdW5jdGlvbihzdWJDb250ZXh0TmFtZSl7cmV0dXJuIGNvbnRleHQoY29udGV4dE5hbWUrJ11bJytzdWJDb250ZXh0TmFtZSxvbk9mZik7fTthcGkub249b25PZmYub247YXBpLm9mZj1vbk9mZi5vZmY7cmV0dXJuIGFwaTt9O3ZhciBsb2dnZXI9Y29udGV4dCgnZmlsZXN0YWNrJyxvbk9mZik7dmFyIGluaXRpYWxpemVHbG9iYWxOYW1lc3BhY2UkMT1mdW5jdGlvbiBpbml0aWFsaXplR2xvYmFsTmFtZXNwYWNlKCl7dmFyIG5hbWVzcGFjZT12b2lkIDA7aWYoKHR5cGVvZiB3aW5kb3c9PT0ndW5kZWZpbmVkJz8ndW5kZWZpbmVkJzpfdHlwZW9mJDEod2luZG93KSk9PT0nb2JqZWN0Jyl7bmFtZXNwYWNlPXdpbmRvdy5maWxlc3RhY2tJbnRlcm5hbHM7aWYoIW5hbWVzcGFjZSl7bmFtZXNwYWNlPXt9O3dpbmRvdy5maWxlc3RhY2tJbnRlcm5hbHM9bmFtZXNwYWNlO31pZighbmFtZXNwYWNlLmxvZ2dlcil7bmFtZXNwYWNlLmxvZ2dlcj1sb2dnZXI7b25PZmYuaW5pdCgpO319cmV0dXJuIG5hbWVzcGFjZTt9O2luaXRpYWxpemVHbG9iYWxOYW1lc3BhY2UkMSgpO3ZhciBjb21tb25qc0dsb2JhbD10eXBlb2YgZ2xvYmFsVGhpcyE9PSd1bmRlZmluZWQnP2dsb2JhbFRoaXM6dHlwZW9mIHdpbmRvdyE9PSd1bmRlZmluZWQnP3dpbmRvdzp0eXBlb2YgZ2xvYmFsIT09J3VuZGVmaW5lZCc/Z2xvYmFsOnR5cGVvZiBzZWxmIT09J3VuZGVmaW5lZCc/c2VsZjp7fTtmdW5jdGlvbiBjb21tb25qc1JlcXVpcmUoKXt0aHJvdyBuZXcgRXJyb3IoJ0R5bmFtaWMgcmVxdWlyZXMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGJ5IHJvbGx1cC1wbHVnaW4tY29tbW9uanMnKTt9ZnVuY3Rpb24gdW53cmFwRXhwb3J0cyh4KXtyZXR1cm4geCYmeC5fX2VzTW9kdWxlJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwnZGVmYXVsdCcpP3hbJ2RlZmF1bHQnXTp4O31mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbixtb2R1bGUpe3JldHVybiBtb2R1bGU9e2V4cG9ydHM6e319LGZuKG1vZHVsZSxtb2R1bGUuZXhwb3J0cyksbW9kdWxlLmV4cG9ydHM7fXZhciB2dWVTZXNzaW9uc3RvcmFnZV9taW49Y3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpeyFmdW5jdGlvbih0LGUpe21vZHVsZS5leHBvcnRzPWUoKTt9KGNvbW1vbmpzR2xvYmFsLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoaSl7aWYoc1tpXSlyZXR1cm4gc1tpXS5leHBvcnRzO3ZhciBuPXNbaV09e2V4cG9ydHM6e30saWQ6aSxsb2FkZWQ6ITF9O3JldHVybiB0W2ldLmNhbGwobi5leHBvcnRzLG4sbi5leHBvcnRzLGUpLG4ubG9hZGVkPSEwLG4uZXhwb3J0czt9dmFyIHM9e307cmV0dXJuIGUubT10LGUuYz1zLGUucD1cIlwiLGUoMCk7fShbZnVuY3Rpb24odCxlLHMpe2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntcImRlZmF1bHRcIjp0fTt9dmFyIG49cygyKSxvPWkobikscj1zKDEpLHU9aShyKTt3aW5kb3cuc2Vzc2lvblN0b3JhZ2V8fCh3aW5kb3cuc2Vzc2lvblN0b3JhZ2U9dVtcImRlZmF1bHRcIl0pO3ZhciBhPXtpbnN0YWxsOmZ1bmN0aW9uIGluc3RhbGwodCxlKXt0LnByb3RvdHlwZS4kc2Vzc2lvbj1uZXcgb1tcImRlZmF1bHRcIl0oKTt9fTt0LmV4cG9ydHM9YTt9LGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gcygpe3RoaXMuZGF0YT17fSx0aGlzLnNldEl0ZW09ZnVuY3Rpb24odCxlKXt0aGlzLmRhdGFbdF09ZTt9LHRoaXMuZ2V0SXRlbT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kYXRhW3RdO307fXQuZXhwb3J0cz1zO30sZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBzKCl7dGhpcy5rZXk9bnVsbCx0aGlzLl9fZ2V0UmFuZG9tU3RyaW5nPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXToxMCxlPVwiXCI7dC0tOyl7ZSs9U3RyaW5nLmZyb21DaGFyQ29kZSg0OCt+fig0MipNYXRoLnJhbmRvbSgpKSk7fXJldHVybiBlO30sdGhpcy5fX2dldEtleT1mdW5jdGlvbigpe3ZhciB0PXdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwic2Vzc2lvbktleVwiKTt0fHwodD10aGlzLl9fZ2V0UmFuZG9tU3RyaW5nKCksd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJzZXNzaW9uS2V5XCIsdCkpLHRoaXMua2V5PXQ7fSx0aGlzLl9fZ2V0PWZ1bmN0aW9uKCl7dGhpcy5rZXl8fHRoaXMuX19nZXRLZXkoKTt2YXIgdD1KU09OLnBhcnNlKHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHRoaXMua2V5KSk7cmV0dXJuIHR8fHt9O30sdGhpcy5nZXQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fX2dldCgpO3JldHVybiBlW3RdO30sdGhpcy5fX3NldD1mdW5jdGlvbih0KXt0aGlzLmtleXx8dGhpcy5fX2dldEtleSgpLHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHRoaXMua2V5LEpTT04uc3RyaW5naWZ5KHQpKTt9LHRoaXMuc2V0PWZ1bmN0aW9uKHQsZSl7dmFyIHM9dGhpcy5fX2dldCgpO3NbdF09ZSx0aGlzLl9fc2V0KHMpO30sdGhpcy5leGlzdHM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fX2dldCgpO3JldHVybiB0IGluIGU7fSx0aGlzLnJlbW92ZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl9fZ2V0KCk7ZGVsZXRlIGVbdF0sdGhpcy5fX3NldChlKTt9LHRoaXMuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLl9fc2V0KHt9KTt9O310LmV4cG9ydHM9czt9XSk7fSk7fSk7dmFyIFZ1ZVNlc3Npb25TdG9yYWdlPXVud3JhcEV4cG9ydHModnVlU2Vzc2lvbnN0b3JhZ2VfbWluKTt2YXIgdnVlU2Vzc2lvbnN0b3JhZ2VfbWluXzE9dnVlU2Vzc2lvbnN0b3JhZ2VfbWluLlZ1ZVNlc3Npb25TdG9yYWdlOy8qKlxuICAgKiBsb2Rhc2ggMy4wLjAgKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gICAqIEJ1aWxkOiBgbG9kYXNoIG1vZGVybiBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAgICogQ29weXJpZ2h0IDIwMTItMjAxNSBUaGUgRG9qbyBGb3VuZGF0aW9uIDxodHRwOi8vZG9qb2ZvdW5kYXRpb24ub3JnLz5cbiAgICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjcuMCA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAgICogQ29weXJpZ2h0IDIwMDktMjAxNSBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICAgKiBBdmFpbGFibGUgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICAgKi8gLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi92YXIgcmVJbnRlcnBvbGF0ZT0vPCU9KFtcXHNcXFNdKz8pJT4vZzt2YXIgbG9kYXNoX19yZWludGVycG9sYXRlPXJlSW50ZXJwb2xhdGU7LyoqXG4gICAqIExvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAgICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gICAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL29wZW5qc2Yub3JnLz5cbiAgICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICAgKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICAgKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAgICovIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL3ZhciBJTkZJTklUWT0xLzA7LyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL3ZhciBudWxsVGFnPSdbb2JqZWN0IE51bGxdJyxzeW1ib2xUYWc9J1tvYmplY3QgU3ltYm9sXScsdW5kZWZpbmVkVGFnPSdbb2JqZWN0IFVuZGVmaW5lZF0nOy8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi92YXIgcmVVbmVzY2FwZWRIdG1sPS9bJjw+XCInXS9nLHJlSGFzVW5lc2NhcGVkSHRtbD1SZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7LyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi92YXIgcmVFc2NhcGU9LzwlLShbXFxzXFxTXSs/KSU+L2cscmVFdmFsdWF0ZT0vPCUoW1xcc1xcU10rPyklPi9nOy8qKiBVc2VkIHRvIG1hcCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuICovdmFyIGh0bWxFc2NhcGVzPXsnJic6JyZhbXA7JywnPCc6JyZsdDsnLCc+JzonJmd0OycsJ1wiJzonJnF1b3Q7JyxcIidcIjonJiMzOTsnfTsvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL3ZhciBmcmVlR2xvYmFsPV90eXBlb2YyKGNvbW1vbmpzR2xvYmFsKT09J29iamVjdCcmJmNvbW1vbmpzR2xvYmFsJiZjb21tb25qc0dsb2JhbC5PYmplY3Q9PT1PYmplY3QmJmNvbW1vbmpzR2xvYmFsOy8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovdmFyIGZyZWVTZWxmPSh0eXBlb2Ygc2VsZj09PVwidW5kZWZpbmVkXCI/XCJ1bmRlZmluZWRcIjpfdHlwZW9mMihzZWxmKSk9PSdvYmplY3QnJiZzZWxmJiZzZWxmLk9iamVjdD09PU9iamVjdCYmc2VsZjsvKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi92YXIgcm9vdD1mcmVlR2xvYmFsfHxmcmVlU2VsZnx8RnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTsvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9mdW5jdGlvbiBhcnJheU1hcChhcnJheSxpdGVyYXRlZSl7dmFyIGluZGV4PS0xLGxlbmd0aD1hcnJheT09bnVsbD8wOmFycmF5Lmxlbmd0aCxyZXN1bHQ9QXJyYXkobGVuZ3RoKTt3aGlsZSgrK2luZGV4PGxlbmd0aCl7cmVzdWx0W2luZGV4XT1pdGVyYXRlZShhcnJheVtpbmRleF0saW5kZXgsYXJyYXkpO31yZXR1cm4gcmVzdWx0O30vKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgKi9mdW5jdGlvbiBiYXNlUHJvcGVydHlPZihvYmplY3Qpe3JldHVybiBmdW5jdGlvbihrZXkpe3JldHVybiBvYmplY3Q9PW51bGw/dW5kZWZpbmVkOm9iamVjdFtrZXldO307fS8qKlxuICAgKiBVc2VkIGJ5IGBfLmVzY2FwZWAgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL3ZhciBlc2NhcGVIdG1sQ2hhcj1iYXNlUHJvcGVydHlPZihodG1sRXNjYXBlcyk7LyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL3ZhciBvYmplY3RQcm90bz1PYmplY3QucHJvdG90eXBlOy8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL3ZhciBoYXNPd25Qcm9wZXJ0eSQxPW9iamVjdFByb3RvLmhhc093blByb3BlcnR5Oy8qKlxuICAgKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gICAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICAgKiBvZiB2YWx1ZXMuXG4gICAqL3ZhciBuYXRpdmVPYmplY3RUb1N0cmluZz1vYmplY3RQcm90by50b1N0cmluZzsvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi92YXIgU3ltYm9sJDE9cm9vdC5TeW1ib2wsc3ltVG9TdHJpbmdUYWc9U3ltYm9sJDE/U3ltYm9sJDEudG9TdHJpbmdUYWc6dW5kZWZpbmVkOy8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL3ZhciBzeW1ib2xQcm90bz1TeW1ib2wkMT9TeW1ib2wkMS5wcm90b3R5cGU6dW5kZWZpbmVkLHN5bWJvbFRvU3RyaW5nPXN5bWJvbFByb3RvP3N5bWJvbFByb3RvLnRvU3RyaW5nOnVuZGVmaW5lZDsvKipcbiAgICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIGRlbGltaXRlcnMgdXNlZCBieSBsb2Rhc2ggYXJlIGxpa2UgdGhvc2UgaW5cbiAgICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gICAqIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi92YXIgdGVtcGxhdGVTZXR0aW5ncz17LyoqXG4gICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBiZSBIVE1MLWVzY2FwZWQuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgKi8nZXNjYXBlJzpyZUVzY2FwZSwvKipcbiAgICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAqLydldmFsdWF0ZSc6cmVFdmFsdWF0ZSwvKipcbiAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAqLydpbnRlcnBvbGF0ZSc6bG9kYXNoX19yZWludGVycG9sYXRlLC8qKlxuICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqLyd2YXJpYWJsZSc6JycsLyoqXG4gICAgICogVXNlZCB0byBpbXBvcnQgdmFyaWFibGVzIGludG8gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqXG4gICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovJ2ltcG9ydHMnOnsvKipcbiAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNcbiAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgICAqLydfJzp7J2VzY2FwZSc6ZXNjYXBlfX19Oy8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICovZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSl7aWYodmFsdWU9PW51bGwpe3JldHVybiB2YWx1ZT09PXVuZGVmaW5lZD91bmRlZmluZWRUYWc6bnVsbFRhZzt9cmV0dXJuIHN5bVRvU3RyaW5nVGFnJiZzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpP2dldFJhd1RhZyh2YWx1ZSk6b2JqZWN0VG9TdHJpbmcodmFsdWUpO30vKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gICAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gICAqL2Z1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSl7Ly8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbmlmKHR5cGVvZiB2YWx1ZT09J3N0cmluZycpe3JldHVybiB2YWx1ZTt9aWYoaXNBcnJheSh2YWx1ZSkpey8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG5yZXR1cm4gYXJyYXlNYXAodmFsdWUsYmFzZVRvU3RyaW5nKSsnJzt9aWYoaXNTeW1ib2wodmFsdWUpKXtyZXR1cm4gc3ltYm9sVG9TdHJpbmc/c3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSk6Jyc7fXZhciByZXN1bHQ9dmFsdWUrJyc7cmV0dXJuIHJlc3VsdD09JzAnJiYxL3ZhbHVlPT0tSU5GSU5JVFk/Jy0wJzpyZXN1bHQ7fS8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gICAqL2Z1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSl7dmFyIGlzT3duPWhhc093blByb3BlcnR5JDEuY2FsbCh2YWx1ZSxzeW1Ub1N0cmluZ1RhZyksdGFnPXZhbHVlW3N5bVRvU3RyaW5nVGFnXTt0cnl7dmFsdWVbc3ltVG9TdHJpbmdUYWddPXVuZGVmaW5lZDt2YXIgdW5tYXNrZWQ9dHJ1ZTt9Y2F0Y2goZSl7fXZhciByZXN1bHQ9bmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7aWYodW5tYXNrZWQpe2lmKGlzT3duKXt2YWx1ZVtzeW1Ub1N0cmluZ1RhZ109dGFnO31lbHNle2RlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107fX1yZXR1cm4gcmVzdWx0O30vKipcbiAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAqL2Z1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKXtyZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7fS8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSAwLjEuMFxuICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBfLmlzQXJyYXkoJ2FiYycpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICovdmFyIGlzQXJyYXk9QXJyYXkuaXNBcnJheTsvKipcbiAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gICAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgNC4wLjBcbiAgICogQGNhdGVnb3J5IExhbmdcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKi9mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpe3JldHVybiB2YWx1ZSE9bnVsbCYmX3R5cGVvZjIodmFsdWUpPT0nb2JqZWN0Jzt9LyoqXG4gICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSA0LjAuMFxuICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKi9mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSl7cmV0dXJuIF90eXBlb2YyKHZhbHVlKT09J3N5bWJvbCd8fGlzT2JqZWN0TGlrZSh2YWx1ZSkmJmJhc2VHZXRUYWcodmFsdWUpPT1zeW1ib2xUYWc7fS8qKlxuICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICAgKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgNC4wLjBcbiAgICogQGNhdGVnb3J5IExhbmdcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy50b1N0cmluZyhudWxsKTtcbiAgICogLy8gPT4gJydcbiAgICpcbiAgICogXy50b1N0cmluZygtMCk7XG4gICAqIC8vID0+ICctMCdcbiAgICpcbiAgICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICAgKiAvLyA9PiAnMSwyLDMnXG4gICAqL2Z1bmN0aW9uIHRvU3RyaW5nJDEodmFsdWUpe3JldHVybiB2YWx1ZT09bnVsbD8nJzpiYXNlVG9TdHJpbmcodmFsdWUpO30vKipcbiAgICogQ29udmVydHMgdGhlIGNoYXJhY3RlcnMgXCImXCIsIFwiPFwiLCBcIj5cIiwgJ1wiJywgYW5kIFwiJ1wiIGluIGBzdHJpbmdgIHRvIHRoZWlyXG4gICAqIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy5cbiAgICpcbiAgICogKipOb3RlOioqIE5vIG90aGVyIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQuIFRvIGVzY2FwZSBhZGRpdGlvbmFsXG4gICAqIGNoYXJhY3RlcnMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgKlxuICAgKiBUaG91Z2ggdGhlIFwiPlwiIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlXG4gICAqIFwiPlwiIGFuZCBcIi9cIiBkb24ndCBuZWVkIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nXG4gICAqIHVubGVzcyB0aGV5J3JlIHBhcnQgb2YgYSB0YWcgb3IgdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLiBTZWVcbiAgICogW01hdGhpYXMgQnluZW5zJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzKVxuICAgKiAodW5kZXIgXCJzZW1pLXJlbGF0ZWQgZnVuIGZhY3RcIikgZm9yIG1vcmUgZGV0YWlscy5cbiAgICpcbiAgICogV2hlbiB3b3JraW5nIHdpdGggSFRNTCB5b3Ugc2hvdWxkIGFsd2F5c1xuICAgKiBbcXVvdGUgYXR0cmlidXRlIHZhbHVlc10oaHR0cDovL3dvbmtvLmNvbS9wb3N0L2h0bWwtZXNjYXBpbmcpIHRvIHJlZHVjZVxuICAgKiBYU1MgdmVjdG9ycy5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAc2luY2UgMC4xLjBcbiAgICogQG1lbWJlck9mIF9cbiAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcydcbiAgICovZnVuY3Rpb24gZXNjYXBlKHN0cmluZyl7c3RyaW5nPXRvU3RyaW5nJDEoc3RyaW5nKTtyZXR1cm4gc3RyaW5nJiZyZUhhc1VuZXNjYXBlZEh0bWwudGVzdChzdHJpbmcpP3N0cmluZy5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCxlc2NhcGVIdG1sQ2hhcik6c3RyaW5nO312YXIgbG9kYXNoX3RlbXBsYXRlc2V0dGluZ3M9dGVtcGxhdGVTZXR0aW5nczt2YXIgbG9kYXNoX3RlbXBsYXRlPWNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXsvKipcbiAgICogTG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICAgKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAgICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICAgKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gICAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gICAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICAgKi8gLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL3ZhciBIT1RfQ09VTlQ9ODAwLEhPVF9TUEFOPTE2Oy8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL3ZhciBJTkZJTklUWT0xLzAsTUFYX1NBRkVfSU5URUdFUj05MDA3MTk5MjU0NzQwOTkxOy8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi92YXIgYXJnc1RhZz0nW29iamVjdCBBcmd1bWVudHNdJyxhcnJheVRhZz0nW29iamVjdCBBcnJheV0nLGFzeW5jVGFnPSdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxib29sVGFnPSdbb2JqZWN0IEJvb2xlYW5dJyxkYXRlVGFnPSdbb2JqZWN0IERhdGVdJyxkb21FeGNUYWc9J1tvYmplY3QgRE9NRXhjZXB0aW9uXScsZXJyb3JUYWc9J1tvYmplY3QgRXJyb3JdJyxmdW5jVGFnPSdbb2JqZWN0IEZ1bmN0aW9uXScsZ2VuVGFnPSdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsbWFwVGFnPSdbb2JqZWN0IE1hcF0nLG51bWJlclRhZz0nW29iamVjdCBOdW1iZXJdJyxudWxsVGFnPSdbb2JqZWN0IE51bGxdJyxvYmplY3RUYWc9J1tvYmplY3QgT2JqZWN0XScscHJveHlUYWc9J1tvYmplY3QgUHJveHldJyxyZWdleHBUYWc9J1tvYmplY3QgUmVnRXhwXScsc2V0VGFnPSdbb2JqZWN0IFNldF0nLHN0cmluZ1RhZz0nW29iamVjdCBTdHJpbmddJyxzeW1ib2xUYWc9J1tvYmplY3QgU3ltYm9sXScsdW5kZWZpbmVkVGFnPSdbb2JqZWN0IFVuZGVmaW5lZF0nLHdlYWtNYXBUYWc9J1tvYmplY3QgV2Vha01hcF0nO3ZhciBhcnJheUJ1ZmZlclRhZz0nW29iamVjdCBBcnJheUJ1ZmZlcl0nLGRhdGFWaWV3VGFnPSdbb2JqZWN0IERhdGFWaWV3XScsZmxvYXQzMlRhZz0nW29iamVjdCBGbG9hdDMyQXJyYXldJyxmbG9hdDY0VGFnPSdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLGludDhUYWc9J1tvYmplY3QgSW50OEFycmF5XScsaW50MTZUYWc9J1tvYmplY3QgSW50MTZBcnJheV0nLGludDMyVGFnPSdbb2JqZWN0IEludDMyQXJyYXldJyx1aW50OFRhZz0nW29iamVjdCBVaW50OEFycmF5XScsdWludDhDbGFtcGVkVGFnPSdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsdWludDE2VGFnPSdbb2JqZWN0IFVpbnQxNkFycmF5XScsdWludDMyVGFnPSdbb2JqZWN0IFVpbnQzMkFycmF5XSc7LyoqIFVzZWQgdG8gbWF0Y2ggZW1wdHkgc3RyaW5nIGxpdGVyYWxzIGluIGNvbXBpbGVkIHRlbXBsYXRlIHNvdXJjZS4gKi92YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmc9L1xcYl9fcCBcXCs9ICcnOy9nLHJlRW1wdHlTdHJpbmdNaWRkbGU9L1xcYihfX3AgXFwrPSkgJycgXFwrL2cscmVFbXB0eVN0cmluZ1RyYWlsaW5nPS8oX19lXFwoLio/XFwpfFxcYl9fdFxcKSkgXFwrXFxuJyc7L2c7LyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAgICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gICAqL3ZhciByZVJlZ0V4cENoYXI9L1tcXFxcXiQuKis/KClbXFxde318XS9nOy8qKlxuICAgKiBVc2VkIHRvIG1hdGNoXG4gICAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gICAqL3ZhciByZUVzVGVtcGxhdGU9L1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nOy8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi92YXIgcmVJc0hvc3RDdG9yPS9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87LyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL3ZhciByZUlzVWludD0vXig/OjB8WzEtOV1cXGQqKSQvOy8qKiBVc2VkIHRvIGVuc3VyZSBjYXB0dXJpbmcgb3JkZXIgb2YgdGVtcGxhdGUgZGVsaW1pdGVycy4gKi92YXIgcmVOb01hdGNoPS8oJF4pLzsvKiogVXNlZCB0byBtYXRjaCB1bmVzY2FwZWQgY2hhcmFjdGVycyBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuICovdmFyIHJlVW5lc2NhcGVkU3RyaW5nPS9bJ1xcblxcclxcdTIwMjhcXHUyMDI5XFxcXF0vZzsvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovdmFyIHR5cGVkQXJyYXlUYWdzPXt9O3R5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddPXR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddPXR5cGVkQXJyYXlUYWdzW2ludDhUYWddPXR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXT10eXBlZEFycmF5VGFnc1tpbnQzMlRhZ109dHlwZWRBcnJheVRhZ3NbdWludDhUYWddPXR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ109dHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXT10eXBlZEFycmF5VGFnc1t1aW50MzJUYWddPXRydWU7dHlwZWRBcnJheVRhZ3NbYXJnc1RhZ109dHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddPXR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXT10eXBlZEFycmF5VGFnc1tib29sVGFnXT10eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ109dHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ109dHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddPXR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddPXR5cGVkQXJyYXlUYWdzW21hcFRhZ109dHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXT10eXBlZEFycmF5VGFnc1tvYmplY3RUYWddPXR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ109dHlwZWRBcnJheVRhZ3Nbc2V0VGFnXT10eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddPXR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddPWZhbHNlOy8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL3ZhciBzdHJpbmdFc2NhcGVzPXsnXFxcXCc6J1xcXFwnLFwiJ1wiOlwiJ1wiLCdcXG4nOiduJywnXFxyJzoncicsXCJcXHUyMDI4XCI6J3UyMDI4JyxcIlxcdTIwMjlcIjondTIwMjknfTsvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL3ZhciBmcmVlR2xvYmFsPV90eXBlb2YyKGNvbW1vbmpzR2xvYmFsKT09J29iamVjdCcmJmNvbW1vbmpzR2xvYmFsJiZjb21tb25qc0dsb2JhbC5PYmplY3Q9PT1PYmplY3QmJmNvbW1vbmpzR2xvYmFsOy8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovdmFyIGZyZWVTZWxmPSh0eXBlb2Ygc2VsZj09PVwidW5kZWZpbmVkXCI/XCJ1bmRlZmluZWRcIjpfdHlwZW9mMihzZWxmKSk9PSdvYmplY3QnJiZzZWxmJiZzZWxmLk9iamVjdD09PU9iamVjdCYmc2VsZjsvKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi92YXIgcm9vdD1mcmVlR2xvYmFsfHxmcmVlU2VsZnx8RnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTsvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL3ZhciBmcmVlRXhwb3J0cz1leHBvcnRzJiYhZXhwb3J0cy5ub2RlVHlwZSYmZXhwb3J0czsvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovdmFyIGZyZWVNb2R1bGU9ZnJlZUV4cG9ydHMmJidvYmplY3QnPT0nb2JqZWN0JyYmbW9kdWxlJiYhbW9kdWxlLm5vZGVUeXBlJiZtb2R1bGU7LyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi92YXIgbW9kdWxlRXhwb3J0cz1mcmVlTW9kdWxlJiZmcmVlTW9kdWxlLmV4cG9ydHM9PT1mcmVlRXhwb3J0czsvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi92YXIgZnJlZVByb2Nlc3M9bW9kdWxlRXhwb3J0cyYmZnJlZUdsb2JhbC5wcm9jZXNzOy8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL3ZhciBub2RlVXRpbD1mdW5jdGlvbigpe3RyeXsvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbnZhciB0eXBlcz1mcmVlTW9kdWxlJiZmcmVlTW9kdWxlLnJlcXVpcmUmJmZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO2lmKHR5cGVzKXtyZXR1cm4gdHlwZXM7fS8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG5yZXR1cm4gZnJlZVByb2Nlc3MmJmZyZWVQcm9jZXNzLmJpbmRpbmcmJmZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTt9Y2F0Y2goZSl7fX0oKTsvKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL3ZhciBub2RlSXNUeXBlZEFycmF5PW5vZGVVdGlsJiZub2RlVXRpbC5pc1R5cGVkQXJyYXk7LyoqXG4gICAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAgICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gICAqL2Z1bmN0aW9uIGFwcGx5KGZ1bmMsdGhpc0FyZyxhcmdzKXtzd2l0Y2goYXJncy5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO2Nhc2UgMTpyZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsYXJnc1swXSk7Y2FzZSAyOnJldHVybiBmdW5jLmNhbGwodGhpc0FyZyxhcmdzWzBdLGFyZ3NbMV0pO2Nhc2UgMzpyZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsYXJnc1swXSxhcmdzWzFdLGFyZ3NbMl0pO31yZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLGFyZ3MpO30vKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9mdW5jdGlvbiBhcnJheU1hcChhcnJheSxpdGVyYXRlZSl7dmFyIGluZGV4PS0xLGxlbmd0aD1hcnJheT09bnVsbD8wOmFycmF5Lmxlbmd0aCxyZXN1bHQ9QXJyYXkobGVuZ3RoKTt3aGlsZSgrK2luZGV4PGxlbmd0aCl7cmVzdWx0W2luZGV4XT1pdGVyYXRlZShhcnJheVtpbmRleF0saW5kZXgsYXJyYXkpO31yZXR1cm4gcmVzdWx0O30vKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICAgKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgKi9mdW5jdGlvbiBiYXNlVGltZXMobixpdGVyYXRlZSl7dmFyIGluZGV4PS0xLHJlc3VsdD1BcnJheShuKTt3aGlsZSgrK2luZGV4PG4pe3Jlc3VsdFtpbmRleF09aXRlcmF0ZWUoaW5kZXgpO31yZXR1cm4gcmVzdWx0O30vKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICovZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpe3JldHVybiBmdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGZ1bmModmFsdWUpO307fS8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICAgKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAgICogb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICovZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QscHJvcHMpe3JldHVybiBhcnJheU1hcChwcm9wcyxmdW5jdGlvbihrZXkpe3JldHVybiBvYmplY3Rba2V5XTt9KTt9LyoqXG4gICAqIFVzZWQgYnkgYF8udGVtcGxhdGVgIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9mdW5jdGlvbiBlc2NhcGVTdHJpbmdDaGFyKGNocil7cmV0dXJuJ1xcXFwnK3N0cmluZ0VzY2FwZXNbY2hyXTt9LyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICovZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LGtleSl7cmV0dXJuIG9iamVjdD09bnVsbD91bmRlZmluZWQ6b2JqZWN0W2tleV07fS8qKlxuICAgKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgKi9mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsdHJhbnNmb3JtKXtyZXR1cm4gZnVuY3Rpb24oYXJnKXtyZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7fTt9LyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL3ZhciBmdW5jUHJvdG89RnVuY3Rpb24ucHJvdG90eXBlLG9iamVjdFByb3RvPU9iamVjdC5wcm90b3R5cGU7LyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL3ZhciBjb3JlSnNEYXRhPXJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddOy8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi92YXIgZnVuY1RvU3RyaW5nPWZ1bmNQcm90by50b1N0cmluZzsvKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi92YXIgaGFzT3duUHJvcGVydHk9b2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7LyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi92YXIgbWFza1NyY0tleT1mdW5jdGlvbigpe3ZhciB1aWQ9L1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhJiZjb3JlSnNEYXRhLmtleXMmJmNvcmVKc0RhdGEua2V5cy5JRV9QUk9UT3x8JycpO3JldHVybiB1aWQ/J1N5bWJvbChzcmMpXzEuJyt1aWQ6Jyc7fSgpOy8qKlxuICAgKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gICAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICAgKiBvZiB2YWx1ZXMuXG4gICAqL3ZhciBuYXRpdmVPYmplY3RUb1N0cmluZz1vYmplY3RQcm90by50b1N0cmluZzsvKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovdmFyIG9iamVjdEN0b3JTdHJpbmc9ZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTsvKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL3ZhciByZUlzTmF0aXZlPVJlZ0V4cCgnXicrZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCdcXFxcJCYnKS5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCckMS4qPycpKyckJyk7LyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovdmFyIEJ1ZmZlcj1tb2R1bGVFeHBvcnRzP3Jvb3QuQnVmZmVyOnVuZGVmaW5lZCxfU3ltYm9sPXJvb3QuU3ltYm9sLGdldFByb3RvdHlwZT1vdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZixPYmplY3QpLHByb3BlcnR5SXNFbnVtZXJhYmxlPW9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLHN5bVRvU3RyaW5nVGFnPV9TeW1ib2w/X1N5bWJvbC50b1N0cmluZ1RhZzp1bmRlZmluZWQ7dmFyIGRlZmluZVByb3BlcnR5PWZ1bmN0aW9uKCl7dHJ5e3ZhciBmdW5jPWdldE5hdGl2ZShPYmplY3QsJ2RlZmluZVByb3BlcnR5Jyk7ZnVuYyh7fSwnJyx7fSk7cmV0dXJuIGZ1bmM7fWNhdGNoKGUpe319KCk7LyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL3ZhciBuYXRpdmVJc0J1ZmZlcj1CdWZmZXI/QnVmZmVyLmlzQnVmZmVyOnVuZGVmaW5lZCxuYXRpdmVLZXlzPW92ZXJBcmcoT2JqZWN0LmtleXMsT2JqZWN0KSxuYXRpdmVNYXg9TWF0aC5tYXgsbmF0aXZlTm93PURhdGUubm93Oy8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL3ZhciBzeW1ib2xQcm90bz1fU3ltYm9sP19TeW1ib2wucHJvdG90eXBlOnVuZGVmaW5lZCxzeW1ib2xUb1N0cmluZz1zeW1ib2xQcm90bz9zeW1ib2xQcm90by50b1N0cmluZzp1bmRlZmluZWQ7LyoqXG4gICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICovZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSxpbmhlcml0ZWQpe3ZhciBpc0Fycj1pc0FycmF5KHZhbHVlKSxpc0FyZz0haXNBcnImJmlzQXJndW1lbnRzKHZhbHVlKSxpc0J1ZmY9IWlzQXJyJiYhaXNBcmcmJmlzQnVmZmVyKHZhbHVlKSxpc1R5cGU9IWlzQXJyJiYhaXNBcmcmJiFpc0J1ZmYmJmlzVHlwZWRBcnJheSh2YWx1ZSksc2tpcEluZGV4ZXM9aXNBcnJ8fGlzQXJnfHxpc0J1ZmZ8fGlzVHlwZSxyZXN1bHQ9c2tpcEluZGV4ZXM/YmFzZVRpbWVzKHZhbHVlLmxlbmd0aCxTdHJpbmcpOltdLGxlbmd0aD1yZXN1bHQubGVuZ3RoO2Zvcih2YXIga2V5IGluIHZhbHVlKXtpZigoaW5oZXJpdGVkfHxoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLGtleSkpJiYhKHNraXBJbmRleGVzJiYoLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxua2V5PT0nbGVuZ3RoJ3x8Ly8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG5pc0J1ZmYmJihrZXk9PSdvZmZzZXQnfHxrZXk9PSdwYXJlbnQnKXx8Ly8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuaXNUeXBlJiYoa2V5PT0nYnVmZmVyJ3x8a2V5PT0nYnl0ZUxlbmd0aCd8fGtleT09J2J5dGVPZmZzZXQnKXx8Ly8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuaXNJbmRleChrZXksbGVuZ3RoKSkpKXtyZXN1bHQucHVzaChrZXkpO319cmV0dXJuIHJlc3VsdDt9LyoqXG4gICAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgKi9mdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3Qsa2V5LHZhbHVlKXt2YXIgb2JqVmFsdWU9b2JqZWN0W2tleV07aWYoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCxrZXkpJiZlcShvYmpWYWx1ZSx2YWx1ZSkpfHx2YWx1ZT09PXVuZGVmaW5lZCYmIShrZXkgaW4gb2JqZWN0KSl7YmFzZUFzc2lnblZhbHVlKG9iamVjdCxrZXksdmFsdWUpO319LyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gICAqIHZhbHVlIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICovZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCxrZXksdmFsdWUpe2lmKGtleT09J19fcHJvdG9fXycmJmRlZmluZVByb3BlcnR5KXtkZWZpbmVQcm9wZXJ0eShvYmplY3Qsa2V5LHsnY29uZmlndXJhYmxlJzp0cnVlLCdlbnVtZXJhYmxlJzp0cnVlLCd2YWx1ZSc6dmFsdWUsJ3dyaXRhYmxlJzp0cnVlfSk7fWVsc2V7b2JqZWN0W2tleV09dmFsdWU7fX0vKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAqL2Z1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpe2lmKHZhbHVlPT1udWxsKXtyZXR1cm4gdmFsdWU9PT11bmRlZmluZWQ/dW5kZWZpbmVkVGFnOm51bGxUYWc7fXJldHVybiBzeW1Ub1N0cmluZ1RhZyYmc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKT9nZXRSYXdUYWcodmFsdWUpOm9iamVjdFRvU3RyaW5nKHZhbHVlKTt9LyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICovZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKXtyZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSYmYmFzZUdldFRhZyh2YWx1ZSk9PWFyZ3NUYWc7fS8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKXtpZighaXNPYmplY3QodmFsdWUpfHxpc01hc2tlZCh2YWx1ZSkpe3JldHVybiBmYWxzZTt9dmFyIHBhdHRlcm49aXNGdW5jdGlvbih2YWx1ZSk/cmVJc05hdGl2ZTpyZUlzSG9zdEN0b3I7cmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO30vKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICovZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSl7cmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkmJmlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkmJiEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO30vKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAqL2Z1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCl7aWYoIWlzUHJvdG90eXBlKG9iamVjdCkpe3JldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7fXZhciByZXN1bHQ9W107Zm9yKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpe2lmKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LGtleSkmJmtleSE9J2NvbnN0cnVjdG9yJyl7cmVzdWx0LnB1c2goa2V5KTt9fXJldHVybiByZXN1bHQ7fS8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgKi9mdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCl7aWYoIWlzT2JqZWN0KG9iamVjdCkpe3JldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTt9dmFyIGlzUHJvdG89aXNQcm90b3R5cGUob2JqZWN0KSxyZXN1bHQ9W107Zm9yKHZhciBrZXkgaW4gb2JqZWN0KXtpZighKGtleT09J2NvbnN0cnVjdG9yJyYmKGlzUHJvdG98fCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCxrZXkpKSkpe3Jlc3VsdC5wdXNoKGtleSk7fX1yZXR1cm4gcmVzdWx0O30vKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgKi9mdW5jdGlvbiBiYXNlUmVzdChmdW5jLHN0YXJ0KXtyZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYyxzdGFydCxpZGVudGl0eSksZnVuYysnJyk7fS8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICovdmFyIGJhc2VTZXRUb1N0cmluZz0hZGVmaW5lUHJvcGVydHk/aWRlbnRpdHk6ZnVuY3Rpb24oZnVuYyxzdHJpbmcpe3JldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCd0b1N0cmluZycseydjb25maWd1cmFibGUnOnRydWUsJ2VudW1lcmFibGUnOmZhbHNlLCd2YWx1ZSc6Y29uc3RhbnQoc3RyaW5nKSwnd3JpdGFibGUnOnRydWV9KTt9Oy8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAgICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAgICovZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKXsvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuaWYodHlwZW9mIHZhbHVlPT0nc3RyaW5nJyl7cmV0dXJuIHZhbHVlO31pZihpc0FycmF5KHZhbHVlKSl7Ly8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbnJldHVybiBhcnJheU1hcCh2YWx1ZSxiYXNlVG9TdHJpbmcpKycnO31pZihpc1N5bWJvbCh2YWx1ZSkpe3JldHVybiBzeW1ib2xUb1N0cmluZz9zeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKTonJzt9dmFyIHJlc3VsdD12YWx1ZSsnJztyZXR1cm4gcmVzdWx0PT0nMCcmJjEvdmFsdWU9PS1JTkZJTklUWT8nLTAnOnJlc3VsdDt9LyoqXG4gICAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAqL2Z1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLHByb3BzLG9iamVjdCxjdXN0b21pemVyKXt2YXIgaXNOZXc9IW9iamVjdDtvYmplY3R8fChvYmplY3Q9e30pO3ZhciBpbmRleD0tMSxsZW5ndGg9cHJvcHMubGVuZ3RoO3doaWxlKCsraW5kZXg8bGVuZ3RoKXt2YXIga2V5PXByb3BzW2luZGV4XTt2YXIgbmV3VmFsdWU9Y3VzdG9taXplcj9jdXN0b21pemVyKG9iamVjdFtrZXldLHNvdXJjZVtrZXldLGtleSxvYmplY3Qsc291cmNlKTp1bmRlZmluZWQ7aWYobmV3VmFsdWU9PT11bmRlZmluZWQpe25ld1ZhbHVlPXNvdXJjZVtrZXldO31pZihpc05ldyl7YmFzZUFzc2lnblZhbHVlKG9iamVjdCxrZXksbmV3VmFsdWUpO31lbHNle2Fzc2lnblZhbHVlKG9iamVjdCxrZXksbmV3VmFsdWUpO319cmV0dXJuIG9iamVjdDt9LyoqXG4gICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAgICovZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpe3JldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3Qsc291cmNlcyl7dmFyIGluZGV4PS0xLGxlbmd0aD1zb3VyY2VzLmxlbmd0aCxjdXN0b21pemVyPWxlbmd0aD4xP3NvdXJjZXNbbGVuZ3RoLTFdOnVuZGVmaW5lZCxndWFyZD1sZW5ndGg+Mj9zb3VyY2VzWzJdOnVuZGVmaW5lZDtjdXN0b21pemVyPWFzc2lnbmVyLmxlbmd0aD4zJiZ0eXBlb2YgY3VzdG9taXplcj09J2Z1bmN0aW9uJz8obGVuZ3RoLS0sY3VzdG9taXplcik6dW5kZWZpbmVkO2lmKGd1YXJkJiZpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLHNvdXJjZXNbMV0sZ3VhcmQpKXtjdXN0b21pemVyPWxlbmd0aDwzP3VuZGVmaW5lZDpjdXN0b21pemVyO2xlbmd0aD0xO31vYmplY3Q9T2JqZWN0KG9iamVjdCk7d2hpbGUoKytpbmRleDxsZW5ndGgpe3ZhciBzb3VyY2U9c291cmNlc1tpbmRleF07aWYoc291cmNlKXthc3NpZ25lcihvYmplY3Qsc291cmNlLGluZGV4LGN1c3RvbWl6ZXIpO319cmV0dXJuIG9iamVjdDt9KTt9LyoqXG4gICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uYXNzaWduSW5gIHVzZSB0byBhc3NpZ24gcHJvcGVydGllc1xuICAgKiBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllc1xuICAgKiB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAqL2Z1bmN0aW9uIGN1c3RvbURlZmF1bHRzQXNzaWduSW4ob2JqVmFsdWUsc3JjVmFsdWUsa2V5LG9iamVjdCl7aWYob2JqVmFsdWU9PT11bmRlZmluZWR8fGVxKG9ialZhbHVlLG9iamVjdFByb3RvW2tleV0pJiYhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3Qsa2V5KSl7cmV0dXJuIHNyY1ZhbHVlO31yZXR1cm4gb2JqVmFsdWU7fS8qKlxuICAgKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL2Z1bmN0aW9uIGdldE5hdGl2ZShvYmplY3Qsa2V5KXt2YXIgdmFsdWU9Z2V0VmFsdWUob2JqZWN0LGtleSk7cmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSk/dmFsdWU6dW5kZWZpbmVkO30vKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICAgKi9mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpe3ZhciBpc093bj1oYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLHN5bVRvU3RyaW5nVGFnKSx0YWc9dmFsdWVbc3ltVG9TdHJpbmdUYWddO3RyeXt2YWx1ZVtzeW1Ub1N0cmluZ1RhZ109dW5kZWZpbmVkO3ZhciB1bm1hc2tlZD10cnVlO31jYXRjaChlKXt9dmFyIHJlc3VsdD1uYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtpZih1bm1hc2tlZCl7aWYoaXNPd24pe3ZhbHVlW3N5bVRvU3RyaW5nVGFnXT10YWc7fWVsc2V7ZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTt9fXJldHVybiByZXN1bHQ7fS8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAgICovZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSxsZW5ndGgpe3ZhciB0eXBlPV90eXBlb2YyKHZhbHVlKTtsZW5ndGg9bGVuZ3RoPT1udWxsP01BWF9TQUZFX0lOVEVHRVI6bGVuZ3RoO3JldHVybiEhbGVuZ3RoJiYodHlwZT09J251bWJlcid8fHR5cGUhPSdzeW1ib2wnJiZyZUlzVWludC50ZXN0KHZhbHVlKSkmJnZhbHVlPi0xJiZ2YWx1ZSUxPT0wJiZ2YWx1ZTxsZW5ndGg7fS8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gICAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9mdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSxpbmRleCxvYmplY3Qpe2lmKCFpc09iamVjdChvYmplY3QpKXtyZXR1cm4gZmFsc2U7fXZhciB0eXBlPV90eXBlb2YyKGluZGV4KTtpZih0eXBlPT0nbnVtYmVyJz9pc0FycmF5TGlrZShvYmplY3QpJiZpc0luZGV4KGluZGV4LG9iamVjdC5sZW5ndGgpOnR5cGU9PSdzdHJpbmcnJiZpbmRleCBpbiBvYmplY3Qpe3JldHVybiBlcShvYmplY3RbaW5kZXhdLHZhbHVlKTt9cmV0dXJuIGZhbHNlO30vKipcbiAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9mdW5jdGlvbiBpc01hc2tlZChmdW5jKXtyZXR1cm4hIW1hc2tTcmNLZXkmJm1hc2tTcmNLZXkgaW4gZnVuYzt9LyoqXG4gICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICAgKi9mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSl7dmFyIEN0b3I9dmFsdWUmJnZhbHVlLmNvbnN0cnVjdG9yLHByb3RvPXR5cGVvZiBDdG9yPT0nZnVuY3Rpb24nJiZDdG9yLnByb3RvdHlwZXx8b2JqZWN0UHJvdG87cmV0dXJuIHZhbHVlPT09cHJvdG87fS8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAgICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAqL2Z1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3Qpe3ZhciByZXN1bHQ9W107aWYob2JqZWN0IT1udWxsKXtmb3IodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSl7cmVzdWx0LnB1c2goa2V5KTt9fXJldHVybiByZXN1bHQ7fS8qKlxuICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICovZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpe3JldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTt9LyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL2Z1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsc3RhcnQsdHJhbnNmb3JtKXtzdGFydD1uYXRpdmVNYXgoc3RhcnQ9PT11bmRlZmluZWQ/ZnVuYy5sZW5ndGgtMTpzdGFydCwwKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYXJncz1hcmd1bWVudHMsaW5kZXg9LTEsbGVuZ3RoPW5hdGl2ZU1heChhcmdzLmxlbmd0aC1zdGFydCwwKSxhcnJheT1BcnJheShsZW5ndGgpO3doaWxlKCsraW5kZXg8bGVuZ3RoKXthcnJheVtpbmRleF09YXJnc1tzdGFydCtpbmRleF07fWluZGV4PS0xO3ZhciBvdGhlckFyZ3M9QXJyYXkoc3RhcnQrMSk7d2hpbGUoKytpbmRleDxzdGFydCl7b3RoZXJBcmdzW2luZGV4XT1hcmdzW2luZGV4XTt9b3RoZXJBcmdzW3N0YXJ0XT10cmFuc2Zvcm0oYXJyYXkpO3JldHVybiBhcHBseShmdW5jLHRoaXMsb3RoZXJBcmdzKTt9O30vKipcbiAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgKi92YXIgc2V0VG9TdHJpbmc9c2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTsvKipcbiAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gICAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICAgKiBtaWxsaXNlY29uZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gICAqL2Z1bmN0aW9uIHNob3J0T3V0KGZ1bmMpe3ZhciBjb3VudD0wLGxhc3RDYWxsZWQ9MDtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgc3RhbXA9bmF0aXZlTm93KCkscmVtYWluaW5nPUhPVF9TUEFOLShzdGFtcC1sYXN0Q2FsbGVkKTtsYXN0Q2FsbGVkPXN0YW1wO2lmKHJlbWFpbmluZz4wKXtpZigrK2NvdW50Pj1IT1RfQ09VTlQpe3JldHVybiBhcmd1bWVudHNbMF07fX1lbHNle2NvdW50PTA7fXJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCxhcmd1bWVudHMpO307fS8qKlxuICAgKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAgICovZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYyl7aWYoZnVuYyE9bnVsbCl7dHJ5e3JldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTt9Y2F0Y2goZSl7fXRyeXtyZXR1cm4gZnVuYysnJzt9Y2F0Y2goZSl7fX1yZXR1cm4nJzt9LyoqXG4gICAqIFBlcmZvcm1zIGFcbiAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDQuMC4wXG4gICAqIEBjYXRlZ29yeSBMYW5nXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICAgKlxuICAgKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBfLmVxKCdhJywgJ2EnKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBfLmVxKE5hTiwgTmFOKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKi9mdW5jdGlvbiBlcSh2YWx1ZSxvdGhlcil7cmV0dXJuIHZhbHVlPT09b3RoZXJ8fHZhbHVlIT09dmFsdWUmJm90aGVyIT09b3RoZXI7fS8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSAwLjEuMFxuICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICovdmFyIGlzQXJndW1lbnRzPWJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHM7fSgpKT9iYXNlSXNBcmd1bWVudHM6ZnVuY3Rpb24odmFsdWUpe3JldHVybiBpc09iamVjdExpa2UodmFsdWUpJiZoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCdjYWxsZWUnKSYmIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsJ2NhbGxlZScpO307LyoqXG4gICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDAuMS4wXG4gICAqIEBjYXRlZ29yeSBMYW5nXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIF8uaXNBcnJheSgnYWJjJyk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIF8uaXNBcnJheShfLm5vb3ApO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKi92YXIgaXNBcnJheT1BcnJheS5pc0FycmF5Oy8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gICAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAgICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgNC4wLjBcbiAgICogQGNhdGVnb3J5IExhbmdcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKi9mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSl7cmV0dXJuIHZhbHVlIT1udWxsJiZpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpJiYhaXNGdW5jdGlvbih2YWx1ZSk7fS8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgNC4zLjBcbiAgICogQGNhdGVnb3J5IExhbmdcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqL3ZhciBpc0J1ZmZlcj1uYXRpdmVJc0J1ZmZlcnx8c3R1YkZhbHNlOy8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICAgKiBgU3ludGF4RXJyb3JgLCBgVHlwZUVycm9yYCwgb3IgYFVSSUVycm9yYCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDMuMC4wXG4gICAqIEBjYXRlZ29yeSBMYW5nXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBlcnJvciBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5pc0Vycm9yKG5ldyBFcnJvcik7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogXy5pc0Vycm9yKEVycm9yKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICovZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSl7aWYoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpe3JldHVybiBmYWxzZTt9dmFyIHRhZz1iYXNlR2V0VGFnKHZhbHVlKTtyZXR1cm4gdGFnPT1lcnJvclRhZ3x8dGFnPT1kb21FeGNUYWd8fHR5cGVvZiB2YWx1ZS5tZXNzYWdlPT0nc3RyaW5nJyYmdHlwZW9mIHZhbHVlLm5hbWU9PSdzdHJpbmcnJiYhaXNQbGFpbk9iamVjdCh2YWx1ZSk7fS8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDAuMS4wXG4gICAqIEBjYXRlZ29yeSBMYW5nXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8uaXNGdW5jdGlvbihfKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKi9mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKXtpZighaXNPYmplY3QodmFsdWUpKXtyZXR1cm4gZmFsc2U7fS8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG52YXIgdGFnPWJhc2VHZXRUYWcodmFsdWUpO3JldHVybiB0YWc9PWZ1bmNUYWd8fHRhZz09Z2VuVGFnfHx0YWc9PWFzeW5jVGFnfHx0YWc9PXByb3h5VGFnO30vKipcbiAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAgICpcbiAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgNC4wLjBcbiAgICogQGNhdGVnb3J5IExhbmdcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8uaXNMZW5ndGgoMyk7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICpcbiAgICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIF8uaXNMZW5ndGgoJzMnKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICovZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpe3JldHVybiB0eXBlb2YgdmFsdWU9PSdudW1iZXInJiZ2YWx1ZT4tMSYmdmFsdWUlMT09MCYmdmFsdWU8PU1BWF9TQUZFX0lOVEVHRVI7fS8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAgICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICAgKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDAuMS4wXG4gICAqIEBjYXRlZ29yeSBMYW5nXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5pc09iamVjdCh7fSk7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBfLmlzT2JqZWN0KG51bGwpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKi9mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSl7dmFyIHR5cGU9X3R5cGVvZjIodmFsdWUpO3JldHVybiB2YWx1ZSE9bnVsbCYmKHR5cGU9PSdvYmplY3QnfHx0eXBlPT0nZnVuY3Rpb24nKTt9LyoqXG4gICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDQuMC4wXG4gICAqIEBjYXRlZ29yeSBMYW5nXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICovZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKXtyZXR1cm4gdmFsdWUhPW51bGwmJl90eXBlb2YyKHZhbHVlKT09J29iamVjdCc7fS8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gICAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgMC44LjBcbiAgICogQGNhdGVnb3J5IExhbmdcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICogICB0aGlzLmEgPSAxO1xuICAgKiB9XG4gICAqXG4gICAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICpcbiAgICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKi9mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKXtpZighaXNPYmplY3RMaWtlKHZhbHVlKXx8YmFzZUdldFRhZyh2YWx1ZSkhPW9iamVjdFRhZyl7cmV0dXJuIGZhbHNlO312YXIgcHJvdG89Z2V0UHJvdG90eXBlKHZhbHVlKTtpZihwcm90bz09PW51bGwpe3JldHVybiB0cnVlO312YXIgQ3Rvcj1oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCdjb25zdHJ1Y3RvcicpJiZwcm90by5jb25zdHJ1Y3RvcjtyZXR1cm4gdHlwZW9mIEN0b3I9PSdmdW5jdGlvbicmJkN0b3IgaW5zdGFuY2VvZiBDdG9yJiZmdW5jVG9TdHJpbmcuY2FsbChDdG9yKT09b2JqZWN0Q3RvclN0cmluZzt9LyoqXG4gICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSA0LjAuMFxuICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKi9mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSl7cmV0dXJuIF90eXBlb2YyKHZhbHVlKT09J3N5bWJvbCd8fGlzT2JqZWN0TGlrZSh2YWx1ZSkmJmJhc2VHZXRUYWcodmFsdWUpPT1zeW1ib2xUYWc7fS8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDMuMC4wXG4gICAqIEBjYXRlZ29yeSBMYW5nXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqL3ZhciBpc1R5cGVkQXJyYXk9bm9kZUlzVHlwZWRBcnJheT9iYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSk6YmFzZUlzVHlwZWRBcnJheTsvKipcbiAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAgICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDQuMC4wXG4gICAqIEBjYXRlZ29yeSBMYW5nXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8udG9TdHJpbmcobnVsbCk7XG4gICAqIC8vID0+ICcnXG4gICAqXG4gICAqIF8udG9TdHJpbmcoLTApO1xuICAgKiAvLyA9PiAnLTAnXG4gICAqXG4gICAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAgICogLy8gPT4gJzEsMiwzJ1xuICAgKi9mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSl7cmV0dXJuIHZhbHVlPT1udWxsPycnOmJhc2VUb1N0cmluZyh2YWx1ZSk7fS8qKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbkluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICpcbiAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDQuMC4wXG4gICAqIEBhbGlhcyBleHRlbmRXaXRoXG4gICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICogQHNlZSBfLmFzc2lnbldpdGhcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgKiB9XG4gICAqXG4gICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduSW5XaXRoLCBjdXN0b21pemVyKTtcbiAgICpcbiAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgKi92YXIgYXNzaWduSW5XaXRoPWNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCxzb3VyY2Usc3JjSW5kZXgsY3VzdG9taXplcil7Y29weU9iamVjdChzb3VyY2Usa2V5c0luKHNvdXJjZSksb2JqZWN0LGN1c3RvbWl6ZXIpO30pOy8qKlxuICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICpcbiAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAgICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBzaW5jZSAwLjEuMFxuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgKiAgIHRoaXMuYSA9IDE7XG4gICAqICAgdGhpcy5iID0gMjtcbiAgICogfVxuICAgKlxuICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgKlxuICAgKiBfLmtleXMobmV3IEZvbyk7XG4gICAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICpcbiAgICogXy5rZXlzKCdoaScpO1xuICAgKiAvLyA9PiBbJzAnLCAnMSddXG4gICAqL2Z1bmN0aW9uIGtleXMob2JqZWN0KXtyZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KT9hcnJheUxpa2VLZXlzKG9iamVjdCk6YmFzZUtleXMob2JqZWN0KTt9LyoqXG4gICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAqXG4gICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSAzLjAuMFxuICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgKiAgIHRoaXMuYSA9IDE7XG4gICAqICAgdGhpcy5iID0gMjtcbiAgICogfVxuICAgKlxuICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgKlxuICAgKiBfLmtleXNJbihuZXcgRm9vKTtcbiAgICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAqL2Z1bmN0aW9uIGtleXNJbihvYmplY3Qpe3JldHVybiBpc0FycmF5TGlrZShvYmplY3QpP2FycmF5TGlrZUtleXMob2JqZWN0LHRydWUpOmJhc2VLZXlzSW4ob2JqZWN0KTt9LyoqXG4gICAqIENyZWF0ZXMgYSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB0aGF0IGNhbiBpbnRlcnBvbGF0ZSBkYXRhIHByb3BlcnRpZXNcbiAgICogaW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlcnMsIEhUTUwtZXNjYXBlIGludGVycG9sYXRlZCBkYXRhIHByb3BlcnRpZXMgaW5cbiAgICogXCJlc2NhcGVcIiBkZWxpbWl0ZXJzLCBhbmQgZXhlY3V0ZSBKYXZhU2NyaXB0IGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLiBEYXRhXG4gICAqIHByb3BlcnRpZXMgbWF5IGJlIGFjY2Vzc2VkIGFzIGZyZWUgdmFyaWFibGVzIGluIHRoZSB0ZW1wbGF0ZS4gSWYgYSBzZXR0aW5nXG4gICAqIG9iamVjdCBpcyBnaXZlbiwgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGBfLnRlbXBsYXRlU2V0dGluZ3NgIHZhbHVlcy5cbiAgICpcbiAgICogKipOb3RlOioqIEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXNcbiAgICogW3NvdXJjZVVSTHNdKGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmwpXG4gICAqIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgKlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBwcmVjb21waWxpbmcgdGVtcGxhdGVzIHNlZVxuICAgKiBbbG9kYXNoJ3MgY3VzdG9tIGJ1aWxkcyBkb2N1bWVudGF0aW9uXShodHRwczovL2xvZGFzaC5jb20vY3VzdG9tLWJ1aWxkcykuXG4gICAqXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIENocm9tZSBleHRlbnNpb24gc2FuZGJveGVzIHNlZVxuICAgKiBbQ2hyb21lJ3MgZXh0ZW5zaW9ucyBkb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2V4dGVuc2lvbnMvc2FuZGJveGluZ0V2YWwpLlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBzaW5jZSAwLjEuMFxuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgdGVtcGxhdGUgc3RyaW5nLlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmVzY2FwZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXNjYXBlXVxuICAgKiAgVGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIuXG4gICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5ldmFsdWF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXZhbHVhdGVdXG4gICAqICBUaGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlci5cbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmltcG9ydHM9Xy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNdXG4gICAqICBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGZyZWUgdmFyaWFibGVzLlxuICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuaW50ZXJwb2xhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlXVxuICAgKiAgVGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zb3VyY2VVUkw9J3RlbXBsYXRlU291cmNlc1tuXSddXG4gICAqICBUaGUgc291cmNlVVJMIG9mIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhcmlhYmxlPSdvYmonXVxuICAgKiAgVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuXG4gICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIC8vIFVzZSB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJyk7XG4gICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnZnJlZCcgfSk7XG4gICAqIC8vID0+ICdoZWxsbyBmcmVkISdcbiAgICpcbiAgICogLy8gVXNlIHRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyIHRvIGVzY2FwZSBkYXRhIHByb3BlcnR5IHZhbHVlcy5cbiAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPGI+PCUtIHZhbHVlICU+PC9iPicpO1xuICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICc8c2NyaXB0PicgfSk7XG4gICAqIC8vID0+ICc8Yj4mbHQ7c2NyaXB0Jmd0OzwvYj4nXG4gICAqXG4gICAqIC8vIFVzZSB0aGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlciB0byBleGVjdXRlIEphdmFTY3JpcHQgYW5kIGdlbmVyYXRlIEhUTUwuXG4gICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIF8uZm9yRWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+Jyk7XG4gICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICpcbiAgICogLy8gVXNlIHRoZSBpbnRlcm5hbCBgcHJpbnRgIGZ1bmN0aW9uIGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLlxuICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBwcmludChcImhlbGxvIFwiICsgdXNlcik7ICU+IScpO1xuICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2Jhcm5leScgfSk7XG4gICAqIC8vID0+ICdoZWxsbyBiYXJuZXkhJ1xuICAgKlxuICAgKiAvLyBVc2UgdGhlIEVTIHRlbXBsYXRlIGxpdGVyYWwgZGVsaW1pdGVyIGFzIGFuIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAqIC8vIERpc2FibGUgc3VwcG9ydCBieSByZXBsYWNpbmcgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvICR7IHVzZXIgfSEnKTtcbiAgICogY29tcGlsZWQoeyAndXNlcic6ICdwZWJibGVzJyB9KTtcbiAgICogLy8gPT4gJ2hlbGxvIHBlYmJsZXMhJ1xuICAgKlxuICAgKiAvLyBVc2UgYmFja3NsYXNoZXMgdG8gdHJlYXQgZGVsaW1pdGVycyBhcyBwbGFpbiB0ZXh0LlxuICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JT0gXCJcXFxcPCUtIHZhbHVlICVcXFxcPlwiICU+Jyk7XG4gICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJ2lnbm9yZWQnIH0pO1xuICAgKiAvLyA9PiAnPCUtIHZhbHVlICU+J1xuICAgKlxuICAgKiAvLyBVc2UgdGhlIGBpbXBvcnRzYCBvcHRpb24gdG8gaW1wb3J0IGBqUXVlcnlgIGFzIGBqcWAuXG4gICAqIHZhciB0ZXh0ID0gJzwlIGpxLmVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPic7XG4gICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUodGV4dCwgeyAnaW1wb3J0cyc6IHsgJ2pxJzogalF1ZXJ5IH0gfSk7XG4gICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICpcbiAgICogLy8gVXNlIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZS5cbiAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJywgeyAnc291cmNlVVJMJzogJy9iYXNpYy9ncmVldGluZy5qc3QnIH0pO1xuICAgKiBjb21waWxlZChkYXRhKTtcbiAgICogLy8gPT4gRmluZCB0aGUgc291cmNlIG9mIFwiZ3JlZXRpbmcuanN0XCIgdW5kZXIgdGhlIFNvdXJjZXMgdGFiIG9yIFJlc291cmNlcyBwYW5lbCBvZiB0aGUgd2ViIGluc3BlY3Rvci5cbiAgICpcbiAgICogLy8gVXNlIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGkgPCU9IGRhdGEudXNlciAlPiEnLCB7ICd2YXJpYWJsZSc6ICdkYXRhJyB9KTtcbiAgICogY29tcGlsZWQuc291cmNlO1xuICAgKiAvLyA9PiBmdW5jdGlvbihkYXRhKSB7XG4gICAqIC8vICAgdmFyIF9fdCwgX19wID0gJyc7XG4gICAqIC8vICAgX19wICs9ICdoaSAnICsgKChfX3QgPSAoIGRhdGEudXNlciApKSA9PSBudWxsID8gJycgOiBfX3QpICsgJyEnO1xuICAgKiAvLyAgIHJldHVybiBfX3A7XG4gICAqIC8vIH1cbiAgICpcbiAgICogLy8gVXNlIGN1c3RvbSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLlxuICAgKiBfLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGUgPSAve3soW1xcc1xcU10rPyl9fS9nO1xuICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyB7eyB1c2VyIH19IScpO1xuICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ211c3RhY2hlJyB9KTtcbiAgICogLy8gPT4gJ2hlbGxvIG11c3RhY2hlISdcbiAgICpcbiAgICogLy8gVXNlIHRoZSBgc291cmNlYCBwcm9wZXJ0eSB0byBpbmxpbmUgY29tcGlsZWQgdGVtcGxhdGVzIGZvciBtZWFuaW5nZnVsXG4gICAqIC8vIGxpbmUgbnVtYmVycyBpbiBlcnJvciBtZXNzYWdlcyBhbmQgc3RhY2sgdHJhY2VzLlxuICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnanN0LmpzJyksICdcXFxuICAgKiAgIHZhciBKU1QgPSB7XFxcbiAgICogICAgIFwibWFpblwiOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1xcXG4gICAqICAgfTtcXFxuICAgKiAnKTtcbiAgICovZnVuY3Rpb24gdGVtcGxhdGUoc3RyaW5nLG9wdGlvbnMsZ3VhcmQpey8vIEJhc2VkIG9uIEpvaG4gUmVzaWcncyBgdG1wbGAgaW1wbGVtZW50YXRpb25cbi8vIChodHRwOi8vZWpvaG4ub3JnL2Jsb2cvamF2YXNjcmlwdC1taWNyby10ZW1wbGF0aW5nLylcbi8vIGFuZCBMYXVyYSBEb2t0b3JvdmEncyBkb1QuanMgKGh0dHBzOi8vZ2l0aHViLmNvbS9vbGFkby9kb1QpLlxudmFyIHNldHRpbmdzPWxvZGFzaF90ZW1wbGF0ZXNldHRpbmdzLmltcG9ydHMuXy50ZW1wbGF0ZVNldHRpbmdzfHxsb2Rhc2hfdGVtcGxhdGVzZXR0aW5ncztpZihndWFyZCYmaXNJdGVyYXRlZUNhbGwoc3RyaW5nLG9wdGlvbnMsZ3VhcmQpKXtvcHRpb25zPXVuZGVmaW5lZDt9c3RyaW5nPXRvU3RyaW5nKHN0cmluZyk7b3B0aW9ucz1hc3NpZ25JbldpdGgoe30sb3B0aW9ucyxzZXR0aW5ncyxjdXN0b21EZWZhdWx0c0Fzc2lnbkluKTt2YXIgaW1wb3J0cz1hc3NpZ25JbldpdGgoe30sb3B0aW9ucy5pbXBvcnRzLHNldHRpbmdzLmltcG9ydHMsY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiksaW1wb3J0c0tleXM9a2V5cyhpbXBvcnRzKSxpbXBvcnRzVmFsdWVzPWJhc2VWYWx1ZXMoaW1wb3J0cyxpbXBvcnRzS2V5cyk7dmFyIGlzRXNjYXBpbmcsaXNFdmFsdWF0aW5nLGluZGV4PTAsaW50ZXJwb2xhdGU9b3B0aW9ucy5pbnRlcnBvbGF0ZXx8cmVOb01hdGNoLHNvdXJjZT1cIl9fcCArPSAnXCI7Ly8gQ29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyLlxudmFyIHJlRGVsaW1pdGVycz1SZWdFeHAoKG9wdGlvbnMuZXNjYXBlfHxyZU5vTWF0Y2gpLnNvdXJjZSsnfCcraW50ZXJwb2xhdGUuc291cmNlKyd8JysoaW50ZXJwb2xhdGU9PT1sb2Rhc2hfX3JlaW50ZXJwb2xhdGU/cmVFc1RlbXBsYXRlOnJlTm9NYXRjaCkuc291cmNlKyd8Jysob3B0aW9ucy5ldmFsdWF0ZXx8cmVOb01hdGNoKS5zb3VyY2UrJ3wkJywnZycpOy8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbi8vIFRoZSBzb3VyY2VVUkwgZ2V0cyBpbmplY3RlZCBpbnRvIHRoZSBzb3VyY2UgdGhhdCdzIGV2YWwtZWQsIHNvIGJlIGNhcmVmdWxcbi8vIHdpdGggbG9va3VwIChpbiBjYXNlIG9mIGUuZy4gcHJvdG90eXBlIHBvbGx1dGlvbiksIGFuZCBzdHJpcCBuZXdsaW5lcyBpZiBhbnkuXG4vLyBBIG5ld2xpbmUgd291bGRuJ3QgYmUgYSB2YWxpZCBzb3VyY2VVUkwgYW55d2F5LCBhbmQgaXQnZCBlbmFibGUgY29kZSBpbmplY3Rpb24uXG52YXIgc291cmNlVVJMPWhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywnc291cmNlVVJMJyk/Jy8vIyBzb3VyY2VVUkw9Jysob3B0aW9ucy5zb3VyY2VVUkwrJycpLnJlcGxhY2UoL1tcXHJcXG5dL2csJyAnKSsnXFxuJzonJztzdHJpbmcucmVwbGFjZShyZURlbGltaXRlcnMsZnVuY3Rpb24obWF0Y2gsZXNjYXBlVmFsdWUsaW50ZXJwb2xhdGVWYWx1ZSxlc1RlbXBsYXRlVmFsdWUsZXZhbHVhdGVWYWx1ZSxvZmZzZXQpe2ludGVycG9sYXRlVmFsdWV8fChpbnRlcnBvbGF0ZVZhbHVlPWVzVGVtcGxhdGVWYWx1ZSk7Ly8gRXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBjYW4ndCBiZSBpbmNsdWRlZCBpbiBzdHJpbmcgbGl0ZXJhbHMuXG5zb3VyY2UrPXN0cmluZy5zbGljZShpbmRleCxvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsZXNjYXBlU3RyaW5nQ2hhcik7Ly8gUmVwbGFjZSBkZWxpbWl0ZXJzIHdpdGggc25pcHBldHMuXG5pZihlc2NhcGVWYWx1ZSl7aXNFc2NhcGluZz10cnVlO3NvdXJjZSs9XCInICtcXG5fX2UoXCIrZXNjYXBlVmFsdWUrXCIpICtcXG4nXCI7fWlmKGV2YWx1YXRlVmFsdWUpe2lzRXZhbHVhdGluZz10cnVlO3NvdXJjZSs9XCInO1xcblwiK2V2YWx1YXRlVmFsdWUrXCI7XFxuX19wICs9ICdcIjt9aWYoaW50ZXJwb2xhdGVWYWx1ZSl7c291cmNlKz1cIicgK1xcbigoX190ID0gKFwiK2ludGVycG9sYXRlVmFsdWUrXCIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcXG4nXCI7fWluZGV4PW9mZnNldCttYXRjaC5sZW5ndGg7Ly8gVGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBwcm9kdWN0cyBuZWVkcyBgbWF0Y2hgIHJldHVybmVkIGluXG4vLyBvcmRlciB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGBvZmZzZXRgIHZhbHVlLlxucmV0dXJuIG1hdGNoO30pO3NvdXJjZSs9XCInO1xcblwiOy8vIElmIGB2YXJpYWJsZWAgaXMgbm90IHNwZWNpZmllZCB3cmFwIGEgd2l0aC1zdGF0ZW1lbnQgYXJvdW5kIHRoZSBnZW5lcmF0ZWRcbi8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpbi5cbi8vIExpa2Ugd2l0aCBzb3VyY2VVUkwsIHdlIHRha2UgY2FyZSB0byBub3QgY2hlY2sgdGhlIG9wdGlvbidzIHByb3RvdHlwZSxcbi8vIGFzIHRoaXMgY29uZmlndXJhdGlvbiBpcyBhIGNvZGUgaW5qZWN0aW9uIHZlY3Rvci5cbnZhciB2YXJpYWJsZT1oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsJ3ZhcmlhYmxlJykmJm9wdGlvbnMudmFyaWFibGU7aWYoIXZhcmlhYmxlKXtzb3VyY2U9J3dpdGggKG9iaikge1xcbicrc291cmNlKydcXG59XFxuJzt9Ly8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuc291cmNlPShpc0V2YWx1YXRpbmc/c291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsJycpOnNvdXJjZSkucmVwbGFjZShyZUVtcHR5U3RyaW5nTWlkZGxlLCckMScpLnJlcGxhY2UocmVFbXB0eVN0cmluZ1RyYWlsaW5nLCckMTsnKTsvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5Llxuc291cmNlPSdmdW5jdGlvbignKyh2YXJpYWJsZXx8J29iaicpKycpIHtcXG4nKyh2YXJpYWJsZT8nJzonb2JqIHx8IChvYmogPSB7fSk7XFxuJykrXCJ2YXIgX190LCBfX3AgPSAnJ1wiKyhpc0VzY2FwaW5nPycsIF9fZSA9IF8uZXNjYXBlJzonJykrKGlzRXZhbHVhdGluZz8nLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG4nK1wiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCI6JztcXG4nKStzb3VyY2UrJ3JldHVybiBfX3BcXG59Jzt2YXIgcmVzdWx0PWF0dGVtcHQoZnVuY3Rpb24oKXtyZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsc291cmNlVVJMKydyZXR1cm4gJytzb3VyY2UpLmFwcGx5KHVuZGVmaW5lZCxpbXBvcnRzVmFsdWVzKTt9KTsvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3Jcbi8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG5yZXN1bHQuc291cmNlPXNvdXJjZTtpZihpc0Vycm9yKHJlc3VsdCkpe3Rocm93IHJlc3VsdDt9cmV0dXJuIHJlc3VsdDt9LyoqXG4gICAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gICAqIG9iamVjdC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDMuMC4wXG4gICAqIEBjYXRlZ29yeSBVdGlsXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGF0dGVtcHQuXG4gICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gICAqIHZhciBlbGVtZW50cyA9IF8uYXR0ZW1wdChmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgKiAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICogfSwgJz5fPicpO1xuICAgKlxuICAgKiBpZiAoXy5pc0Vycm9yKGVsZW1lbnRzKSkge1xuICAgKiAgIGVsZW1lbnRzID0gW107XG4gICAqIH1cbiAgICovdmFyIGF0dGVtcHQ9YmFzZVJlc3QoZnVuY3Rpb24oZnVuYyxhcmdzKXt0cnl7cmV0dXJuIGFwcGx5KGZ1bmMsdW5kZWZpbmVkLGFyZ3MpO31jYXRjaChlKXtyZXR1cm4gaXNFcnJvcihlKT9lOm5ldyBFcnJvcihlKTt9fSk7LyoqXG4gICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgMi40LjBcbiAgICogQGNhdGVnb3J5IFV0aWxcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAgICpcbiAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICAgKlxuICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKi9mdW5jdGlvbiBjb25zdGFudCh2YWx1ZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHZhbHVlO307fS8qKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAc2luY2UgMC4xLjBcbiAgICogQG1lbWJlck9mIF9cbiAgICogQGNhdGVnb3J5IFV0aWxcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgKlxuICAgKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gICAqIC8vID0+IHRydWVcbiAgICovZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpe3JldHVybiB2YWx1ZTt9LyoqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgNC4xMy4wXG4gICAqIEBjYXRlZ29yeSBVdGlsXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICAgKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICAgKi9mdW5jdGlvbiBzdHViRmFsc2UoKXtyZXR1cm4gZmFsc2U7fW1vZHVsZS5leHBvcnRzPXRlbXBsYXRlO30pOy8vIFdlIG5lZWQgYSB2dWUgaW5zdGFuY2UgdG8gaGFuZGxlIHJlYWN0aXZpdHlcbnZhciB2bT1udWxsOy8vIFRoZSBwbHVnaW5cbnZhciBWdWVUcmFuc2xhdGU9ey8vIEluc3RhbGwgdGhlIG1ldGhvZFxuaW5zdGFsbDpmdW5jdGlvbiBpbnN0YWxsKFZ1ZSl7dmFyIF9WdWUkbWl4aW47dmFyIHZlcnNpb249VnVlLnZlcnNpb25bMF07aWYoIXZtKXt2bT1uZXcgVnVlKHtkYXRhOmZ1bmN0aW9uIGRhdGEoKXtyZXR1cm57Y3VycmVudDonJyxsb2NhbGVzOnt9fTt9LGNvbXB1dGVkOnsvLyBDdXJyZW50IHNlbGVjdGVkIGxhbmd1YWdlXG5sYW5nOmZ1bmN0aW9uIGxhbmcoKXtyZXR1cm4gdGhpcy5jdXJyZW50O30sLy8gQ3VycmVudCBsb2NhbGUgdmFsdWVzXG5sb2NhbGU6ZnVuY3Rpb24gbG9jYWxlKCl7aWYoIXRoaXMubG9jYWxlc1t0aGlzLmN1cnJlbnRdKXJldHVybiBudWxsO3JldHVybiB0aGlzLmxvY2FsZXNbdGhpcy5jdXJyZW50XTt9fSxtZXRob2RzOnsvLyBTZXQgYSBsYW5ndWFnZSBhcyBjdXJyZW50XG5zZXRMYW5nOmZ1bmN0aW9uIHNldExhbmcodmFsKXtpZih0aGlzLmN1cnJlbnQhPT12YWwpe2lmKHRoaXMuY3VycmVudD09PScnKXt0aGlzLiRlbWl0KCdsYW5ndWFnZTppbml0Jyx2YWwpO31lbHNle3RoaXMuJGVtaXQoJ2xhbmd1YWdlOmNoYW5nZWQnLHZhbCk7fX10aGlzLmN1cnJlbnQ9dmFsO3RoaXMuJGVtaXQoJ2xhbmd1YWdlOm1vZGlmaWVkJyx2YWwpO30sLy8gU2V0IGEgbG9jYWxlIHR1IHVzZVxuc2V0TG9jYWxlczpmdW5jdGlvbiBzZXRMb2NhbGVzKGxvY2FsZXMpe2lmKCFsb2NhbGVzKXtyZXR1cm47fXZhciBuZXdMb2NhbGU9T2JqZWN0LmNyZWF0ZSh0aGlzLmxvY2FsZXMpO2Zvcih2YXIga2V5IGluIGxvY2FsZXMpe2lmKCFsb2NhbGVzLmhhc093blByb3BlcnR5KGtleSkpe2NvbnRpbnVlO31pZighbmV3TG9jYWxlW2tleV0pe25ld0xvY2FsZVtrZXldPXt9O31WdWUudXRpbC5leHRlbmQobmV3TG9jYWxlW2tleV0sbG9jYWxlc1trZXldKTt9dGhpcy5sb2NhbGVzPU9iamVjdC5jcmVhdGUobmV3TG9jYWxlKTt0aGlzLiRlbWl0KCdsb2NhbGVzOmxvYWRlZCcsbG9jYWxlcyk7fSx0ZXh0OmZ1bmN0aW9uIHRleHQodCxwYXJhbXMpe2lmKHBhcmFtcyl7cmV0dXJuIGxvZGFzaF90ZW1wbGF0ZSh0aGlzLmxvY2FsZVt0XXx8dCx7aW50ZXJwb2xhdGU6L3soW1xcc1xcU10rPyl9L2d9KShwYXJhbXMpO31yZXR1cm4gdGhpcy5sb2NhbGVbdF18fHQ7fX19KTtWdWUucHJvdG90eXBlLiR0cmFuc2xhdGU9dm07fS8vIE1peGluIHRvIHJlYWQgbG9jYWxlcyBhbmQgYWRkIHRoZSB0cmFuc2xhdGlvbiBtZXRob2QgYW5kIGRpcmVjdGl2ZVxuVnVlLm1peGluKChfVnVlJG1peGluPXt9LF9kZWZpbmVQcm9wZXJ0eShfVnVlJG1peGluLHZlcnNpb249PT0nMSc/J2luaXQnOidiZWZvcmVDcmVhdGUnLGZ1bmN0aW9uKCl7dGhpcy4kdHJhbnNsYXRlLnNldExvY2FsZXModGhpcy4kb3B0aW9ucy5sb2NhbGVzKTt9KSxfZGVmaW5lUHJvcGVydHkoX1Z1ZSRtaXhpbixcIm1ldGhvZHNcIix7Ly8gQW4gYWxpYXMgZm9yIHRoZSAuJHRyYW5zbGF0ZS50ZXh0IG1ldGhvZFxudDpmdW5jdGlvbiB0KF90LHApe3JldHVybiB0aGlzLiR0cmFuc2xhdGUudGV4dChfdCxwKTt9fSksX2RlZmluZVByb3BlcnR5KF9WdWUkbWl4aW4sXCJkaXJlY3RpdmVzXCIse3RyYW5zbGF0ZTpmdW5jdGlvbiB0cmFuc2xhdGUoZWwpe2lmKCFlbC4kdHJhbnNsYXRlS2V5KWVsLiR0cmFuc2xhdGVLZXk9ZWwuaW5uZXJUZXh0O3ZhciB0ZXh0PXRoaXMuJHRyYW5zbGF0ZS50ZXh0KGVsLiR0cmFuc2xhdGVLZXkpO2VsLmlubmVyVGV4dD10ZXh0O30uYmluZCh2bSl9KSxfVnVlJG1peGluKSk7Ly8gR2xvYmFsIG1ldGhvZCBmb3IgbG9hZGluZyBsb2NhbGVzXG5WdWUubG9jYWxlcz1mdW5jdGlvbihsb2NhbGVzKXt2bS4kdHJhbnNsYXRlLnNldExvY2FsZXMobG9jYWxlcyk7fTsvLyBHbG9iYWwgbWV0aG9kIGZvciBzZXR0aW5nIGxhbmd1YWdlc1xuVnVlLmxhbmc9ZnVuY3Rpb24obGFuZyl7dm0uJHRyYW5zbGF0ZS5zZXRMYW5nKGxhbmcpO307fX07LyoqXG4gICAqIHZ1ZXggdjMuMS4yXG4gICAqIChjKSAyMDE5IEV2YW4gWW91XG4gICAqIEBsaWNlbnNlIE1JVFxuICAgKi9mdW5jdGlvbiBhcHBseU1peGluKFZ1ZSl7dmFyIHZlcnNpb249TnVtYmVyKFZ1ZS52ZXJzaW9uLnNwbGl0KCcuJylbMF0pO2lmKHZlcnNpb24+PTIpe1Z1ZS5taXhpbih7YmVmb3JlQ3JlYXRlOnZ1ZXhJbml0fSk7fWVsc2V7Ly8gb3ZlcnJpZGUgaW5pdCBhbmQgaW5qZWN0IHZ1ZXggaW5pdCBwcm9jZWR1cmVcbi8vIGZvciAxLnggYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG52YXIgX2luaXQ9VnVlLnByb3RvdHlwZS5faW5pdDtWdWUucHJvdG90eXBlLl9pbml0PWZ1bmN0aW9uKG9wdGlvbnMpe2lmKG9wdGlvbnM9PT12b2lkIDApb3B0aW9ucz17fTtvcHRpb25zLmluaXQ9b3B0aW9ucy5pbml0P1t2dWV4SW5pdF0uY29uY2F0KG9wdGlvbnMuaW5pdCk6dnVleEluaXQ7X2luaXQuY2FsbCh0aGlzLG9wdGlvbnMpO307fS8qKlxuICAgICAqIFZ1ZXggaW5pdCBob29rLCBpbmplY3RlZCBpbnRvIGVhY2ggaW5zdGFuY2VzIGluaXQgaG9va3MgbGlzdC5cbiAgICAgKi9mdW5jdGlvbiB2dWV4SW5pdCgpe3ZhciBvcHRpb25zPXRoaXMuJG9wdGlvbnM7Ly8gc3RvcmUgaW5qZWN0aW9uXG5pZihvcHRpb25zLnN0b3JlKXt0aGlzLiRzdG9yZT10eXBlb2Ygb3B0aW9ucy5zdG9yZT09PSdmdW5jdGlvbic/b3B0aW9ucy5zdG9yZSgpOm9wdGlvbnMuc3RvcmU7fWVsc2UgaWYob3B0aW9ucy5wYXJlbnQmJm9wdGlvbnMucGFyZW50LiRzdG9yZSl7dGhpcy4kc3RvcmU9b3B0aW9ucy5wYXJlbnQuJHN0b3JlO319fXZhciB0YXJnZXQkMj10eXBlb2Ygd2luZG93IT09J3VuZGVmaW5lZCc/d2luZG93OnR5cGVvZiBnbG9iYWwhPT0ndW5kZWZpbmVkJz9nbG9iYWw6e307dmFyIGRldnRvb2xIb29rPXRhcmdldCQyLl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187ZnVuY3Rpb24gZGV2dG9vbFBsdWdpbihzdG9yZSl7aWYoIWRldnRvb2xIb29rKXtyZXR1cm47fXN0b3JlLl9kZXZ0b29sSG9vaz1kZXZ0b29sSG9vaztkZXZ0b29sSG9vay5lbWl0KCd2dWV4OmluaXQnLHN0b3JlKTtkZXZ0b29sSG9vay5vbigndnVleDp0cmF2ZWwtdG8tc3RhdGUnLGZ1bmN0aW9uKHRhcmdldFN0YXRlKXtzdG9yZS5yZXBsYWNlU3RhdGUodGFyZ2V0U3RhdGUpO30pO3N0b3JlLnN1YnNjcmliZShmdW5jdGlvbihtdXRhdGlvbixzdGF0ZSl7ZGV2dG9vbEhvb2suZW1pdCgndnVleDptdXRhdGlvbicsbXV0YXRpb24sc3RhdGUpO30pO30vKipcbiAgICogR2V0IHRoZSBmaXJzdCBpdGVtIHRoYXQgcGFzcyB0aGUgdGVzdFxuICAgKiBieSBzZWNvbmQgYXJndW1lbnQgZnVuY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gbGlzdFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmXG4gICAqIEByZXR1cm4geyp9XG4gICAqLyAvKipcbiAgICogZm9yRWFjaCBmb3Igb2JqZWN0XG4gICAqL2Z1bmN0aW9uIGZvckVhY2hWYWx1ZShvYmosZm4pe09iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbihrZXkpe3JldHVybiBmbihvYmpba2V5XSxrZXkpO30pO31mdW5jdGlvbiBpc09iamVjdCQxKG9iail7cmV0dXJuIG9iaiE9PW51bGwmJl90eXBlb2YyKG9iaik9PT0nb2JqZWN0Jzt9ZnVuY3Rpb24gaXNQcm9taXNlJDEodmFsKXtyZXR1cm4gdmFsJiZ0eXBlb2YgdmFsLnRoZW49PT0nZnVuY3Rpb24nO31mdW5jdGlvbiBwYXJ0aWFsKGZuLGFyZyl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGZuKGFyZyk7fTt9Ly8gQmFzZSBkYXRhIHN0cnVjdCBmb3Igc3RvcmUncyBtb2R1bGUsIHBhY2thZ2Ugd2l0aCBzb21lIGF0dHJpYnV0ZSBhbmQgbWV0aG9kXG52YXIgTW9kdWxlPWZ1bmN0aW9uIE1vZHVsZShyYXdNb2R1bGUscnVudGltZSl7dGhpcy5ydW50aW1lPXJ1bnRpbWU7Ly8gU3RvcmUgc29tZSBjaGlsZHJlbiBpdGVtXG50aGlzLl9jaGlsZHJlbj1PYmplY3QuY3JlYXRlKG51bGwpOy8vIFN0b3JlIHRoZSBvcmlnaW4gbW9kdWxlIG9iamVjdCB3aGljaCBwYXNzZWQgYnkgcHJvZ3JhbW1lclxudGhpcy5fcmF3TW9kdWxlPXJhd01vZHVsZTt2YXIgcmF3U3RhdGU9cmF3TW9kdWxlLnN0YXRlOy8vIFN0b3JlIHRoZSBvcmlnaW4gbW9kdWxlJ3Mgc3RhdGVcbnRoaXMuc3RhdGU9KHR5cGVvZiByYXdTdGF0ZT09PSdmdW5jdGlvbic/cmF3U3RhdGUoKTpyYXdTdGF0ZSl8fHt9O307dmFyIHByb3RvdHlwZUFjY2Vzc29ycyQxPXtuYW1lc3BhY2VkOntjb25maWd1cmFibGU6dHJ1ZX19O3Byb3RvdHlwZUFjY2Vzc29ycyQxLm5hbWVzcGFjZWQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLl9yYXdNb2R1bGUubmFtZXNwYWNlZDt9O01vZHVsZS5wcm90b3R5cGUuYWRkQ2hpbGQ9ZnVuY3Rpb24gYWRkQ2hpbGQoa2V5LG1vZHVsZSl7dGhpcy5fY2hpbGRyZW5ba2V5XT1tb2R1bGU7fTtNb2R1bGUucHJvdG90eXBlLnJlbW92ZUNoaWxkPWZ1bmN0aW9uIHJlbW92ZUNoaWxkKGtleSl7ZGVsZXRlIHRoaXMuX2NoaWxkcmVuW2tleV07fTtNb2R1bGUucHJvdG90eXBlLmdldENoaWxkPWZ1bmN0aW9uIGdldENoaWxkKGtleSl7cmV0dXJuIHRoaXMuX2NoaWxkcmVuW2tleV07fTtNb2R1bGUucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbiB1cGRhdGUocmF3TW9kdWxlKXt0aGlzLl9yYXdNb2R1bGUubmFtZXNwYWNlZD1yYXdNb2R1bGUubmFtZXNwYWNlZDtpZihyYXdNb2R1bGUuYWN0aW9ucyl7dGhpcy5fcmF3TW9kdWxlLmFjdGlvbnM9cmF3TW9kdWxlLmFjdGlvbnM7fWlmKHJhd01vZHVsZS5tdXRhdGlvbnMpe3RoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnM9cmF3TW9kdWxlLm11dGF0aW9uczt9aWYocmF3TW9kdWxlLmdldHRlcnMpe3RoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzPXJhd01vZHVsZS5nZXR0ZXJzO319O01vZHVsZS5wcm90b3R5cGUuZm9yRWFjaENoaWxkPWZ1bmN0aW9uIGZvckVhY2hDaGlsZChmbil7Zm9yRWFjaFZhbHVlKHRoaXMuX2NoaWxkcmVuLGZuKTt9O01vZHVsZS5wcm90b3R5cGUuZm9yRWFjaEdldHRlcj1mdW5jdGlvbiBmb3JFYWNoR2V0dGVyKGZuKXtpZih0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycyl7Zm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzLGZuKTt9fTtNb2R1bGUucHJvdG90eXBlLmZvckVhY2hBY3Rpb249ZnVuY3Rpb24gZm9yRWFjaEFjdGlvbihmbil7aWYodGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMpe2ZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucyxmbik7fX07TW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoTXV0YXRpb249ZnVuY3Rpb24gZm9yRWFjaE11dGF0aW9uKGZuKXtpZih0aGlzLl9yYXdNb2R1bGUubXV0YXRpb25zKXtmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucyxmbik7fX07T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTW9kdWxlLnByb3RvdHlwZSxwcm90b3R5cGVBY2Nlc3NvcnMkMSk7dmFyIE1vZHVsZUNvbGxlY3Rpb249ZnVuY3Rpb24gTW9kdWxlQ29sbGVjdGlvbihyYXdSb290TW9kdWxlKXsvLyByZWdpc3RlciByb290IG1vZHVsZSAoVnVleC5TdG9yZSBvcHRpb25zKVxudGhpcy5yZWdpc3RlcihbXSxyYXdSb290TW9kdWxlLGZhbHNlKTt9O01vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLmdldD1mdW5jdGlvbiBnZXQocGF0aCl7cmV0dXJuIHBhdGgucmVkdWNlKGZ1bmN0aW9uKG1vZHVsZSxrZXkpe3JldHVybiBtb2R1bGUuZ2V0Q2hpbGQoa2V5KTt9LHRoaXMucm9vdCk7fTtNb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXROYW1lc3BhY2U9ZnVuY3Rpb24gZ2V0TmFtZXNwYWNlKHBhdGgpe3ZhciBtb2R1bGU9dGhpcy5yb290O3JldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbihuYW1lc3BhY2Usa2V5KXttb2R1bGU9bW9kdWxlLmdldENoaWxkKGtleSk7cmV0dXJuIG5hbWVzcGFjZSsobW9kdWxlLm5hbWVzcGFjZWQ/a2V5KycvJzonJyk7fSwnJyk7fTtNb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24gdXBkYXRlJDEocmF3Um9vdE1vZHVsZSl7dXBkYXRlKFtdLHRoaXMucm9vdCxyYXdSb290TW9kdWxlKTt9O01vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLnJlZ2lzdGVyPWZ1bmN0aW9uIHJlZ2lzdGVyKHBhdGgscmF3TW9kdWxlLHJ1bnRpbWUpe3ZhciB0aGlzJDE9dGhpcztpZihydW50aW1lPT09dm9pZCAwKXJ1bnRpbWU9dHJ1ZTt2YXIgbmV3TW9kdWxlPW5ldyBNb2R1bGUocmF3TW9kdWxlLHJ1bnRpbWUpO2lmKHBhdGgubGVuZ3RoPT09MCl7dGhpcy5yb290PW5ld01vZHVsZTt9ZWxzZXt2YXIgcGFyZW50PXRoaXMuZ2V0KHBhdGguc2xpY2UoMCwtMSkpO3BhcmVudC5hZGRDaGlsZChwYXRoW3BhdGgubGVuZ3RoLTFdLG5ld01vZHVsZSk7fS8vIHJlZ2lzdGVyIG5lc3RlZCBtb2R1bGVzXG5pZihyYXdNb2R1bGUubW9kdWxlcyl7Zm9yRWFjaFZhbHVlKHJhd01vZHVsZS5tb2R1bGVzLGZ1bmN0aW9uKHJhd0NoaWxkTW9kdWxlLGtleSl7dGhpcyQxLnJlZ2lzdGVyKHBhdGguY29uY2F0KGtleSkscmF3Q2hpbGRNb2R1bGUscnVudGltZSk7fSk7fX07TW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUudW5yZWdpc3Rlcj1mdW5jdGlvbiB1bnJlZ2lzdGVyKHBhdGgpe3ZhciBwYXJlbnQ9dGhpcy5nZXQocGF0aC5zbGljZSgwLC0xKSk7dmFyIGtleT1wYXRoW3BhdGgubGVuZ3RoLTFdO2lmKCFwYXJlbnQuZ2V0Q2hpbGQoa2V5KS5ydW50aW1lKXtyZXR1cm47fXBhcmVudC5yZW1vdmVDaGlsZChrZXkpO307ZnVuY3Rpb24gdXBkYXRlKHBhdGgsdGFyZ2V0TW9kdWxlLG5ld01vZHVsZSl7Ly8gdXBkYXRlIHRhcmdldCBtb2R1bGVcbnRhcmdldE1vZHVsZS51cGRhdGUobmV3TW9kdWxlKTsvLyB1cGRhdGUgbmVzdGVkIG1vZHVsZXNcbmlmKG5ld01vZHVsZS5tb2R1bGVzKXtmb3IodmFyIGtleSBpbiBuZXdNb2R1bGUubW9kdWxlcyl7aWYoIXRhcmdldE1vZHVsZS5nZXRDaGlsZChrZXkpKXtyZXR1cm47fXVwZGF0ZShwYXRoLmNvbmNhdChrZXkpLHRhcmdldE1vZHVsZS5nZXRDaGlsZChrZXkpLG5ld01vZHVsZS5tb2R1bGVzW2tleV0pO319fXZhciBWdWUkMTsvLyBiaW5kIG9uIGluc3RhbGxcbnZhciBTdG9yZT1mdW5jdGlvbiBTdG9yZShvcHRpb25zKXt2YXIgdGhpcyQxPXRoaXM7aWYob3B0aW9ucz09PXZvaWQgMClvcHRpb25zPXt9Oy8vIEF1dG8gaW5zdGFsbCBpZiBpdCBpcyBub3QgZG9uZSB5ZXQgYW5kIGB3aW5kb3dgIGhhcyBgVnVlYC5cbi8vIFRvIGFsbG93IHVzZXJzIHRvIGF2b2lkIGF1dG8taW5zdGFsbGF0aW9uIGluIHNvbWUgY2FzZXMsXG4vLyB0aGlzIGNvZGUgc2hvdWxkIGJlIHBsYWNlZCBoZXJlLiBTZWUgIzczMVxuaWYoIVZ1ZSQxJiZ0eXBlb2Ygd2luZG93IT09J3VuZGVmaW5lZCcmJndpbmRvdy5WdWUpe2luc3RhbGwod2luZG93LlZ1ZSk7fXZhciBwbHVnaW5zPW9wdGlvbnMucGx1Z2lucztpZihwbHVnaW5zPT09dm9pZCAwKXBsdWdpbnM9W107dmFyIHN0cmljdD1vcHRpb25zLnN0cmljdDtpZihzdHJpY3Q9PT12b2lkIDApc3RyaWN0PWZhbHNlOy8vIHN0b3JlIGludGVybmFsIHN0YXRlXG50aGlzLl9jb21taXR0aW5nPWZhbHNlO3RoaXMuX2FjdGlvbnM9T2JqZWN0LmNyZWF0ZShudWxsKTt0aGlzLl9hY3Rpb25TdWJzY3JpYmVycz1bXTt0aGlzLl9tdXRhdGlvbnM9T2JqZWN0LmNyZWF0ZShudWxsKTt0aGlzLl93cmFwcGVkR2V0dGVycz1PYmplY3QuY3JlYXRlKG51bGwpO3RoaXMuX21vZHVsZXM9bmV3IE1vZHVsZUNvbGxlY3Rpb24ob3B0aW9ucyk7dGhpcy5fbW9kdWxlc05hbWVzcGFjZU1hcD1PYmplY3QuY3JlYXRlKG51bGwpO3RoaXMuX3N1YnNjcmliZXJzPVtdO3RoaXMuX3dhdGNoZXJWTT1uZXcgVnVlJDEoKTt0aGlzLl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGU9T2JqZWN0LmNyZWF0ZShudWxsKTsvLyBiaW5kIGNvbW1pdCBhbmQgZGlzcGF0Y2ggdG8gc2VsZlxudmFyIHN0b3JlPXRoaXM7dmFyIHJlZj10aGlzO3ZhciBkaXNwYXRjaD1yZWYuZGlzcGF0Y2g7dmFyIGNvbW1pdD1yZWYuY29tbWl0O3RoaXMuZGlzcGF0Y2g9ZnVuY3Rpb24gYm91bmREaXNwYXRjaCh0eXBlLHBheWxvYWQpe3JldHVybiBkaXNwYXRjaC5jYWxsKHN0b3JlLHR5cGUscGF5bG9hZCk7fTt0aGlzLmNvbW1pdD1mdW5jdGlvbiBib3VuZENvbW1pdCh0eXBlLHBheWxvYWQsb3B0aW9ucyl7cmV0dXJuIGNvbW1pdC5jYWxsKHN0b3JlLHR5cGUscGF5bG9hZCxvcHRpb25zKTt9Oy8vIHN0cmljdCBtb2RlXG50aGlzLnN0cmljdD1zdHJpY3Q7dmFyIHN0YXRlPXRoaXMuX21vZHVsZXMucm9vdC5zdGF0ZTsvLyBpbml0IHJvb3QgbW9kdWxlLlxuLy8gdGhpcyBhbHNvIHJlY3Vyc2l2ZWx5IHJlZ2lzdGVycyBhbGwgc3ViLW1vZHVsZXNcbi8vIGFuZCBjb2xsZWN0cyBhbGwgbW9kdWxlIGdldHRlcnMgaW5zaWRlIHRoaXMuX3dyYXBwZWRHZXR0ZXJzXG5pbnN0YWxsTW9kdWxlKHRoaXMsc3RhdGUsW10sdGhpcy5fbW9kdWxlcy5yb290KTsvLyBpbml0aWFsaXplIHRoZSBzdG9yZSB2bSwgd2hpY2ggaXMgcmVzcG9uc2libGUgZm9yIHRoZSByZWFjdGl2aXR5XG4vLyAoYWxzbyByZWdpc3RlcnMgX3dyYXBwZWRHZXR0ZXJzIGFzIGNvbXB1dGVkIHByb3BlcnRpZXMpXG5yZXNldFN0b3JlVk0odGhpcyxzdGF0ZSk7Ly8gYXBwbHkgcGx1Z2luc1xucGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uKHBsdWdpbil7cmV0dXJuIHBsdWdpbih0aGlzJDEpO30pO3ZhciB1c2VEZXZ0b29scz1vcHRpb25zLmRldnRvb2xzIT09dW5kZWZpbmVkP29wdGlvbnMuZGV2dG9vbHM6VnVlJDEuY29uZmlnLmRldnRvb2xzO2lmKHVzZURldnRvb2xzKXtkZXZ0b29sUGx1Z2luKHRoaXMpO319O3ZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMSQxPXtzdGF0ZTp7Y29uZmlndXJhYmxlOnRydWV9fTtwcm90b3R5cGVBY2Nlc3NvcnMkMSQxLnN0YXRlLmdldD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl92bS5fZGF0YS4kJHN0YXRlO307cHJvdG90eXBlQWNjZXNzb3JzJDEkMS5zdGF0ZS5zZXQ9ZnVuY3Rpb24odil7fTtTdG9yZS5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uIGNvbW1pdChfdHlwZSxfcGF5bG9hZCxfb3B0aW9ucyl7dmFyIHRoaXMkMT10aGlzOy8vIGNoZWNrIG9iamVjdC1zdHlsZSBjb21taXRcbnZhciByZWY9dW5pZnlPYmplY3RTdHlsZShfdHlwZSxfcGF5bG9hZCxfb3B0aW9ucyk7dmFyIHR5cGU9cmVmLnR5cGU7dmFyIHBheWxvYWQ9cmVmLnBheWxvYWQ7dmFyIG11dGF0aW9uPXt0eXBlOnR5cGUscGF5bG9hZDpwYXlsb2FkfTt2YXIgZW50cnk9dGhpcy5fbXV0YXRpb25zW3R5cGVdO2lmKCFlbnRyeSl7cmV0dXJuO310aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uKCl7ZW50cnkuZm9yRWFjaChmdW5jdGlvbiBjb21taXRJdGVyYXRvcihoYW5kbGVyKXtoYW5kbGVyKHBheWxvYWQpO30pO30pO3RoaXMuX3N1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24oc3ViKXtyZXR1cm4gc3ViKG11dGF0aW9uLHRoaXMkMS5zdGF0ZSk7fSk7fTtTdG9yZS5wcm90b3R5cGUuZGlzcGF0Y2g9ZnVuY3Rpb24gZGlzcGF0Y2goX3R5cGUsX3BheWxvYWQpe3ZhciB0aGlzJDE9dGhpczsvLyBjaGVjayBvYmplY3Qtc3R5bGUgZGlzcGF0Y2hcbnZhciByZWY9dW5pZnlPYmplY3RTdHlsZShfdHlwZSxfcGF5bG9hZCk7dmFyIHR5cGU9cmVmLnR5cGU7dmFyIHBheWxvYWQ9cmVmLnBheWxvYWQ7dmFyIGFjdGlvbj17dHlwZTp0eXBlLHBheWxvYWQ6cGF5bG9hZH07dmFyIGVudHJ5PXRoaXMuX2FjdGlvbnNbdHlwZV07aWYoIWVudHJ5KXtyZXR1cm47fXRyeXt0aGlzLl9hY3Rpb25TdWJzY3JpYmVycy5maWx0ZXIoZnVuY3Rpb24oc3ViKXtyZXR1cm4gc3ViLmJlZm9yZTt9KS5mb3JFYWNoKGZ1bmN0aW9uKHN1Yil7cmV0dXJuIHN1Yi5iZWZvcmUoYWN0aW9uLHRoaXMkMS5zdGF0ZSk7fSk7fWNhdGNoKGUpe312YXIgcmVzdWx0PWVudHJ5Lmxlbmd0aD4xP1Byb21pc2UuYWxsKGVudHJ5Lm1hcChmdW5jdGlvbihoYW5kbGVyKXtyZXR1cm4gaGFuZGxlcihwYXlsb2FkKTt9KSk6ZW50cnlbMF0ocGF5bG9hZCk7cmV0dXJuIHJlc3VsdC50aGVuKGZ1bmN0aW9uKHJlcyl7dHJ5e3RoaXMkMS5fYWN0aW9uU3Vic2NyaWJlcnMuZmlsdGVyKGZ1bmN0aW9uKHN1Yil7cmV0dXJuIHN1Yi5hZnRlcjt9KS5mb3JFYWNoKGZ1bmN0aW9uKHN1Yil7cmV0dXJuIHN1Yi5hZnRlcihhY3Rpb24sdGhpcyQxLnN0YXRlKTt9KTt9Y2F0Y2goZSl7fXJldHVybiByZXM7fSk7fTtTdG9yZS5wcm90b3R5cGUuc3Vic2NyaWJlPWZ1bmN0aW9uIHN1YnNjcmliZShmbil7cmV0dXJuIGdlbmVyaWNTdWJzY3JpYmUoZm4sdGhpcy5fc3Vic2NyaWJlcnMpO307U3RvcmUucHJvdG90eXBlLnN1YnNjcmliZUFjdGlvbj1mdW5jdGlvbiBzdWJzY3JpYmVBY3Rpb24oZm4pe3ZhciBzdWJzPXR5cGVvZiBmbj09PSdmdW5jdGlvbic/e2JlZm9yZTpmbn06Zm47cmV0dXJuIGdlbmVyaWNTdWJzY3JpYmUoc3Vicyx0aGlzLl9hY3Rpb25TdWJzY3JpYmVycyk7fTtTdG9yZS5wcm90b3R5cGUud2F0Y2g9ZnVuY3Rpb24gd2F0Y2goZ2V0dGVyLGNiLG9wdGlvbnMpe3ZhciB0aGlzJDE9dGhpcztyZXR1cm4gdGhpcy5fd2F0Y2hlclZNLiR3YXRjaChmdW5jdGlvbigpe3JldHVybiBnZXR0ZXIodGhpcyQxLnN0YXRlLHRoaXMkMS5nZXR0ZXJzKTt9LGNiLG9wdGlvbnMpO307U3RvcmUucHJvdG90eXBlLnJlcGxhY2VTdGF0ZT1mdW5jdGlvbiByZXBsYWNlU3RhdGUoc3RhdGUpe3ZhciB0aGlzJDE9dGhpczt0aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uKCl7dGhpcyQxLl92bS5fZGF0YS4kJHN0YXRlPXN0YXRlO30pO307U3RvcmUucHJvdG90eXBlLnJlZ2lzdGVyTW9kdWxlPWZ1bmN0aW9uIHJlZ2lzdGVyTW9kdWxlKHBhdGgscmF3TW9kdWxlLG9wdGlvbnMpe2lmKG9wdGlvbnM9PT12b2lkIDApb3B0aW9ucz17fTtpZih0eXBlb2YgcGF0aD09PSdzdHJpbmcnKXtwYXRoPVtwYXRoXTt9dGhpcy5fbW9kdWxlcy5yZWdpc3RlcihwYXRoLHJhd01vZHVsZSk7aW5zdGFsbE1vZHVsZSh0aGlzLHRoaXMuc3RhdGUscGF0aCx0aGlzLl9tb2R1bGVzLmdldChwYXRoKSxvcHRpb25zLnByZXNlcnZlU3RhdGUpOy8vIHJlc2V0IHN0b3JlIHRvIHVwZGF0ZSBnZXR0ZXJzLi4uXG5yZXNldFN0b3JlVk0odGhpcyx0aGlzLnN0YXRlKTt9O1N0b3JlLnByb3RvdHlwZS51bnJlZ2lzdGVyTW9kdWxlPWZ1bmN0aW9uIHVucmVnaXN0ZXJNb2R1bGUocGF0aCl7dmFyIHRoaXMkMT10aGlzO2lmKHR5cGVvZiBwYXRoPT09J3N0cmluZycpe3BhdGg9W3BhdGhdO310aGlzLl9tb2R1bGVzLnVucmVnaXN0ZXIocGF0aCk7dGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbigpe3ZhciBwYXJlbnRTdGF0ZT1nZXROZXN0ZWRTdGF0ZSh0aGlzJDEuc3RhdGUscGF0aC5zbGljZSgwLC0xKSk7VnVlJDFbXCJkZWxldGVcIl0ocGFyZW50U3RhdGUscGF0aFtwYXRoLmxlbmd0aC0xXSk7fSk7cmVzZXRTdG9yZSh0aGlzKTt9O1N0b3JlLnByb3RvdHlwZS5ob3RVcGRhdGU9ZnVuY3Rpb24gaG90VXBkYXRlKG5ld09wdGlvbnMpe3RoaXMuX21vZHVsZXMudXBkYXRlKG5ld09wdGlvbnMpO3Jlc2V0U3RvcmUodGhpcyx0cnVlKTt9O1N0b3JlLnByb3RvdHlwZS5fd2l0aENvbW1pdD1mdW5jdGlvbiBfd2l0aENvbW1pdChmbil7dmFyIGNvbW1pdHRpbmc9dGhpcy5fY29tbWl0dGluZzt0aGlzLl9jb21taXR0aW5nPXRydWU7Zm4oKTt0aGlzLl9jb21taXR0aW5nPWNvbW1pdHRpbmc7fTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhTdG9yZS5wcm90b3R5cGUscHJvdG90eXBlQWNjZXNzb3JzJDEkMSk7ZnVuY3Rpb24gZ2VuZXJpY1N1YnNjcmliZShmbixzdWJzKXtpZihzdWJzLmluZGV4T2YoZm4pPDApe3N1YnMucHVzaChmbik7fXJldHVybiBmdW5jdGlvbigpe3ZhciBpPXN1YnMuaW5kZXhPZihmbik7aWYoaT4tMSl7c3Vicy5zcGxpY2UoaSwxKTt9fTt9ZnVuY3Rpb24gcmVzZXRTdG9yZShzdG9yZSxob3Qpe3N0b3JlLl9hY3Rpb25zPU9iamVjdC5jcmVhdGUobnVsbCk7c3RvcmUuX211dGF0aW9ucz1PYmplY3QuY3JlYXRlKG51bGwpO3N0b3JlLl93cmFwcGVkR2V0dGVycz1PYmplY3QuY3JlYXRlKG51bGwpO3N0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwPU9iamVjdC5jcmVhdGUobnVsbCk7dmFyIHN0YXRlPXN0b3JlLnN0YXRlOy8vIGluaXQgYWxsIG1vZHVsZXNcbmluc3RhbGxNb2R1bGUoc3RvcmUsc3RhdGUsW10sc3RvcmUuX21vZHVsZXMucm9vdCx0cnVlKTsvLyByZXNldCB2bVxucmVzZXRTdG9yZVZNKHN0b3JlLHN0YXRlLGhvdCk7fWZ1bmN0aW9uIHJlc2V0U3RvcmVWTShzdG9yZSxzdGF0ZSxob3Qpe3ZhciBvbGRWbT1zdG9yZS5fdm07Ly8gYmluZCBzdG9yZSBwdWJsaWMgZ2V0dGVyc1xuc3RvcmUuZ2V0dGVycz17fTsvLyByZXNldCBsb2NhbCBnZXR0ZXJzIGNhY2hlXG5zdG9yZS5fbWFrZUxvY2FsR2V0dGVyc0NhY2hlPU9iamVjdC5jcmVhdGUobnVsbCk7dmFyIHdyYXBwZWRHZXR0ZXJzPXN0b3JlLl93cmFwcGVkR2V0dGVyczt2YXIgY29tcHV0ZWQ9e307Zm9yRWFjaFZhbHVlKHdyYXBwZWRHZXR0ZXJzLGZ1bmN0aW9uKGZuLGtleSl7Ly8gdXNlIGNvbXB1dGVkIHRvIGxldmVyYWdlIGl0cyBsYXp5LWNhY2hpbmcgbWVjaGFuaXNtXG4vLyBkaXJlY3QgaW5saW5lIGZ1bmN0aW9uIHVzZSB3aWxsIGxlYWQgdG8gY2xvc3VyZSBwcmVzZXJ2aW5nIG9sZFZtLlxuLy8gdXNpbmcgcGFydGlhbCB0byByZXR1cm4gZnVuY3Rpb24gd2l0aCBvbmx5IGFyZ3VtZW50cyBwcmVzZXJ2ZWQgaW4gY2xvc3VyZSBlbnZpcm9ubWVudC5cbmNvbXB1dGVkW2tleV09cGFydGlhbChmbixzdG9yZSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHN0b3JlLmdldHRlcnMsa2V5LHtnZXQ6ZnVuY3Rpb24gZ2V0KCl7cmV0dXJuIHN0b3JlLl92bVtrZXldO30sZW51bWVyYWJsZTp0cnVlLy8gZm9yIGxvY2FsIGdldHRlcnNcbn0pO30pOy8vIHVzZSBhIFZ1ZSBpbnN0YW5jZSB0byBzdG9yZSB0aGUgc3RhdGUgdHJlZVxuLy8gc3VwcHJlc3Mgd2FybmluZ3MganVzdCBpbiBjYXNlIHRoZSB1c2VyIGhhcyBhZGRlZFxuLy8gc29tZSBmdW5reSBnbG9iYWwgbWl4aW5zXG52YXIgc2lsZW50PVZ1ZSQxLmNvbmZpZy5zaWxlbnQ7VnVlJDEuY29uZmlnLnNpbGVudD10cnVlO3N0b3JlLl92bT1uZXcgVnVlJDEoe2RhdGE6eyQkc3RhdGU6c3RhdGV9LGNvbXB1dGVkOmNvbXB1dGVkfSk7VnVlJDEuY29uZmlnLnNpbGVudD1zaWxlbnQ7Ly8gZW5hYmxlIHN0cmljdCBtb2RlIGZvciBuZXcgdm1cbmlmKHN0b3JlLnN0cmljdCl7ZW5hYmxlU3RyaWN0TW9kZShzdG9yZSk7fWlmKG9sZFZtKXtpZihob3Qpey8vIGRpc3BhdGNoIGNoYW5nZXMgaW4gYWxsIHN1YnNjcmliZWQgd2F0Y2hlcnNcbi8vIHRvIGZvcmNlIGdldHRlciByZS1ldmFsdWF0aW9uIGZvciBob3QgcmVsb2FkaW5nLlxuc3RvcmUuX3dpdGhDb21taXQoZnVuY3Rpb24oKXtvbGRWbS5fZGF0YS4kJHN0YXRlPW51bGw7fSk7fVZ1ZSQxLm5leHRUaWNrKGZ1bmN0aW9uKCl7cmV0dXJuIG9sZFZtLiRkZXN0cm95KCk7fSk7fX1mdW5jdGlvbiBpbnN0YWxsTW9kdWxlKHN0b3JlLHJvb3RTdGF0ZSxwYXRoLG1vZHVsZSxob3Qpe3ZhciBpc1Jvb3Q9IXBhdGgubGVuZ3RoO3ZhciBuYW1lc3BhY2U9c3RvcmUuX21vZHVsZXMuZ2V0TmFtZXNwYWNlKHBhdGgpOy8vIHJlZ2lzdGVyIGluIG5hbWVzcGFjZSBtYXBcbmlmKG1vZHVsZS5uYW1lc3BhY2VkKXtpZihzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcFtuYW1lc3BhY2VdJiZcInByb2R1Y3Rpb25cIiE9PSdwcm9kdWN0aW9uJyl7Y29uc29sZS5lcnJvcihcIlt2dWV4XSBkdXBsaWNhdGUgbmFtZXNwYWNlIFwiK25hbWVzcGFjZStcIiBmb3IgdGhlIG5hbWVzcGFjZWQgbW9kdWxlIFwiK3BhdGguam9pbignLycpKTt9c3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbmFtZXNwYWNlXT1tb2R1bGU7fS8vIHNldCBzdGF0ZVxuaWYoIWlzUm9vdCYmIWhvdCl7dmFyIHBhcmVudFN0YXRlPWdldE5lc3RlZFN0YXRlKHJvb3RTdGF0ZSxwYXRoLnNsaWNlKDAsLTEpKTt2YXIgbW9kdWxlTmFtZT1wYXRoW3BhdGgubGVuZ3RoLTFdO3N0b3JlLl93aXRoQ29tbWl0KGZ1bmN0aW9uKCl7VnVlJDEuc2V0KHBhcmVudFN0YXRlLG1vZHVsZU5hbWUsbW9kdWxlLnN0YXRlKTt9KTt9dmFyIGxvY2FsPW1vZHVsZS5jb250ZXh0PW1ha2VMb2NhbENvbnRleHQoc3RvcmUsbmFtZXNwYWNlLHBhdGgpO21vZHVsZS5mb3JFYWNoTXV0YXRpb24oZnVuY3Rpb24obXV0YXRpb24sa2V5KXt2YXIgbmFtZXNwYWNlZFR5cGU9bmFtZXNwYWNlK2tleTtyZWdpc3Rlck11dGF0aW9uKHN0b3JlLG5hbWVzcGFjZWRUeXBlLG11dGF0aW9uLGxvY2FsKTt9KTttb2R1bGUuZm9yRWFjaEFjdGlvbihmdW5jdGlvbihhY3Rpb24sa2V5KXt2YXIgdHlwZT1hY3Rpb24ucm9vdD9rZXk6bmFtZXNwYWNlK2tleTt2YXIgaGFuZGxlcj1hY3Rpb24uaGFuZGxlcnx8YWN0aW9uO3JlZ2lzdGVyQWN0aW9uKHN0b3JlLHR5cGUsaGFuZGxlcixsb2NhbCk7fSk7bW9kdWxlLmZvckVhY2hHZXR0ZXIoZnVuY3Rpb24oZ2V0dGVyLGtleSl7dmFyIG5hbWVzcGFjZWRUeXBlPW5hbWVzcGFjZStrZXk7cmVnaXN0ZXJHZXR0ZXIoc3RvcmUsbmFtZXNwYWNlZFR5cGUsZ2V0dGVyLGxvY2FsKTt9KTttb2R1bGUuZm9yRWFjaENoaWxkKGZ1bmN0aW9uKGNoaWxkLGtleSl7aW5zdGFsbE1vZHVsZShzdG9yZSxyb290U3RhdGUscGF0aC5jb25jYXQoa2V5KSxjaGlsZCxob3QpO30pO30vKipcbiAgICogbWFrZSBsb2NhbGl6ZWQgZGlzcGF0Y2gsIGNvbW1pdCwgZ2V0dGVycyBhbmQgc3RhdGVcbiAgICogaWYgdGhlcmUgaXMgbm8gbmFtZXNwYWNlLCBqdXN0IHVzZSByb290IG9uZXNcbiAgICovZnVuY3Rpb24gbWFrZUxvY2FsQ29udGV4dChzdG9yZSxuYW1lc3BhY2UscGF0aCl7dmFyIG5vTmFtZXNwYWNlPW5hbWVzcGFjZT09PScnO3ZhciBsb2NhbD17ZGlzcGF0Y2g6bm9OYW1lc3BhY2U/c3RvcmUuZGlzcGF0Y2g6ZnVuY3Rpb24oX3R5cGUsX3BheWxvYWQsX29wdGlvbnMpe3ZhciBhcmdzPXVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsX3BheWxvYWQsX29wdGlvbnMpO3ZhciBwYXlsb2FkPWFyZ3MucGF5bG9hZDt2YXIgb3B0aW9ucz1hcmdzLm9wdGlvbnM7dmFyIHR5cGU9YXJncy50eXBlO2lmKCFvcHRpb25zfHwhb3B0aW9ucy5yb290KXt0eXBlPW5hbWVzcGFjZSt0eXBlO31yZXR1cm4gc3RvcmUuZGlzcGF0Y2godHlwZSxwYXlsb2FkKTt9LGNvbW1pdDpub05hbWVzcGFjZT9zdG9yZS5jb21taXQ6ZnVuY3Rpb24oX3R5cGUsX3BheWxvYWQsX29wdGlvbnMpe3ZhciBhcmdzPXVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsX3BheWxvYWQsX29wdGlvbnMpO3ZhciBwYXlsb2FkPWFyZ3MucGF5bG9hZDt2YXIgb3B0aW9ucz1hcmdzLm9wdGlvbnM7dmFyIHR5cGU9YXJncy50eXBlO2lmKCFvcHRpb25zfHwhb3B0aW9ucy5yb290KXt0eXBlPW5hbWVzcGFjZSt0eXBlO31zdG9yZS5jb21taXQodHlwZSxwYXlsb2FkLG9wdGlvbnMpO319Oy8vIGdldHRlcnMgYW5kIHN0YXRlIG9iamVjdCBtdXN0IGJlIGdvdHRlbiBsYXppbHlcbi8vIGJlY2F1c2UgdGhleSB3aWxsIGJlIGNoYW5nZWQgYnkgdm0gdXBkYXRlXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhsb2NhbCx7Z2V0dGVyczp7Z2V0Om5vTmFtZXNwYWNlP2Z1bmN0aW9uKCl7cmV0dXJuIHN0b3JlLmdldHRlcnM7fTpmdW5jdGlvbigpe3JldHVybiBtYWtlTG9jYWxHZXR0ZXJzKHN0b3JlLG5hbWVzcGFjZSk7fX0sc3RhdGU6e2dldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gZ2V0TmVzdGVkU3RhdGUoc3RvcmUuc3RhdGUscGF0aCk7fX19KTtyZXR1cm4gbG9jYWw7fWZ1bmN0aW9uIG1ha2VMb2NhbEdldHRlcnMoc3RvcmUsbmFtZXNwYWNlKXtpZighc3RvcmUuX21ha2VMb2NhbEdldHRlcnNDYWNoZVtuYW1lc3BhY2VdKXt2YXIgZ2V0dGVyc1Byb3h5PXt9O3ZhciBzcGxpdFBvcz1uYW1lc3BhY2UubGVuZ3RoO09iamVjdC5rZXlzKHN0b3JlLmdldHRlcnMpLmZvckVhY2goZnVuY3Rpb24odHlwZSl7Ly8gc2tpcCBpZiB0aGUgdGFyZ2V0IGdldHRlciBpcyBub3QgbWF0Y2ggdGhpcyBuYW1lc3BhY2VcbmlmKHR5cGUuc2xpY2UoMCxzcGxpdFBvcykhPT1uYW1lc3BhY2Upe3JldHVybjt9Ly8gZXh0cmFjdCBsb2NhbCBnZXR0ZXIgdHlwZVxudmFyIGxvY2FsVHlwZT10eXBlLnNsaWNlKHNwbGl0UG9zKTsvLyBBZGQgYSBwb3J0IHRvIHRoZSBnZXR0ZXJzIHByb3h5LlxuLy8gRGVmaW5lIGFzIGdldHRlciBwcm9wZXJ0eSBiZWNhdXNlXG4vLyB3ZSBkbyBub3Qgd2FudCB0byBldmFsdWF0ZSB0aGUgZ2V0dGVycyBpbiB0aGlzIHRpbWUuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZ2V0dGVyc1Byb3h5LGxvY2FsVHlwZSx7Z2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiBzdG9yZS5nZXR0ZXJzW3R5cGVdO30sZW51bWVyYWJsZTp0cnVlfSk7fSk7c3RvcmUuX21ha2VMb2NhbEdldHRlcnNDYWNoZVtuYW1lc3BhY2VdPWdldHRlcnNQcm94eTt9cmV0dXJuIHN0b3JlLl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGVbbmFtZXNwYWNlXTt9ZnVuY3Rpb24gcmVnaXN0ZXJNdXRhdGlvbihzdG9yZSx0eXBlLGhhbmRsZXIsbG9jYWwpe3ZhciBlbnRyeT1zdG9yZS5fbXV0YXRpb25zW3R5cGVdfHwoc3RvcmUuX211dGF0aW9uc1t0eXBlXT1bXSk7ZW50cnkucHVzaChmdW5jdGlvbiB3cmFwcGVkTXV0YXRpb25IYW5kbGVyKHBheWxvYWQpe2hhbmRsZXIuY2FsbChzdG9yZSxsb2NhbC5zdGF0ZSxwYXlsb2FkKTt9KTt9ZnVuY3Rpb24gcmVnaXN0ZXJBY3Rpb24oc3RvcmUsdHlwZSxoYW5kbGVyLGxvY2FsKXt2YXIgZW50cnk9c3RvcmUuX2FjdGlvbnNbdHlwZV18fChzdG9yZS5fYWN0aW9uc1t0eXBlXT1bXSk7ZW50cnkucHVzaChmdW5jdGlvbiB3cmFwcGVkQWN0aW9uSGFuZGxlcihwYXlsb2FkKXt2YXIgcmVzPWhhbmRsZXIuY2FsbChzdG9yZSx7ZGlzcGF0Y2g6bG9jYWwuZGlzcGF0Y2gsY29tbWl0OmxvY2FsLmNvbW1pdCxnZXR0ZXJzOmxvY2FsLmdldHRlcnMsc3RhdGU6bG9jYWwuc3RhdGUscm9vdEdldHRlcnM6c3RvcmUuZ2V0dGVycyxyb290U3RhdGU6c3RvcmUuc3RhdGV9LHBheWxvYWQpO2lmKCFpc1Byb21pc2UkMShyZXMpKXtyZXM9UHJvbWlzZS5yZXNvbHZlKHJlcyk7fWlmKHN0b3JlLl9kZXZ0b29sSG9vayl7cmV0dXJuIHJlc1tcImNhdGNoXCJdKGZ1bmN0aW9uKGVycil7c3RvcmUuX2RldnRvb2xIb29rLmVtaXQoJ3Z1ZXg6ZXJyb3InLGVycik7dGhyb3cgZXJyO30pO31lbHNle3JldHVybiByZXM7fX0pO31mdW5jdGlvbiByZWdpc3RlckdldHRlcihzdG9yZSx0eXBlLHJhd0dldHRlcixsb2NhbCl7aWYoc3RvcmUuX3dyYXBwZWRHZXR0ZXJzW3R5cGVdKXtyZXR1cm47fXN0b3JlLl93cmFwcGVkR2V0dGVyc1t0eXBlXT1mdW5jdGlvbiB3cmFwcGVkR2V0dGVyKHN0b3JlKXtyZXR1cm4gcmF3R2V0dGVyKGxvY2FsLnN0YXRlLC8vIGxvY2FsIHN0YXRlXG5sb2NhbC5nZXR0ZXJzLC8vIGxvY2FsIGdldHRlcnNcbnN0b3JlLnN0YXRlLC8vIHJvb3Qgc3RhdGVcbnN0b3JlLmdldHRlcnMvLyByb290IGdldHRlcnNcbik7fTt9ZnVuY3Rpb24gZW5hYmxlU3RyaWN0TW9kZShzdG9yZSl7c3RvcmUuX3ZtLiR3YXRjaChmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kYXRhLiQkc3RhdGU7fSxmdW5jdGlvbigpe30se2RlZXA6dHJ1ZSxzeW5jOnRydWV9KTt9ZnVuY3Rpb24gZ2V0TmVzdGVkU3RhdGUoc3RhdGUscGF0aCl7cmV0dXJuIHBhdGgubGVuZ3RoP3BhdGgucmVkdWNlKGZ1bmN0aW9uKHN0YXRlLGtleSl7cmV0dXJuIHN0YXRlW2tleV07fSxzdGF0ZSk6c3RhdGU7fWZ1bmN0aW9uIHVuaWZ5T2JqZWN0U3R5bGUodHlwZSxwYXlsb2FkLG9wdGlvbnMpe2lmKGlzT2JqZWN0JDEodHlwZSkmJnR5cGUudHlwZSl7b3B0aW9ucz1wYXlsb2FkO3BheWxvYWQ9dHlwZTt0eXBlPXR5cGUudHlwZTt9cmV0dXJue3R5cGU6dHlwZSxwYXlsb2FkOnBheWxvYWQsb3B0aW9uczpvcHRpb25zfTt9ZnVuY3Rpb24gaW5zdGFsbChfVnVlKXtpZihWdWUkMSYmX1Z1ZT09PVZ1ZSQxKXtyZXR1cm47fVZ1ZSQxPV9WdWU7YXBwbHlNaXhpbihWdWUkMSk7fS8qKlxuICAgKiBSZWR1Y2UgdGhlIGNvZGUgd2hpY2ggd3JpdHRlbiBpbiBWdWUuanMgZm9yIGdldHRpbmcgdGhlIHN0YXRlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAgICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IHN0YXRlcyAjIE9iamVjdCdzIGl0ZW0gY2FuIGJlIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0IHN0YXRlIGFuZCBnZXR0ZXJzIGZvciBwYXJhbSwgeW91IGNhbiBkbyBzb21ldGhpbmcgZm9yIHN0YXRlIGFuZCBnZXR0ZXJzIGluIGl0LlxuICAgKiBAcGFyYW0ge09iamVjdH1cbiAgICovdmFyIG1hcFN0YXRlPW5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbihuYW1lc3BhY2Usc3RhdGVzKXt2YXIgcmVzPXt9O25vcm1hbGl6ZU1hcChzdGF0ZXMpLmZvckVhY2goZnVuY3Rpb24ocmVmKXt2YXIga2V5PXJlZi5rZXk7dmFyIHZhbD1yZWYudmFsO3Jlc1trZXldPWZ1bmN0aW9uIG1hcHBlZFN0YXRlKCl7dmFyIHN0YXRlPXRoaXMuJHN0b3JlLnN0YXRlO3ZhciBnZXR0ZXJzPXRoaXMuJHN0b3JlLmdldHRlcnM7aWYobmFtZXNwYWNlKXt2YXIgbW9kdWxlPWdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCdtYXBTdGF0ZScsbmFtZXNwYWNlKTtpZighbW9kdWxlKXtyZXR1cm47fXN0YXRlPW1vZHVsZS5jb250ZXh0LnN0YXRlO2dldHRlcnM9bW9kdWxlLmNvbnRleHQuZ2V0dGVyczt9cmV0dXJuIHR5cGVvZiB2YWw9PT0nZnVuY3Rpb24nP3ZhbC5jYWxsKHRoaXMsc3RhdGUsZ2V0dGVycyk6c3RhdGVbdmFsXTt9Oy8vIG1hcmsgdnVleCBnZXR0ZXIgZm9yIGRldnRvb2xzXG5yZXNba2V5XS52dWV4PXRydWU7fSk7cmV0dXJuIHJlczt9KTsvKipcbiAgICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBjb21taXR0aW5nIHRoZSBtdXRhdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAgICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG11dGF0aW9ucyAjIE9iamVjdCdzIGl0ZW0gY2FuIGJlIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0IGBjb21taXRgIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBwYXJhbSwgaXQgY2FuIGFjY2VwdCBhbnRob3IgcGFyYW1zLiBZb3UgY2FuIGNvbW1pdCBtdXRhdGlvbiBhbmQgZG8gYW55IG90aGVyIHRoaW5ncyBpbiB0aGlzIGZ1bmN0aW9uLiBzcGVjaWFsbHksIFlvdSBuZWVkIHRvIHBhc3MgYW50aG9yIHBhcmFtcyBmcm9tIHRoZSBtYXBwZWQgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovdmFyIG1hcE11dGF0aW9ucz1ub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24obmFtZXNwYWNlLG11dGF0aW9ucyl7dmFyIHJlcz17fTtub3JtYWxpemVNYXAobXV0YXRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uKHJlZil7dmFyIGtleT1yZWYua2V5O3ZhciB2YWw9cmVmLnZhbDtyZXNba2V5XT1mdW5jdGlvbiBtYXBwZWRNdXRhdGlvbigpe3ZhciBhcmdzPVtdLGxlbj1hcmd1bWVudHMubGVuZ3RoO3doaWxlKGxlbi0tKXthcmdzW2xlbl09YXJndW1lbnRzW2xlbl07fS8vIEdldCB0aGUgY29tbWl0IG1ldGhvZCBmcm9tIHN0b3JlXG52YXIgY29tbWl0PXRoaXMuJHN0b3JlLmNvbW1pdDtpZihuYW1lc3BhY2Upe3ZhciBtb2R1bGU9Z2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsJ21hcE11dGF0aW9ucycsbmFtZXNwYWNlKTtpZighbW9kdWxlKXtyZXR1cm47fWNvbW1pdD1tb2R1bGUuY29udGV4dC5jb21taXQ7fXJldHVybiB0eXBlb2YgdmFsPT09J2Z1bmN0aW9uJz92YWwuYXBwbHkodGhpcyxbY29tbWl0XS5jb25jYXQoYXJncykpOmNvbW1pdC5hcHBseSh0aGlzLiRzdG9yZSxbdmFsXS5jb25jYXQoYXJncykpO307fSk7cmV0dXJuIHJlczt9KTsvKipcbiAgICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBnZXR0aW5nIHRoZSBnZXR0ZXJzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICAgKiBAcGFyYW0ge09iamVjdHxBcnJheX0gZ2V0dGVyc1xuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL3ZhciBtYXBHZXR0ZXJzPW5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbihuYW1lc3BhY2UsZ2V0dGVycyl7dmFyIHJlcz17fTtub3JtYWxpemVNYXAoZ2V0dGVycykuZm9yRWFjaChmdW5jdGlvbihyZWYpe3ZhciBrZXk9cmVmLmtleTt2YXIgdmFsPXJlZi52YWw7Ly8gVGhlIG5hbWVzcGFjZSBoYXMgYmVlbiBtdXRhdGVkIGJ5IG5vcm1hbGl6ZU5hbWVzcGFjZVxudmFsPW5hbWVzcGFjZSt2YWw7cmVzW2tleV09ZnVuY3Rpb24gbWFwcGVkR2V0dGVyKCl7aWYobmFtZXNwYWNlJiYhZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsJ21hcEdldHRlcnMnLG5hbWVzcGFjZSkpe3JldHVybjt9cmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnNbdmFsXTt9Oy8vIG1hcmsgdnVleCBnZXR0ZXIgZm9yIGRldnRvb2xzXG5yZXNba2V5XS52dWV4PXRydWU7fSk7cmV0dXJuIHJlczt9KTsvKipcbiAgICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBkaXNwYXRjaCB0aGUgYWN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICAgKiBAcGFyYW0ge09iamVjdHxBcnJheX0gYWN0aW9ucyAjIE9iamVjdCdzIGl0ZW0gY2FuIGJlIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0IGBkaXNwYXRjaGAgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IHBhcmFtLCBpdCBjYW4gYWNjZXB0IGFudGhvciBwYXJhbXMuIFlvdSBjYW4gZGlzcGF0Y2ggYWN0aW9uIGFuZCBkbyBhbnkgb3RoZXIgdGhpbmdzIGluIHRoaXMgZnVuY3Rpb24uIHNwZWNpYWxseSwgWW91IG5lZWQgdG8gcGFzcyBhbnRob3IgcGFyYW1zIGZyb20gdGhlIG1hcHBlZCBmdW5jdGlvbi5cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi92YXIgbWFwQWN0aW9ucz1ub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24obmFtZXNwYWNlLGFjdGlvbnMpe3ZhciByZXM9e307bm9ybWFsaXplTWFwKGFjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24ocmVmKXt2YXIga2V5PXJlZi5rZXk7dmFyIHZhbD1yZWYudmFsO3Jlc1trZXldPWZ1bmN0aW9uIG1hcHBlZEFjdGlvbigpe3ZhciBhcmdzPVtdLGxlbj1hcmd1bWVudHMubGVuZ3RoO3doaWxlKGxlbi0tKXthcmdzW2xlbl09YXJndW1lbnRzW2xlbl07fS8vIGdldCBkaXNwYXRjaCBmdW5jdGlvbiBmcm9tIHN0b3JlXG52YXIgZGlzcGF0Y2g9dGhpcy4kc3RvcmUuZGlzcGF0Y2g7aWYobmFtZXNwYWNlKXt2YXIgbW9kdWxlPWdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCdtYXBBY3Rpb25zJyxuYW1lc3BhY2UpO2lmKCFtb2R1bGUpe3JldHVybjt9ZGlzcGF0Y2g9bW9kdWxlLmNvbnRleHQuZGlzcGF0Y2g7fXJldHVybiB0eXBlb2YgdmFsPT09J2Z1bmN0aW9uJz92YWwuYXBwbHkodGhpcyxbZGlzcGF0Y2hdLmNvbmNhdChhcmdzKSk6ZGlzcGF0Y2guYXBwbHkodGhpcy4kc3RvcmUsW3ZhbF0uY29uY2F0KGFyZ3MpKTt9O30pO3JldHVybiByZXM7fSk7LyoqXG4gICAqIFJlYmluZGluZyBuYW1lc3BhY2UgcGFyYW0gZm9yIG1hcFhYWCBmdW5jdGlvbiBpbiBzcGVjaWFsIHNjb3BlZCwgYW5kIHJldHVybiB0aGVtIGJ5IHNpbXBsZSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL3ZhciBjcmVhdGVOYW1lc3BhY2VkSGVscGVycz1mdW5jdGlvbiBjcmVhdGVOYW1lc3BhY2VkSGVscGVycyhuYW1lc3BhY2Upe3JldHVybnttYXBTdGF0ZTptYXBTdGF0ZS5iaW5kKG51bGwsbmFtZXNwYWNlKSxtYXBHZXR0ZXJzOm1hcEdldHRlcnMuYmluZChudWxsLG5hbWVzcGFjZSksbWFwTXV0YXRpb25zOm1hcE11dGF0aW9ucy5iaW5kKG51bGwsbmFtZXNwYWNlKSxtYXBBY3Rpb25zOm1hcEFjdGlvbnMuYmluZChudWxsLG5hbWVzcGFjZSl9O307LyoqXG4gICAqIE5vcm1hbGl6ZSB0aGUgbWFwXG4gICAqIG5vcm1hbGl6ZU1hcChbMSwgMiwgM10pID0+IFsgeyBrZXk6IDEsIHZhbDogMSB9LCB7IGtleTogMiwgdmFsOiAyIH0sIHsga2V5OiAzLCB2YWw6IDMgfSBdXG4gICAqIG5vcm1hbGl6ZU1hcCh7YTogMSwgYjogMiwgYzogM30pID0+IFsgeyBrZXk6ICdhJywgdmFsOiAxIH0sIHsga2V5OiAnYicsIHZhbDogMiB9LCB7IGtleTogJ2MnLCB2YWw6IDMgfSBdXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBtYXBcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9mdW5jdGlvbiBub3JtYWxpemVNYXAobWFwKXtpZighaXNWYWxpZE1hcChtYXApKXtyZXR1cm5bXTt9cmV0dXJuIEFycmF5LmlzQXJyYXkobWFwKT9tYXAubWFwKGZ1bmN0aW9uKGtleSl7cmV0dXJue2tleTprZXksdmFsOmtleX07fSk6T2JqZWN0LmtleXMobWFwKS5tYXAoZnVuY3Rpb24oa2V5KXtyZXR1cm57a2V5OmtleSx2YWw6bWFwW2tleV19O30pO30vKipcbiAgICogVmFsaWRhdGUgd2hldGhlciBnaXZlbiBtYXAgaXMgdmFsaWQgb3Igbm90XG4gICAqIEBwYXJhbSB7Kn0gbWFwXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL2Z1bmN0aW9uIGlzVmFsaWRNYXAobWFwKXtyZXR1cm4gQXJyYXkuaXNBcnJheShtYXApfHxpc09iamVjdCQxKG1hcCk7fS8qKlxuICAgKiBSZXR1cm4gYSBmdW5jdGlvbiBleHBlY3QgdHdvIHBhcmFtIGNvbnRhaW5zIG5hbWVzcGFjZSBhbmQgbWFwLiBpdCB3aWxsIG5vcm1hbGl6ZSB0aGUgbmFtZXNwYWNlIGFuZCB0aGVuIHRoZSBwYXJhbSdzIGZ1bmN0aW9uIHdpbGwgaGFuZGxlIHRoZSBuZXcgbmFtZXNwYWNlIGFuZCB0aGUgbWFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICovZnVuY3Rpb24gbm9ybWFsaXplTmFtZXNwYWNlKGZuKXtyZXR1cm4gZnVuY3Rpb24obmFtZXNwYWNlLG1hcCl7aWYodHlwZW9mIG5hbWVzcGFjZSE9PSdzdHJpbmcnKXttYXA9bmFtZXNwYWNlO25hbWVzcGFjZT0nJzt9ZWxzZSBpZihuYW1lc3BhY2UuY2hhckF0KG5hbWVzcGFjZS5sZW5ndGgtMSkhPT0nLycpe25hbWVzcGFjZSs9Jy8nO31yZXR1cm4gZm4obmFtZXNwYWNlLG1hcCk7fTt9LyoqXG4gICAqIFNlYXJjaCBhIHNwZWNpYWwgbW9kdWxlIGZyb20gc3RvcmUgYnkgbmFtZXNwYWNlLiBpZiBtb2R1bGUgbm90IGV4aXN0LCBwcmludCBlcnJvciBtZXNzYWdlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gc3RvcmVcbiAgICogQHBhcmFtIHtTdHJpbmd9IGhlbHBlclxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovZnVuY3Rpb24gZ2V0TW9kdWxlQnlOYW1lc3BhY2Uoc3RvcmUsaGVscGVyLG5hbWVzcGFjZSl7dmFyIG1vZHVsZT1zdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcFtuYW1lc3BhY2VdO3JldHVybiBtb2R1bGU7fXZhciBpbmRleF9lc209e1N0b3JlOlN0b3JlLGluc3RhbGw6aW5zdGFsbCx2ZXJzaW9uOiczLjEuMicsbWFwU3RhdGU6bWFwU3RhdGUsbWFwTXV0YXRpb25zOm1hcE11dGF0aW9ucyxtYXBHZXR0ZXJzOm1hcEdldHRlcnMsbWFwQWN0aW9uczptYXBBY3Rpb25zLGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzOmNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzfTsvLyBUYWtlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RhdGFUcmFuc2Zlckl0ZW1cbi8vIFJldHVybnM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GaWxlU3lzdGVtRmlsZUVudHJ5XG52YXIgZ2V0RmlsZUVudHJ5RnJvbURhdGFUcmFuc2Zlckl0ZW09ZnVuY3Rpb24gZ2V0RmlsZUVudHJ5RnJvbURhdGFUcmFuc2Zlckl0ZW0oZmlsZSl7aWYodHlwZW9mIGZpbGUuZ2V0QXNFbnRyeT09PSdmdW5jdGlvbicpe3JldHVybiBmaWxlLmdldEFzRW50cnkoKTt9ZWxzZSBpZih0eXBlb2YgZmlsZS53ZWJraXRHZXRBc0VudHJ5PT09J2Z1bmN0aW9uJyl7cmV0dXJuIGZpbGUud2Via2l0R2V0QXNFbnRyeSgpO31yZXR1cm4gdW5kZWZpbmVkO307dmFyIGlzV2FudGVkRmlsZT1mdW5jdGlvbiBpc1dhbnRlZEZpbGUoZmlsZW5hbWUpe3ZhciB1bndhbnRlZEZpbGVzPVsvLyBTdG9yZXMgdGh1bWJuYWlscyBvbiBPU1hcbicuRFNfU3RvcmUnXTtyZXR1cm4gdW53YW50ZWRGaWxlcy5pbmRleE9mKGZpbGVuYW1lKT09PS0xO307dmFyIGdldFBhdGg9ZnVuY3Rpb24gZ2V0UGF0aChwYXRoLG5hbWUpe3JldHVyblwiXCIuY29uY2F0KHBhdGgsXCIvXCIpLmNvbmNhdChuYW1lKTt9O3ZhciBleHRyYWN0RnJvbUl0ZW1zPWZ1bmN0aW9uIGV4dHJhY3RGcm9tSXRlbXMoaXRlbXMpe3ZhciBmaWxlcz1bXTt2YXIgdHJhdmVyc2VEaXJlY3RvcnlUcmVlPWZ1bmN0aW9uIHRyYXZlcnNlRGlyZWN0b3J5VHJlZShmaWxlRW50cnkpe3ZhciBwYXRoPWFyZ3VtZW50cy5sZW5ndGg+MSYmYXJndW1lbnRzWzFdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1sxXTonJzt2YXIgcHJvbWlzZXM9W107cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpe2lmKGZpbGVFbnRyeS5pc0RpcmVjdG9yeSl7dmFyIHJlYWRlcj1maWxlRW50cnkuY3JlYXRlUmVhZGVyKCk7dmFyIHJlYWRGaWxlcz1mdW5jdGlvbiByZWFkRmlsZXMoKXtyZWFkZXIucmVhZEVudHJpZXMoZnVuY3Rpb24oZGlyQ29udGVudCl7ZGlyQ29udGVudC5mb3JFYWNoKGZ1bmN0aW9uKGRpckl0ZW0pe3Byb21pc2VzLnB1c2godHJhdmVyc2VEaXJlY3RvcnlUcmVlKGRpckl0ZW0sZ2V0UGF0aChwYXRoLGZpbGVFbnRyeS5uYW1lKSkpO30pO2lmKGRpckNvbnRlbnQubGVuZ3RoKXtyZWFkRmlsZXMoKTt9ZWxzZXtQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihyZXNvbHZlKTt9fSk7fTtyZWFkRmlsZXMoKTt9ZWxzZSBpZihmaWxlRW50cnkuaXNGaWxlKXtmaWxlRW50cnkuZmlsZShmdW5jdGlvbihmaWxlKXtpZihpc1dhbnRlZEZpbGUoZmlsZS5uYW1lKSl7ZmlsZS5wYXRoPWdldFBhdGgocGF0aCxmaWxlLm5hbWUpO2ZpbGVzLnB1c2goZmlsZSk7fXJlc29sdmUoKTt9KTt9fSk7fTt2YXIgZXh0cmFjdFVybD1mdW5jdGlvbiBleHRyYWN0VXJsKGl0ZW0pe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKXtpdGVtLmdldEFzU3RyaW5nKGZ1bmN0aW9uKHVybCl7ZmlsZXMucHVzaCh7dXJsOnVybCxzb3VyY2U6J2RyYWdnZWQtZnJvbS13ZWInfSk7cmVzb2x2ZSgpO30pO30pO307dmFyIHByb21pc2VzPVtdO2Zvcih2YXIgaT0wO2k8aXRlbXMubGVuZ3RoO2krPTEpe3ZhciBpdGVtPWl0ZW1zW2ldO2lmKGl0ZW0ua2luZD09PSdmaWxlJyYmaXRlbS50eXBlJiZpdGVtLnR5cGUhPT0nYXBwbGljYXRpb24veC1tb3otZmlsZScpe3ZhciBmaWxlPWl0ZW0uZ2V0QXNGaWxlKCk7aWYoZmlsZSl7Ly8gSXQgaXMgYSBzaW1wbGUgZmlsZVxuZmlsZXMucHVzaChmaWxlKTtwcm9taXNlcy5wdXNoKFByb21pc2UucmVzb2x2ZSgpKTt9fWVsc2UgaWYoaXRlbS5raW5kPT09J2ZpbGUnKXsvLyBJdCdzIG5vdCBhIHNpbXBsZSBmaWxlLCBwb3NzaWJseSBmb2xkZXIsIHRyeSB0byBzY291dCBpdHMgY29udGVudC5cbnZhciBfZmlsZT1nZXRGaWxlRW50cnlGcm9tRGF0YVRyYW5zZmVySXRlbShpdGVtKTtpZihfZmlsZSl7cHJvbWlzZXMucHVzaCh0cmF2ZXJzZURpcmVjdG9yeVRyZWUoX2ZpbGUpKTt9fWVsc2UgaWYoaXRlbS5raW5kPT09J3N0cmluZycmJml0ZW0udHlwZT09PSd0ZXh0L3VyaS1saXN0Jyl7cHJvbWlzZXMucHVzaChleHRyYWN0VXJsKGl0ZW0pKTt9fXJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbigpe3JldHVybiBmaWxlczt9KTt9O3ZhciBleHRyYWN0RnJvbUZpbGVzPWZ1bmN0aW9uIGV4dHJhY3RGcm9tRmlsZXMoZmlsZUxpc3Qpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKXt2YXIgZmlsZXM9W107Zm9yKHZhciBpPTA7aTxmaWxlTGlzdC5sZW5ndGg7aSs9MSl7ZmlsZXMucHVzaChmaWxlTGlzdFtpXSk7fXJlc29sdmUoZmlsZXMpO30pO307Ly8gVGFrc2VzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRGF0YVRyYW5zZmVyXG4vLyBSZXR1cm5zIEFycmF5IG9mIHBvc3NpYmxlIGZpbGUgcmVwcmVzZW50YXRpb25zOlxuLy8gMS4gRmlsZSBjbGFzcyBpbnN0YW5jZSAtIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GaWxlXG4vLyAyLiBCbG9iIGNsYXNzIGluc3RhbmNlIC0gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0Jsb2Jcbi8vIDMuIE9iamVjdCB3aXRoIHVybCB0byByZXNvdXJjZSAtIHsgdXJsOiAnaHR0cHM6Ly9maWxlcy5jb20vZmlsZS5qcGcnIH1cbnZhciBleHRyYWN0RmlsZXNGcm9tRGF0YVRyYW5zZmVyPWZ1bmN0aW9uIGV4dHJhY3RGaWxlc0Zyb21EYXRhVHJhbnNmZXIoZGF0YVRyYW5zZmVyKXsvLyBpZiB0aGVyZSBpcyBubyBkYXRhVHJhbnNmZXIgb2JqZWN0LCBqdXN0IHJldHVybiBlbXB0eSBwcm9taXNlXG5pZighZGF0YVRyYW5zZmVyKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTt9aWYoZGF0YVRyYW5zZmVyLml0ZW1zKXtyZXR1cm4gZXh0cmFjdEZyb21JdGVtcyhkYXRhVHJhbnNmZXIuaXRlbXMpO31pZihkYXRhVHJhbnNmZXIuZmlsZXMpe3JldHVybiBleHRyYWN0RnJvbUZpbGVzKGRhdGFUcmFuc2Zlci5maWxlcyk7fS8vIFNhZmV0eSBmYWxsYmFjayBpZiB0aGlzIGRhdGFUcmFuc2ZlciBoYXMgbm90aGluZyB3ZSBjYW4gbWFrZSBzZW5zZSBvZi5cbnJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO307Ly9cbnZhciBzY3JpcHQ9e2RhdGE6ZnVuY3Rpb24gZGF0YSgpe3JldHVybntmaWxlQWJvdXRUb0JlRHJvcHBlZDpmYWxzZX07fSxtZXRob2RzOl9vYmplY3RTcHJlYWQoe30saW5kZXhfZXNtLm1hcEFjdGlvbnMoWydhZGRGaWxlJywndXBkYXRlU2VsZWN0TGFiZWxBY3RpdmUnXSkse2RyYWdlbnRlcjpmdW5jdGlvbiBkcmFnZW50ZXIoZXZlbnQpe2V2ZW50LnByZXZlbnREZWZhdWx0KCk7dGhpcy5maWxlQWJvdXRUb0JlRHJvcHBlZD10cnVlO3RoaXMudXBkYXRlU2VsZWN0TGFiZWxBY3RpdmUodHJ1ZSk7fSxkcmFnb3ZlcjpmdW5jdGlvbiBkcmFnb3ZlcihldmVudCl7ZXZlbnQucHJldmVudERlZmF1bHQoKTt9LGRyYWdsZWF2ZTpmdW5jdGlvbiBkcmFnbGVhdmUoKXt0aGlzLmZpbGVBYm91dFRvQmVEcm9wcGVkPWZhbHNlO3RoaXMudXBkYXRlU2VsZWN0TGFiZWxBY3RpdmUoZmFsc2UpO30sZHJvcDpmdW5jdGlvbiBkcm9wKGV2ZW50KXt2YXIgX3RoaXM0PXRoaXM7ZXZlbnQucHJldmVudERlZmF1bHQoKTt0aGlzLmZpbGVBYm91dFRvQmVEcm9wcGVkPWZhbHNlO2V4dHJhY3RGaWxlc0Zyb21EYXRhVHJhbnNmZXIoZXZlbnQuZGF0YVRyYW5zZmVyKS50aGVuKGZ1bmN0aW9uKGZpbGVzKXtmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uKGZpbGUpe190aGlzNC5hZGRGaWxlKGZpbGUpO30pO30pO30scGFzdGU6ZnVuY3Rpb24gcGFzdGUoZXZlbnQpe3ZhciBfdGhpczU9dGhpcztleHRyYWN0RmlsZXNGcm9tRGF0YVRyYW5zZmVyKGV2ZW50LmNsaXBib2FyZERhdGEpLnRoZW4oZnVuY3Rpb24oZmlsZXMpe2ZpbGVzLmZvckVhY2goZnVuY3Rpb24oZmlsZSl7ZmlsZS5uYW1lPSdwYXN0ZWQgZmlsZSc7X3RoaXM1LmFkZEZpbGUoZmlsZSk7fSk7fSk7fX0pLG1vdW50ZWQ6ZnVuY3Rpb24gbW91bnRlZCgpe3ZhciByb290PXRoaXMuJHJvb3QuJGVsO3ZhciBkcm9wWm9uZT10aGlzLiRyZWZzLmRyb3Bab25lO3Jvb3QuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJyx0aGlzLmRyYWdlbnRlcixmYWxzZSk7cm9vdC5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsdGhpcy5wYXN0ZSxmYWxzZSk7ZHJvcFpvbmUuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLHRoaXMuZHJhZ292ZXIsZmFsc2UpO2Ryb3Bab25lLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdsZWF2ZScsdGhpcy5kcmFnbGVhdmUsZmFsc2UpO2Ryb3Bab25lLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLHRoaXMuZHJvcCxmYWxzZSk7fSxiZWZvcmVEZXN0cm95OmZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKXt2YXIgcm9vdD10aGlzLiRyb290LiRlbDtyb290LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RyYWdlbnRlcicsdGhpcy5kcmFnZW50ZXIpO3Jvb3QucmVtb3ZlRXZlbnRMaXN0ZW5lcigncGFzdGUnLHRoaXMucGFzdGUpO319O2Z1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCh0ZW1wbGF0ZSxzdHlsZSxzY3JpcHQsc2NvcGVJZCxpc0Z1bmN0aW9uYWxUZW1wbGF0ZSxtb2R1bGVJZGVudGlmaWVyLyogc2VydmVyIG9ubHkgKi8sc2hhZG93TW9kZSxjcmVhdGVJbmplY3RvcixjcmVhdGVJbmplY3RvclNTUixjcmVhdGVJbmplY3RvclNoYWRvdyl7aWYodHlwZW9mIHNoYWRvd01vZGUhPT0nYm9vbGVhbicpe2NyZWF0ZUluamVjdG9yU1NSPWNyZWF0ZUluamVjdG9yO2NyZWF0ZUluamVjdG9yPXNoYWRvd01vZGU7c2hhZG93TW9kZT1mYWxzZTt9Ly8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcC5cbnZhciBvcHRpb25zPXR5cGVvZiBzY3JpcHQ9PT0nZnVuY3Rpb24nP3NjcmlwdC5vcHRpb25zOnNjcmlwdDsvLyByZW5kZXIgZnVuY3Rpb25zXG5pZih0ZW1wbGF0ZSYmdGVtcGxhdGUucmVuZGVyKXtvcHRpb25zLnJlbmRlcj10ZW1wbGF0ZS5yZW5kZXI7b3B0aW9ucy5zdGF0aWNSZW5kZXJGbnM9dGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO29wdGlvbnMuX2NvbXBpbGVkPXRydWU7Ly8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuaWYoaXNGdW5jdGlvbmFsVGVtcGxhdGUpe29wdGlvbnMuZnVuY3Rpb25hbD10cnVlO319Ly8gc2NvcGVkSWRcbmlmKHNjb3BlSWQpe29wdGlvbnMuX3Njb3BlSWQ9c2NvcGVJZDt9dmFyIGhvb2s7aWYobW9kdWxlSWRlbnRpZmllcil7Ly8gc2VydmVyIGJ1aWxkXG5ob29rPWZ1bmN0aW9uIGhvb2soY29udGV4dCl7Ly8gMi4zIGluamVjdGlvblxuY29udGV4dD1jb250ZXh0fHwvLyBjYWNoZWQgY2FsbFxudGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR8fC8vIHN0YXRlZnVsXG50aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuJHZub2RlJiZ0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dDsvLyBmdW5jdGlvbmFsXG4vLyAyLjIgd2l0aCBydW5Jbk5ld0NvbnRleHQ6IHRydWVcbmlmKCFjb250ZXh0JiZ0eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfXyE9PSd1bmRlZmluZWQnKXtjb250ZXh0PV9fVlVFX1NTUl9DT05URVhUX187fS8vIGluamVjdCBjb21wb25lbnQgc3R5bGVzXG5pZihzdHlsZSl7c3R5bGUuY2FsbCh0aGlzLGNyZWF0ZUluamVjdG9yU1NSKGNvbnRleHQpKTt9Ly8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcmVuY2VcbmlmKGNvbnRleHQmJmNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzKXtjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcik7fX07Ly8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbi8vIG5ldmVyIGdldHMgY2FsbGVkXG5vcHRpb25zLl9zc3JSZWdpc3Rlcj1ob29rO31lbHNlIGlmKHN0eWxlKXtob29rPXNoYWRvd01vZGU/ZnVuY3Rpb24oY29udGV4dCl7c3R5bGUuY2FsbCh0aGlzLGNyZWF0ZUluamVjdG9yU2hhZG93KGNvbnRleHQsdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSk7fTpmdW5jdGlvbihjb250ZXh0KXtzdHlsZS5jYWxsKHRoaXMsY3JlYXRlSW5qZWN0b3IoY29udGV4dCkpO307fWlmKGhvb2spe2lmKG9wdGlvbnMuZnVuY3Rpb25hbCl7Ly8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG52YXIgb3JpZ2luYWxSZW5kZXI9b3B0aW9ucy5yZW5kZXI7b3B0aW9ucy5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uKGgsY29udGV4dCl7aG9vay5jYWxsKGNvbnRleHQpO3JldHVybiBvcmlnaW5hbFJlbmRlcihoLGNvbnRleHQpO307fWVsc2V7Ly8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcbnZhciBleGlzdGluZz1vcHRpb25zLmJlZm9yZUNyZWF0ZTtvcHRpb25zLmJlZm9yZUNyZWF0ZT1leGlzdGluZz9bXS5jb25jYXQoZXhpc3RpbmcsaG9vayk6W2hvb2tdO319cmV0dXJuIHNjcmlwdDt9dmFyIGlzT2xkSUU9dHlwZW9mIG5hdmlnYXRvciE9PSd1bmRlZmluZWQnJiYvbXNpZSBbNi05XVxcXFxiLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSk7Lyogc2NyaXB0ICovdmFyIF9fdnVlX3NjcmlwdF9fPXNjcmlwdDsvKiB0ZW1wbGF0ZSAqL3ZhciBfX3Z1ZV9yZW5kZXJfXz1mdW5jdGlvbiBfX3Z1ZV9yZW5kZXJfXygpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYyhcImRpdlwiLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6X3ZtLmZpbGVBYm91dFRvQmVEcm9wcGVkLGV4cHJlc3Npb246XCJmaWxlQWJvdXRUb0JlRHJvcHBlZFwifV0scmVmOlwiZHJvcFpvbmVcIixzdGF0aWNDbGFzczpcImZzcC1kcm9wem9uZS1vdmVybGF5XCJ9LFtfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1kcm9wem9uZS1vdmVybGF5X190ZXh0XCJ9KV0pO307dmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fPVtdO19fdnVlX3JlbmRlcl9fLl93aXRoU3RyaXBwZWQ9dHJ1ZTsvKiBzdHlsZSAqL3ZhciBfX3Z1ZV9pbmplY3Rfc3R5bGVzX189dW5kZWZpbmVkOy8qIHNjb3BlZCAqL3ZhciBfX3Z1ZV9zY29wZV9pZF9fPXVuZGVmaW5lZDsvKiBtb2R1bGUgaWRlbnRpZmllciAqL3ZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fPXVuZGVmaW5lZDsvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovdmFyIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXz1mYWxzZTsvKiBzdHlsZSBpbmplY3QgKi8gLyogc3R5bGUgaW5qZWN0IFNTUiAqLyAvKiBzdHlsZSBpbmplY3Qgc2hhZG93IGRvbSAqL3ZhciBEcmFnQW5kRHJvcD1ub3JtYWxpemVDb21wb25lbnQoe3JlbmRlcjpfX3Z1ZV9yZW5kZXJfXyxzdGF0aWNSZW5kZXJGbnM6X192dWVfc3RhdGljUmVuZGVyRm5zX199LF9fdnVlX2luamVjdF9zdHlsZXNfXyxfX3Z1ZV9zY3JpcHRfXyxfX3Z1ZV9zY29wZV9pZF9fLF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyxfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fLGZhbHNlLHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkKTsvL1xudmFyIHNjcmlwdCQxPXtjb21wdXRlZDpfb2JqZWN0U3ByZWFkKHt9LGluZGV4X2VzbS5tYXBHZXR0ZXJzKFsnbW9iaWxlTmF2QWN0aXZlJ10pKSxtZXRob2RzOl9vYmplY3RTcHJlYWQoe30saW5kZXhfZXNtLm1hcEFjdGlvbnMoWyd1cGRhdGVNb2JpbGVOYXZBY3RpdmUnXSkse3RvZ2dsZU5hdjpmdW5jdGlvbiB0b2dnbGVOYXYoKXt0aGlzLnVwZGF0ZU1vYmlsZU5hdkFjdGl2ZSghdGhpcy5tb2JpbGVOYXZBY3RpdmUpO319KX07Lyogc2NyaXB0ICovdmFyIF9fdnVlX3NjcmlwdF9fJDE9c2NyaXB0JDE7LyogdGVtcGxhdGUgKi92YXIgX192dWVfcmVuZGVyX18kMT1mdW5jdGlvbiBfX3Z1ZV9yZW5kZXJfXyQxKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLW1vYmlsZS1tZW51XCIsb246e2NsaWNrOmZ1bmN0aW9uIGNsaWNrKCRldmVudCl7cmV0dXJuIF92bS50b2dnbGVOYXYoKTt9fX0pO307dmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJDE9W107X192dWVfcmVuZGVyX18kMS5fd2l0aFN0cmlwcGVkPXRydWU7Lyogc3R5bGUgKi92YXIgX192dWVfaW5qZWN0X3N0eWxlc19fJDE9dW5kZWZpbmVkOy8qIHNjb3BlZCAqL3ZhciBfX3Z1ZV9zY29wZV9pZF9fJDE9dW5kZWZpbmVkOy8qIG1vZHVsZSBpZGVudGlmaWVyICovdmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMT11bmRlZmluZWQ7LyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL3ZhciBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMT1mYWxzZTsvKiBzdHlsZSBpbmplY3QgKi8gLyogc3R5bGUgaW5qZWN0IFNTUiAqLyAvKiBzdHlsZSBpbmplY3Qgc2hhZG93IGRvbSAqL3ZhciBNb2JpbGVNZW51QnV0dG9uPW5vcm1hbGl6ZUNvbXBvbmVudCh7cmVuZGVyOl9fdnVlX3JlbmRlcl9fJDEsc3RhdGljUmVuZGVyRm5zOl9fdnVlX3N0YXRpY1JlbmRlckZuc19fJDF9LF9fdnVlX2luamVjdF9zdHlsZXNfXyQxLF9fdnVlX3NjcmlwdF9fJDEsX192dWVfc2NvcGVfaWRfXyQxLF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQxLF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMSxmYWxzZSx1bmRlZmluZWQsdW5kZWZpbmVkLHVuZGVmaW5lZCk7Ly9cbnZhciBzY3JpcHQkMj17Y29tcHV0ZWQ6X29iamVjdFNwcmVhZCh7fSxpbmRleF9lc20ubWFwR2V0dGVycyhbJ2Nyb3BGaWxlcycsJ2N1c3RvbVNvdXJjZU5hbWUnLCdmcm9tU291cmNlcycsJ21vYmlsZU5hdkFjdGl2ZSddKSx7Y3VzdG9tU291cmNlTGFiZWw6ZnVuY3Rpb24gY3VzdG9tU291cmNlTGFiZWwoKXtyZXR1cm4gdGhpcy5jdXN0b21Tb3VyY2VOYW1lfHwnQ3VzdG9tIFNvdXJjZSc7fSxpc0N1c3RvbVNvdXJjZTpmdW5jdGlvbiBpc0N1c3RvbVNvdXJjZSgpe3JldHVybiB0aGlzLnNvdXJjZS5uYW1lPT09J2N1c3RvbXNvdXJjZSc7fX0pLGNvbXBvbmVudHM6e01vYmlsZU1lbnVCdXR0b246TW9iaWxlTWVudUJ1dHRvbn0scHJvcHM6Wydzb3VyY2UnLCdoaWRlSGVhZGVyJywnaGlkZU1lbnUnXX07Lyogc2NyaXB0ICovdmFyIF9fdnVlX3NjcmlwdF9fJDI9c2NyaXB0JDI7LyogdGVtcGxhdGUgKi92YXIgX192dWVfcmVuZGVyX18kMj1mdW5jdGlvbiBfX3Z1ZV9yZW5kZXJfXyQyKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLWhlYWRlclwiLFwiY2xhc3NcIjp7XCJmc3AtaGVhZGVyLS1oaWRlXCI6X3ZtLmhpZGVIZWFkZXJ9fSxbX3ZtLnNvdXJjZSYmIV92bS5tb2JpbGVOYXZBY3RpdmU/X2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLWhlYWRlci1pY29uXCIsXCJjbGFzc1wiOlwiZnNwLW5hdmJhci0tXCIrX3ZtLnNvdXJjZS5uYW1lLGF0dHJzOnt0aXRsZTpfdm0udChfdm0uc291cmNlLmxhYmVsKX19KTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF92bS5zb3VyY2UmJl92bS5pc0N1c3RvbVNvdXJjZSYmIV92bS5tb2JpbGVOYXZBY3RpdmU/X2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLWhlYWRlci10ZXh0LS12aXNpYmxlXCJ9LFtfdm0uX3YoXCIgXCIrX3ZtLl9zKF92bS50KF92bS5jdXN0b21Tb3VyY2VMYWJlbCkpK1wiIFwiKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX3ZtLm1vYmlsZU5hdkFjdGl2ZT9fYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3AtaGVhZGVyLXRleHRcIn0sW192bS5fdihcIiBcIitfdm0uX3MoX3ZtLnQoXCJTZWxlY3QgRnJvbVwiKSkrXCIgXCIpXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwhX3ZtLm1vYmlsZU5hdkFjdGl2ZT9fdm0uX3QoXCJkZWZhdWx0XCIpOl92bS5fZSgpLF92bS5fdihcIiBcIiksIV92bS5oaWRlTWVudSYmIV92bS5jcm9wRmlsZXM/X2MoXCJtb2JpbGUtbWVudS1idXR0b25cIik6X3ZtLl9lKCldLDIpO307dmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJDI9W107X192dWVfcmVuZGVyX18kMi5fd2l0aFN0cmlwcGVkPXRydWU7Lyogc3R5bGUgKi92YXIgX192dWVfaW5qZWN0X3N0eWxlc19fJDI9dW5kZWZpbmVkOy8qIHNjb3BlZCAqL3ZhciBfX3Z1ZV9zY29wZV9pZF9fJDI9dW5kZWZpbmVkOy8qIG1vZHVsZSBpZGVudGlmaWVyICovdmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMj11bmRlZmluZWQ7LyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL3ZhciBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMj1mYWxzZTsvKiBzdHlsZSBpbmplY3QgKi8gLyogc3R5bGUgaW5qZWN0IFNTUiAqLyAvKiBzdHlsZSBpbmplY3Qgc2hhZG93IGRvbSAqL3ZhciBDb250ZW50SGVhZGVyPW5vcm1hbGl6ZUNvbXBvbmVudCh7cmVuZGVyOl9fdnVlX3JlbmRlcl9fJDIsc3RhdGljUmVuZGVyRm5zOl9fdnVlX3N0YXRpY1JlbmRlckZuc19fJDJ9LF9fdnVlX2luamVjdF9zdHlsZXNfXyQyLF9fdnVlX3NjcmlwdF9fJDIsX192dWVfc2NvcGVfaWRfXyQyLF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQyLF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMixmYWxzZSx1bmRlZmluZWQsdW5kZWZpbmVkLHVuZGVmaW5lZCk7LyoqXG4gICAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAgICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gICAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICAgKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gICAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gICAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICAgKi8gLyoqIFVzZWQgYXMgdGhlIGBUeXBlRXJyb3JgIG1lc3NhZ2UgZm9yIFwiRnVuY3Rpb25zXCIgbWV0aG9kcy4gKi92YXIgRlVOQ19FUlJPUl9URVhUPSdFeHBlY3RlZCBhIGZ1bmN0aW9uJzsvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi92YXIgTkFOPTAvMDsvKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovdmFyIHN5bWJvbFRhZyQxPSdbb2JqZWN0IFN5bWJvbF0nOy8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovdmFyIHJlVHJpbT0vXlxccyt8XFxzKyQvZzsvKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL3ZhciByZUlzQmFkSGV4PS9eWy0rXTB4WzAtOWEtZl0rJC9pOy8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi92YXIgcmVJc0JpbmFyeT0vXjBiWzAxXSskL2k7LyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovdmFyIHJlSXNPY3RhbD0vXjBvWzAtN10rJC9pOy8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovdmFyIGZyZWVQYXJzZUludD1wYXJzZUludDsvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL3ZhciBmcmVlR2xvYmFsJDE9X3R5cGVvZjIoY29tbW9uanNHbG9iYWwpPT0nb2JqZWN0JyYmY29tbW9uanNHbG9iYWwmJmNvbW1vbmpzR2xvYmFsLk9iamVjdD09PU9iamVjdCYmY29tbW9uanNHbG9iYWw7LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi92YXIgZnJlZVNlbGYkMT0odHlwZW9mIHNlbGY9PT1cInVuZGVmaW5lZFwiP1widW5kZWZpbmVkXCI6X3R5cGVvZjIoc2VsZikpPT0nb2JqZWN0JyYmc2VsZiYmc2VsZi5PYmplY3Q9PT1PYmplY3QmJnNlbGY7LyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovdmFyIHJvb3QkMT1mcmVlR2xvYmFsJDF8fGZyZWVTZWxmJDF8fEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7LyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL3ZhciBvYmplY3RQcm90byQxPU9iamVjdC5wcm90b3R5cGU7LyoqXG4gICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAgICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gICAqIG9mIHZhbHVlcy5cbiAgICovdmFyIG9iamVjdFRvU3RyaW5nJDE9b2JqZWN0UHJvdG8kMS50b1N0cmluZzsvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovdmFyIG5hdGl2ZU1heD1NYXRoLm1heCxuYXRpdmVNaW49TWF0aC5taW47LyoqXG4gICAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICAgKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgMi40LjBcbiAgICogQGNhdGVnb3J5IERhdGVcbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gICAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAgICogfSwgXy5ub3coKSk7XG4gICAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gICAqL3ZhciBub3c9ZnVuY3Rpb24gbm93KCl7cmV0dXJuIHJvb3QkMS5EYXRlLm5vdygpO307LyoqXG4gICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAgICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICAgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAgICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gICAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAgICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICAgKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICAgKiBpbnZvY2F0aW9uLlxuICAgKlxuICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICpcbiAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICpcbiAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDAuMS4wXG4gICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAgICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gICAqXG4gICAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gICAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAqIH0pKTtcbiAgICpcbiAgICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAgICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gICAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICAgKlxuICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAgICovZnVuY3Rpb24gZGVib3VuY2UoZnVuYyx3YWl0LG9wdGlvbnMpe3ZhciBsYXN0QXJncyxsYXN0VGhpcyxtYXhXYWl0LHJlc3VsdCx0aW1lcklkLGxhc3RDYWxsVGltZSxsYXN0SW52b2tlVGltZT0wLGxlYWRpbmc9ZmFsc2UsbWF4aW5nPWZhbHNlLHRyYWlsaW5nPXRydWU7aWYodHlwZW9mIGZ1bmMhPSdmdW5jdGlvbicpe3Rocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTt9d2FpdD10b051bWJlciQxKHdhaXQpfHwwO2lmKGlzT2JqZWN0JDIob3B0aW9ucykpe2xlYWRpbmc9ISFvcHRpb25zLmxlYWRpbmc7bWF4aW5nPSdtYXhXYWl0J2luIG9wdGlvbnM7bWF4V2FpdD1tYXhpbmc/bmF0aXZlTWF4KHRvTnVtYmVyJDEob3B0aW9ucy5tYXhXYWl0KXx8MCx3YWl0KTptYXhXYWl0O3RyYWlsaW5nPSd0cmFpbGluZydpbiBvcHRpb25zPyEhb3B0aW9ucy50cmFpbGluZzp0cmFpbGluZzt9ZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKXt2YXIgYXJncz1sYXN0QXJncyx0aGlzQXJnPWxhc3RUaGlzO2xhc3RBcmdzPWxhc3RUaGlzPXVuZGVmaW5lZDtsYXN0SW52b2tlVGltZT10aW1lO3Jlc3VsdD1mdW5jLmFwcGx5KHRoaXNBcmcsYXJncyk7cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSl7Ly8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbmxhc3RJbnZva2VUaW1lPXRpbWU7Ly8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbnRpbWVySWQ9c2V0VGltZW91dCh0aW1lckV4cGlyZWQsd2FpdCk7Ly8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG5yZXR1cm4gbGVhZGluZz9pbnZva2VGdW5jKHRpbWUpOnJlc3VsdDt9ZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKXt2YXIgdGltZVNpbmNlTGFzdENhbGw9dGltZS1sYXN0Q2FsbFRpbWUsdGltZVNpbmNlTGFzdEludm9rZT10aW1lLWxhc3RJbnZva2VUaW1lLHJlc3VsdD13YWl0LXRpbWVTaW5jZUxhc3RDYWxsO3JldHVybiBtYXhpbmc/bmF0aXZlTWluKHJlc3VsdCxtYXhXYWl0LXRpbWVTaW5jZUxhc3RJbnZva2UpOnJlc3VsdDt9ZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpe3ZhciB0aW1lU2luY2VMYXN0Q2FsbD10aW1lLWxhc3RDYWxsVGltZSx0aW1lU2luY2VMYXN0SW52b2tlPXRpbWUtbGFzdEludm9rZVRpbWU7Ly8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbi8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4vLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG5yZXR1cm4gbGFzdENhbGxUaW1lPT09dW5kZWZpbmVkfHx0aW1lU2luY2VMYXN0Q2FsbD49d2FpdHx8dGltZVNpbmNlTGFzdENhbGw8MHx8bWF4aW5nJiZ0aW1lU2luY2VMYXN0SW52b2tlPj1tYXhXYWl0O31mdW5jdGlvbiB0aW1lckV4cGlyZWQoKXt2YXIgdGltZT1ub3coKTtpZihzaG91bGRJbnZva2UodGltZSkpe3JldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7fS8vIFJlc3RhcnQgdGhlIHRpbWVyLlxudGltZXJJZD1zZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCxyZW1haW5pbmdXYWl0KHRpbWUpKTt9ZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpe3RpbWVySWQ9dW5kZWZpbmVkOy8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbi8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuaWYodHJhaWxpbmcmJmxhc3RBcmdzKXtyZXR1cm4gaW52b2tlRnVuYyh0aW1lKTt9bGFzdEFyZ3M9bGFzdFRoaXM9dW5kZWZpbmVkO3JldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGNhbmNlbCgpe2lmKHRpbWVySWQhPT11bmRlZmluZWQpe2NsZWFyVGltZW91dCh0aW1lcklkKTt9bGFzdEludm9rZVRpbWU9MDtsYXN0QXJncz1sYXN0Q2FsbFRpbWU9bGFzdFRoaXM9dGltZXJJZD11bmRlZmluZWQ7fWZ1bmN0aW9uIGZsdXNoKCl7cmV0dXJuIHRpbWVySWQ9PT11bmRlZmluZWQ/cmVzdWx0OnRyYWlsaW5nRWRnZShub3coKSk7fWZ1bmN0aW9uIGRlYm91bmNlZCgpe3ZhciB0aW1lPW5vdygpLGlzSW52b2tpbmc9c2hvdWxkSW52b2tlKHRpbWUpO2xhc3RBcmdzPWFyZ3VtZW50cztsYXN0VGhpcz10aGlzO2xhc3RDYWxsVGltZT10aW1lO2lmKGlzSW52b2tpbmcpe2lmKHRpbWVySWQ9PT11bmRlZmluZWQpe3JldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO31pZihtYXhpbmcpey8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG50aW1lcklkPXNldFRpbWVvdXQodGltZXJFeHBpcmVkLHdhaXQpO3JldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7fX1pZih0aW1lcklkPT09dW5kZWZpbmVkKXt0aW1lcklkPXNldFRpbWVvdXQodGltZXJFeHBpcmVkLHdhaXQpO31yZXR1cm4gcmVzdWx0O31kZWJvdW5jZWQuY2FuY2VsPWNhbmNlbDtkZWJvdW5jZWQuZmx1c2g9Zmx1c2g7cmV0dXJuIGRlYm91bmNlZDt9LyoqXG4gICAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAgICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAgICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0b1xuICAgKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAgICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICAgKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlXG4gICAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAgICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgKlxuICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICpcbiAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICpcbiAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDAuMS4wXG4gICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdXG4gICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICAgKlxuICAgKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAgICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTtcbiAgICpcbiAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gICAqL2Z1bmN0aW9uIHRocm90dGxlKGZ1bmMsd2FpdCxvcHRpb25zKXt2YXIgbGVhZGluZz10cnVlLHRyYWlsaW5nPXRydWU7aWYodHlwZW9mIGZ1bmMhPSdmdW5jdGlvbicpe3Rocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTt9aWYoaXNPYmplY3QkMihvcHRpb25zKSl7bGVhZGluZz0nbGVhZGluZydpbiBvcHRpb25zPyEhb3B0aW9ucy5sZWFkaW5nOmxlYWRpbmc7dHJhaWxpbmc9J3RyYWlsaW5nJ2luIG9wdGlvbnM/ISFvcHRpb25zLnRyYWlsaW5nOnRyYWlsaW5nO31yZXR1cm4gZGVib3VuY2UoZnVuYyx3YWl0LHsnbGVhZGluZyc6bGVhZGluZywnbWF4V2FpdCc6d2FpdCwndHJhaWxpbmcnOnRyYWlsaW5nfSk7fS8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAgICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICAgKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDAuMS4wXG4gICAqIEBjYXRlZ29yeSBMYW5nXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5pc09iamVjdCh7fSk7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBfLmlzT2JqZWN0KG51bGwpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKi9mdW5jdGlvbiBpc09iamVjdCQyKHZhbHVlKXt2YXIgdHlwZT1fdHlwZW9mMih2YWx1ZSk7cmV0dXJuISF2YWx1ZSYmKHR5cGU9PSdvYmplY3QnfHx0eXBlPT0nZnVuY3Rpb24nKTt9LyoqXG4gICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDQuMC4wXG4gICAqIEBjYXRlZ29yeSBMYW5nXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICovZnVuY3Rpb24gaXNPYmplY3RMaWtlJDEodmFsdWUpe3JldHVybiEhdmFsdWUmJl90eXBlb2YyKHZhbHVlKT09J29iamVjdCc7fS8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgNC4wLjBcbiAgICogQGNhdGVnb3J5IExhbmdcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICovZnVuY3Rpb24gaXNTeW1ib2wkMSh2YWx1ZSl7cmV0dXJuIF90eXBlb2YyKHZhbHVlKT09J3N5bWJvbCd8fGlzT2JqZWN0TGlrZSQxKHZhbHVlKSYmb2JqZWN0VG9TdHJpbmckMS5jYWxsKHZhbHVlKT09c3ltYm9sVGFnJDE7fS8qKlxuICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSA0LjAuMFxuICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8udG9OdW1iZXIoMy4yKTtcbiAgICogLy8gPT4gMy4yXG4gICAqXG4gICAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAqIC8vID0+IDVlLTMyNFxuICAgKlxuICAgKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAgICogLy8gPT4gSW5maW5pdHlcbiAgICpcbiAgICogXy50b051bWJlcignMy4yJyk7XG4gICAqIC8vID0+IDMuMlxuICAgKi9mdW5jdGlvbiB0b051bWJlciQxKHZhbHVlKXtpZih0eXBlb2YgdmFsdWU9PSdudW1iZXInKXtyZXR1cm4gdmFsdWU7fWlmKGlzU3ltYm9sJDEodmFsdWUpKXtyZXR1cm4gTkFOO31pZihpc09iamVjdCQyKHZhbHVlKSl7dmFyIG90aGVyPXR5cGVvZiB2YWx1ZS52YWx1ZU9mPT0nZnVuY3Rpb24nP3ZhbHVlLnZhbHVlT2YoKTp2YWx1ZTt2YWx1ZT1pc09iamVjdCQyKG90aGVyKT9vdGhlcisnJzpvdGhlcjt9aWYodHlwZW9mIHZhbHVlIT0nc3RyaW5nJyl7cmV0dXJuIHZhbHVlPT09MD92YWx1ZTordmFsdWU7fXZhbHVlPXZhbHVlLnJlcGxhY2UocmVUcmltLCcnKTt2YXIgaXNCaW5hcnk9cmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtyZXR1cm4gaXNCaW5hcnl8fHJlSXNPY3RhbC50ZXN0KHZhbHVlKT9mcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksaXNCaW5hcnk/Mjo4KTpyZUlzQmFkSGV4LnRlc3QodmFsdWUpP05BTjordmFsdWU7fXZhciBsb2Rhc2hfdGhyb3R0bGU9dGhyb3R0bGU7dmFyIGJvd3Nlcj1jcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbihtb2R1bGUpey8qIVxuICAgKiBCb3dzZXIgLSBhIGJyb3dzZXIgZGV0ZWN0b3JcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2RlZC9ib3dzZXJcbiAgICogTUlUIExpY2Vuc2UgfCAoYykgRHVzdGluIERpYXogMjAxNVxuICAgKi8hZnVuY3Rpb24ocm9vdCxuYW1lLGRlZmluaXRpb24pe2lmKG1vZHVsZS5leHBvcnRzKW1vZHVsZS5leHBvcnRzPWRlZmluaXRpb24oKTtlbHNlIHJvb3RbbmFtZV09ZGVmaW5pdGlvbigpO30oY29tbW9uanNHbG9iYWwsJ2Jvd3NlcicsZnVuY3Rpb24oKXsvKipcbiAgICAgICogU2VlIHVzZXJhZ2VudHMuanMgZm9yIGV4YW1wbGVzIG9mIG5hdmlnYXRvci51c2VyQWdlbnRcbiAgICAgICovdmFyIHQ9dHJ1ZTtmdW5jdGlvbiBkZXRlY3QodWEpe2Z1bmN0aW9uIGdldEZpcnN0TWF0Y2gocmVnZXgpe3ZhciBtYXRjaD11YS5tYXRjaChyZWdleCk7cmV0dXJuIG1hdGNoJiZtYXRjaC5sZW5ndGg+MSYmbWF0Y2hbMV18fCcnO31mdW5jdGlvbiBnZXRTZWNvbmRNYXRjaChyZWdleCl7dmFyIG1hdGNoPXVhLm1hdGNoKHJlZ2V4KTtyZXR1cm4gbWF0Y2gmJm1hdGNoLmxlbmd0aD4xJiZtYXRjaFsyXXx8Jyc7fXZhciBpb3NkZXZpY2U9Z2V0Rmlyc3RNYXRjaCgvKGlwb2R8aXBob25lfGlwYWQpL2kpLnRvTG93ZXJDYXNlKCksbGlrZUFuZHJvaWQ9L2xpa2UgYW5kcm9pZC9pLnRlc3QodWEpLGFuZHJvaWQ9IWxpa2VBbmRyb2lkJiYvYW5kcm9pZC9pLnRlc3QodWEpLG5leHVzTW9iaWxlPS9uZXh1c1xccypbMC02XVxccyovaS50ZXN0KHVhKSxuZXh1c1RhYmxldD0hbmV4dXNNb2JpbGUmJi9uZXh1c1xccypbMC05XSsvaS50ZXN0KHVhKSxjaHJvbWVvcz0vQ3JPUy8udGVzdCh1YSksc2lsaz0vc2lsay9pLnRlc3QodWEpLHNhaWxmaXNoPS9zYWlsZmlzaC9pLnRlc3QodWEpLHRpemVuPS90aXplbi9pLnRlc3QodWEpLHdlYm9zPS8od2VifGhwdykob3wwKXMvaS50ZXN0KHVhKSx3aW5kb3dzcGhvbmU9L3dpbmRvd3MgcGhvbmUvaS50ZXN0KHVhKSxzYW1zdW5nQnJvd3Nlcj0vU2Ftc3VuZ0Jyb3dzZXIvaS50ZXN0KHVhKSx3aW5kb3dzPSF3aW5kb3dzcGhvbmUmJi93aW5kb3dzL2kudGVzdCh1YSksbWFjPSFpb3NkZXZpY2UmJiFzaWxrJiYvbWFjaW50b3NoL2kudGVzdCh1YSksbGludXg9IWFuZHJvaWQmJiFzYWlsZmlzaCYmIXRpemVuJiYhd2Vib3MmJi9saW51eC9pLnRlc3QodWEpLGVkZ2VWZXJzaW9uPWdldFNlY29uZE1hdGNoKC9lZGcoW2VhXXxpb3MpXFwvKFxcZCsoXFwuXFxkKyk/KS9pKSx2ZXJzaW9uSWRlbnRpZmllcj1nZXRGaXJzdE1hdGNoKC92ZXJzaW9uXFwvKFxcZCsoXFwuXFxkKyk/KS9pKSx0YWJsZXQ9L3RhYmxldC9pLnRlc3QodWEpJiYhL3RhYmxldCBwYy9pLnRlc3QodWEpLG1vYmlsZT0hdGFibGV0JiYvW14tXW1vYmkvaS50ZXN0KHVhKSx4Ym94PS94Ym94L2kudGVzdCh1YSkscmVzdWx0O2lmKC9vcGVyYS9pLnRlc3QodWEpKXsvLyAgYW4gb2xkIE9wZXJhXG5yZXN1bHQ9e25hbWU6J09wZXJhJyxvcGVyYTp0LHZlcnNpb246dmVyc2lvbklkZW50aWZpZXJ8fGdldEZpcnN0TWF0Y2goLyg/Om9wZXJhfG9wcnxvcGlvcylbXFxzXFwvXShcXGQrKFxcLlxcZCspPykvaSl9O31lbHNlIGlmKC9vcHJcXC98b3Bpb3MvaS50ZXN0KHVhKSl7Ly8gYSBuZXcgT3BlcmFcbnJlc3VsdD17bmFtZTonT3BlcmEnLG9wZXJhOnQsdmVyc2lvbjpnZXRGaXJzdE1hdGNoKC8oPzpvcHJ8b3Bpb3MpW1xcc1xcL10oXFxkKyhcXC5cXGQrKT8pL2kpfHx2ZXJzaW9uSWRlbnRpZmllcn07fWVsc2UgaWYoL1NhbXN1bmdCcm93c2VyL2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonU2Ftc3VuZyBJbnRlcm5ldCBmb3IgQW5kcm9pZCcsc2Ftc3VuZ0Jyb3dzZXI6dCx2ZXJzaW9uOnZlcnNpb25JZGVudGlmaWVyfHxnZXRGaXJzdE1hdGNoKC8oPzpTYW1zdW5nQnJvd3NlcilbXFxzXFwvXShcXGQrKFxcLlxcZCspPykvaSl9O31lbHNlIGlmKC9XaGFsZS9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J05BVkVSIFdoYWxlIGJyb3dzZXInLHdoYWxlOnQsdmVyc2lvbjpnZXRGaXJzdE1hdGNoKC8oPzp3aGFsZSlbXFxzXFwvXShcXGQrKD86XFwuXFxkKykrKS9pKX07fWVsc2UgaWYoL01aQnJvd3Nlci9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J01aIEJyb3dzZXInLG16YnJvd3Nlcjp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvKD86TVpCcm93c2VyKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKSspL2kpfTt9ZWxzZSBpZigvY29hc3QvaS50ZXN0KHVhKSl7cmVzdWx0PXtuYW1lOidPcGVyYSBDb2FzdCcsY29hc3Q6dCx2ZXJzaW9uOnZlcnNpb25JZGVudGlmaWVyfHxnZXRGaXJzdE1hdGNoKC8oPzpjb2FzdClbXFxzXFwvXShcXGQrKFxcLlxcZCspPykvaSl9O31lbHNlIGlmKC9mb2N1cy9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J0ZvY3VzJyxmb2N1czp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvKD86Zm9jdXMpW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSl9O31lbHNlIGlmKC95YWJyb3dzZXIvaS50ZXN0KHVhKSl7cmVzdWx0PXtuYW1lOidZYW5kZXggQnJvd3NlcicseWFuZGV4YnJvd3Nlcjp0LHZlcnNpb246dmVyc2lvbklkZW50aWZpZXJ8fGdldEZpcnN0TWF0Y2goLyg/OnlhYnJvd3NlcilbXFxzXFwvXShcXGQrKFxcLlxcZCspPykvaSl9O31lbHNlIGlmKC91Y2Jyb3dzZXIvaS50ZXN0KHVhKSl7cmVzdWx0PXtuYW1lOidVQyBCcm93c2VyJyx1Y2Jyb3dzZXI6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goLyg/OnVjYnJvd3NlcilbXFxzXFwvXShcXGQrKD86XFwuXFxkKykrKS9pKX07fWVsc2UgaWYoL214aW9zL2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonTWF4dGhvbicsbWF4dGhvbjp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvKD86bXhpb3MpW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSl9O31lbHNlIGlmKC9lcGlwaGFueS9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J0VwaXBoYW55JyxlcGlwaGFueTp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvKD86ZXBpcGhhbnkpW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSl9O31lbHNlIGlmKC9wdWZmaW4vaS50ZXN0KHVhKSl7cmVzdWx0PXtuYW1lOidQdWZmaW4nLHB1ZmZpbjp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvKD86cHVmZmluKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKT8pL2kpfTt9ZWxzZSBpZigvc2xlaXBuaXIvaS50ZXN0KHVhKSl7cmVzdWx0PXtuYW1lOidTbGVpcG5pcicsc2xlaXBuaXI6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goLyg/OnNsZWlwbmlyKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKSspL2kpfTt9ZWxzZSBpZigvay1tZWxlb24vaS50ZXN0KHVhKSl7cmVzdWx0PXtuYW1lOidLLU1lbGVvbicsa01lbGVvbjp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvKD86ay1tZWxlb24pW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSl9O31lbHNlIGlmKHdpbmRvd3NwaG9uZSl7cmVzdWx0PXtuYW1lOidXaW5kb3dzIFBob25lJyxvc25hbWU6J1dpbmRvd3MgUGhvbmUnLHdpbmRvd3NwaG9uZTp0fTtpZihlZGdlVmVyc2lvbil7cmVzdWx0Lm1zZWRnZT10O3Jlc3VsdC52ZXJzaW9uPWVkZ2VWZXJzaW9uO31lbHNle3Jlc3VsdC5tc2llPXQ7cmVzdWx0LnZlcnNpb249Z2V0Rmlyc3RNYXRjaCgvaWVtb2JpbGVcXC8oXFxkKyhcXC5cXGQrKT8pL2kpO319ZWxzZSBpZigvbXNpZXx0cmlkZW50L2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonSW50ZXJuZXQgRXhwbG9yZXInLG1zaWU6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goLyg/Om1zaWUgfHJ2OikoXFxkKyhcXC5cXGQrKT8pL2kpfTt9ZWxzZSBpZihjaHJvbWVvcyl7cmVzdWx0PXtuYW1lOidDaHJvbWUnLG9zbmFtZTonQ2hyb21lIE9TJyxjaHJvbWVvczp0LGNocm9tZUJvb2s6dCxjaHJvbWU6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goLyg/OmNocm9tZXxjcmlvc3xjcm1vKVxcLyhcXGQrKFxcLlxcZCspPykvaSl9O31lbHNlIGlmKC9lZGcoW2VhXXxpb3MpL2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonTWljcm9zb2Z0IEVkZ2UnLG1zZWRnZTp0LHZlcnNpb246ZWRnZVZlcnNpb259O31lbHNlIGlmKC92aXZhbGRpL2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonVml2YWxkaScsdml2YWxkaTp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvdml2YWxkaVxcLyhcXGQrKFxcLlxcZCspPykvaSl8fHZlcnNpb25JZGVudGlmaWVyfTt9ZWxzZSBpZihzYWlsZmlzaCl7cmVzdWx0PXtuYW1lOidTYWlsZmlzaCcsb3NuYW1lOidTYWlsZmlzaCBPUycsc2FpbGZpc2g6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goL3NhaWxmaXNoXFxzP2Jyb3dzZXJcXC8oXFxkKyhcXC5cXGQrKT8pL2kpfTt9ZWxzZSBpZigvc2VhbW9ua2V5XFwvL2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonU2VhTW9ua2V5JyxzZWFtb25rZXk6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goL3NlYW1vbmtleVxcLyhcXGQrKFxcLlxcZCspPykvaSl9O31lbHNlIGlmKC9maXJlZm94fGljZXdlYXNlbHxmeGlvcy9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J0ZpcmVmb3gnLGZpcmVmb3g6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goLyg/OmZpcmVmb3h8aWNld2Vhc2VsfGZ4aW9zKVsgXFwvXShcXGQrKFxcLlxcZCspPykvaSl9O2lmKC9cXCgobW9iaWxlfHRhYmxldCk7W15cXCldKnJ2OltcXGRcXC5dK1xcKS9pLnRlc3QodWEpKXtyZXN1bHQuZmlyZWZveG9zPXQ7cmVzdWx0Lm9zbmFtZT0nRmlyZWZveCBPUyc7fX1lbHNlIGlmKHNpbGspe3Jlc3VsdD17bmFtZTonQW1hem9uIFNpbGsnLHNpbGs6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goL3NpbGtcXC8oXFxkKyhcXC5cXGQrKT8pL2kpfTt9ZWxzZSBpZigvcGhhbnRvbS9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J1BoYW50b21KUycscGhhbnRvbTp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvcGhhbnRvbWpzXFwvKFxcZCsoXFwuXFxkKyk/KS9pKX07fWVsc2UgaWYoL3NsaW1lcmpzL2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonU2xpbWVySlMnLHNsaW1lcjp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvc2xpbWVyanNcXC8oXFxkKyhcXC5cXGQrKT8pL2kpfTt9ZWxzZSBpZigvYmxhY2tiZXJyeXxcXGJiYlxcZCsvaS50ZXN0KHVhKXx8L3JpbVxcc3RhYmxldC9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J0JsYWNrQmVycnknLG9zbmFtZTonQmxhY2tCZXJyeSBPUycsYmxhY2tiZXJyeTp0LHZlcnNpb246dmVyc2lvbklkZW50aWZpZXJ8fGdldEZpcnN0TWF0Y2goL2JsYWNrYmVycnlbXFxkXStcXC8oXFxkKyhcXC5cXGQrKT8pL2kpfTt9ZWxzZSBpZih3ZWJvcyl7cmVzdWx0PXtuYW1lOidXZWJPUycsb3NuYW1lOidXZWJPUycsd2Vib3M6dCx2ZXJzaW9uOnZlcnNpb25JZGVudGlmaWVyfHxnZXRGaXJzdE1hdGNoKC93KD86ZWIpP29zYnJvd3NlclxcLyhcXGQrKFxcLlxcZCspPykvaSl9Oy90b3VjaHBhZFxcLy9pLnRlc3QodWEpJiYocmVzdWx0LnRvdWNocGFkPXQpO31lbHNlIGlmKC9iYWRhL2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonQmFkYScsb3NuYW1lOidCYWRhJyxiYWRhOnQsdmVyc2lvbjpnZXRGaXJzdE1hdGNoKC9kb2xmaW5cXC8oXFxkKyhcXC5cXGQrKT8pL2kpfTt9ZWxzZSBpZih0aXplbil7cmVzdWx0PXtuYW1lOidUaXplbicsb3NuYW1lOidUaXplbicsdGl6ZW46dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goLyg/OnRpemVuXFxzPyk/YnJvd3NlclxcLyhcXGQrKFxcLlxcZCspPykvaSl8fHZlcnNpb25JZGVudGlmaWVyfTt9ZWxzZSBpZigvcXVwemlsbGEvaS50ZXN0KHVhKSl7cmVzdWx0PXtuYW1lOidRdXBaaWxsYScscXVwemlsbGE6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goLyg/OnF1cHppbGxhKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKSspL2kpfHx2ZXJzaW9uSWRlbnRpZmllcn07fWVsc2UgaWYoL2Nocm9taXVtL2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonQ2hyb21pdW0nLGNocm9taXVtOnQsdmVyc2lvbjpnZXRGaXJzdE1hdGNoKC8oPzpjaHJvbWl1bSlbXFxzXFwvXShcXGQrKD86XFwuXFxkKyk/KS9pKXx8dmVyc2lvbklkZW50aWZpZXJ9O31lbHNlIGlmKC9jaHJvbWV8Y3Jpb3N8Y3Jtby9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J0Nocm9tZScsY2hyb21lOnQsdmVyc2lvbjpnZXRGaXJzdE1hdGNoKC8oPzpjaHJvbWV8Y3Jpb3N8Y3JtbylcXC8oXFxkKyhcXC5cXGQrKT8pL2kpfTt9ZWxzZSBpZihhbmRyb2lkKXtyZXN1bHQ9e25hbWU6J0FuZHJvaWQnLHZlcnNpb246dmVyc2lvbklkZW50aWZpZXJ9O31lbHNlIGlmKC9zYWZhcml8YXBwbGV3ZWJraXQvaS50ZXN0KHVhKSl7cmVzdWx0PXtuYW1lOidTYWZhcmknLHNhZmFyaTp0fTtpZih2ZXJzaW9uSWRlbnRpZmllcil7cmVzdWx0LnZlcnNpb249dmVyc2lvbklkZW50aWZpZXI7fX1lbHNlIGlmKGlvc2RldmljZSl7cmVzdWx0PXtuYW1lOmlvc2RldmljZT09J2lwaG9uZSc/J2lQaG9uZSc6aW9zZGV2aWNlPT0naXBhZCc/J2lQYWQnOidpUG9kJ307Ly8gV1RGOiB2ZXJzaW9uIGlzIG5vdCBwYXJ0IG9mIHVzZXIgYWdlbnQgaW4gd2ViIGFwcHNcbmlmKHZlcnNpb25JZGVudGlmaWVyKXtyZXN1bHQudmVyc2lvbj12ZXJzaW9uSWRlbnRpZmllcjt9fWVsc2UgaWYoL2dvb2dsZWJvdC9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J0dvb2dsZWJvdCcsZ29vZ2xlYm90OnQsdmVyc2lvbjpnZXRGaXJzdE1hdGNoKC9nb29nbGVib3RcXC8oXFxkKyhcXC5cXGQrKSkvaSl8fHZlcnNpb25JZGVudGlmaWVyfTt9ZWxzZXtyZXN1bHQ9e25hbWU6Z2V0Rmlyc3RNYXRjaCgvXiguKilcXC8oLiopIC8pLHZlcnNpb246Z2V0U2Vjb25kTWF0Y2goL14oLiopXFwvKC4qKSAvKX07fS8vIHNldCB3ZWJraXQgb3IgZ2Vja28gZmxhZyBmb3IgYnJvd3NlcnMgYmFzZWQgb24gdGhlc2UgZW5naW5lc1xuaWYoIXJlc3VsdC5tc2VkZ2UmJi8oYXBwbGUpP3dlYmtpdC9pLnRlc3QodWEpKXtpZigvKGFwcGxlKT93ZWJraXRcXC81MzdcXC4zNi9pLnRlc3QodWEpKXtyZXN1bHQubmFtZT1yZXN1bHQubmFtZXx8XCJCbGlua1wiO3Jlc3VsdC5ibGluaz10O31lbHNle3Jlc3VsdC5uYW1lPXJlc3VsdC5uYW1lfHxcIldlYmtpdFwiO3Jlc3VsdC53ZWJraXQ9dDt9aWYoIXJlc3VsdC52ZXJzaW9uJiZ2ZXJzaW9uSWRlbnRpZmllcil7cmVzdWx0LnZlcnNpb249dmVyc2lvbklkZW50aWZpZXI7fX1lbHNlIGlmKCFyZXN1bHQub3BlcmEmJi9nZWNrb1xcLy9pLnRlc3QodWEpKXtyZXN1bHQubmFtZT1yZXN1bHQubmFtZXx8XCJHZWNrb1wiO3Jlc3VsdC5nZWNrbz10O3Jlc3VsdC52ZXJzaW9uPXJlc3VsdC52ZXJzaW9ufHxnZXRGaXJzdE1hdGNoKC9nZWNrb1xcLyhcXGQrKFxcLlxcZCspPykvaSk7fS8vIHNldCBPUyBmbGFncyBmb3IgcGxhdGZvcm1zIHRoYXQgaGF2ZSBtdWx0aXBsZSBicm93c2Vyc1xuaWYoIXJlc3VsdC53aW5kb3dzcGhvbmUmJihhbmRyb2lkfHxyZXN1bHQuc2lsaykpe3Jlc3VsdC5hbmRyb2lkPXQ7cmVzdWx0Lm9zbmFtZT0nQW5kcm9pZCc7fWVsc2UgaWYoIXJlc3VsdC53aW5kb3dzcGhvbmUmJmlvc2RldmljZSl7cmVzdWx0W2lvc2RldmljZV09dDtyZXN1bHQuaW9zPXQ7cmVzdWx0Lm9zbmFtZT0naU9TJzt9ZWxzZSBpZihtYWMpe3Jlc3VsdC5tYWM9dDtyZXN1bHQub3NuYW1lPSdtYWNPUyc7fWVsc2UgaWYoeGJveCl7cmVzdWx0Lnhib3g9dDtyZXN1bHQub3NuYW1lPSdYYm94Jzt9ZWxzZSBpZih3aW5kb3dzKXtyZXN1bHQud2luZG93cz10O3Jlc3VsdC5vc25hbWU9J1dpbmRvd3MnO31lbHNlIGlmKGxpbnV4KXtyZXN1bHQubGludXg9dDtyZXN1bHQub3NuYW1lPSdMaW51eCc7fWZ1bmN0aW9uIGdldFdpbmRvd3NWZXJzaW9uKHMpe3N3aXRjaChzKXtjYXNlJ05UJzpyZXR1cm4nTlQnO2Nhc2UnWFAnOnJldHVybidYUCc7Y2FzZSdOVCA1LjAnOnJldHVybicyMDAwJztjYXNlJ05UIDUuMSc6cmV0dXJuJ1hQJztjYXNlJ05UIDUuMic6cmV0dXJuJzIwMDMnO2Nhc2UnTlQgNi4wJzpyZXR1cm4nVmlzdGEnO2Nhc2UnTlQgNi4xJzpyZXR1cm4nNyc7Y2FzZSdOVCA2LjInOnJldHVybic4JztjYXNlJ05UIDYuMyc6cmV0dXJuJzguMSc7Y2FzZSdOVCAxMC4wJzpyZXR1cm4nMTAnO2RlZmF1bHQ6cmV0dXJuIHVuZGVmaW5lZDt9fS8vIE9TIHZlcnNpb24gZXh0cmFjdGlvblxudmFyIG9zVmVyc2lvbj0nJztpZihyZXN1bHQud2luZG93cyl7b3NWZXJzaW9uPWdldFdpbmRvd3NWZXJzaW9uKGdldEZpcnN0TWF0Y2goL1dpbmRvd3MgKChOVHxYUCkoIFxcZFxcZD8uXFxkKT8pL2kpKTt9ZWxzZSBpZihyZXN1bHQud2luZG93c3Bob25lKXtvc1ZlcnNpb249Z2V0Rmlyc3RNYXRjaCgvd2luZG93cyBwaG9uZSAoPzpvcyk/XFxzPyhcXGQrKFxcLlxcZCspKikvaSk7fWVsc2UgaWYocmVzdWx0Lm1hYyl7b3NWZXJzaW9uPWdldEZpcnN0TWF0Y2goL01hYyBPUyBYIChcXGQrKFtfXFwuXFxzXVxcZCspKikvaSk7b3NWZXJzaW9uPW9zVmVyc2lvbi5yZXBsYWNlKC9bX1xcc10vZywnLicpO31lbHNlIGlmKGlvc2RldmljZSl7b3NWZXJzaW9uPWdldEZpcnN0TWF0Y2goL29zIChcXGQrKFtfXFxzXVxcZCspKikgbGlrZSBtYWMgb3MgeC9pKTtvc1ZlcnNpb249b3NWZXJzaW9uLnJlcGxhY2UoL1tfXFxzXS9nLCcuJyk7fWVsc2UgaWYoYW5kcm9pZCl7b3NWZXJzaW9uPWdldEZpcnN0TWF0Y2goL2FuZHJvaWRbIFxcLy1dKFxcZCsoXFwuXFxkKykqKS9pKTt9ZWxzZSBpZihyZXN1bHQud2Vib3Mpe29zVmVyc2lvbj1nZXRGaXJzdE1hdGNoKC8oPzp3ZWJ8aHB3KW9zXFwvKFxcZCsoXFwuXFxkKykqKS9pKTt9ZWxzZSBpZihyZXN1bHQuYmxhY2tiZXJyeSl7b3NWZXJzaW9uPWdldEZpcnN0TWF0Y2goL3JpbVxcc3RhYmxldFxcc29zXFxzKFxcZCsoXFwuXFxkKykqKS9pKTt9ZWxzZSBpZihyZXN1bHQuYmFkYSl7b3NWZXJzaW9uPWdldEZpcnN0TWF0Y2goL2JhZGFcXC8oXFxkKyhcXC5cXGQrKSopL2kpO31lbHNlIGlmKHJlc3VsdC50aXplbil7b3NWZXJzaW9uPWdldEZpcnN0TWF0Y2goL3RpemVuW1xcL1xcc10oXFxkKyhcXC5cXGQrKSopL2kpO31pZihvc1ZlcnNpb24pe3Jlc3VsdC5vc3ZlcnNpb249b3NWZXJzaW9uO30vLyBkZXZpY2UgdHlwZSBleHRyYWN0aW9uXG52YXIgb3NNYWpvclZlcnNpb249IXJlc3VsdC53aW5kb3dzJiZvc1ZlcnNpb24uc3BsaXQoJy4nKVswXTtpZih0YWJsZXR8fG5leHVzVGFibGV0fHxpb3NkZXZpY2U9PSdpcGFkJ3x8YW5kcm9pZCYmKG9zTWFqb3JWZXJzaW9uPT0zfHxvc01ham9yVmVyc2lvbj49NCYmIW1vYmlsZSl8fHJlc3VsdC5zaWxrKXtyZXN1bHQudGFibGV0PXQ7fWVsc2UgaWYobW9iaWxlfHxpb3NkZXZpY2U9PSdpcGhvbmUnfHxpb3NkZXZpY2U9PSdpcG9kJ3x8YW5kcm9pZHx8bmV4dXNNb2JpbGV8fHJlc3VsdC5ibGFja2JlcnJ5fHxyZXN1bHQud2Vib3N8fHJlc3VsdC5iYWRhKXtyZXN1bHQubW9iaWxlPXQ7fS8vIEdyYWRlZCBCcm93c2VyIFN1cHBvcnRcbi8vIGh0dHA6Ly9kZXZlbG9wZXIueWFob28uY29tL3l1aS9hcnRpY2xlcy9nYnNcbmlmKHJlc3VsdC5tc2VkZ2V8fHJlc3VsdC5tc2llJiZyZXN1bHQudmVyc2lvbj49MTB8fHJlc3VsdC55YW5kZXhicm93c2VyJiZyZXN1bHQudmVyc2lvbj49MTV8fHJlc3VsdC52aXZhbGRpJiZyZXN1bHQudmVyc2lvbj49MS4wfHxyZXN1bHQuY2hyb21lJiZyZXN1bHQudmVyc2lvbj49MjB8fHJlc3VsdC5zYW1zdW5nQnJvd3NlciYmcmVzdWx0LnZlcnNpb24+PTR8fHJlc3VsdC53aGFsZSYmY29tcGFyZVZlcnNpb25zKFtyZXN1bHQudmVyc2lvbiwnMS4wJ10pPT09MXx8cmVzdWx0Lm16YnJvd3NlciYmY29tcGFyZVZlcnNpb25zKFtyZXN1bHQudmVyc2lvbiwnNi4wJ10pPT09MXx8cmVzdWx0LmZvY3VzJiZjb21wYXJlVmVyc2lvbnMoW3Jlc3VsdC52ZXJzaW9uLCcxLjAnXSk9PT0xfHxyZXN1bHQuZmlyZWZveCYmcmVzdWx0LnZlcnNpb24+PTIwLjB8fHJlc3VsdC5zYWZhcmkmJnJlc3VsdC52ZXJzaW9uPj02fHxyZXN1bHQub3BlcmEmJnJlc3VsdC52ZXJzaW9uPj0xMC4wfHxyZXN1bHQuaW9zJiZyZXN1bHQub3N2ZXJzaW9uJiZyZXN1bHQub3N2ZXJzaW9uLnNwbGl0KFwiLlwiKVswXT49Nnx8cmVzdWx0LmJsYWNrYmVycnkmJnJlc3VsdC52ZXJzaW9uPj0xMC4xfHxyZXN1bHQuY2hyb21pdW0mJnJlc3VsdC52ZXJzaW9uPj0yMCl7cmVzdWx0LmE9dDt9ZWxzZSBpZihyZXN1bHQubXNpZSYmcmVzdWx0LnZlcnNpb248MTB8fHJlc3VsdC5jaHJvbWUmJnJlc3VsdC52ZXJzaW9uPDIwfHxyZXN1bHQuZmlyZWZveCYmcmVzdWx0LnZlcnNpb248MjAuMHx8cmVzdWx0LnNhZmFyaSYmcmVzdWx0LnZlcnNpb248Nnx8cmVzdWx0Lm9wZXJhJiZyZXN1bHQudmVyc2lvbjwxMC4wfHxyZXN1bHQuaW9zJiZyZXN1bHQub3N2ZXJzaW9uJiZyZXN1bHQub3N2ZXJzaW9uLnNwbGl0KFwiLlwiKVswXTw2fHxyZXN1bHQuY2hyb21pdW0mJnJlc3VsdC52ZXJzaW9uPDIwKXtyZXN1bHQuYz10O31lbHNlIHJlc3VsdC54PXQ7cmV0dXJuIHJlc3VsdDt9dmFyIGJvd3Nlcj1kZXRlY3QodHlwZW9mIG5hdmlnYXRvciE9PSd1bmRlZmluZWQnP25hdmlnYXRvci51c2VyQWdlbnR8fCcnOicnKTtib3dzZXIudGVzdD1mdW5jdGlvbihicm93c2VyTGlzdCl7Zm9yKHZhciBpPTA7aTxicm93c2VyTGlzdC5sZW5ndGg7KytpKXt2YXIgYnJvd3Nlckl0ZW09YnJvd3Nlckxpc3RbaV07aWYodHlwZW9mIGJyb3dzZXJJdGVtPT09J3N0cmluZycpe2lmKGJyb3dzZXJJdGVtIGluIGJvd3Nlcil7cmV0dXJuIHRydWU7fX19cmV0dXJuIGZhbHNlO307LyoqXG4gICAgICogR2V0IHZlcnNpb24gcHJlY2lzaW9ucyBjb3VudFxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgIGdldFZlcnNpb25QcmVjaXNpb24oXCIxLjEwLjNcIikgLy8gM1xuICAgICAqXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSB2ZXJzaW9uXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL2Z1bmN0aW9uIGdldFZlcnNpb25QcmVjaXNpb24odmVyc2lvbil7cmV0dXJuIHZlcnNpb24uc3BsaXQoXCIuXCIpLmxlbmd0aDt9LyoqXG4gICAgICogQXJyYXk6Om1hcCBwb2x5ZmlsbFxuICAgICAqXG4gICAgICogQHBhcmFtICB7QXJyYXl9IGFyclxuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBpdGVyYXRvclxuICAgICAqIEByZXR1cm4ge0FycmF5fVxuICAgICAqL2Z1bmN0aW9uIG1hcChhcnIsaXRlcmF0b3Ipe3ZhciByZXN1bHQ9W10saTtpZihBcnJheS5wcm90b3R5cGUubWFwKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGFycixpdGVyYXRvcik7fWZvcihpPTA7aTxhcnIubGVuZ3RoO2krKyl7cmVzdWx0LnB1c2goaXRlcmF0b3IoYXJyW2ldKSk7fXJldHVybiByZXN1bHQ7fS8qKlxuICAgICAqIENhbGN1bGF0ZSBicm93c2VyIHZlcnNpb24gd2VpZ2h0XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgY29tcGFyZVZlcnNpb25zKFsnMS4xMC4yLjEnLCAgJzEuOC4yLjEuOTAnXSkgICAgLy8gMVxuICAgICAqICAgY29tcGFyZVZlcnNpb25zKFsnMS4wMTAuMi4xJywgJzEuMDkuMi4xLjkwJ10pOyAgLy8gMVxuICAgICAqICAgY29tcGFyZVZlcnNpb25zKFsnMS4xMC4yLjEnLCAgJzEuMTAuMi4xJ10pOyAgICAgLy8gMFxuICAgICAqICAgY29tcGFyZVZlcnNpb25zKFsnMS4xMC4yLjEnLCAgJzEuMDgwMC4yJ10pOyAgICAgLy8gLTFcbiAgICAgKlxuICAgICAqIEBwYXJhbSAge0FycmF5PFN0cmluZz59IHZlcnNpb25zIHZlcnNpb25zIHRvIGNvbXBhcmVcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGNvbXBhcmlzb24gcmVzdWx0XG4gICAgICovZnVuY3Rpb24gY29tcGFyZVZlcnNpb25zKHZlcnNpb25zKXsvLyAxKSBnZXQgY29tbW9uIHByZWNpc2lvbiBmb3IgYm90aCB2ZXJzaW9ucywgZm9yIGV4YW1wbGUgZm9yIFwiMTAuMFwiIGFuZCBcIjlcIiBpdCBzaG91bGQgYmUgMlxudmFyIHByZWNpc2lvbj1NYXRoLm1heChnZXRWZXJzaW9uUHJlY2lzaW9uKHZlcnNpb25zWzBdKSxnZXRWZXJzaW9uUHJlY2lzaW9uKHZlcnNpb25zWzFdKSk7dmFyIGNodW5rcz1tYXAodmVyc2lvbnMsZnVuY3Rpb24odmVyc2lvbil7dmFyIGRlbHRhPXByZWNpc2lvbi1nZXRWZXJzaW9uUHJlY2lzaW9uKHZlcnNpb24pOy8vIDIpIFwiOVwiIC0+IFwiOS4wXCIgKGZvciBwcmVjaXNpb24gPSAyKVxudmVyc2lvbj12ZXJzaW9uK25ldyBBcnJheShkZWx0YSsxKS5qb2luKFwiLjBcIik7Ly8gMykgXCI5LjBcIiAtPiBbXCIwMDAwMDAwMDBcIlwiLCBcIjAwMDAwMDAwOVwiXVxucmV0dXJuIG1hcCh2ZXJzaW9uLnNwbGl0KFwiLlwiKSxmdW5jdGlvbihjaHVuayl7cmV0dXJuIG5ldyBBcnJheSgyMC1jaHVuay5sZW5ndGgpLmpvaW4oXCIwXCIpK2NodW5rO30pLnJldmVyc2UoKTt9KTsvLyBpdGVyYXRlIGluIHJldmVyc2Ugb3JkZXIgYnkgcmV2ZXJzZWQgY2h1bmtzIGFycmF5XG53aGlsZSgtLXByZWNpc2lvbj49MCl7Ly8gNCkgY29tcGFyZTogXCIwMDAwMDAwMDlcIiA+IFwiMDAwMDAwMDEwXCIgPSBmYWxzZSAoYnV0IFwiOVwiID4gXCIxMFwiID0gdHJ1ZSlcbmlmKGNodW5rc1swXVtwcmVjaXNpb25dPmNodW5rc1sxXVtwcmVjaXNpb25dKXtyZXR1cm4gMTt9ZWxzZSBpZihjaHVua3NbMF1bcHJlY2lzaW9uXT09PWNodW5rc1sxXVtwcmVjaXNpb25dKXtpZihwcmVjaXNpb249PT0wKXsvLyBhbGwgdmVyc2lvbiBjaHVua3MgYXJlIHNhbWVcbnJldHVybiAwO319ZWxzZXtyZXR1cm4tMTt9fX0vKipcbiAgICAgKiBDaGVjayBpZiBicm93c2VyIGlzIHVuc3VwcG9ydGVkXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgYm93c2VyLmlzVW5zdXBwb3J0ZWRCcm93c2VyKHtcbiAgICAgKiAgICAgbXNpZTogXCIxMFwiLFxuICAgICAqICAgICBmaXJlZm94OiBcIjIzXCIsXG4gICAgICogICAgIGNocm9tZTogXCIyOVwiLFxuICAgICAqICAgICBzYWZhcmk6IFwiNS4xXCIsXG4gICAgICogICAgIG9wZXJhOiBcIjE2XCIsXG4gICAgICogICAgIHBoYW50b206IFwiNTM0XCJcbiAgICAgKiAgIH0pO1xuICAgICAqXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSAgbWluVmVyc2lvbnMgbWFwIG9mIG1pbmltYWwgdmVyc2lvbiB0byBicm93c2VyXG4gICAgICogQHBhcmFtICB7Qm9vbGVhbn0gW3N0cmljdE1vZGUgPSBmYWxzZV0gZmxhZyB0byByZXR1cm4gZmFsc2UgaWYgYnJvd3NlciB3YXNuJ3QgZm91bmQgaW4gbWFwXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSAgW3VhXSB1c2VyIGFnZW50IHN0cmluZ1xuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovZnVuY3Rpb24gaXNVbnN1cHBvcnRlZEJyb3dzZXIobWluVmVyc2lvbnMsc3RyaWN0TW9kZSx1YSl7dmFyIF9ib3dzZXI9Ym93c2VyOy8vIG1ha2Ugc3RyaWN0TW9kZSBwYXJhbSBvcHRpb25hbCB3aXRoIHVhIHBhcmFtIHVzYWdlXG5pZih0eXBlb2Ygc3RyaWN0TW9kZT09PSdzdHJpbmcnKXt1YT1zdHJpY3RNb2RlO3N0cmljdE1vZGU9dm9pZCAwO31pZihzdHJpY3RNb2RlPT09dm9pZCAwKXtzdHJpY3RNb2RlPWZhbHNlO31pZih1YSl7X2Jvd3Nlcj1kZXRlY3QodWEpO312YXIgdmVyc2lvbj1cIlwiK19ib3dzZXIudmVyc2lvbjtmb3IodmFyIGJyb3dzZXIgaW4gbWluVmVyc2lvbnMpe2lmKG1pblZlcnNpb25zLmhhc093blByb3BlcnR5KGJyb3dzZXIpKXtpZihfYm93c2VyW2Jyb3dzZXJdKXtpZih0eXBlb2YgbWluVmVyc2lvbnNbYnJvd3Nlcl0hPT0nc3RyaW5nJyl7dGhyb3cgbmV3IEVycm9yKCdCcm93c2VyIHZlcnNpb24gaW4gdGhlIG1pblZlcnNpb24gbWFwIHNob3VsZCBiZSBhIHN0cmluZzogJyticm93c2VyKyc6ICcrU3RyaW5nKG1pblZlcnNpb25zKSk7fS8vIGJyb3dzZXIgdmVyc2lvbiBhbmQgbWluIHN1cHBvcnRlZCB2ZXJzaW9uLlxucmV0dXJuIGNvbXBhcmVWZXJzaW9ucyhbdmVyc2lvbixtaW5WZXJzaW9uc1ticm93c2VyXV0pPDA7fX19cmV0dXJuIHN0cmljdE1vZGU7Ly8gbm90IGZvdW5kXG59LyoqXG4gICAgICogQ2hlY2sgaWYgYnJvd3NlciBpcyBzdXBwb3J0ZWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSAge09iamVjdH0gbWluVmVyc2lvbnMgbWFwIG9mIG1pbmltYWwgdmVyc2lvbiB0byBicm93c2VyXG4gICAgICogQHBhcmFtICB7Qm9vbGVhbn0gW3N0cmljdE1vZGUgPSBmYWxzZV0gZmxhZyB0byByZXR1cm4gZmFsc2UgaWYgYnJvd3NlciB3YXNuJ3QgZm91bmQgaW4gbWFwXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSAgW3VhXSB1c2VyIGFnZW50IHN0cmluZ1xuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovZnVuY3Rpb24gY2hlY2sobWluVmVyc2lvbnMsc3RyaWN0TW9kZSx1YSl7cmV0dXJuIWlzVW5zdXBwb3J0ZWRCcm93c2VyKG1pblZlcnNpb25zLHN0cmljdE1vZGUsdWEpO31ib3dzZXIuaXNVbnN1cHBvcnRlZEJyb3dzZXI9aXNVbnN1cHBvcnRlZEJyb3dzZXI7Ym93c2VyLmNvbXBhcmVWZXJzaW9ucz1jb21wYXJlVmVyc2lvbnM7Ym93c2VyLmNoZWNrPWNoZWNrOy8qXG4gICAgICogU2V0IG91ciBkZXRlY3QgbWV0aG9kIHRvIHRoZSBtYWluIGJvd3NlciBvYmplY3Qgc28gd2UgY2FuXG4gICAgICogcmV1c2UgaXQgdG8gdGVzdCBvdGhlciB1c2VyIGFnZW50cy5cbiAgICAgKiBUaGlzIGlzIG5lZWRlZCB0byBpbXBsZW1lbnQgZnV0dXJlIHRlc3RzLlxuICAgICAqL2Jvd3Nlci5fZGV0ZWN0PWRldGVjdDsvKlxuICAgICAqIFNldCBvdXIgZGV0ZWN0IHB1YmxpYyBtZXRob2QgdG8gdGhlIG1haW4gYm93c2VyIG9iamVjdFxuICAgICAqIFRoaXMgaXMgbmVlZGVkIHRvIGltcGxlbWVudCBib3dzZXIgaW4gc2VydmVyIHNpZGVcbiAgICAgKi9ib3dzZXIuZGV0ZWN0PWRldGVjdDtyZXR1cm4gYm93c2VyO30pO30pOy8vXG52YXIgc2NyaXB0JDM9e3Byb3BzOlsnc291cmNlTmFtZScsJ3NvdXJjZUxhYmVsJ10sY29tcHV0ZWQ6X29iamVjdFNwcmVhZCh7fSxpbmRleF9lc20ubWFwR2V0dGVycyhbJ2FjY2VwdCcsJ2NhbkFkZE1vcmVGaWxlcycsJ2Nsb3VkcycsJ2N1c3RvbVNvdXJjZU5hbWUnLCdmaWxlc1dhaXRpbmcnLCdyb3V0ZScsJ21heEZpbGVzJywnbW9iaWxlTmF2QWN0aXZlJywndXBsb2FkU3RhcnRlZCddKSx7YWNjZXB0U3RyOmZ1bmN0aW9uIGFjY2VwdFN0cigpe2lmKHRoaXMuYWNjZXB0KXtyZXR1cm4gdGhpcy5hY2NlcHQuam9pbignLCcpO31yZXR1cm4gdW5kZWZpbmVkO30saXRlbUNsYXNzZXM6ZnVuY3Rpb24gaXRlbUNsYXNzZXMoKXtyZXR1cm57J2ZzcC1zb3VyY2UtbGlzdF9faXRlbSc6dHJ1ZSwnZnNwLXNvdXJjZS1saXN0X19pdGVtLS1hY3RpdmUnOnRoaXMuaXNTZWxlY3RlZFNvdXJjZSwnZnNwLXNvdXJjZS1saXN0X19pdGVtLS1kaXNhYmxlZCc6dGhpcy51cGxvYWRTdGFydGVkfTt9LGl0ZW1MYWJlbDpmdW5jdGlvbiBpdGVtTGFiZWwoKXtpZih0aGlzLnNvdXJjZU5hbWU9PT0nY3VzdG9tc291cmNlJyl7cmV0dXJuIHRoaXMuY3VzdG9tU291cmNlTmFtZXx8J0N1c3RvbSBTb3VyY2UnO31yZXR1cm4gdGhpcy5zb3VyY2VMYWJlbDt9LGlzU2VsZWN0ZWRTb3VyY2U6ZnVuY3Rpb24gaXNTZWxlY3RlZFNvdXJjZSgpe2lmKHRoaXMucm91dGVbMF09PT0nc3VtbWFyeScpe3JldHVybiBmYWxzZTt9dmFyIHNlbGVjdGVkUm91dGU9dGhpcy5yb3V0ZS5sZW5ndGg+MT90aGlzLnJvdXRlWzFdOidsb2NhbF9maWxlX3N5c3RlbSc7cmV0dXJuIHNlbGVjdGVkUm91dGU9PT10aGlzLnNvdXJjZU5hbWU7fSxpc0F1dGhvcml6ZWQ6ZnVuY3Rpb24gaXNBdXRob3JpemVkKCl7Ly8gQ3VzdG9tIHNvdXJjZSBkb2Vzbid0IHJlcXVpcmUgYXV0aFxuaWYodGhpcy5zb3VyY2VOYW1lPT09J2N1c3RvbXNvdXJjZScpe3JldHVybiBmYWxzZTt9dmFyIGNsb3VkPXRoaXMuY2xvdWRzW3RoaXMuc291cmNlTmFtZV07cmV0dXJuIGNsb3VkJiZjbG91ZC5zdGF0dXM9PT0ncmVhZHknO30saXNNb2JpbGVMb2NhbDpmdW5jdGlvbiBpc01vYmlsZUxvY2FsKCl7aWYoYm93c2VyLm1vYmlsZSYmdGhpcy5tb2JpbGVOYXZBY3RpdmUpe3JldHVybiB0aGlzLnNvdXJjZU5hbWU9PT0nbG9jYWxfZmlsZV9zeXN0ZW0nfHx0aGlzLnNvdXJjZU5hbWU9PT0ndmlkZW8nfHx0aGlzLnNvdXJjZU5hbWU9PT0nYXVkaW8nfHx0aGlzLnNvdXJjZU5hbWU9PT0nd2ViY2FtJzt9cmV0dXJuIGZhbHNlO30sbXVsdGlwbGU6ZnVuY3Rpb24gbXVsdGlwbGUoKXtyZXR1cm4gdGhpcy5tYXhGaWxlcz4xO30sc291cmNlU2VsZWN0ZWRDb3VudDpmdW5jdGlvbiBzb3VyY2VTZWxlY3RlZENvdW50KCl7dmFyIF90aGlzNj10aGlzO3ZhciBjaGVja1NlbGVjdGVkPXRoaXMuZmlsZXNXYWl0aW5nLmZpbHRlcihmdW5jdGlvbihmdyl7cmV0dXJuIGZ3LnNvdXJjZT09PV90aGlzNi5zb3VyY2VOYW1lO30pO3JldHVybiBjaGVja1NlbGVjdGVkLmxlbmd0aDt9fSksbWV0aG9kczpfb2JqZWN0U3ByZWFkKHt9LGluZGV4X2VzbS5tYXBBY3Rpb25zKFsndXBkYXRlTW9iaWxlTmF2QWN0aXZlJywnYWRkRmlsZScsJ2xvZ291dCddKSx7Y2xlYXJFdmVudDpmdW5jdGlvbiBjbGVhckV2ZW50KGV2ZW50KXtldmVudC50YXJnZXQudmFsdWU9bnVsbDt9LG9uTmF2Q2xpY2s6ZnVuY3Rpb24gb25OYXZDbGljayhzb3VyY2VOYW1lKXtpZih0aGlzLmlzTW9iaWxlTG9jYWwpe3RoaXMub3BlblNlbGVjdEZpbGUoKTt9ZWxzZXt0aGlzLnVwZGF0ZU1vYmlsZU5hdkFjdGl2ZShmYWxzZSk7dGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2dvVG9MYXN0UGF0aCcsc291cmNlTmFtZSk7fX0sb3BlblNlbGVjdEZpbGU6ZnVuY3Rpb24gb3BlblNlbGVjdEZpbGUoKXt0aGlzLiRyZWZzLm1vYmlsZUxvY2FJbnB1dC5jbGljaygpO30sb25GaWxlc1NlbGVjdGVkOmZ1bmN0aW9uIG9uRmlsZXNTZWxlY3RlZChldmVudCl7dmFyIGZpbGVzPWV2ZW50LnRhcmdldC5maWxlcztmb3IodmFyIGk9MDtpPGZpbGVzLmxlbmd0aDtpKz0xKXt0aGlzLmFkZEZpbGUoZmlsZXNbaV0pO319fSl9Oy8qIHNjcmlwdCAqL3ZhciBfX3Z1ZV9zY3JpcHRfXyQzPXNjcmlwdCQzOy8qIHRlbXBsYXRlICovdmFyIF9fdnVlX3JlbmRlcl9fJDM9ZnVuY3Rpb24gX192dWVfcmVuZGVyX18kMygpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYyhcImRpdlwiLHtcImNsYXNzXCI6X3ZtLml0ZW1DbGFzc2VzLGF0dHJzOnt0aXRsZTpfdm0udChfdm0uaXRlbUxhYmVsKSx0YWJpbmRleDpcIjBcIn0sb246e2tleXVwOmZ1bmN0aW9uIGtleXVwKCRldmVudCl7aWYoISRldmVudC50eXBlLmluZGV4T2YoXCJrZXlcIikmJl92bS5faygkZXZlbnQua2V5Q29kZSxcImVudGVyXCIsMTMsJGV2ZW50LmtleSxcIkVudGVyXCIpKXtyZXR1cm4gbnVsbDt9cmV0dXJuIF92bS5vbk5hdkNsaWNrKF92bS5zb3VyY2VOYW1lKTt9LGNsaWNrOmZ1bmN0aW9uIGNsaWNrKCRldmVudCl7cmV0dXJuIF92bS5vbk5hdkNsaWNrKF92bS5zb3VyY2VOYW1lKTt9fX0sW192bS5zb3VyY2VTZWxlY3RlZENvdW50P19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1iYWRnZS0tc291cmNlXCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS5zb3VyY2VTZWxlY3RlZENvdW50KSldKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF9jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1zb3VyY2UtbGlzdF9faWNvbiBmc3AtaWNvblwiLFwiY2xhc3NcIjpcImZzcC1pY29uLS1cIitfdm0uc291cmNlTmFtZX0pLF92bS5fdihcIiBcIiksX2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLXNvdXJjZS1saXN0X19sYWJlbFwifSxbX3ZtLl92KF92bS5fcyhfdm0udChfdm0uaXRlbUxhYmVsKSkpXSksX3ZtLl92KFwiIFwiKSxfdm0uaXNBdXRob3JpemVkP19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1zb3VyY2UtbGlzdF9fbG9nb3V0XCIsb246e2NsaWNrOmZ1bmN0aW9uIGNsaWNrKCRldmVudCl7JGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO3JldHVybiBfdm0ubG9nb3V0KF92bS5zb3VyY2VOYW1lKTt9fX0sW192bS5fdihcIiBcIitfdm0uX3MoX3ZtLnQoXCJTaWduIE91dFwiKSkpXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfdm0uaXNNb2JpbGVMb2NhbD9fYyhcImlucHV0XCIse3JlZjpcIm1vYmlsZUxvY2FJbnB1dFwiLHN0YXRpY0NsYXNzOlwiZnNwLWxvY2FsLXNvdXJjZV9fZmlsZWlucHV0XCIsYXR0cnM6e3R5cGU6XCJmaWxlXCIsYWNjZXB0Ol92bS5hY2NlcHRTdHIsbXVsdGlwbGU6X3ZtLm11bHRpcGxlLGRpc2FibGVkOiFfdm0uY2FuQWRkTW9yZUZpbGVzfSxvbjp7Y2hhbmdlOmZ1bmN0aW9uIGNoYW5nZSgkZXZlbnQpe3JldHVybiBfdm0ub25GaWxlc1NlbGVjdGVkKCRldmVudCk7fSxjbGljazpmdW5jdGlvbiBjbGljaygkZXZlbnQpe3JldHVybiBfdm0uY2xlYXJFdmVudCgkZXZlbnQpO319fSk6X3ZtLl9lKCldKTt9O3ZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQzPVtdO19fdnVlX3JlbmRlcl9fJDMuX3dpdGhTdHJpcHBlZD10cnVlOy8qIHN0eWxlICovdmFyIF9fdnVlX2luamVjdF9zdHlsZXNfXyQzPXVuZGVmaW5lZDsvKiBzY29wZWQgKi92YXIgX192dWVfc2NvcGVfaWRfXyQzPXVuZGVmaW5lZDsvKiBtb2R1bGUgaWRlbnRpZmllciAqL3ZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDM9dW5kZWZpbmVkOy8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi92YXIgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDM9ZmFsc2U7Lyogc3R5bGUgaW5qZWN0ICovIC8qIHN0eWxlIGluamVjdCBTU1IgKi8gLyogc3R5bGUgaW5qZWN0IHNoYWRvdyBkb20gKi92YXIgU291cmNlTmF2SXRlbT1ub3JtYWxpemVDb21wb25lbnQoe3JlbmRlcjpfX3Z1ZV9yZW5kZXJfXyQzLHN0YXRpY1JlbmRlckZuczpfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQzfSxfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kMyxfX3Z1ZV9zY3JpcHRfXyQzLF9fdnVlX3Njb3BlX2lkX18kMyxfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMyxfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDMsZmFsc2UsdW5kZWZpbmVkLHVuZGVmaW5lZCx1bmRlZmluZWQpOy8vXG52YXIgc2NyaXB0JDQ9e2NvbXBvbmVudHM6e1NvdXJjZU5hdkl0ZW06U291cmNlTmF2SXRlbX0sY29tcHV0ZWQ6X29iamVjdFNwcmVhZCh7fSxpbmRleF9lc20ubWFwR2V0dGVycyhbJ2lzU2lkZWJhckhpZGRlbicsJ2Nyb3BGaWxlcycsJ2Zyb21Tb3VyY2VzJywnbW9iaWxlTmF2QWN0aXZlJ10pLHtzaWRlYmFyQ2xhc3NlczpmdW5jdGlvbiBzaWRlYmFyQ2xhc3Nlcygpe3JldHVybnsnZnNwLW1vZGFsX19zaWRlYmFyLS1tb2JpbGUnOnRoaXMubW9iaWxlTmF2QWN0aXZlLCdmc3AtbW9kYWxfX3NpZGViYXInOnRydWV9O319KX07Lyogc2NyaXB0ICovdmFyIF9fdnVlX3NjcmlwdF9fJDQ9c2NyaXB0JDQ7LyogdGVtcGxhdGUgKi92YXIgX192dWVfcmVuZGVyX18kND1mdW5jdGlvbiBfX3Z1ZV9yZW5kZXJfXyQ0KCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIV92bS5jcm9wRmlsZXMmJiFfdm0uaXNTaWRlYmFySGlkZGVuP19jKFwiZGl2XCIse1wiY2xhc3NcIjpfdm0uc2lkZWJhckNsYXNzZXN9LFtfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1zb3VyY2UtbGlzdFwifSxfdm0uX2woX3ZtLmZyb21Tb3VyY2VzLGZ1bmN0aW9uKHNvdXJjZSl7cmV0dXJuIF9jKFwic291cmNlLW5hdi1pdGVtXCIse2tleTpzb3VyY2UubmFtZSxhdHRyczp7XCJzb3VyY2UtbmFtZVwiOnNvdXJjZS5uYW1lLFwic291cmNlLWxhYmVsXCI6c291cmNlLmxhYmVsfX0pO30pLDEpXSk6X3ZtLl9lKCk7fTt2YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kND1bXTtfX3Z1ZV9yZW5kZXJfXyQ0Ll93aXRoU3RyaXBwZWQ9dHJ1ZTsvKiBzdHlsZSAqL3ZhciBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kND11bmRlZmluZWQ7Lyogc2NvcGVkICovdmFyIF9fdnVlX3Njb3BlX2lkX18kND11bmRlZmluZWQ7LyogbW9kdWxlIGlkZW50aWZpZXIgKi92YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQ0PXVuZGVmaW5lZDsvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovdmFyIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQ0PWZhbHNlOy8qIHN0eWxlIGluamVjdCAqLyAvKiBzdHlsZSBpbmplY3QgU1NSICovIC8qIHN0eWxlIGluamVjdCBzaGFkb3cgZG9tICovdmFyIFNpZGViYXI9bm9ybWFsaXplQ29tcG9uZW50KHtyZW5kZXI6X192dWVfcmVuZGVyX18kNCxzdGF0aWNSZW5kZXJGbnM6X192dWVfc3RhdGljUmVuZGVyRm5zX18kNH0sX192dWVfaW5qZWN0X3N0eWxlc19fJDQsX192dWVfc2NyaXB0X18kNCxfX3Z1ZV9zY29wZV9pZF9fJDQsX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDQsX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQ0LGZhbHNlLHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkKTsvL1xudmFyIHNjcmlwdCQ1PXtjb21wdXRlZDpfb2JqZWN0U3ByZWFkKHt9LGluZGV4X2VzbS5tYXBHZXR0ZXJzKFsnaXNJbmxpbmVEaXNwbGF5Jywnd2hpdGVsYWJlbCddKSl9Oy8qIHNjcmlwdCAqL3ZhciBfX3Z1ZV9zY3JpcHRfXyQ1PXNjcmlwdCQ1Oy8qIHRlbXBsYXRlICovdmFyIF9fdnVlX3JlbmRlcl9fJDU9ZnVuY3Rpb24gX192dWVfcmVuZGVyX18kNSgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiFfdm0uaXNJbmxpbmVEaXNwbGF5P19jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLXBpY2tlcl9fYnJhbmQtY29udGFpbmVyXCJ9LFtfYyhcInRyYW5zaXRpb25cIix7YXR0cnM6e25hbWU6XCJmc3AtcGlja2VyLWZhZGVcIn19LFtfYyhcImRpdlwiLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6IV92bS5pc0lubGluZURpc3BsYXkmJiFfdm0ud2hpdGVsYWJlbCxleHByZXNzaW9uOlwiIWlzSW5saW5lRGlzcGxheSAmJiAhd2hpdGVsYWJlbFwifV0sc3RhdGljQ2xhc3M6XCJmc3AtcGlja2VyX19icmFuZFwifSxbX3ZtLl92KFwiXFxuICAgICAgUG93ZXJlZCBieSBcIiksX2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLWljb24tLWZpbGVzdGFja1wifSksX3ZtLl92KFwiIEZpbGVzdGFja1xcbiAgICBcIildKV0pXSwxKTpfdm0uX2UoKTt9O3ZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQ1PVtdO19fdnVlX3JlbmRlcl9fJDUuX3dpdGhTdHJpcHBlZD10cnVlOy8qIHN0eWxlICovdmFyIF9fdnVlX2luamVjdF9zdHlsZXNfXyQ1PXVuZGVmaW5lZDsvKiBzY29wZWQgKi92YXIgX192dWVfc2NvcGVfaWRfXyQ1PXVuZGVmaW5lZDsvKiBtb2R1bGUgaWRlbnRpZmllciAqL3ZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDU9dW5kZWZpbmVkOy8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi92YXIgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDU9ZmFsc2U7Lyogc3R5bGUgaW5qZWN0ICovIC8qIHN0eWxlIGluamVjdCBTU1IgKi8gLyogc3R5bGUgaW5qZWN0IHNoYWRvdyBkb20gKi92YXIgQnJhbmRpbmc9bm9ybWFsaXplQ29tcG9uZW50KHtyZW5kZXI6X192dWVfcmVuZGVyX18kNSxzdGF0aWNSZW5kZXJGbnM6X192dWVfc3RhdGljUmVuZGVyRm5zX18kNX0sX192dWVfaW5qZWN0X3N0eWxlc19fJDUsX192dWVfc2NyaXB0X18kNSxfX3Z1ZV9zY29wZV9pZF9fJDUsX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDUsX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQ1LGZhbHNlLHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkKTsvL1xudmFyIHNjcmlwdCQ2PXtjb21wb25lbnRzOntCcmFuZGluZzpCcmFuZGluZyxTaWRlYmFyOlNpZGViYXJ9LGNvbXB1dGVkOl9vYmplY3RTcHJlYWQoe30saW5kZXhfZXNtLm1hcEdldHRlcnMoWydjcm9wRmlsZXMnLCdjdXJyZW50Q2xvdWQnLCdmaWxlc1dhaXRpbmcnLCdpc0lubGluZURpc3BsYXknLCdpc1NpZGViYXJIaWRkZW4nLCdyb3V0ZScsJ3VwbG9hZFN0YXJ0ZWQnXSkse2lzQ2xvdWQ6ZnVuY3Rpb24gaXNDbG91ZCgpe3JldHVybiBPYmplY3Qua2V5cyh0aGlzLmN1cnJlbnRDbG91ZCkubGVuZ3RoPjA7fSxpc0xvY2FsOmZ1bmN0aW9uIGlzTG9jYWwoKXtyZXR1cm4gdGhpcy5yb3V0ZVsxXT09PSdsb2NhbF9maWxlX3N5c3RlbSc7fSxpc1dlYmNhbTpmdW5jdGlvbiBpc1dlYmNhbSgpe3JldHVyblsnd2ViY2FtJywnYXVkaW8nLCd2aWRlbyddLmluZGV4T2YodGhpcy5yb3V0ZVsxXSE9PS0xKTt9LGlzVHJhbnNmb3JtZXI6ZnVuY3Rpb24gaXNUcmFuc2Zvcm1lcigpe3JldHVybiB0aGlzLnJvdXRlWzBdPT09J3RyYW5zZm9ybSc7fSxnZXRDb250ZW50Q2xhc3NlczpmdW5jdGlvbiBnZXRDb250ZW50Q2xhc3Nlcygpe3JldHVybnsnZnNwLWNvbnRlbnQtLXNlbGVjdGVkLWl0ZW1zJzp0aGlzLmlzVHJhbnNmb3JtZXJ8fCF0aGlzLmlzTG9jYWwmJiF0aGlzLmlzV2ViY2FtJiYodGhpcy5maWxlc1dhaXRpbmcubGVuZ3RoPjB8fHRoaXMudXBsb2FkU3RhcnRlZCksJ2ZzcC1jb250ZW50LS10cmFuc2Zvcm1lcic6dGhpcy5pc1RyYW5zZm9ybWVyfTt9LGdldE1vZGFsQ2xhc3NlczpmdW5jdGlvbiBnZXRNb2RhbENsYXNzZXMoKXtyZXR1cm57J2ZzcC1tb2RhbF9fYm9keS0tZnVsbC13aWR0aCc6dGhpcy5pc1NpZGViYXJIaWRkZW4mJiF0aGlzLmlzVHJhbnNmb3JtZXIsJ2ZzcC1tb2RhbF9fYm9keS0tdHJhbnNmb3JtZXInOnRoaXMuaXNUcmFuc2Zvcm1lciwnZnNwLW1vZGFsX19ib2R5LS1zaWRlYmFyLWRpc2FibGVkJzohdGhpcy5pc1RyYW5zZm9ybWVyJiZ0aGlzLmNyb3BGaWxlc307fX0pLG1ldGhvZHM6e2Nsb3NlUGlja2VyOmZ1bmN0aW9uIGNsb3NlUGlja2VyKCl7dGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2NhbmNlbFBpY2snKTt0aGlzLiRyb290LiRkZXN0cm95KCk7fSxoYW5kbGVTY3JvbGw6ZnVuY3Rpb24gaGFuZGxlU2Nyb2xsKCl7dmFyIF90aGlzNz10aGlzOy8vIFRPRE86IE1vdmUgdGhpcyBzb21ld2hlcmUgZWxzZS4gUGVyaGFwcyBhbiBpbmZpbml0ZSBzY3JvbGwgY29tcG9uZW50LlxudmFyIGN0PXRoaXMuJHJlZnMuY29udGVudDsvLyBpZiByb3V0ZSBpcyBub3QgcG9pbnRpbmcgdG8gY2xvdWQgc291cmNlIGRvIG5vdCBjYWxsIHRocm90dGxlXG5pZihjdCYmdGhpcy5pc0Nsb3VkKXt2YXIgY3VyPWN0LnNjcm9sbEhlaWdodC1NYXRoLnJvdW5kKGN0LnNjcm9sbFRvcCwxMCk7dmFyIHpvbmVzPVtjdC5jbGllbnRIZWlnaHQsY3QuY2xpZW50SGVpZ2h0LTEsY3QuY2xpZW50SGVpZ2h0KzFdO3ZhciBpc05lYXJCb3R0b209em9uZXMuaW5kZXhPZihjdXIpIT09LTE7dGhpcy5nZXROZXh0PXRoaXMuZ2V0TmV4dHx8bG9kYXNoX3Rocm90dGxlKGZ1bmN0aW9uKCl7Ly8gcHJldmVudCBjYWxsYmFjayB0byBydW4gd2l0aG91dCBjdXJyZW50IGNsb3VkXG5pZighX3RoaXM3LmlzQ2xvdWQpe3JldHVybjt9X3RoaXM3LiRzdG9yZS5kaXNwYXRjaCgnZmV0Y2hDbG91ZFBhdGgnLHtuYW1lOl90aGlzNy5jdXJyZW50Q2xvdWQubmFtZSxwYXRoOl90aGlzNy5jdXJyZW50Q2xvdWQubGFzdFBhdGgsbmV4dDpfdGhpczcuY3VycmVudENsb3VkLm5leHQsbG9hZDpmYWxzZX0pO30sMzAwMCk7aWYoaXNOZWFyQm90dG9tJiZ0aGlzLmN1cnJlbnRDbG91ZC5uZXh0JiYhdGhpcy5jdXJyZW50Q2xvdWQuaXNMb2FkaW5nKXt0aGlzLmdldE5leHQoKTt9fX19fTsvKiBzY3JpcHQgKi92YXIgX192dWVfc2NyaXB0X18kNj1zY3JpcHQkNjsvKiB0ZW1wbGF0ZSAqL3ZhciBfX3Z1ZV9yZW5kZXJfXyQ2PWZ1bmN0aW9uIF9fdnVlX3JlbmRlcl9fJDYoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3AtcGlja2VyXCJ9LFtfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1tb2RhbFwifSxbX2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLXBpY2tlcl9fY2xvc2UtYnV0dG9uIGZzcC1pY29uLS1jbG9zZS1tb2RhbFwiLGF0dHJzOnt0YWJpbmRleDpcIjBcIix0aXRsZTpfdm0udChcIkNsaWNrIGhlcmUgb3IgaGl0IEVTQyB0byBjbG9zZSBwaWNrZXJcIil9LG9uOntjbGljazpfdm0uY2xvc2VQaWNrZXIsa2V5dXA6ZnVuY3Rpb24ga2V5dXAoJGV2ZW50KXtpZighJGV2ZW50LnR5cGUuaW5kZXhPZihcImtleVwiKSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwiZW50ZXJcIiwxMywkZXZlbnQua2V5LFwiRW50ZXJcIikpe3JldHVybiBudWxsO31yZXR1cm4gX3ZtLmNsb3NlUGlja2VyKCRldmVudCk7fX19KSxfdm0uX3YoXCIgXCIpLF92bS5fdChcInNpZGViYXJcIiksX3ZtLl92KFwiIFwiKSxfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1tb2RhbF9fYm9keVwiLFwiY2xhc3NcIjpfdm0uZ2V0TW9kYWxDbGFzc2VzfSxbX3ZtLl90KFwiaGVhZGVyXCIpLF92bS5fdihcIiBcIiksX2MoXCJkaXZcIix7cmVmOlwiY29udGVudFwiLHN0YXRpY0NsYXNzOlwiZnNwLWNvbnRlbnRcIixcImNsYXNzXCI6X3ZtLmdldENvbnRlbnRDbGFzc2VzLG9uOntzY3JvbGw6X3ZtLmhhbmRsZVNjcm9sbH19LFtfdm0uX3QoXCJib2R5XCIpXSwyKSxfdm0uX3YoXCIgXCIpLF92bS5fdChcImZvb3RlclwiKV0sMildLDIpLF92bS5fdihcIiBcIiksX2MoXCJicmFuZGluZ1wiKV0sMSk7fTt2YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kNj1bXTtfX3Z1ZV9yZW5kZXJfXyQ2Ll93aXRoU3RyaXBwZWQ9dHJ1ZTsvKiBzdHlsZSAqL3ZhciBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kNj11bmRlZmluZWQ7Lyogc2NvcGVkICovdmFyIF9fdnVlX3Njb3BlX2lkX18kNj11bmRlZmluZWQ7LyogbW9kdWxlIGlkZW50aWZpZXIgKi92YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQ2PXVuZGVmaW5lZDsvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovdmFyIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQ2PWZhbHNlOy8qIHN0eWxlIGluamVjdCAqLyAvKiBzdHlsZSBpbmplY3QgU1NSICovIC8qIHN0eWxlIGluamVjdCBzaGFkb3cgZG9tICovdmFyIE1vZGFsPW5vcm1hbGl6ZUNvbXBvbmVudCh7cmVuZGVyOl9fdnVlX3JlbmRlcl9fJDYsc3RhdGljUmVuZGVyRm5zOl9fdnVlX3N0YXRpY1JlbmRlckZuc19fJDZ9LF9fdnVlX2luamVjdF9zdHlsZXNfXyQ2LF9fdnVlX3NjcmlwdF9fJDYsX192dWVfc2NvcGVfaWRfXyQ2LF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQ2LF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kNixmYWxzZSx1bmRlZmluZWQsdW5kZWZpbmVkLHVuZGVmaW5lZCk7Ly9cbnZhciBzY3JpcHQkNz17Y29tcG9uZW50czp7Q29udGVudEhlYWRlcjpDb250ZW50SGVhZGVyLE1vZGFsOk1vZGFsfSxjb21wdXRlZDpfb2JqZWN0U3ByZWFkKHt9LGluZGV4X2VzbS5tYXBHZXR0ZXJzKFsnaXNCbG9ja2VkJ10pLHtoZWFkZXJUZXh0OmZ1bmN0aW9uIGhlYWRlclRleHQoKXtyZXR1cm4gdGhpcy5pc0Jsb2NrZWQ/J0FwcGxpY2F0aW9uIEJsb2NrZWQnOidBcHBsaWNhdGlvbiBVbmF2YWlsYWJsZSc7fSx0aXRsZVRleHQ6ZnVuY3Rpb24gdGl0bGVUZXh0KCl7cmV0dXJuIHRoaXMuaXNCbG9ja2VkPydUaGlzIGFwcGxpY2F0aW9uIGlzIGJsb2NrZWQnOidUaGlzIGFwcGxpY2F0aW9uIGlzIHVuYXZhaWxhYmxlJzt9LHN1YmhlYWRlclRleHQ6ZnVuY3Rpb24gc3ViaGVhZGVyVGV4dCgpe3JldHVybiB0aGlzLmlzQmxvY2tlZD8nRm9yIHNvbWUgcmVhc29uIHRoaXMgYXBwbGljYXRpb24gaXMgYmxvY2tlZC4nOidGb3Igc29tZSByZWFzb24gdGhpcyBhcHBsaWNhdGlvbiBpcyB1bmF2YWlsYWJsZS4nO319KX07Lyogc2NyaXB0ICovdmFyIF9fdnVlX3NjcmlwdF9fJDc9c2NyaXB0JDc7LyogdGVtcGxhdGUgKi92YXIgX192dWVfcmVuZGVyX18kNz1mdW5jdGlvbiBfX3Z1ZV9yZW5kZXJfXyQ3KCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKFwibW9kYWxcIixbX2MoXCJjb250ZW50LWhlYWRlclwiLHthdHRyczp7c2xvdDpcImhlYWRlclwiLFwiaGlkZS1tZW51XCI6dHJ1ZX0sc2xvdDpcImhlYWRlclwifSxbX2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLWhlYWRlci10ZXh0LS12aXNpYmxlXCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS50KF92bS5oZWFkZXJUZXh0KSkpXSldKSxfdm0uX3YoXCIgXCIpLF9jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLWJsb2NrZWRfX2NvbnRhaW5lclwiLGF0dHJzOntzbG90OlwiYm9keVwifSxzbG90OlwiYm9keVwifSxbX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3AtYmxvY2tlZF9faWNvblwifSksX3ZtLl92KFwiIFwiKSxfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1ibG9ja2VkX190aXRsZVwifSxbX3ZtLl92KF92bS5fcyhfdm0udChfdm0udGl0bGVUZXh0KSkpXSksX3ZtLl92KFwiIFwiKSxfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC10ZXh0X19zdWJoZWFkZXJcIn0sW192bS5fdihfdm0uX3MoX3ZtLnQoX3ZtLnN1YmhlYWRlclRleHQpKSldKSxfdm0uX3YoXCIgXCIpLF9jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLXRleHRfX3N1YmhlYWRlclwifSxbX3ZtLl92KFwiXFxuICAgICAgUGxlYXNlIGNvbnRhY3QgdGhlIG93bmVyIG9mIHRoaXMgcGFnZS5cXG4gICAgXCIpXSldKV0sMSk7fTt2YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kNz1bXTtfX3Z1ZV9yZW5kZXJfXyQ3Ll93aXRoU3RyaXBwZWQ9dHJ1ZTsvKiBzdHlsZSAqL3ZhciBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kNz11bmRlZmluZWQ7Lyogc2NvcGVkICovdmFyIF9fdnVlX3Njb3BlX2lkX18kNz11bmRlZmluZWQ7LyogbW9kdWxlIGlkZW50aWZpZXIgKi92YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQ3PXVuZGVmaW5lZDsvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovdmFyIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQ3PWZhbHNlOy8qIHN0eWxlIGluamVjdCAqLyAvKiBzdHlsZSBpbmplY3QgU1NSICovIC8qIHN0eWxlIGluamVjdCBzaGFkb3cgZG9tICovdmFyIEJsb2NrZWQ9bm9ybWFsaXplQ29tcG9uZW50KHtyZW5kZXI6X192dWVfcmVuZGVyX18kNyxzdGF0aWNSZW5kZXJGbnM6X192dWVfc3RhdGljUmVuZGVyRm5zX18kN30sX192dWVfaW5qZWN0X3N0eWxlc19fJDcsX192dWVfc2NyaXB0X18kNyxfX3Z1ZV9zY29wZV9pZF9fJDcsX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDcsX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQ3LGZhbHNlLHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkKTsvL1xudmFyIHNjcmlwdCQ4PXtjb21wdXRlZDpfb2JqZWN0U3ByZWFkKHt9LGluZGV4X2VzbS5tYXBHZXR0ZXJzKFsnbm90aWZpY2F0aW9ucyddKSx7Z2V0Q2xhc3NlczpmdW5jdGlvbiBnZXRDbGFzc2VzKCl7cmV0dXJueydmc3Atbm90aWZpY2F0aW9uc19fc3VjY2Vzcyc6ISF0aGlzLm1vc3RSZWNlbnROb3RpZmljYXRpb24uc3VjY2Vzc307fSxtb3N0UmVjZW50Tm90aWZpY2F0aW9uOmZ1bmN0aW9uIG1vc3RSZWNlbnROb3RpZmljYXRpb24oKXtyZXR1cm4gdGhpcy5ub3RpZmljYXRpb25zW3RoaXMubm90aWZpY2F0aW9ucy5sZW5ndGgtMV07fX0pLG1ldGhvZHM6X29iamVjdFNwcmVhZCh7fSxpbmRleF9lc20ubWFwQWN0aW9ucyhbJ3JlbW92ZUFsbE5vdGlmaWNhdGlvbnMnXSkpfTsvKiBzY3JpcHQgKi92YXIgX192dWVfc2NyaXB0X18kOD1zY3JpcHQkODsvKiB0ZW1wbGF0ZSAqL3ZhciBfX3Z1ZV9yZW5kZXJfXyQ4PWZ1bmN0aW9uIF9fdnVlX3JlbmRlcl9fJDgoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX3ZtLm5vdGlmaWNhdGlvbnMubGVuZ3RoPjA/X2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3Atbm90aWZpY2F0aW9uc19fY29udGFpbmVyXCIsXCJjbGFzc1wiOl92bS5nZXRDbGFzc2VzfSxbX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3Atbm90aWZpY2F0aW9uc19fbWVzc2FnZVwifSxbX3ZtLl92KFwiXFxuICAgICBcIitfdm0uX3MoX3ZtLnQoX3ZtLm1vc3RSZWNlbnROb3RpZmljYXRpb24ubWVzc2FnZSxfdm0ubW9zdFJlY2VudE5vdGlmaWNhdGlvbi5wYXJhbXMpKStcIlxcbiAgXCIpXSksX3ZtLl92KFwiIFwiKSxfYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3AtaWNvbiBmc3Atbm90aWZpY2F0aW9uc19fY2xvc2UtYnV0dG9uXCIsb246e2NsaWNrOl92bS5yZW1vdmVBbGxOb3RpZmljYXRpb25zfX0pXSk6X3ZtLl9lKCk7fTt2YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kOD1bXTtfX3Z1ZV9yZW5kZXJfXyQ4Ll93aXRoU3RyaXBwZWQ9dHJ1ZTsvKiBzdHlsZSAqL3ZhciBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kOD11bmRlZmluZWQ7Lyogc2NvcGVkICovdmFyIF9fdnVlX3Njb3BlX2lkX18kOD11bmRlZmluZWQ7LyogbW9kdWxlIGlkZW50aWZpZXIgKi92YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQ4PXVuZGVmaW5lZDsvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovdmFyIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQ4PWZhbHNlOy8qIHN0eWxlIGluamVjdCAqLyAvKiBzdHlsZSBpbmplY3QgU1NSICovIC8qIHN0eWxlIGluamVjdCBzaGFkb3cgZG9tICovdmFyIE5vdGlmaWNhdGlvbnM9bm9ybWFsaXplQ29tcG9uZW50KHtyZW5kZXI6X192dWVfcmVuZGVyX18kOCxzdGF0aWNSZW5kZXJGbnM6X192dWVfc3RhdGljUmVuZGVyRm5zX18kOH0sX192dWVfaW5qZWN0X3N0eWxlc19fJDgsX192dWVfc2NyaXB0X18kOCxfX3Z1ZV9zY29wZV9pZF9fJDgsX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDgsX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQ4LGZhbHNlLHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkKTt2YXIgc291cmNlcz1be25hbWU6J2xvY2FsX2ZpbGVfc3lzdGVtJyxsYWJlbDonTXkgRGV2aWNlJyx1aTonbG9jYWwnfSx7bmFtZTond2ViY2FtJyxsYWJlbDonVGFrZSBQaG90bycsdWk6J3dlYmNhbSd9LHtuYW1lOid2aWRlbycsbGFiZWw6J1JlY29yZCBWaWRlbycsdWk6J29wZW50b2snfSx7bmFtZTonYXVkaW8nLGxhYmVsOidSZWNvcmQgQXVkaW8nLHVpOidvcGVudG9rJ30se25hbWU6J2N1c3RvbXNvdXJjZScsbGFiZWw6J0N1c3RvbSBTb3VyY2UnLHVpOidjbG91ZCcsbGF5b3V0OidsaXN0J30se25hbWU6J2Ryb3Bib3gnLGxhYmVsOidEcm9wYm94Jyx1aTonY2xvdWQnLGxheW91dDonbGlzdCd9LHtuYW1lOidmYWNlYm9vaycsbGFiZWw6J0ZhY2Vib29rJyx1aTonY2xvdWQnLGxheW91dDonaHlicmlkJ30se25hbWU6J2luc3RhZ3JhbScsbGFiZWw6J0luc3RhZ3JhbScsdWk6J2Nsb3VkJyxsYXlvdXQ6J2dyaWQnfSx7bmFtZTonYm94JyxsYWJlbDonQm94Jyx1aTonY2xvdWQnLGxheW91dDonbGlzdCd9LHtuYW1lOidnb29nbGVkcml2ZScsbGFiZWw6J0dvb2dsZSBEcml2ZScsdWk6J2Nsb3VkJyxsYXlvdXQ6J2xpc3QnfSx7bmFtZTonZ2l0aHViJyxsYWJlbDonR2l0aHViJyx1aTonY2xvdWQnLGxheW91dDonbGlzdCd9LHtuYW1lOidnbWFpbCcsbGFiZWw6J0dtYWlsJyx1aTonY2xvdWQnLGxheW91dDonbGlzdCd9LHtuYW1lOidwaWNhc2EnLGxhYmVsOidHb29nbGUgUGhvdG9zJyx1aTonY2xvdWQnLGxheW91dDonaHlicmlkJ30se25hbWU6J29uZWRyaXZlJyxsYWJlbDonT25lRHJpdmUnLHVpOidjbG91ZCcsbGF5b3V0OidsaXN0J30se25hbWU6J29uZWRyaXZlZm9yYnVzaW5lc3MnLGxhYmVsOidPbmVEcml2ZSBCdXNpbmVzcycsdWk6J2Nsb3VkJyxsYXlvdXQ6J2xpc3QnfSx7bmFtZTonY2xvdWRkcml2ZScsbGFiZWw6J0Nsb3VkIERyaXZlJyx1aTonY2xvdWQnLGxheW91dDonbGlzdCcsZGVwcmVjYXRlZDp0cnVlfSx7bmFtZTonaW1hZ2VzZWFyY2gnLGxhYmVsOidXZWIgU2VhcmNoJyx1aTonaW1hZ2VzZWFyY2gnfSx7bmFtZTondXJsJyxsYWJlbDonTGluayAoVVJMKScsdWk6J3VybCd9LHtuYW1lOid0aW50JyxsYWJlbDonVElOVCcsdWk6J2Nsb3VkJ31dO3ZhciBnZXRCeU5hbWU9ZnVuY3Rpb24gZ2V0QnlOYW1lKG5hbWUpe3ZhciBkZWZpbml0aW9uO3NvdXJjZXMuZm9yRWFjaChmdW5jdGlvbihzb3VyY2VEZWZpbml0aW9uKXtpZihzb3VyY2VEZWZpbml0aW9uLm5hbWU9PT1uYW1lKXtkZWZpbml0aW9uPXNvdXJjZURlZmluaXRpb247fX0pO2lmKCFkZWZpbml0aW9uKXt0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHNvdXJjZSBcXFwiXCIuY29uY2F0KG5hbWUsXCJcXFwiXCIpKTt9aWYoZGVmaW5pdGlvbi5kZXByZWNhdGVkKXtjb25zb2xlLndhcm4oXCJTb3VyY2UgXCIuY29uY2F0KGRlZmluaXRpb24ubmFtZSxcIiBpcyBkZXByZWNhdGVkXCIpKTt9cmV0dXJuIGRlZmluaXRpb247fTsvLyBBUEkgcGF5bG9hZCBkb2Vzbid0IGdpdmUgcGFyZW50IGZvbGRlciBhcyBhIHNlcGFyYXRlIGZpZWxkXG4vLyBUaGlzIGZ1bmN0aW9uIHdpbGwgY29uc3RydWN0IGl0IHNvIHdlIGNhbiBtYXRjaCBmaWxlcyBieSBmb2xkZXIgcGF0aHNcbi8vIFNob3VsZCByZXR1cm4gYSBwYXRoIGxpa2UgL0ZvbGRlcjEgZm9yIGEgZmlsZSAvRm9sZGVyMS9GaWxlXG52YXIgZ2V0Rm9sZGVyUGF0aD1mdW5jdGlvbiBnZXRGb2xkZXJQYXRoKGZpbGUpe2lmKGZpbGUuZm9sZGVyKXtyZXR1cm4gZmlsZS5wYXRoO312YXIgYXJyPWZpbGUucGF0aC5zcGxpdCgnLycpLm1hcChmdW5jdGlvbihzKXtyZXR1cm4gcy50b0xvd2VyQ2FzZSgpO30pO2Fyci5wb3AoKTtyZXR1cm5cIlwiLmNvbmNhdChhcnIuam9pbignLycpLFwiL1wiKTt9O3ZhciBpc0ZpbGVJbkZvbGRlcj1mdW5jdGlvbiBpc0ZpbGVJbkZvbGRlcihmaWxlLGZvbGRlcil7dmFyIGZvbGRlclBhdGg9Z2V0Rm9sZGVyUGF0aChmaWxlKTt2YXIgcGF0aD1mb2xkZXIucGF0aC5zcGxpdCgnLycpLm1hcChmdW5jdGlvbihzKXtyZXR1cm4gcy50b0xvd2VyQ2FzZSgpO30pLmpvaW4oJy8nKTt2YXIgcGF0aFdpdGhUcmFpbD1cIlwiLmNvbmNhdChwYXRoLFwiL1wiKTtyZXR1cm4gZm9sZGVyUGF0aD09PXBhdGh8fGZvbGRlclBhdGg9PT1wYXRoV2l0aFRyYWlsO307dmFyIF9pc0ltYWdlPWZ1bmN0aW9uIGlzSW1hZ2UoZmlsZSl7dmFyIHR5cGU9ZmlsZS5taW1ldHlwZXx8ZmlsZS50eXBlO3JldHVybiB0eXBlJiZ0eXBlLmluZGV4T2YoJ2ltYWdlLycpIT09LTE7fTt2YXIgaXNFZGl0YWJsZUltYWdlPWZ1bmN0aW9uIGlzRWRpdGFibGVJbWFnZShmaWxlKXt2YXIgZXh0PWZpbGUubmFtZSYmZmlsZS5uYW1lLnNwbGl0KCcuJykucG9wKCkudG9Mb3dlckNhc2UoKTt2YXIgdHlwZT1maWxlLnR5cGV8fGZpbGUubWltZXR5cGU7dmFyIGhhc0V4dD1bJ2JtcCcsJ2pwZycsJ2pwZWcnLCdwbmcnLCdnaWYnLCdzdmcnXS5pbmRleE9mKGV4dCk+PTA7dmFyIGhhc01pbWU9WydpbWFnZS9qcGVnJywnaW1hZ2UvanBnJywnaW1hZ2UvcG5nJywnaW1hZ2UvYm1wJywnaW1hZ2UvZ2lmJywnaW1hZ2Uvc3ZnJywnaW1hZ2Uvc3ZnK3htbCddLmluZGV4T2YodHlwZSk+PTA7cmV0dXJuIGhhc0V4dHx8aGFzTWltZTt9O3ZhciBpc1NWRyQxPWZ1bmN0aW9uIGlzU1ZHJDEoZmlsZSl7dmFyIGV4dD1maWxlLm5hbWUmJmZpbGUubmFtZS5zcGxpdCgnLicpLnBvcCgpLnRvTG93ZXJDYXNlKCk7dmFyIHR5cGU9ZmlsZS50eXBlfHxmaWxlLm1pbWV0eXBlO3ZhciBoYXNNaW1lPVsnaW1hZ2Uvc3ZnJywnaW1hZ2Uvc3ZnK3htbCddLmluZGV4T2YodHlwZSk+PTA7cmV0dXJuIGV4dD09PSdzdmcnfHxoYXNNaW1lO307dmFyIF9pc0F1ZGlvPWZ1bmN0aW9uIGlzQXVkaW8oZmlsZSl7dmFyIHR5cGU9ZmlsZS5taW1ldHlwZXx8ZmlsZS50eXBlO3JldHVybiB0eXBlJiZ0eXBlLmluZGV4T2YoJ2F1ZGlvLycpIT09LTE7fTsvL1xudmFyIHNjcmlwdCQ5PXtwcm9wczpbJ2ZpbGVzJ10sZGF0YTpmdW5jdGlvbiBkYXRhKCl7cmV0dXJue2xhc3RDbGlja2VkOm51bGx9O30sY29tcHV0ZWQ6X29iamVjdFNwcmVhZCh7fSxpbmRleF9lc20ubWFwR2V0dGVycyhbJ2Nsb3VkRm9sZGVycycsJ2ZpbGVzV2FpdGluZycsJ3ZpZXdUeXBlJ10pLHtvbmx5Rm9sZGVyczpmdW5jdGlvbiBvbmx5Rm9sZGVycygpe3JldHVybiB0aGlzLmZpbGVzLmZpbHRlcihmdW5jdGlvbihmKXtyZXR1cm4gZi5mb2xkZXI7fSk7fSxvbmx5RmlsZXM6ZnVuY3Rpb24gb25seUZpbGVzKCl7cmV0dXJuIHRoaXMuZmlsZXMuZmlsdGVyKGZ1bmN0aW9uKGYpe3JldHVybiFmLmZvbGRlcjt9KTt9fSksbWV0aG9kczpfb2JqZWN0U3ByZWFkKHt9LGluZGV4X2VzbS5tYXBBY3Rpb25zKFsnc2V0Vmlld1R5cGUnLCdhZGRGaWxlJywnZGVzZWxlY3RGb2xkZXInLCdnb1RvRGlyZWN0b3J5J10pLHtnZXROYW1lOmZ1bmN0aW9uIGdldE5hbWUoZmlsZSl7aWYoZmlsZS5kaXNwbGF5X25hbWUmJmZpbGUuZGlzcGxheV9uYW1lLmxlbmd0aCl7cmV0dXJuIGZpbGUuZGlzcGxheV9uYW1lO31yZXR1cm4gZmlsZS5uYW1lO30saGFuZGxlQ2xpY2tGaWxlOmZ1bmN0aW9uIGhhbmRsZUNsaWNrRmlsZShldixmaWxlKXtpZighdGhpcy5sYXN0Q2xpY2tlZCl7dGhpcy5sYXN0Q2xpY2tlZD1maWxlO31pZihldi5zaGlmdEtleSl7dmFyIHN0YXJ0PXRoaXMuZmlsZXMuaW5kZXhPZihmaWxlKTt2YXIgZW5kPXRoaXMuZmlsZXMuaW5kZXhPZih0aGlzLmxhc3RDbGlja2VkKTt2YXIgZnJvbUVsPU1hdGgubWluKHN0YXJ0LGVuZCk7dmFyIHRvRWw9TWF0aC5tYXgoc3RhcnQsZW5kKSsxO2Zvcih2YXIgaT1mcm9tRWw7aTx0b0VsO2krPTEpe2lmKCF0aGlzLmZpbGVzW2ldfHx0aGlzLmZpbGVzW2ldPT09dGhpcy5sYXN0Q2xpY2tlZHx8dGhpcy5maWxlc1tpXS5zdGF0ZT09PXRoaXMubGFzdENsaWNrZWQuc3RhdGUpe2NvbnRpbnVlO310aGlzLmFkZEZpbGUodGhpcy5maWxlc1tpXSk7fXRoaXMubGFzdENsaWNrZWQ9ZmlsZTtyZXR1cm47fXRoaXMubGFzdENsaWNrZWQ9ZmlsZTt0aGlzLmFkZEZpbGUoZmlsZSk7fSxoYW5kbGVGb2xkZXJDbGljazpmdW5jdGlvbiBoYW5kbGVGb2xkZXJDbGljayhldixmb2xkZXIpe2lmKGV2LnNoaWZ0S2V5KXt0aGlzLmhhbmRsZUNsaWNrRmlsZShldixmb2xkZXIpO3JldHVybjt9dGhpcy5nb1RvRGlyZWN0b3J5KGZvbGRlcik7fSxnZXRJY29uQ2xhc3M6ZnVuY3Rpb24gZ2V0SWNvbkNsYXNzKGNscyxmaWxlKXt2YXIgX3JlZjtyZXR1cm4gX3JlZj17fSxfZGVmaW5lUHJvcGVydHkoX3JlZixjbHMsIXRoaXMuaXNTZWxlY3RlZChmaWxlKSksX2RlZmluZVByb3BlcnR5KF9yZWYsXCJcIi5jb25jYXQoY2xzLFwiLS1zZWxlY3RlZFwiKSx0aGlzLmlzU2VsZWN0ZWQoZmlsZSkpLF9yZWY7fSxpc0F1ZGlvOmZ1bmN0aW9uIGlzQXVkaW8oZmlsZSl7cmV0dXJuIF9pc0F1ZGlvKGZpbGUpO30saXNJbWFnZTpmdW5jdGlvbiBpc0ltYWdlKGZpbGUpe3JldHVybiBfaXNJbWFnZShmaWxlKTt9LGlzTG9hZGluZzpmdW5jdGlvbiBpc0xvYWRpbmcoZmlsZSl7aWYoZmlsZS5mb2xkZXIpe3JldHVybiB0aGlzLmNsb3VkRm9sZGVyc1tmaWxlLnBhdGhdJiZ0aGlzLmNsb3VkRm9sZGVyc1tmaWxlLnBhdGhdLmxvYWRpbmc7fXJldHVybiBmYWxzZTt9LGlzU2VsZWN0ZWQ6ZnVuY3Rpb24gaXNTZWxlY3RlZChmaWxlKXtpZihmaWxlLmZvbGRlcil7cmV0dXJuIHRoaXMuZ2V0RmlsZUNvdW50KGZpbGUpPjA7fXJldHVybiBmaWxlLnN0YXRlO30sZ2V0RmlsZUNvdW50OmZ1bmN0aW9uIGdldEZpbGVDb3VudChmb2xkZXIpe3JldHVybiB0aGlzLmZpbGVzV2FpdGluZy5maWx0ZXIoZnVuY3Rpb24oZil7cmV0dXJuIGlzRmlsZUluRm9sZGVyKGYsZm9sZGVyKTt9KS5sZW5ndGg7fX0pfTsvKiBzY3JpcHQgKi92YXIgX192dWVfc2NyaXB0X18kOT1zY3JpcHQkOTsvKiB0ZW1wbGF0ZSAqL3ZhciBfX3Z1ZV9yZW5kZXJfXyQ5PWZ1bmN0aW9uIF9fdnVlX3JlbmRlcl9fJDkoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX3ZtLmZpbGVzLmxlbmd0aD4wP19jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLWdyaWRcIixcImNsYXNzXCI6XCJmcHMtZ3JpZF9fdHlwZS1cIitfdm0udmlld1R5cGV9LFtfdm0uX2woX3ZtLm9ubHlGb2xkZXJzLGZ1bmN0aW9uKGZvbGRlcil7cmV0dXJuIF9jKFwiZGl2XCIse2tleTpmb2xkZXIucGF0aCxzdGF0aWNDbGFzczpcImZzcC1ncmlkX19jZWxsXCIsXCJjbGFzc1wiOntcImZzcC1ncmlkX19jZWxsLS1zZWxlY3RlZFwiOl92bS5pc1NlbGVjdGVkKGZvbGRlcil9LGF0dHJzOnt0aXRsZTpmb2xkZXIubmFtZSx0YWJpbmRleDpcIjBcIn0sb246e2NsaWNrOmZ1bmN0aW9uIGNsaWNrKCRldmVudCl7cmV0dXJuIF92bS5oYW5kbGVGb2xkZXJDbGljaygkZXZlbnQsZm9sZGVyKTt9LGtleXVwOmZ1bmN0aW9uIGtleXVwKCRldmVudCl7aWYoISRldmVudC50eXBlLmluZGV4T2YoXCJrZXlcIikmJl92bS5faygkZXZlbnQua2V5Q29kZSxcImVudGVyXCIsMTMsJGV2ZW50LmtleSxcIkVudGVyXCIpKXtyZXR1cm4gbnVsbDt9cmV0dXJuIF92bS5oYW5kbGVGb2xkZXJDbGljaygkZXZlbnQsZm9sZGVyKTt9fX0sW192bS5pc1NlbGVjdGVkKGZvbGRlcik/X2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLWJhZGdlIGZzcC1iYWRnZS0tYnJpZ2h0IGZzcC1iYWRnZS0tZmlsZVwifSxbX3ZtLl92KFwiXFxuICAgICAgXCIrX3ZtLl9zKF92bS5nZXRGaWxlQ291bnQoZm9sZGVyKSkrXCJcXG4gICAgXCIpXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwhX3ZtLmlzU2VsZWN0ZWQoZm9sZGVyKXx8X3ZtLnZpZXdUeXBlPT09XCJncmlkXCI/X2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLWdyaWRfX2ljb25cIixcImNsYXNzXCI6X3ZtLmdldEljb25DbGFzcyhcImZzcC1ncmlkX19pY29uLWZvbGRlclwiLGZvbGRlcil9KTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF9jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1ncmlkX190ZXh0XCIsXCJjbGFzc1wiOntcImZzcC1ncmlkX190ZXh0LS1zZWxlY3RlZFwiOl92bS5pc1NlbGVjdGVkKGZvbGRlcil9fSxbX3ZtLl92KF92bS5fcyhmb2xkZXIubmFtZSkpXSksX3ZtLl92KFwiIFwiKSxfdm0uaXNTZWxlY3RlZChmb2xkZXIpP19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1ncmlkX19pY29uLS1zZWxlY3RlZFwiLGF0dHJzOnt0aXRsZTpcIkRlc2VsZWN0IGZvbGRlclwifSxvbjp7Y2xpY2s6ZnVuY3Rpb24gY2xpY2soJGV2ZW50KXskZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7cmV0dXJuIF92bS5kZXNlbGVjdEZvbGRlcihmb2xkZXIpO319fSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwhX3ZtLmlzTG9hZGluZyhmb2xkZXIpJiYhX3ZtLmlzU2VsZWN0ZWQoZm9sZGVyKT9fYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3AtZ3JpZF9faWNvbi1mb2xkZXItYWRkXCIsYXR0cnM6e3RpdGxlOlwiQWRkIGZvbGRlclwifSxvbjp7Y2xpY2s6ZnVuY3Rpb24gY2xpY2soJGV2ZW50KXskZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7cmV0dXJuIF92bS5hZGRGaWxlKGZvbGRlcik7fX19KTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF92bS5pc0xvYWRpbmcoZm9sZGVyKT9fYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1sb2FkaW5nLS1mb2xkZXJcIn0pOl92bS5fZSgpXSk7fSksX3ZtLl92KFwiIFwiKSxfdm0uX2woX3ZtLm9ubHlGaWxlcyxmdW5jdGlvbihmaWxlKXtyZXR1cm4gX2MoXCJkaXZcIix7a2V5OmZpbGUucGF0aCxzdGF0aWNDbGFzczpcImZzcC1ncmlkX19jZWxsXCIsXCJjbGFzc1wiOntcImZzcC1ncmlkX19jZWxsLS1zZWxlY3RlZFwiOl92bS5pc1NlbGVjdGVkKGZpbGUpLFwiZnNwLWdyaWRfX2NlbGwtLXRodW1ibmFpbFwiOl92bS5pc0ltYWdlKGZpbGUpfSxhdHRyczp7dGFiaW5kZXg6XCIwXCIsdGl0bGU6ZmlsZS5uYW1lfSxvbjp7a2V5dXA6ZnVuY3Rpb24ga2V5dXAoJGV2ZW50KXtpZighJGV2ZW50LnR5cGUuaW5kZXhPZihcImtleVwiKSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwiZW50ZXJcIiwxMywkZXZlbnQua2V5LFwiRW50ZXJcIikpe3JldHVybiBudWxsO31yZXR1cm4gX3ZtLmhhbmRsZUNsaWNrRmlsZSgkZXZlbnQsZmlsZSk7fSxjbGljazpmdW5jdGlvbiBjbGljaygkZXZlbnQpe3JldHVybiBfdm0uaGFuZGxlQ2xpY2tGaWxlKCRldmVudCxmaWxlKTt9fX0sW192bS5pc0F1ZGlvKGZpbGUpP19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1ncmlkX19pY29uXCIsXCJjbGFzc1wiOl92bS5nZXRJY29uQ2xhc3MoXCJmc3AtZ3JpZF9faWNvbi1hdWRpb1wiLGZpbGUpfSk6X3ZtLmlzSW1hZ2UoZmlsZSk/X2MoXCJpbWdcIix7c3RhdGljQ2xhc3M6XCJmc3AtZ3JpZF9faWNvbiBmc3AtZ3JpZF9fdGh1bWJuYWlsXCIsYXR0cnM6e3NyYzpmaWxlLnRodW1ibmFpbCxhbHQ6ZmlsZS5uYW1lfX0pOmZpbGUubWltZXR5cGU9PT1cImFwcGxpY2F0aW9uL3BkZlwiP19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1ncmlkX19pY29uXCIsXCJjbGFzc1wiOl92bS5nZXRJY29uQ2xhc3MoXCJmc3AtZ3JpZF9faWNvbi1wZGZcIixmaWxlKX0pOmZpbGUubWltZXR5cGU9PT1cImFwcGxpY2F0aW9uL3ppcFwiP19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1ncmlkX19pY29uXCIsXCJjbGFzc1wiOl92bS5nZXRJY29uQ2xhc3MoXCJmc3AtZ3JpZF9faWNvbi16aXBcIixmaWxlKX0pOl9jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1ncmlkX19pY29uXCIsXCJjbGFzc1wiOl92bS5nZXRJY29uQ2xhc3MoXCJmc3AtZ3JpZF9faWNvbi1maWxlXCIsZmlsZSl9KSxfdm0uX3YoXCIgXCIpLF9jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1ncmlkX190ZXh0XCIsXCJjbGFzc1wiOntcImZzcC1ncmlkX190ZXh0LS1zZWxlY3RlZFwiOl92bS5pc1NlbGVjdGVkKGZpbGUpfX0sW192bS5fdihfdm0uX3MoX3ZtLmdldE5hbWUoZmlsZSkpKV0pLF92bS5fdihcIiBcIiksX3ZtLmlzU2VsZWN0ZWQoZmlsZSk/X2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLWdyaWRfX2ljb24tLXNlbGVjdGVkXCJ9KTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF9jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLWdyaWRfX2NlbGwtLWRhcmtcIn0pXSk7fSldLDIpOl92bS5fZSgpO307dmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJDk9W107X192dWVfcmVuZGVyX18kOS5fd2l0aFN0cmlwcGVkPXRydWU7Lyogc3R5bGUgKi92YXIgX192dWVfaW5qZWN0X3N0eWxlc19fJDk9dW5kZWZpbmVkOy8qIHNjb3BlZCAqL3ZhciBfX3Z1ZV9zY29wZV9pZF9fJDk9dW5kZWZpbmVkOy8qIG1vZHVsZSBpZGVudGlmaWVyICovdmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kOT11bmRlZmluZWQ7LyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL3ZhciBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kOT1mYWxzZTsvKiBzdHlsZSBpbmplY3QgKi8gLyogc3R5bGUgaW5qZWN0IFNTUiAqLyAvKiBzdHlsZSBpbmplY3Qgc2hhZG93IGRvbSAqL3ZhciBHcmlkQXJyYXk9bm9ybWFsaXplQ29tcG9uZW50KHtyZW5kZXI6X192dWVfcmVuZGVyX18kOSxzdGF0aWNSZW5kZXJGbnM6X192dWVfc3RhdGljUmVuZGVyRm5zX18kOX0sX192dWVfaW5qZWN0X3N0eWxlc19fJDksX192dWVfc2NyaXB0X18kOSxfX3Z1ZV9zY29wZV9pZF9fJDksX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDksX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQ5LGZhbHNlLHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkKTsvL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xudmFyIHNjcmlwdCRhPXttZXRob2RzOntnb0JhY2s6ZnVuY3Rpb24gZ29CYWNrKCl7dGhpcy4kc3RvcmUuY29tbWl0KCdHT19CQUNLX1dJVEhfUk9VVEUnKTt9fX07Lyogc2NyaXB0ICovdmFyIF9fdnVlX3NjcmlwdF9fJGE9c2NyaXB0JGE7LyogdGVtcGxhdGUgKi92YXIgX192dWVfcmVuZGVyX18kYT1mdW5jdGlvbiBfX3Z1ZV9yZW5kZXJfXyRhKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLWVtcHR5XCJ9LFtfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1lbXB0eV9fbWVzc2FnZVwifSxbX3ZtLl92KF92bS5fcyhfdm0udChcIlRoaXMgZm9sZGVyIGlzIGVtcHR5LlwiKSkpXSksX3ZtLl92KFwiIFwiKSxfYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3AtZW1wdHlfX2JhY2stYnV0dG9uXCIsb246e2NsaWNrOl92bS5nb0JhY2t9fSxbX3ZtLl92KF92bS5fcyhfdm0udChcIkdvIGJhY2tcIikpKV0pXSk7fTt2YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kYT1bXTtfX3Z1ZV9yZW5kZXJfXyRhLl93aXRoU3RyaXBwZWQ9dHJ1ZTsvKiBzdHlsZSAqL3ZhciBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kYT11bmRlZmluZWQ7Lyogc2NvcGVkICovdmFyIF9fdnVlX3Njb3BlX2lkX18kYT11bmRlZmluZWQ7LyogbW9kdWxlIGlkZW50aWZpZXIgKi92YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyRhPXVuZGVmaW5lZDsvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovdmFyIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyRhPWZhbHNlOy8qIHN0eWxlIGluamVjdCAqLyAvKiBzdHlsZSBpbmplY3QgU1NSICovIC8qIHN0eWxlIGluamVjdCBzaGFkb3cgZG9tICovdmFyIEVtcHR5Rm9sZGVyPW5vcm1hbGl6ZUNvbXBvbmVudCh7cmVuZGVyOl9fdnVlX3JlbmRlcl9fJGEsc3RhdGljUmVuZGVyRm5zOl9fdnVlX3N0YXRpY1JlbmRlckZuc19fJGF9LF9fdnVlX2luamVjdF9zdHlsZXNfXyRhLF9fdnVlX3NjcmlwdF9fJGEsX192dWVfc2NvcGVfaWRfXyRhLF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyRhLF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kYSxmYWxzZSx1bmRlZmluZWQsdW5kZWZpbmVkLHVuZGVmaW5lZCk7Ly9cbnZhciBzY3JpcHQkYj17cHJvcHM6WydmaWxlcyddLGNvbXBvbmVudHM6e0dyaWRBcnJheTpHcmlkQXJyYXksRW1wdHlGb2xkZXI6RW1wdHlGb2xkZXJ9LGNvbXB1dGVkOntmb2xkZXJJc0VtcHR5OmZ1bmN0aW9uIGZvbGRlcklzRW1wdHkoKXtyZXR1cm4hdGhpcy4kc3RvcmUuZ2V0dGVycy5jdXJyZW50Q2xvdWQuaXNMb2FkaW5nJiYhdGhpcy4kc3RvcmUuZ2V0dGVycy5jdXJyZW50Q2xvdWQuaXNFcnJvcmVkJiYhdGhpcy4kc3RvcmUuZ2V0dGVycy5jdXJyZW50Q2xvdWRGaWxlcy5sZW5ndGg7fX19Oy8qIHNjcmlwdCAqL3ZhciBfX3Z1ZV9zY3JpcHRfXyRiPXNjcmlwdCRiOy8qIHRlbXBsYXRlICovdmFyIF9fdnVlX3JlbmRlcl9fJGI9ZnVuY3Rpb24gX192dWVfcmVuZGVyX18kYigpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1jbG91ZF9fZm9sZGVyLXZpZXdcIn0sW192bS5mb2xkZXJJc0VtcHR5P19jKFwiZW1wdHktZm9sZGVyXCIpOl9jKFwiZ3JpZC1hcnJheVwiLHthdHRyczp7ZmlsZXM6X3ZtLmZpbGVzfX0pXSwxKTt9O3ZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyRiPVtdO19fdnVlX3JlbmRlcl9fJGIuX3dpdGhTdHJpcHBlZD10cnVlOy8qIHN0eWxlICovdmFyIF9fdnVlX2luamVjdF9zdHlsZXNfXyRiPXVuZGVmaW5lZDsvKiBzY29wZWQgKi92YXIgX192dWVfc2NvcGVfaWRfXyRiPXVuZGVmaW5lZDsvKiBtb2R1bGUgaWRlbnRpZmllciAqL3ZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJGI9dW5kZWZpbmVkOy8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi92YXIgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJGI9ZmFsc2U7Lyogc3R5bGUgaW5qZWN0ICovIC8qIHN0eWxlIGluamVjdCBTU1IgKi8gLyogc3R5bGUgaW5qZWN0IHNoYWRvdyBkb20gKi92YXIgQ2xvdWRHcmlkPW5vcm1hbGl6ZUNvbXBvbmVudCh7cmVuZGVyOl9fdnVlX3JlbmRlcl9fJGIsc3RhdGljUmVuZGVyRm5zOl9fdnVlX3N0YXRpY1JlbmRlckZuc19fJGJ9LF9fdnVlX2luamVjdF9zdHlsZXNfXyRiLF9fdnVlX3NjcmlwdF9fJGIsX192dWVfc2NvcGVfaWRfXyRiLF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyRiLF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kYixmYWxzZSx1bmRlZmluZWQsdW5kZWZpbmVkLHVuZGVmaW5lZCk7Ly9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xudmFyIHNjcmlwdCRjPXtwcm9wczpbJ2NydW1icycsJ29uQ2xpY2snXSxtZXRob2RzOnt0cnVuY2F0ZUNydW1iczpmdW5jdGlvbiB0cnVuY2F0ZUNydW1icyhjcnVtYnMpe3ZhciBuZXdDcnVtYnM9W10uY29uY2F0KGNydW1ic1swXSk7dmFyIGxhc3RUd29DcnVtYnM9Y3J1bWJzLmZpbHRlcihmdW5jdGlvbihjcnVtYixpKXtyZXR1cm4gaT49Y3J1bWJzLmxlbmd0aC0yO30pO25ld0NydW1icy5wdXNoLmFwcGx5KG5ld0NydW1icyxbe3BhdGg6JycsbGFiZWw6Jy4uLid9XS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGxhc3RUd29DcnVtYnMpKSk7cmV0dXJuIG5ld0NydW1iczt9LGhhbmRsZUNsaWNrOmZ1bmN0aW9uIGhhbmRsZUNsaWNrKGNydW1iKXtpZihjcnVtYi5wYXRoJiZjcnVtYi5sYWJlbCl7dGhpcy5vbkNsaWNrKGNydW1iKTt9fX19Oy8qIHNjcmlwdCAqL3ZhciBfX3Z1ZV9zY3JpcHRfXyRjPXNjcmlwdCRjOy8qIHRlbXBsYXRlICovdmFyIF9fdnVlX3JlbmRlcl9fJGM9ZnVuY3Rpb24gX192dWVfcmVuZGVyX18kYygpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1icmVhZGNydW1iX19jb250YWluZXJcIn0sW192bS5jcnVtYnMubGVuZ3RoPD0zP19jKFwic3BhblwiLHtzdGF0aWNTdHlsZTp7ZGlzcGxheTpcImZsZXhcIn19LF92bS5fbChfdm0uY3J1bWJzLGZ1bmN0aW9uKGNydW1iKXtyZXR1cm4gX2MoXCJzcGFuXCIse2tleTpjcnVtYi5wYXRoLHN0YXRpY0NsYXNzOlwiZnNwLWJyZWFkY3J1bWJfX2xhYmVsXCIsb246e2NsaWNrOmZ1bmN0aW9uIGNsaWNrKCRldmVudCl7cmV0dXJuIF92bS5oYW5kbGVDbGljayhjcnVtYik7fX19LFtfdm0uX3YoXCJcXG4gICAgICBcIitfdm0uX3MoY3J1bWIubGFiZWwpK1wiXFxuICAgIFwiKV0pO30pLDApOl9jKFwic3BhblwiLHtzdGF0aWNTdHlsZTp7ZGlzcGxheTpcImZsZXhcIn19LF92bS5fbChfdm0udHJ1bmNhdGVDcnVtYnMoX3ZtLmNydW1icyksZnVuY3Rpb24oY3J1bWIpe3JldHVybiBfYyhcInNwYW5cIix7a2V5OmNydW1iLnBhdGgsc3RhdGljQ2xhc3M6XCJmc3AtYnJlYWRjcnVtYl9fbGFiZWxcIixvbjp7Y2xpY2s6ZnVuY3Rpb24gY2xpY2soJGV2ZW50KXtyZXR1cm4gX3ZtLmhhbmRsZUNsaWNrKGNydW1iKTt9fX0sW192bS5fdihcIlxcbiAgICAgIFwiK192bS5fcyhjcnVtYi5sYWJlbCkrXCJcXG4gICAgXCIpXSk7fSksMCldKTt9O3ZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyRjPVtdO19fdnVlX3JlbmRlcl9fJGMuX3dpdGhTdHJpcHBlZD10cnVlOy8qIHN0eWxlICovdmFyIF9fdnVlX2luamVjdF9zdHlsZXNfXyRjPXVuZGVmaW5lZDsvKiBzY29wZWQgKi92YXIgX192dWVfc2NvcGVfaWRfXyRjPXVuZGVmaW5lZDsvKiBtb2R1bGUgaWRlbnRpZmllciAqL3ZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJGM9dW5kZWZpbmVkOy8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi92YXIgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJGM9ZmFsc2U7Lyogc3R5bGUgaW5qZWN0ICovIC8qIHN0eWxlIGluamVjdCBTU1IgKi8gLyogc3R5bGUgaW5qZWN0IHNoYWRvdyBkb20gKi92YXIgQnJlYWRjcnVtYnM9bm9ybWFsaXplQ29tcG9uZW50KHtyZW5kZXI6X192dWVfcmVuZGVyX18kYyxzdGF0aWNSZW5kZXJGbnM6X192dWVfc3RhdGljUmVuZGVyRm5zX18kY30sX192dWVfaW5qZWN0X3N0eWxlc19fJGMsX192dWVfc2NyaXB0X18kYyxfX3Z1ZV9zY29wZV9pZF9fJGMsX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJGMsX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyRjLGZhbHNlLHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkKTsvL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG52YXIgc2NyaXB0JGQ9e307Lyogc2NyaXB0ICovdmFyIF9fdnVlX3NjcmlwdF9fJGQ9c2NyaXB0JGQ7LyogdGVtcGxhdGUgKi92YXIgX192dWVfcmVuZGVyX18kZD1mdW5jdGlvbiBfX3Z1ZV9yZW5kZXJfXyRkKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKFwidHJhbnNpdGlvblwiLHthdHRyczp7bmFtZTpcImZzcC1sb2FkaW5nLS1mYWRlXCJ9fSxbX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3AtbG9hZGluZ1wifSldKTt9O3ZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyRkPVtdO19fdnVlX3JlbmRlcl9fJGQuX3dpdGhTdHJpcHBlZD10cnVlOy8qIHN0eWxlICovdmFyIF9fdnVlX2luamVjdF9zdHlsZXNfXyRkPXVuZGVmaW5lZDsvKiBzY29wZWQgKi92YXIgX192dWVfc2NvcGVfaWRfXyRkPXVuZGVmaW5lZDsvKiBtb2R1bGUgaWRlbnRpZmllciAqL3ZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJGQ9dW5kZWZpbmVkOy8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi92YXIgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJGQ9ZmFsc2U7Lyogc3R5bGUgaW5qZWN0ICovIC8qIHN0eWxlIGluamVjdCBTU1IgKi8gLyogc3R5bGUgaW5qZWN0IHNoYWRvdyBkb20gKi92YXIgTG9hZGluZz1ub3JtYWxpemVDb21wb25lbnQoe3JlbmRlcjpfX3Z1ZV9yZW5kZXJfXyRkLHN0YXRpY1JlbmRlckZuczpfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyRkfSxfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kZCxfX3Z1ZV9zY3JpcHRfXyRkLF9fdnVlX3Njb3BlX2lkX18kZCxfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kZCxfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJGQsZmFsc2UsdW5kZWZpbmVkLHVuZGVmaW5lZCx1bmRlZmluZWQpOy8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG52YXIgc2NyaXB0JGU9e3Byb3BzOntjbGlja0ZuOkZ1bmN0aW9ufX07Lyogc2NyaXB0ICovdmFyIF9fdnVlX3NjcmlwdF9fJGU9c2NyaXB0JGU7LyogdGVtcGxhdGUgKi92YXIgX192dWVfcmVuZGVyX18kZT1mdW5jdGlvbiBfX3Z1ZV9yZW5kZXJfXyRlKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKFwiYnV0dG9uXCIse3N0YXRpY0NsYXNzOlwiZnNwLWJ1dHRvbi0tYXV0aGdvb2dsZVwiLGF0dHJzOnt0eXBlOlwiYnV0dG9uXCIsdGFiaW5kZXg6XCIwXCJ9LG9uOntjbGljazpfdm0uY2xpY2tGbn19LFtfYyhcInN2Z1wiLHtzdGF0aWNDbGFzczpcInN2Zy1pY29uIG5hdGl2ZSBpY29uR29vZ2xlXCIsYXR0cnM6e1wiYXJpYS1oaWRkZW5cIjpcInRydWVcIix3aWR0aDpcIjIwXCIsaGVpZ2h0OlwiMjBcIix2aWV3Qm94OlwiMCAwIDE4IDE4XCJ9fSxbX2MoXCJwYXRoXCIse2F0dHJzOntkOlwiTTE2LjUxIDhIOC45OHYzaDQuM2MtLjE4IDEtLjc0IDEuNDgtMS42IDIuMDR2Mi4wMWgyLjZhNy44IDcuOCAwIDAgMCAyLjM4LTUuODhjMC0uNTctLjA1LS42Ni0uMTUtMS4xOHpcIixmaWxsOlwiIzQyODVGNFwifX0pLF92bS5fdihcIiBcIiksX2MoXCJwYXRoXCIse2F0dHJzOntkOlwiTTguOTggMTdjMi4xNiAwIDMuOTctLjcyIDUuMy0xLjk0bC0yLjYtMmE0LjggNC44IDAgMCAxLTcuMTgtMi41NEgxLjgzdjIuMDdBOCA4IDAgMCAwIDguOTggMTd6XCIsZmlsbDpcIiMzNEE4NTNcIn19KSxfdm0uX3YoXCIgXCIpLF9jKFwicGF0aFwiLHthdHRyczp7ZDpcIk00LjUgMTAuNTJhNC44IDQuOCAwIDAgMSAwLTMuMDRWNS40MUgxLjgzYTggOCAwIDAgMCAwIDcuMThsMi42Ny0yLjA3elwiLGZpbGw6XCIjRkJCQzA1XCJ9fSksX3ZtLl92KFwiIFwiKSxfYyhcInBhdGhcIix7YXR0cnM6e2Q6XCJNOC45OCA0LjE4YzEuMTcgMCAyLjIzLjQgMy4wNiAxLjJsMi4zLTIuM0E4IDggMCAwIDAgMS44MyA1LjRMNC41IDcuNDlhNC43NyA0Ljc3IDAgMCAxIDQuNDgtMy4zelwiLGZpbGw6XCIjRUE0MzM1XCJ9fSldKSxfdm0uX3YoXCIgXCIpLF9jKFwic3BhblwiLFtfdm0uX3YoXCJcXG4gICAgXCIrX3ZtLl9zKF92bS50KFwiU2lnbiBpbiB3aXRoIEdvb2dsZVwiKSkrXCJcXG4gIFwiKV0pXSk7fTt2YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kZT1bXTtfX3Z1ZV9yZW5kZXJfXyRlLl93aXRoU3RyaXBwZWQ9dHJ1ZTsvKiBzdHlsZSAqL3ZhciBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kZT11bmRlZmluZWQ7Lyogc2NvcGVkICovdmFyIF9fdnVlX3Njb3BlX2lkX18kZT11bmRlZmluZWQ7LyogbW9kdWxlIGlkZW50aWZpZXIgKi92YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyRlPXVuZGVmaW5lZDsvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovdmFyIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyRlPWZhbHNlOy8qIHN0eWxlIGluamVjdCAqLyAvKiBzdHlsZSBpbmplY3QgU1NSICovIC8qIHN0eWxlIGluamVjdCBzaGFkb3cgZG9tICovdmFyIEdvb2dsZVNpZ25JbkJ1dHRvbj1ub3JtYWxpemVDb21wb25lbnQoe3JlbmRlcjpfX3Z1ZV9yZW5kZXJfXyRlLHN0YXRpY1JlbmRlckZuczpfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyRlfSxfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kZSxfX3Z1ZV9zY3JpcHRfXyRlLF9fdnVlX3Njb3BlX2lkX18kZSxfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kZSxfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJGUsZmFsc2UsdW5kZWZpbmVkLHVuZGVmaW5lZCx1bmRlZmluZWQpOy8vXG52YXIgc2NyaXB0JGY9e2NvbXBvbmVudHM6e0Nsb3VkR3JpZDpDbG91ZEdyaWQsQnJlYWRjcnVtYnM6QnJlYWRjcnVtYnMsTG9hZGluZzpMb2FkaW5nLEdvb2dsZVNpZ25JbkJ1dHRvbjpHb29nbGVTaWduSW5CdXR0b259LGRhdGE6ZnVuY3Rpb24gZGF0YSgpe3JldHVybntnb29nbGVTb3VyY2VzOlsnZ29vZ2xlZHJpdmUnLCdnbWFpbCcsJ3BpY2FzYSddfTt9LGNvbXB1dGVkOl9vYmplY3RTcHJlYWQoe30saW5kZXhfZXNtLm1hcEdldHRlcnMoWydhcGlDbGllbnQnLCdjbG91ZEZvbGRlcnMnLCdjdXJyZW50Q2xvdWQnLCdjdXJyZW50Q2xvdWRGaWxlcycsJ2N1c3RvbVNvdXJjZU5hbWUnLCd2aWV3VHlwZSddKSx7Y3VycmVudERpc3BsYXk6ZnVuY3Rpb24gY3VycmVudERpc3BsYXkoKXtyZXR1cm4gZ2V0QnlOYW1lKHRoaXMuY3VycmVudENsb3VkLm5hbWUpO30sY3VycmVudExhYmVsOmZ1bmN0aW9uIGN1cnJlbnRMYWJlbCgpe2lmKHRoaXMuY3VycmVudENsb3VkLm5hbWU9PT0nY3VzdG9tc291cmNlJyl7cmV0dXJuIHRoaXMuY3VzdG9tU291cmNlTmFtZXx8J0N1c3RvbSBTb3VyY2UnO31yZXR1cm4gdGhpcy5jdXJyZW50RGlzcGxheS5sYWJlbDt9LGN1cnJlbnRDcnVtYnM6ZnVuY3Rpb24gY3VycmVudENydW1icygpe3ZhciBfdGhpczg9dGhpcztyZXR1cm4gdGhpcy5jdXJyZW50Q2xvdWQucGF0aC5tYXAoZnVuY3Rpb24ocGF0aCl7aWYocGF0aD09PScvJyl7cmV0dXJue2xhYmVsOl90aGlzOC5jdXJyZW50TGFiZWwscGF0aDpwYXRofTt9cmV0dXJue2xhYmVsOl90aGlzOC5jbG91ZEZvbGRlcnNbcGF0aF0ubmFtZSxwYXRoOnBhdGh9O30pO30sY3VycmVudFNvdXJjZTpmdW5jdGlvbiBjdXJyZW50U291cmNlKCl7aWYoIXRoaXMuJHN0b3JlLmdldHRlcnMuY3VycmVudENsb3VkfHwhT2JqZWN0LmtleXModGhpcy4kc3RvcmUuZ2V0dGVycy5jdXJyZW50Q2xvdWQpLmxlbmd0aCl7cmV0dXJuIG51bGw7fXJldHVybiBnZXRCeU5hbWUodGhpcy4kc3RvcmUuZ2V0dGVycy5jdXJyZW50Q2xvdWQubmFtZSk7fSxjdXN0b21BdXRoVGV4dFRvcDpmdW5jdGlvbiBjdXN0b21BdXRoVGV4dFRvcCgpe3ZhciBjdXJyZW50Q2xvdWROYW1lPXRoaXMuY3VycmVudFNvdXJjZS5uYW1lO3ZhciBjb25maWc9dGhpcy4kc3RvcmUuZ2V0dGVycy5jb25maWcuY3VzdG9tQXV0aFRleHQ7aWYoIWNvbmZpZyl7cmV0dXJuIG51bGw7fWlmKGNvbmZpZ1tjdXJyZW50Q2xvdWROYW1lXSYmY29uZmlnW2N1cnJlbnRDbG91ZE5hbWVdLnRvcCl7cmV0dXJuIGNvbmZpZ1tjdXJyZW50Q2xvdWROYW1lXS50b3A7fWlmKGNvbmZpZ1tcImRlZmF1bHRcIl0mJmNvbmZpZ1tcImRlZmF1bHRcIl0udG9wKXtyZXR1cm4gY29uZmlnW1wiZGVmYXVsdFwiXS50b3A7fXJldHVybiBudWxsO30sY3VzdG9tQXV0aFRleHRCb3R0b206ZnVuY3Rpb24gY3VzdG9tQXV0aFRleHRCb3R0b20oKXt2YXIgY3VycmVudENsb3VkTmFtZT10aGlzLmN1cnJlbnRTb3VyY2UubmFtZTt2YXIgY29uZmlnPXRoaXMuJHN0b3JlLmdldHRlcnMuY29uZmlnLmN1c3RvbUF1dGhUZXh0O2lmKCFjb25maWcpe3JldHVybiBudWxsO31pZihjb25maWdbY3VycmVudENsb3VkTmFtZV0mJmNvbmZpZ1tjdXJyZW50Q2xvdWROYW1lXS5ib3R0b20pe3JldHVybiBjb25maWdbY3VycmVudENsb3VkTmFtZV0uYm90dG9tO31pZihjb25maWdbXCJkZWZhdWx0XCJdJiZjb25maWdbXCJkZWZhdWx0XCJdLmJvdHRvbSl7cmV0dXJuIGNvbmZpZ1tcImRlZmF1bHRcIl0uYm90dG9tO31yZXR1cm4gbnVsbDt9fSksbWV0aG9kczpfb2JqZWN0U3ByZWFkKHt9LGluZGV4X2VzbS5tYXBBY3Rpb25zKFsnZmV0Y2hDbG91ZFBhdGgnLCdzZXRWaWV3VHlwZSddKSx7dG9vZ2xlVmlld1R5cGU6ZnVuY3Rpb24gdG9vZ2xlVmlld1R5cGUoKXt2YXIgdmlldz10aGlzLnZpZXdUeXBlPT09J2xpc3QnPydncmlkJzonbGlzdCc7dGhpcy4kc2Vzc2lvbi5zZXQoJ2Nsb3VkLWdyaWQtdmlldycsdmlldyk7dGhpcy5zZXRWaWV3VHlwZSh2aWV3KTt9LGdldFZpZXdUeXBlSWNvbkNsYXNzOmZ1bmN0aW9uIGdldFZpZXdUeXBlSWNvbkNsYXNzKCl7cmV0dXJuXCJmc3AtY2xvdWRfdmlldy10eXBlLWljb24tXCIuY29uY2F0KHRoaXMudmlld1R5cGU9PT0nbGlzdCc/J2dyaWQnOidsaXN0Jyk7fSxhdXRob3JpemU6ZnVuY3Rpb24gYXV0aG9yaXplKCl7dmFyIF90aGlzOT10aGlzO3ZhciB1cmw9dGhpcy5jdXJyZW50Q2xvdWQucmVkaXJlY3Q7dmFyIHdpbj13aW5kb3cub3Blbih1cmwsJ19ibGFuaycpO3ZhciB3YWl0VW50aWxXaW5kb3dDbG9zZWQ9ZnVuY3Rpb24gd2FpdFVudGlsV2luZG93Q2xvc2VkKCl7c2V0VGltZW91dChmdW5jdGlvbigpe2lmKHdpbiYmd2luLmNsb3NlZCE9PXRydWUpe3NldFRpbWVvdXQod2FpdFVudGlsV2luZG93Q2xvc2VkLDEwMCk7fWVsc2V7c2V0VGltZW91dChmdW5jdGlvbigpe190aGlzOS5mZXRjaENsb3VkUGF0aCh7bmFtZTpfdGhpczkuY3VycmVudENsb3VkLm5hbWV9KTt9LDEwMCk7fX0sMTAwMCk7fTt3YWl0VW50aWxXaW5kb3dDbG9zZWQoKTt9LHRyeUFnYWluOmZ1bmN0aW9uIHRyeUFnYWluKCl7cmV0dXJuIHRoaXMuZmV0Y2hDbG91ZFBhdGgoe25hbWU6dGhpcy5jdXJyZW50Q2xvdWQubmFtZX0pO30sdXBkYXRlUGF0aDpmdW5jdGlvbiB1cGRhdGVQYXRoKGNydW1iKXt2YXIgaW5kZXg9dGhpcy5jdXJyZW50Q2xvdWQucGF0aC5pbmRleE9mKGNydW1iLnBhdGgpOy8vIERvbid0IGFkZCBwYXRoIHRvIHJvdXRlIGlmIHdlJ3JlIGFscmVhZHkgb24gdGhhdCBwYXRoXG5pZihpbmRleD09PXRoaXMuY3VycmVudENsb3VkLnBhdGgubGVuZ3RoLTEpe3JldHVybjt9dmFyIG5ld1BhdGg9dGhpcy5jdXJyZW50Q2xvdWQucGF0aC5maWx0ZXIoZnVuY3Rpb24ocGF0aCxpKXtyZXR1cm4gaTw9aW5kZXg7fSk7dmFyIHJvb3RQYXRoPVsnc291cmNlJyx0aGlzLmN1cnJlbnRDbG91ZC5uYW1lXTtpZihjcnVtYi5wYXRoPT09Jy8nKXt0aGlzLiRzdG9yZS5jb21taXQoJ0NIQU5HRV9ST1VURScscm9vdFBhdGgpO31lbHNle3Jvb3RQYXRoLnB1c2gobmV3UGF0aCk7dGhpcy4kc3RvcmUuY29tbWl0KCdDSEFOR0VfUk9VVEUnLHJvb3RQYXRoKTt9fSxzaG91bGRVc2VHb29nbGVTaWduSW46ZnVuY3Rpb24gc2hvdWxkVXNlR29vZ2xlU2lnbkluKCl7aWYodGhpcy5jdXJyZW50U291cmNlLm5hbWUpe3JldHVybiB0aGlzLmdvb2dsZVNvdXJjZXMuaW5kZXhPZih0aGlzLmN1cnJlbnRTb3VyY2UubmFtZSk+LTE7fXJldHVybiBmYWxzZTt9fSksbW91bnRlZDpmdW5jdGlvbiBtb3VudGVkKCl7dmFyIHZpZXdTdG9yYWdlPXRoaXMuJHNlc3Npb24uZ2V0KCdjbG91ZC1ncmlkLXZpZXcnKTtpZih2aWV3U3RvcmFnZSl7dGhpcy5zZXRWaWV3VHlwZSh2aWV3U3RvcmFnZSk7fX19Oy8qIHNjcmlwdCAqL3ZhciBfX3Z1ZV9zY3JpcHRfXyRmPXNjcmlwdCRmOy8qIHRlbXBsYXRlICovdmFyIF9fdnVlX3JlbmRlcl9fJGY9ZnVuY3Rpb24gX192dWVfcmVuZGVyX18kZigpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1jbG91ZF9fY29udGFpbmVyXCJ9LFtfdm0uY3VycmVudENsb3VkLmlzTG9hZGluZz9fYyhcImxvYWRpbmdcIik6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfdm0uY3VycmVudENsb3VkLmlzRXJyb3JlZD9fYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1jbG91ZC1lcnJvclwifSxbX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3AtY2xvdWQtZXJyb3JfX3RleHRcIn0sW192bS5fdihcIlNvbWV0aGluZyB3ZW50IHdyb25nLlwiKV0pLF92bS5fdihcIiBcIiksX2MoXCJkaXZcIix7a2V5OlwicmV0cnlDYWxsXCIsc3RhdGljQ2xhc3M6XCJmc3AtYnV0dG9uIGZzcC1idXR0b24tLW91dGxpbmVcIixhdHRyczp7dGFiaW5kZXg6XCIwXCJ9LG9uOntjbGljazpfdm0udHJ5QWdhaW4sa2V5dXA6ZnVuY3Rpb24ga2V5dXAoJGV2ZW50KXtpZighJGV2ZW50LnR5cGUuaW5kZXhPZihcImtleVwiKSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwiZW50ZXJcIiwxMywkZXZlbnQua2V5LFwiRW50ZXJcIikpe3JldHVybiBudWxsO31yZXR1cm4gX3ZtLnRyeUFnYWluKCRldmVudCk7fX19LFtfdm0uX3YoXCJcXG4gICAgICBSZXRyeVxcbiAgICBcIildKV0pOl92bS5jdXJyZW50Q2xvdWQuaXNVbmF1dGhvcml6ZWQ/X2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3Atc291cmNlLWF1dGhfX3dyYXBwZXJcIn0sW19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1pY29uIGZzcC1pY29uLS1hdXRoIGZzcC1zb3VyY2UtYXV0aF9fZWxcIixcImNsYXNzXCI6XCJmc3AtaWNvbi0tXCIrX3ZtLmN1cnJlbnRDbG91ZC5uYW1lfSksX3ZtLl92KFwiIFwiKSxfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC10ZXh0X190aXRsZSBmc3Atc291cmNlLWF1dGhfX2VsXCJ9LFtfdm0uX3YoXCJcXG4gICAgICBcIitfdm0uX3MoX3ZtLnQoXCJTZWxlY3QgRmlsZXMgZnJvbSB7cHJvdmlkZXJOYW1lfVwiKS5yZXBsYWNlKFwie3Byb3ZpZGVyTmFtZX1cIixfdm0uY3VycmVudERpc3BsYXkubGFiZWwpKStcIlxcbiAgICBcIildKSxfdm0uX3YoXCIgXCIpLF9jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLXNvdXJjZS1hdXRoX19lbFwifSxbX3ZtLmN1c3RvbUF1dGhUZXh0VG9wP192bS5fbChfdm0uY3VzdG9tQXV0aFRleHRUb3AsZnVuY3Rpb24odGV4dExpbmUpe3JldHVybiBfYyhcImRpdlwiLHtrZXk6dGV4dExpbmUsc3RhdGljQ2xhc3M6XCJmc3AtY3VzdG9tLWF1dGgtdG9wX19jb250YWluZXJcIn0sW19jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLXRleHRfX3N1YmhlYWRlclwifSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgXCIrX3ZtLl9zKHRleHRMaW5lKStcIlxcbiAgICAgICAgICBcIildKV0pO30pOltfYyhcImRpdlwiKSxfdm0uX3YoXCIgXCIpLF9jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLXRleHRfX3N1YmhlYWRlclwifSxbX3ZtLl92KFwiXFxuICAgICAgICAgIFwiK192bS5fcyhfdm0udChcIllvdSBuZWVkIHRvIGF1dGhlbnRpY2F0ZSB3aXRoIHtwcm92aWRlck5hbWV9LlwiKS5yZXBsYWNlKFwie3Byb3ZpZGVyTmFtZX1cIixfdm0uY3VycmVudERpc3BsYXkubGFiZWwpKStcIlxcbiAgICAgICAgXCIpXSksX3ZtLl92KFwiIFwiKSxfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC10ZXh0X19zdWJoZWFkZXJcIn0sW192bS5fdihcIlxcbiAgICAgICAgICBcIitfdm0uX3MoX3ZtLnQoXCJXZSBvbmx5IGV4dHJhY3QgaW1hZ2VzIGFuZCBuZXZlciBtb2RpZnkgb3IgZGVsZXRlIHRoZW0uXCIpKStcIlxcbiAgICAgICAgXCIpXSldXSwyKSxfdm0uX3YoXCIgXCIpLF92bS5zaG91bGRVc2VHb29nbGVTaWduSW4oKT9fYyhcIkdvb2dsZVNpZ25JbkJ1dHRvblwiLHthdHRyczp7Y2xpY2tGbjpfdm0uYXV0aG9yaXplfX0pOl9jKFwiYnV0dG9uXCIse3N0YXRpY0NsYXNzOlwiZnNwLWJ1dHRvbiBmc3AtYnV0dG9uLS1hdXRoIGZzcC1zb3VyY2UtYXV0aF9fZWxcIixhdHRyczp7dHlwZTpcImJ1dHRvblwiLHRhYmluZGV4OlwiMFwifSxvbjp7Y2xpY2s6X3ZtLmF1dGhvcml6ZX19LFtfdm0uX3YoXCJcXG4gICAgICBcIitfdm0uX3MoX3ZtLnQoXCJDb25uZWN0IHtwcm92aWRlck5hbWV9XCIpLnJlcGxhY2UoXCJ7cHJvdmlkZXJOYW1lfVwiLF92bS5jdXJyZW50RGlzcGxheS5sYWJlbCkpK1wiXFxuICAgIFwiKV0pLF92bS5fdihcIiBcIiksX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3Atc291cmNlLWF1dGhfX2VsXCJ9LFtfdm0uY3VzdG9tQXV0aFRleHRCb3R0b20/X3ZtLl9sKF92bS5jdXN0b21BdXRoVGV4dEJvdHRvbSxmdW5jdGlvbih0ZXh0TGluZSl7cmV0dXJuIF9jKFwiZGl2XCIse2tleTp0ZXh0TGluZSxzdGF0aWNDbGFzczpcImZzcC1jdXN0b20tYXV0aC1ib3R0b21fX2NvbnRhaW5lclwifSxbX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3AtdGV4dF9fc3ViaGVhZGVyXCJ9LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICBcIitfdm0uX3ModGV4dExpbmUpK1wiXFxuICAgICAgICAgIFwiKV0pXSk7fSk6W19jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLXRleHRfX3N1YmhlYWRlclwifSxbX3ZtLl92KFwiXFxuICAgICAgICAgIFwiK192bS5fcyhfdm0udChcIkEgbmV3IHBhZ2Ugd2lsbCBvcGVuIHRvIGNvbm5lY3QgeW91ciBhY2NvdW50LlwiKSkrXCJcXG4gICAgICAgIFwiKV0pLF92bS5fdihcIiBcIiksX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3AtdGV4dF9fc3ViaGVhZGVyXCJ9LFtfdm0uX3YoXCJcXG4gICAgICAgICAgXCIrX3ZtLl9zKF92bS50KCdUbyBkaXNjb25uZWN0IGZyb20ge3Byb3ZpZGVyTmFtZX0gY2xpY2sgXCJTaWduIG91dFwiIGJ1dHRvbiBpbiB0aGUgbWVudS4nKS5yZXBsYWNlKFwie3Byb3ZpZGVyTmFtZX1cIixfdm0uY3VycmVudERpc3BsYXkubGFiZWwpKStcIlxcbiAgICAgICAgXCIpXSldXSwyKV0sMSk6IV92bS5jdXJyZW50Q2xvdWQuaXNMb2FkaW5nP19jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLWNsb3VkX19maWxlcy1jb250YWluZXJcIn0sW19jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLWNsb3VkX19icmVhZGNydW1ic1wifSxbX3ZtLmN1cnJlbnREaXNwbGF5LmxheW91dCE9PVwiZ3JpZFwiP19jKFwiYnJlYWRjcnVtYnNcIix7YXR0cnM6e2NydW1iczpfdm0uY3VycmVudENydW1icyxcIm9uLWNsaWNrXCI6X3ZtLnVwZGF0ZVBhdGh9fSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1jbG91ZF92aWV3LXR5cGVcIixvbjp7Y2xpY2s6ZnVuY3Rpb24gY2xpY2soJGV2ZW50KXskZXZlbnQucHJldmVudERlZmF1bHQoKTtyZXR1cm4gX3ZtLnRvb2dsZVZpZXdUeXBlKCk7fX19LFtfYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3AtY2xvdWRfdmlldy10eXBlLWljb25cIixcImNsYXNzXCI6dGhpcy5nZXRWaWV3VHlwZUljb25DbGFzcygpfSldKV0sMSksX3ZtLl92KFwiIFwiKSxfYyhcImNsb3VkLWdyaWRcIix7YXR0cnM6e2ZpbGVzOl92bS5jdXJyZW50Q2xvdWRGaWxlc319KV0sMSk6X3ZtLl9lKCldLDEpO307dmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJGY9W107X192dWVfcmVuZGVyX18kZi5fd2l0aFN0cmlwcGVkPXRydWU7Lyogc3R5bGUgKi92YXIgX192dWVfaW5qZWN0X3N0eWxlc19fJGY9dW5kZWZpbmVkOy8qIHNjb3BlZCAqL3ZhciBfX3Z1ZV9zY29wZV9pZF9fJGY9dW5kZWZpbmVkOy8qIG1vZHVsZSBpZGVudGlmaWVyICovdmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kZj11bmRlZmluZWQ7LyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL3ZhciBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kZj1mYWxzZTsvKiBzdHlsZSBpbmplY3QgKi8gLyogc3R5bGUgaW5qZWN0IFNTUiAqLyAvKiBzdHlsZSBpbmplY3Qgc2hhZG93IGRvbSAqL3ZhciBDbG91ZD1ub3JtYWxpemVDb21wb25lbnQoe3JlbmRlcjpfX3Z1ZV9yZW5kZXJfXyRmLHN0YXRpY1JlbmRlckZuczpfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyRmfSxfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kZixfX3Z1ZV9zY3JpcHRfXyRmLF9fdnVlX3Njb3BlX2lkX18kZixfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kZixfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJGYsZmFsc2UsdW5kZWZpbmVkLHVuZGVmaW5lZCx1bmRlZmluZWQpOy8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG52YXIgc2NyaXB0JGc9e3Byb3BzOlsnaXNWaXNpYmxlJywnZnVsbFdpZHRoJ119Oy8qIHNjcmlwdCAqL3ZhciBfX3Z1ZV9zY3JpcHRfXyRnPXNjcmlwdCRnOy8qIHRlbXBsYXRlICovdmFyIF9fdnVlX3JlbmRlcl9fJGc9ZnVuY3Rpb24gX192dWVfcmVuZGVyX18kZygpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1mb290ZXJcIixcImNsYXNzXCI6e1wiZnNwLWZvb3Rlci0tYXBwZWFyZWRcIjpfdm0uaXNWaXNpYmxlfX0sW19jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLWZvb3Rlcl9fbmF2XCJ9LFtfYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3AtZm9vdGVyX19uYXYtLWxlZnRcIn0sW192bS5fdChcIm5hdi1sZWZ0XCIpXSwyKSxfdm0uX3YoXCIgXCIpLF9jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1mb290ZXJfX25hdi0tY2VudGVyXCIsc3R5bGU6e3dpZHRoOl92bS5mdWxsV2lkdGg/XCIxMDAlXCI6bnVsbH19LFtfdm0uX3QoXCJuYXYtY2VudGVyXCIpXSwyKSxfdm0uX3YoXCIgXCIpLF9jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1mb290ZXJfX25hdi0tcmlnaHRcIn0sW192bS5fdChcIm5hdi1yaWdodFwiKV0sMildKV0pO307dmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJGc9W107X192dWVfcmVuZGVyX18kZy5fd2l0aFN0cmlwcGVkPXRydWU7Lyogc3R5bGUgKi92YXIgX192dWVfaW5qZWN0X3N0eWxlc19fJGc9dW5kZWZpbmVkOy8qIHNjb3BlZCAqL3ZhciBfX3Z1ZV9zY29wZV9pZF9fJGc9dW5kZWZpbmVkOy8qIG1vZHVsZSBpZGVudGlmaWVyICovdmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kZz11bmRlZmluZWQ7LyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL3ZhciBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kZz1mYWxzZTsvKiBzdHlsZSBpbmplY3QgKi8gLyogc3R5bGUgaW5qZWN0IFNTUiAqLyAvKiBzdHlsZSBpbmplY3Qgc2hhZG93IGRvbSAqL3ZhciBGb290ZXJOYXY9bm9ybWFsaXplQ29tcG9uZW50KHtyZW5kZXI6X192dWVfcmVuZGVyX18kZyxzdGF0aWNSZW5kZXJGbnM6X192dWVfc3RhdGljUmVuZGVyRm5zX18kZ30sX192dWVfaW5qZWN0X3N0eWxlc19fJGcsX192dWVfc2NyaXB0X18kZyxfX3Z1ZV9zY29wZV9pZF9fJGcsX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJGcsX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyRnLGZhbHNlLHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkKTsvL1xudmFyIHNjcmlwdCRoPXtjb21wb25lbnRzOntHcmlkQXJyYXk6R3JpZEFycmF5LExvYWRpbmc6TG9hZGluZ30sY29tcHV0ZWQ6X29iamVjdFNwcmVhZCh7fSxpbmRleF9lc20ubWFwR2V0dGVycyhbJ2lzU2VhcmNoaW5nJywnbm9SZXN1bHRzRm91bmQnLCdyZXN1bHRzRm91bmQnLCdpbWFnZVNlYXJjaElucHV0JywnaW1hZ2VTZWFyY2hSZXN1bHRzJywnZmlsZXNXYWl0aW5nJywndmlld1R5cGUnXSkse3BsYWNlaG9sZGVyVGV4dDpmdW5jdGlvbiBwbGFjZWhvbGRlclRleHQoKXtyZXR1cm5cIlwiLmNvbmNhdCh0aGlzLnQoJ1NlYXJjaCBpbWFnZXMnKSxcIi4uLlwiKTt9fSksbW91bnRlZDpmdW5jdGlvbiBtb3VudGVkKCl7dGhpcy5vbGRWaWV3VHlwZT10aGlzLnZpZXdUeXBlO3RoaXMuc2V0Vmlld1R5cGUoJ2dyaWQnKTt0aGlzLiRzdG9yZS5jb21taXQoJ0NMRUFSX0lNQUdFU19TVE9SRScpO30sZGVzdHJveWVkOmZ1bmN0aW9uIGRlc3Ryb3llZCgpe3RoaXMuc2V0Vmlld1R5cGUodGhpcy5vbGRWaWV3VHlwZSk7fSxtZXRob2RzOl9vYmplY3RTcHJlYWQoe30saW5kZXhfZXNtLm1hcEFjdGlvbnMoWyd1cGRhdGVTZWFyY2hJbnB1dCcsJ2ZldGNoSW1hZ2VzJywnc2V0Vmlld1R5cGUnXSkse2ZldGNoOmZ1bmN0aW9uIGZldGNoKCl7dGhpcy5mZXRjaEltYWdlcygpO3RoaXMuJHJlZnMuc2VhcmNoSW5wdXQuYmx1cigpO30sdXBkYXRlSW5wdXQ6ZnVuY3Rpb24gdXBkYXRlSW5wdXQoZXYpe3RoaXMudXBkYXRlU2VhcmNoSW5wdXQoZXYudGFyZ2V0LnZhbHVlKTt9LGNsZWFyU2VhcmNoOmZ1bmN0aW9uIGNsZWFyU2VhcmNoKCl7dGhpcy51cGRhdGVTZWFyY2hJbnB1dCgnJyk7fX0pfTsvKiBzY3JpcHQgKi92YXIgX192dWVfc2NyaXB0X18kaD1zY3JpcHQkaDsvKiB0ZW1wbGF0ZSAqL3ZhciBfX3Z1ZV9yZW5kZXJfXyRoPWZ1bmN0aW9uIF9fdnVlX3JlbmRlcl9fJGgoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3AtaW1hZ2Utc2VhcmNoXCJ9LFtfdm0uaXNTZWFyY2hpbmc/X2MoXCJsb2FkaW5nXCIpOl92bS5fZSgpLF92bS5fdihcIiBcIiksX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3AtaW1hZ2Utc2VhcmNoX19mb3JtLWNvbnRhaW5lclwiLFwiY2xhc3NcIjp7XCJmc3AtaW1hZ2Utc2VhcmNoX19mb3JtLWNvbnRhaW5lci0tcmVzdWx0c1wiOl92bS5yZXN1bHRzRm91bmR9fSxbX2MoXCJmb3JtXCIse3N0YXRpY0NsYXNzOlwiZnNwLXVybC1zb3VyY2VfX2Zvcm1cIixvbjp7c3VibWl0OmZ1bmN0aW9uIHN1Ym1pdCgkZXZlbnQpeyRldmVudC5wcmV2ZW50RGVmYXVsdCgpO3JldHVybiBfdm0uZmV0Y2goJGV2ZW50KTt9fX0sW19jKFwiaW5wdXRcIix7cmVmOlwic2VhcmNoSW5wdXRcIixzdGF0aWNDbGFzczpcImZzcC11cmwtc291cmNlX19pbnB1dFwiLGF0dHJzOntwbGFjZWhvbGRlcjpfdm0ucGxhY2Vob2xkZXJUZXh0LGRpc2FibGVkOl92bS5pc1NlYXJjaGluZyx0YWJpbmRleDpcIjBcIn0sZG9tUHJvcHM6e3ZhbHVlOl92bS5pbWFnZVNlYXJjaElucHV0fSxvbjp7aW5wdXQ6X3ZtLnVwZGF0ZUlucHV0fX0pLF92bS5fdihcIiBcIiksX3ZtLl9tKDApXSldKSxfdm0uX3YoXCIgXCIpLF9jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLWltYWdlLXNlYXJjaF9fcmVzdWx0c1wiLFwiY2xhc3NcIjp7XCJmc3AtY29udGVudC0tc2VsZWN0ZWQtaXRlbXNcIjpfdm0ucmVzdWx0c0ZvdW5kJiZfdm0uZmlsZXNXYWl0aW5nLmxlbmd0aH19LFtfdm0ucmVzdWx0c0ZvdW5kP19jKFwiZ3JpZC1hcnJheVwiLHtzdGF0aWNTdHlsZTp7XCJwYWRkaW5nLXRvcFwiOlwiMHB4XCJ9LGF0dHJzOntmaWxlczpfdm0uaW1hZ2VTZWFyY2hSZXN1bHRzfX0pOl92bS5fZSgpXSwxKV0sMSk7fTt2YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kaD1bZnVuY3Rpb24oKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoXCJidXR0b25cIix7c3RhdGljQ2xhc3M6XCJmc3AtYnV0dG9uIGZzcC11cmwtc291cmNlX19zdWJtaXQtYnV0dG9uXCIsYXR0cnM6e3R5cGU6XCJzdWJtaXRcIix0YWJpbmRleDpcIjBcIn19LFtfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1pY29uIGZzcC1pbWFnZS1zZWFyY2hfX3N1Ym1pdC1pY29uXCJ9KV0pO31dO19fdnVlX3JlbmRlcl9fJGguX3dpdGhTdHJpcHBlZD10cnVlOy8qIHN0eWxlICovdmFyIF9fdnVlX2luamVjdF9zdHlsZXNfXyRoPXVuZGVmaW5lZDsvKiBzY29wZWQgKi92YXIgX192dWVfc2NvcGVfaWRfXyRoPXVuZGVmaW5lZDsvKiBtb2R1bGUgaWRlbnRpZmllciAqL3ZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJGg9dW5kZWZpbmVkOy8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi92YXIgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJGg9ZmFsc2U7Lyogc3R5bGUgaW5qZWN0ICovIC8qIHN0eWxlIGluamVjdCBTU1IgKi8gLyogc3R5bGUgaW5qZWN0IHNoYWRvdyBkb20gKi92YXIgSW1hZ2VTZWFyY2g9bm9ybWFsaXplQ29tcG9uZW50KHtyZW5kZXI6X192dWVfcmVuZGVyX18kaCxzdGF0aWNSZW5kZXJGbnM6X192dWVfc3RhdGljUmVuZGVyRm5zX18kaH0sX192dWVfaW5qZWN0X3N0eWxlc19fJGgsX192dWVfc2NyaXB0X18kaCxfX3Z1ZV9zY29wZV9pZF9fJGgsX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJGgsX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyRoLGZhbHNlLHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkKTsvL1xudmFyIHNjcmlwdCRpPXtjb21wdXRlZDpfb2JqZWN0U3ByZWFkKHt9LGluZGV4X2VzbS5tYXBHZXR0ZXJzKFsnc2VsZWN0TGFiZWxJc0FjdGl2ZSddKSl9Oy8qIHNjcmlwdCAqL3ZhciBfX3Z1ZV9zY3JpcHRfXyRpPXNjcmlwdCRpOy8qIHRlbXBsYXRlICovdmFyIF9fdnVlX3JlbmRlcl9fJGk9ZnVuY3Rpb24gX192dWVfcmVuZGVyX18kaSgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1zZWxlY3QtbGFiZWxzXCIsXCJjbGFzc1wiOntcImZzcC1zZWxlY3QtbGFiZWxzLS1hY3RpdmVcIjpfdm0uc2VsZWN0TGFiZWxJc0FjdGl2ZX19LFtfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1kcm9wLWFyZWFfX3RpdGxlIGZzcC10ZXh0X190aXRsZVwifSxbX3ZtLl92KFwiXFxuICAgICAgXCIrX3ZtLl9zKF92bS50KFwiU2VsZWN0IEZpbGVzIHRvIFVwbG9hZFwiKSkrXCJcXG4gIFwiKV0pLF92bS5fdihcIiBcIiksX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3AtZHJvcC1hcmVhX19zdWJ0aXRsZSBmc3AtdGV4dF9fc3ViaGVhZGVyXCJ9LFtfdm0uX3YoXCJcXG4gICAgICBcIitfdm0uX3MoX3ZtLnQoXCJvciBEcmFnIGFuZCBEcm9wLCBDb3B5IGFuZCBQYXN0ZSBGaWxlc1wiKSkrXCJcXG4gIFwiKV0pXSk7fTt2YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kaT1bXTtfX3Z1ZV9yZW5kZXJfXyRpLl93aXRoU3RyaXBwZWQ9dHJ1ZTsvKiBzdHlsZSAqL3ZhciBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kaT11bmRlZmluZWQ7Lyogc2NvcGVkICovdmFyIF9fdnVlX3Njb3BlX2lkX18kaT11bmRlZmluZWQ7LyogbW9kdWxlIGlkZW50aWZpZXIgKi92YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyRpPXVuZGVmaW5lZDsvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovdmFyIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyRpPWZhbHNlOy8qIHN0eWxlIGluamVjdCAqLyAvKiBzdHlsZSBpbmplY3QgU1NSICovIC8qIHN0eWxlIGluamVjdCBzaGFkb3cgZG9tICovdmFyIFNlbGVjdEZpbGVzTGFiZWw9bm9ybWFsaXplQ29tcG9uZW50KHtyZW5kZXI6X192dWVfcmVuZGVyX18kaSxzdGF0aWNSZW5kZXJGbnM6X192dWVfc3RhdGljUmVuZGVyRm5zX18kaX0sX192dWVfaW5qZWN0X3N0eWxlc19fJGksX192dWVfc2NyaXB0X18kaSxfX3Z1ZV9zY29wZV9pZF9fJGksX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJGksX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyRpLGZhbHNlLHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkKTsvL1xudmFyIHNjcmlwdCRqPXtjb21wb25lbnRzOntTZWxlY3RGaWxlc0xhYmVsOlNlbGVjdEZpbGVzTGFiZWx9LGNvbXB1dGVkOl9vYmplY3RTcHJlYWQoe30saW5kZXhfZXNtLm1hcEdldHRlcnMoWydhY2NlcHQnLCdjYW5BZGRNb3JlRmlsZXMnLCdtYXhGaWxlcyddKSx7YWNjZXB0U3RyOmZ1bmN0aW9uIGFjY2VwdFN0cigpe2lmKHRoaXMuYWNjZXB0KXtyZXR1cm4gdGhpcy5hY2NlcHQuam9pbignLCcpO31yZXR1cm4gdW5kZWZpbmVkO30sbXVsdGlwbGU6ZnVuY3Rpb24gbXVsdGlwbGUoKXtyZXR1cm4gdGhpcy5tYXhGaWxlcz4xO319KSxtZXRob2RzOl9vYmplY3RTcHJlYWQoe30saW5kZXhfZXNtLm1hcEFjdGlvbnMoWydhZGRGaWxlJywndXBkYXRlU2VsZWN0TGFiZWxBY3RpdmUnXSkse2NsZWFyRXZlbnQ6ZnVuY3Rpb24gY2xlYXJFdmVudChldmVudCl7ZXZlbnQudGFyZ2V0LnZhbHVlPW51bGw7fSxvbk1vdXNlb3ZlcjpmdW5jdGlvbiBvbk1vdXNlb3Zlcigpe3RoaXMudXBkYXRlU2VsZWN0TGFiZWxBY3RpdmUodHJ1ZSk7fSxvbk1vdXNlb3V0OmZ1bmN0aW9uIG9uTW91c2VvdXQoKXt0aGlzLnVwZGF0ZVNlbGVjdExhYmVsQWN0aXZlKGZhbHNlKTt9LG9uRmlsZXNTZWxlY3RlZDpmdW5jdGlvbiBvbkZpbGVzU2VsZWN0ZWQoZXZlbnQpe3RyeXt2YXIgZmlsZXM9ZXZlbnQudGFyZ2V0LmZpbGVzO2lmKCFmaWxlcy5sZW5ndGgpe3JldHVybjt9Zm9yKHZhciBpPTA7aTxmaWxlcy5sZW5ndGg7aSs9MSl7dGhpcy5hZGRGaWxlKGZpbGVzW2ldKTt9fWNhdGNoKGUpe2NvbnNvbGUuZXJyb3IoZXZlbnQudGFyZ2V0LmZpbGVzKTt0aHJvdyBlO319LG9wZW5TZWxlY3RGaWxlOmZ1bmN0aW9uIG9wZW5TZWxlY3RGaWxlKCl7dGhpcy4kcmVmcy5maWxlVXBsb2FkSW5wdXQuY2xpY2soKTt9fSksbW91bnRlZDpmdW5jdGlvbiBtb3VudGVkKCl7dmFyIGRyb3BBcmVhPXRoaXMuJHJlZnMuZHJvcEFyZWE7aWYoZHJvcEFyZWEpe2Ryb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsdGhpcy5vbk1vdXNlb3Zlcik7ZHJvcEFyZWEuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLHRoaXMub25Nb3VzZW91dCk7fX19Oy8qIHNjcmlwdCAqL3ZhciBfX3Z1ZV9zY3JpcHRfXyRqPXNjcmlwdCRqOy8qIHRlbXBsYXRlICovdmFyIF9fdnVlX3JlbmRlcl9fJGo9ZnVuY3Rpb24gX192dWVfcmVuZGVyX18kaigpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1kcm9wLWFyZWEtY29udGFpbmVyXCJ9LFtfYyhcImRpdlwiLHtyZWY6XCJkcm9wQXJlYVwiLHN0YXRpY0NsYXNzOlwiZnNwLWRyb3AtYXJlYVwiLGF0dHJzOnt0YWJpbmRleDpcIjBcIn0sb246e2NsaWNrOl92bS5vcGVuU2VsZWN0RmlsZSxrZXl1cDpmdW5jdGlvbiBrZXl1cCgkZXZlbnQpe2lmKCEkZXZlbnQudHlwZS5pbmRleE9mKFwia2V5XCIpJiZfdm0uX2soJGV2ZW50LmtleUNvZGUsXCJlbnRlclwiLDEzLCRldmVudC5rZXksXCJFbnRlclwiKSl7cmV0dXJuIG51bGw7fXJldHVybiBfdm0ub3BlblNlbGVjdEZpbGUoJGV2ZW50KTt9fX0sW19jKFwic2VsZWN0LWZpbGVzLWxhYmVsXCIpLF92bS5fdihcIiBcIiksX2MoXCJpbnB1dFwiLHtyZWY6XCJmaWxlVXBsb2FkSW5wdXRcIixzdGF0aWNDbGFzczpcImZzcC1sb2NhbC1zb3VyY2VfX2ZpbGVpbnB1dFwiLGF0dHJzOnt0eXBlOlwiZmlsZVwiLGlkOlwiZnNwLWZpbGVVcGxvYWRcIixhY2NlcHQ6X3ZtLmFjY2VwdFN0cixtdWx0aXBsZTpfdm0ubXVsdGlwbGUsZGlzYWJsZWQ6IV92bS5jYW5BZGRNb3JlRmlsZXN9LG9uOntjaGFuZ2U6ZnVuY3Rpb24gY2hhbmdlKCRldmVudCl7cmV0dXJuIF92bS5vbkZpbGVzU2VsZWN0ZWQoJGV2ZW50KTt9LGNsaWNrOmZ1bmN0aW9uIGNsaWNrKCRldmVudCl7cmV0dXJuIF92bS5jbGVhckV2ZW50KCRldmVudCk7fX19KV0sMSldKTt9O3ZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyRqPVtdO19fdnVlX3JlbmRlcl9fJGouX3dpdGhTdHJpcHBlZD10cnVlOy8qIHN0eWxlICovdmFyIF9fdnVlX2luamVjdF9zdHlsZXNfXyRqPXVuZGVmaW5lZDsvKiBzY29wZWQgKi92YXIgX192dWVfc2NvcGVfaWRfXyRqPXVuZGVmaW5lZDsvKiBtb2R1bGUgaWRlbnRpZmllciAqL3ZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJGo9dW5kZWZpbmVkOy8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi92YXIgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJGo9ZmFsc2U7Lyogc3R5bGUgaW5qZWN0ICovIC8qIHN0eWxlIGluamVjdCBTU1IgKi8gLyogc3R5bGUgaW5qZWN0IHNoYWRvdyBkb20gKi92YXIgTG9jYWw9bm9ybWFsaXplQ29tcG9uZW50KHtyZW5kZXI6X192dWVfcmVuZGVyX18kaixzdGF0aWNSZW5kZXJGbnM6X192dWVfc3RhdGljUmVuZGVyRm5zX18kan0sX192dWVfaW5qZWN0X3N0eWxlc19fJGosX192dWVfc2NyaXB0X18kaixfX3Z1ZV9zY29wZV9pZF9fJGosX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJGosX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyRqLGZhbHNlLHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkKTt2YXIgYmxvYlRvQXJyYXlCdWZmZXI9ZnVuY3Rpb24gYmxvYlRvQXJyYXlCdWZmZXIoYmxvYkZpbGUpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7aWYoIWJsb2JGaWxlKXtyZXR1cm4gcmVqZWN0KCk7fXZhciByZWFkZXI9bmV3IEZpbGVSZWFkZXIoKTtyZWFkZXIub25sb2FkZW5kPWZ1bmN0aW9uKCl7cmVzb2x2ZShyZWFkZXIucmVzdWx0KTt9O3JlYWRlci5vbmVycm9yPWZ1bmN0aW9uKGVycil7cmVqZWN0KGVycik7fTtyZXR1cm4gcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2JGaWxlKTt9KTt9O3ZhciBkYXRhVVJJdG9CbG9iVXJsPWZ1bmN0aW9uIGRhdGFVUkl0b0Jsb2JVcmwoZGF0YVVSSSl7dmFyIG1pbWU9ZGF0YVVSSS5zcGxpdCgnLCcpWzBdLnNwbGl0KCc6JylbMV0uc3BsaXQoJzsnKVswXTt2YXIgYmluYXJ5PWF0b2IoZGF0YVVSSS5zcGxpdCgnLCcpWzFdKTt2YXIgYXJyYXk9W107Zm9yKHZhciBpPTA7aTxiaW5hcnkubGVuZ3RoO2krKyl7YXJyYXkucHVzaChiaW5hcnkuY2hhckNvZGVBdChpKSk7fXJldHVybiBVUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFtuZXcgVWludDhBcnJheShhcnJheSldLHt0eXBlOm1pbWV9KSk7fTt2YXIgYmxvYlRvRmlsZT1mdW5jdGlvbiBibG9iVG9GaWxlKGJsb2JGaWxlLG5hbWUpe3ZhciBGaWxlPXdpbmRvdy5GaWxlO3RyeXtyZXR1cm4gbmV3IEZpbGUoW2Jsb2JGaWxlXSxuYW1lKTt9Y2F0Y2goZSl7Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5GaWxlPS8qI19fUFVSRV9fKi9mdW5jdGlvbihfQmxvYil7X2luaGVyaXRzKEZpbGUsX0Jsb2IpO2Z1bmN0aW9uIEZpbGUoY2h1bmtzLGZpbGVuYW1lKXt2YXIgX3RoaXMxMDt2YXIgb3B0cz1hcmd1bWVudHMubGVuZ3RoPjImJmFyZ3VtZW50c1syXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMl06e307X2NsYXNzQ2FsbENoZWNrKHRoaXMsRmlsZSk7X3RoaXMxMD1fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLF9nZXRQcm90b3R5cGVPZihGaWxlKS5jYWxsKHRoaXMsY2h1bmtzLG9wdHMpKTtfdGhpczEwLmxhc3RNb2RpZmllZERhdGU9bmV3IERhdGUoKTtfdGhpczEwLmxhc3RNb2RpZmllZD1fdGhpczEwLmxhc3RNb2RpZmllZERhdGU7X3RoaXMxMC5uYW1lPWZpbGVuYW1lO3JldHVybiBfdGhpczEwO31yZXR1cm4gRmlsZTt9KF93cmFwTmF0aXZlU3VwZXIoQmxvYikpO3JldHVybiBuZXcgRmlsZShbYmxvYkZpbGVdLG5hbWUpO319Oy8vXG52YXIgc2NyaXB0JGs9e2NvbXBvbmVudHM6e0Zvb3Rlck5hdjpGb290ZXJOYXZ9LGRhdGE6ZnVuY3Rpb24gZGF0YSgpe3JldHVybntzcmM6bnVsbCxpbWdTcmM6bnVsbCxwaWN0dXJlVGFrZW46ZmFsc2Usd2ViQ2FtSW1hZ2VTcmM6Jycsd2ViQ2FtRXJyb3I6JycsaGFzVXNlck1lZGlhOmZhbHNlfTt9LG1ldGhvZHM6X29iamVjdFNwcmVhZCh7fSxpbmRleF9lc20ubWFwQWN0aW9ucyhbJ2FkZEZpbGUnXSkse3dlYkNhbVJlYWR5OmZ1bmN0aW9uIHdlYkNhbVJlYWR5KCl7dmFyIF90aGlzMTE9dGhpcztpZighbmF2aWdhdG9yfHwhbmF2aWdhdG9yLm1lZGlhRGV2aWNlcyl7dGhpcy53ZWJDYW1FcnJvcj0nZGlzYWJsZWQnO3JldHVybjt9bmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe3ZpZGVvOnRydWUsYXVkaW86ZmFsc2V9KS50aGVuKGZ1bmN0aW9uKHN0cmVhbSl7X3RoaXMxMS4kcmVmcy52aWRlby5zcmNPYmplY3Q9c3RyZWFtO190aGlzMTEuJHJlZnMudmlkZW8ucGxheSgpO190aGlzMTEuaGFzVXNlck1lZGlhPXRydWU7fSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe190aGlzMTEud2ViQ2FtRXJyb3I9J2Rpc2FibGVkJzt9KTt9LHR1cm5XZWJDYW1PZmY6ZnVuY3Rpb24gdHVybldlYkNhbU9mZigpe2lmKHRoaXMuJHJlZnMudmlkZW8mJnRoaXMuJHJlZnMudmlkZW8uc3JjT2JqZWN0KXt0aGlzLiRyZWZzLnZpZGVvLnNyY09iamVjdC5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNrKXt0cmFjay5zdG9wKCk7fSk7fX0sY2xlYXJQaG90bzpmdW5jdGlvbiBjbGVhclBob3RvKCl7dmFyIGNhbnZhcz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTt2YXIgY29udGV4dD1jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtjb250ZXh0LmZpbGxSZWN0KDAsMCxjYW52YXMud2lkdGgsY2FudmFzLmhlaWdodCk7dGhpcy53ZWJDYW1JbWFnZVNyYz0nJzt0aGlzLnBpY3R1cmVUYWtlbj1mYWxzZTt0aGlzLndlYkNhbVJlYWR5KCk7fSxnZXRQaG90bzpmdW5jdGlvbiBnZXRQaG90bygpe2lmKCF0aGlzLmhhc1VzZXJNZWRpYSlyZXR1cm4gbnVsbDt2YXIgdmlkZW89dGhpcy4kcmVmcy52aWRlbzt2YXIgY2FudmFzPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO3ZhciBjb250ZXh0PWNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO2NhbnZhcy5oZWlnaHQ9dmlkZW8uY2xpZW50SGVpZ2h0O2NhbnZhcy53aWR0aD12aWRlby5jbGllbnRXaWR0aDtjb250ZXh0LmRyYXdJbWFnZSh2aWRlbywwLDApO3RoaXMud2ViQ2FtSW1hZ2VTcmM9ZGF0YVVSSXRvQmxvYlVybChjYW52YXMudG9EYXRhVVJMKCkpO3RoaXMuaW1nU3JjPXRoaXMud2ViQ2FtSW1hZ2VTcmM7dGhpcy5jYW52YXM9Y2FudmFzO3RoaXMucGljdHVyZVRha2VuPXRydWU7dGhpcy50dXJuV2ViQ2FtT2ZmKCk7cmV0dXJuIGNhbnZhczt9LGFkZFBob3RvOmZ1bmN0aW9uIGFkZFBob3RvKCl7dmFyIF90aGlzMTI9dGhpczt2YXIgbGFuZz10aGlzLiRzdG9yZS5nZXR0ZXJzLmxhbmc7dGhpcy5jYW52YXMudG9CbG9iKGZ1bmN0aW9uKGJsb2Ipe2Jsb2IubmFtZT1cIndlYmNhbS1cIi5jb25jYXQobmV3IERhdGUoKS50b0xvY2FsZVN0cmluZyhsYW5nKSxcIi5wbmdcIik7X3RoaXMxMi5hZGRGaWxlKGJsb2IpO30pO319KSxiZWZvcmVNb3VudDpmdW5jdGlvbiBiZWZvcmVNb3VudCgpe2lmKG5hdmlnYXRvci5tZWRpYURldmljZXMpe3RoaXMud2ViQ2FtUmVhZHkoKTt9ZWxzZXt0aGlzLndlYkNhbUVycm9yPSdicm93c2VyJzt9dGhpcy5waWN0dXJlVGFrZW49ZmFsc2U7fSxiZWZvcmVEZXN0cm95OmZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKXt0aGlzLnR1cm5XZWJDYW1PZmYoKTt9fTsvKiBzY3JpcHQgKi92YXIgX192dWVfc2NyaXB0X18kaz1zY3JpcHQkazsvKiB0ZW1wbGF0ZSAqL3ZhciBfX3Z1ZV9yZW5kZXJfXyRrPWZ1bmN0aW9uIF9fdnVlX3JlbmRlcl9fJGsoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3Atd2ViY2FtX19jb250YWluZXJcIn0sW192bS53ZWJDYW1FcnJvcj9fYyhcImRpdlwiLFtfdm0ud2ViQ2FtRXJyb3I9PT1cImRpc2FibGVkXCI/X2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3Atc291cmNlLWF1dGhfX3dyYXBwZXJcIn0sW19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1pY29uIGZzcC1pY29uLS1hdXRoIGZzcC1zb3VyY2UtYXV0aF9fZWwgZnNwLWljb24tLXdlYmNhbS1kaXNhYmxlZFwifSksX3ZtLl92KFwiIFwiKSxfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC10ZXh0X190aXRsZSBmc3Atc291cmNlLWF1dGhfX2VsXCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS50KFwiV2ViY2FtIERpc2FibGVkXCIpKSldKSxfdm0uX3YoXCIgXCIpLF9jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLXNvdXJjZS1hdXRoX19lbFwifSxbX2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLXRleHRfX3N1YmhlYWRlclwifSxbX3ZtLl92KFwiXFxuICAgICAgICAgIFwiK192bS5fcyhfdm0udChcIlBsZWFzZSBlbmFibGUgeW91ciB3ZWJjYW0gdG8gdGFrZSBhIHBob3RvLlwiKSkrXCJcXG4gICAgICAgIFwiKV0pXSldKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF92bS53ZWJDYW1FcnJvcj09PVwiYnJvd3NlclwiP19jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLXNvdXJjZS1hdXRoX193cmFwcGVyXCJ9LFtfYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3AtaWNvbiBmc3AtaWNvbi0tYXV0aCBmc3Atc291cmNlLWF1dGhfX2VsIGZzcC1pY29uLS13ZWJjYW0tZGlzYWJsZWRcIn0pLF92bS5fdihcIiBcIiksX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3AtdGV4dF9fdGl0bGUgZnNwLXNvdXJjZS1hdXRoX19lbFwifSxbX3ZtLl92KF92bS5fcyhfdm0udChcIldlYmNhbSBOb3QgU3VwcG9ydGVkXCIpKSldKSxfdm0uX3YoXCIgXCIpLF9jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLXNvdXJjZS1hdXRoX19lbFwifSxbX2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLXRleHRfX3N1YmhlYWRlclwifSxbX3ZtLl92KFwiXFxuICAgICAgICAgIFwiK192bS5fcyhfdm0udChcIllvdXIgY3VycmVudCBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgd2ViY2FtIGZ1bmN0aW9uYWxpdHkuXCIpKStcIlxcbiAgICAgICAgXCIpXSksX3ZtLl92KFwiIFwiKSxfYyhcImJyXCIpLF92bS5fdihcIiBcIiksX2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLXRleHRfX3N1YmhlYWRlclwifSxbX3ZtLl92KFwiXFxuICAgICAgICAgIFwiK192bS5fcyhfdm0udChcIldlIHN1Z2dlc3QgdXNpbmcgQ2hyb21lIG9yIEZpcmVmb3guXCIpKStcIlxcbiAgICAgICAgXCIpXSldKV0pOl92bS5fZSgpXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwhX3ZtLndlYkNhbUVycm9yP19jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLXdlYmNhbVwifSxbX2MoXCJpbWdcIix7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOl92bS5waWN0dXJlVGFrZW4sZXhwcmVzc2lvbjpcInBpY3R1cmVUYWtlblwifV0scmVmOlwicGhvdG9cIixzdGF0aWNDbGFzczpcImZzcC13ZWJjYW1fX2ltYWdlXCIsYXR0cnM6e3NyYzpfdm0uaW1nU3JjfX0pLF92bS5fdihcIiBcIiksX2MoXCJ2aWRlb1wiLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6IV92bS5waWN0dXJlVGFrZW4sZXhwcmVzc2lvbjpcIiFwaWN0dXJlVGFrZW5cIn1dLHJlZjpcInZpZGVvXCIsc3RhdGljQ2xhc3M6XCJmc3Atd2ViY2FtX192aWRlb1wiLGF0dHJzOntzcmM6X3ZtLnNyY319KV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksIV92bS53ZWJDYW1FcnJvcj9fYyhcImZvb3Rlci1uYXZcIix7YXR0cnM6e3Nsb3Q6XCJmb290ZXJcIixcImlzLXZpc2libGVcIjp0cnVlfSxzbG90OlwiZm9vdGVyXCJ9LFtfYyhcInNwYW5cIix7YXR0cnM6e3Nsb3Q6XCJuYXYtY2VudGVyXCJ9LHNsb3Q6XCJuYXYtY2VudGVyXCJ9LFshX3ZtLnBpY3R1cmVUYWtlbj9fYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3AtYnV0dG9uIGZzcC1idXR0b24tLXByaW1hcnkgZnNwLWJ1dHRvbi0td2ViY2FtXCIsb246e2NsaWNrOl92bS5nZXRQaG90b319LFtfYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3AtaWNvbi0td2ViY2FtLXN0YXJ0XCJ9KV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX3ZtLnBpY3R1cmVUYWtlbj9fYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3AtYnV0dG9uIGZzcC1idXR0b24tLWNhbmNlbCBmc3AtYnV0dG9uLS13ZWJjYW1cIixvbjp7Y2xpY2s6X3ZtLmNsZWFyUGhvdG99fSxbX2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLWljb24tLXdlYmNhbS1zdG9wXCJ9KV0pOl92bS5fZSgpXSksX3ZtLl92KFwiIFwiKSxfdm0ucGljdHVyZVRha2VuP19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1idXR0b24gZnNwLWJ1dHRvbi0tcHJpbWFyeVwiLGF0dHJzOntzbG90OlwibmF2LXJpZ2h0XCIsdGl0bGU6XCJOZXh0XCJ9LG9uOntjbGljazpfdm0uYWRkUGhvdG99LHNsb3Q6XCJuYXYtcmlnaHRcIn0sW192bS5fdihcIlxcbiAgICAgICAgICBcIitfdm0uX3MoX3ZtLnQoXCJOZXh0XCIpKStcIlxcbiAgICBcIildKTpfdm0uX2UoKV0pOl92bS5fZSgpXSwxKTt9O3ZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyRrPVtdO19fdnVlX3JlbmRlcl9fJGsuX3dpdGhTdHJpcHBlZD10cnVlOy8qIHN0eWxlICovdmFyIF9fdnVlX2luamVjdF9zdHlsZXNfXyRrPXVuZGVmaW5lZDsvKiBzY29wZWQgKi92YXIgX192dWVfc2NvcGVfaWRfXyRrPXVuZGVmaW5lZDsvKiBtb2R1bGUgaWRlbnRpZmllciAqL3ZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJGs9dW5kZWZpbmVkOy8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi92YXIgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJGs9ZmFsc2U7Lyogc3R5bGUgaW5qZWN0ICovIC8qIHN0eWxlIGluamVjdCBTU1IgKi8gLyogc3R5bGUgaW5qZWN0IHNoYWRvdyBkb20gKi92YXIgV2ViY2FtPW5vcm1hbGl6ZUNvbXBvbmVudCh7cmVuZGVyOl9fdnVlX3JlbmRlcl9fJGssc3RhdGljUmVuZGVyRm5zOl9fdnVlX3N0YXRpY1JlbmRlckZuc19fJGt9LF9fdnVlX2luamVjdF9zdHlsZXNfXyRrLF9fdnVlX3NjcmlwdF9fJGssX192dWVfc2NvcGVfaWRfXyRrLF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyRrLF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kayxmYWxzZSx1bmRlZmluZWQsdW5kZWZpbmVkLHVuZGVmaW5lZCk7Ly9cbnZhciBzY3JpcHQkbD17Y29tcG9uZW50czp7TG9hZGluZzpMb2FkaW5nfSxkYXRhOmZ1bmN0aW9uIGRhdGEoKXtyZXR1cm57dXJsOicnfTt9LGNvbXB1dGVkOntpc1VybEZldGNoaW5nOmZ1bmN0aW9uIGlzVXJsRmV0Y2hpbmcoKXtyZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy5pc1VybEZldGNoaW5nO319LG1ldGhvZHM6e2ZldGNoVXJsOmZ1bmN0aW9uIGZldGNoVXJsKCl7dmFyIF90aGlzMTM9dGhpcztpZih0aGlzLnVybCl7dGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2ZldGNoVXJsJyx0aGlzLnVybCkudGhlbihmdW5jdGlvbihyZXMpe2lmKHJlcyYmX3RoaXMxMy4kc3RvcmUuZ2V0dGVycy5tYXhGaWxlcz4xKXtfdGhpczEzLiRzdG9yZS5jb21taXQoJ0NIQU5HRV9ST1VURScsWydzdW1tYXJ5J10pO319KTt9fX19Oy8qIHNjcmlwdCAqL3ZhciBfX3Z1ZV9zY3JpcHRfXyRsPXNjcmlwdCRsOy8qIHRlbXBsYXRlICovdmFyIF9fdnVlX3JlbmRlcl9fJGw9ZnVuY3Rpb24gX192dWVfcmVuZGVyX18kbCgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC11cmwtc291cmNlXCJ9LFtfdm0uaXNVcmxGZXRjaGluZz9fYyhcImxvYWRpbmdcIik6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC11cmwtc291cmNlX19jb250YWluZXJcIn0sW19jKFwiZm9ybVwiLHtzdGF0aWNDbGFzczpcImZzcC11cmwtc291cmNlX19mb3JtXCIsb246e3N1Ym1pdDpmdW5jdGlvbiBzdWJtaXQoJGV2ZW50KXskZXZlbnQucHJldmVudERlZmF1bHQoKTtyZXR1cm4gX3ZtLmZldGNoVXJsKCRldmVudCk7fX19LFtfYyhcImlucHV0XCIse2RpcmVjdGl2ZXM6W3tuYW1lOlwibW9kZWxcIixyYXdOYW1lOlwidi1tb2RlbFwiLHZhbHVlOl92bS51cmwsZXhwcmVzc2lvbjpcInVybFwifV0sc3RhdGljQ2xhc3M6XCJmc3AtdXJsLXNvdXJjZV9faW5wdXRcIixhdHRyczp7dHlwZTpcInVybFwiLHBsYWNlaG9sZGVyOl92bS50KFwiRW50ZXIgYSBVUkxcIiksdGFiaW5kZXg6XCIwXCJ9LGRvbVByb3BzOnt2YWx1ZTpfdm0udXJsfSxvbjp7aW5wdXQ6ZnVuY3Rpb24gaW5wdXQoJGV2ZW50KXtpZigkZXZlbnQudGFyZ2V0LmNvbXBvc2luZyl7cmV0dXJuO31fdm0udXJsPSRldmVudC50YXJnZXQudmFsdWU7fX19KSxfdm0uX3YoXCIgXCIpLF92bS5fbSgwKV0pXSldLDEpO307dmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJGw9W2Z1bmN0aW9uKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKFwiYnV0dG9uXCIse3N0YXRpY0NsYXNzOlwiZnNwLWJ1dHRvbiBmc3AtdXJsLXNvdXJjZV9fc3VibWl0LWJ1dHRvblwiLGF0dHJzOnt0eXBlOlwic3VibWl0XCIsdGFiaW5kZXg6XCIwXCJ9fSxbX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3AtaWNvbiBmc3AtdXJsLXNvdXJjZV9fc3VibWl0LWljb25cIn0pXSk7fV07X192dWVfcmVuZGVyX18kbC5fd2l0aFN0cmlwcGVkPXRydWU7Lyogc3R5bGUgKi92YXIgX192dWVfaW5qZWN0X3N0eWxlc19fJGw9dW5kZWZpbmVkOy8qIHNjb3BlZCAqL3ZhciBfX3Z1ZV9zY29wZV9pZF9fJGw9dW5kZWZpbmVkOy8qIG1vZHVsZSBpZGVudGlmaWVyICovdmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kbD11bmRlZmluZWQ7LyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL3ZhciBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kbD1mYWxzZTsvKiBzdHlsZSBpbmplY3QgKi8gLyogc3R5bGUgaW5qZWN0IFNTUiAqLyAvKiBzdHlsZSBpbmplY3Qgc2hhZG93IGRvbSAqL3ZhciBVcmw9bm9ybWFsaXplQ29tcG9uZW50KHtyZW5kZXI6X192dWVfcmVuZGVyX18kbCxzdGF0aWNSZW5kZXJGbnM6X192dWVfc3RhdGljUmVuZGVyRm5zX18kbH0sX192dWVfaW5qZWN0X3N0eWxlc19fJGwsX192dWVfc2NyaXB0X18kbCxfX3Z1ZV9zY29wZV9pZF9fJGwsX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJGwsX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyRsLGZhbHNlLHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkKTsvL1xudmFyIHNjcmlwdCRtPXtwcm9wczp7dHlwZTpTdHJpbmd9LGNvbXBvbmVudHM6e0Zvb3Rlck5hdjpGb290ZXJOYXYsTG9hZGluZzpMb2FkaW5nfSxjb21wdXRlZDpfb2JqZWN0U3ByZWFkKHt9LGluZGV4X2VzbS5tYXBHZXR0ZXJzKFsnZ2V0TW9kdWxlVXJsJ10pLHtjbGllbnQ6ZnVuY3Rpb24gY2xpZW50KCl7cmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMuY2xvdWRDbGllbnQ7fSxmaWxlc0xpc3Q6ZnVuY3Rpb24gZmlsZXNMaXN0KCl7cmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMuZmlsZXNMaXN0O30sbWF4RmlsZXM6ZnVuY3Rpb24gbWF4RmlsZXMoKXtyZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy5tYXhGaWxlczt9LHJvdXRlc0hpc3Rvcnk6ZnVuY3Rpb24gcm91dGVzSGlzdG9yeSgpe3JldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLnJvdXRlc0hpc3Rvcnk7fSxpc0Vycm9yZWQ6ZnVuY3Rpb24gaXNFcnJvcmVkKCl7cmV0dXJuWydicm93c2VyZXJyb3InLCdzY3JpcHRlcnJvcicsJ2FjY2Vzc0RlbmllZCddLmluZGV4T2YodGhpcy5zdGF0ZSkhPT0tMTt9fSksZGF0YTpmdW5jdGlvbiBkYXRhKCl7cmV0dXJue2FyY2hpdmVJZDpudWxsLHBlbmRpbmdSZXF1ZXN0OmZhbHNlLGF0dGVtcHQ6MCxzdGF0ZTonY29ubmVjdGluZycsc3RhcnRCdXR0b25Jbml0OmZhbHNlLHB1Ymxpc2hlcjpudWxsLHNlc3Npb246bnVsbCxvdFNlc3Npb246e2tleTpudWxsLG90X3Nlc3Npb25faWQ6bnVsbCxvdF90b2tlbjpudWxsfSxwdWJsaXNoZXJPcHRpb25zOntpbnNlcnRNb2RlOidhcHBlbmQnLHdpZHRoOicxMDAlJyxoZWlnaHQ6JzEwMCUnfX07fSxtZXRob2RzOl9vYmplY3RTcHJlYWQoe30saW5kZXhfZXNtLm1hcEFjdGlvbnMoWydhZGRGaWxlJ10pLHtnb1RvU3VtbWFyeTpmdW5jdGlvbiBnb1RvU3VtbWFyeSgpe3RoaXMuJHN0b3JlLmNvbW1pdCgnQ0hBTkdFX1JPVVRFJyxbJ3N1bW1hcnknXSk7dGhpcy4kc3RvcmUuZGlzcGF0Y2goJ3VwZGF0ZU1vYmlsZU5hdkFjdGl2ZScsZmFsc2UpO30sbG9hZE9wZW5Ub2s6ZnVuY3Rpb24gbG9hZE9wZW5Ub2soKXt2YXIgX3RoaXMxND10aGlzO3RoaXMuc3RhdGU9J2Nvbm5lY3RpbmcnO3JldHVybiBsb2FkTW9kdWxlKFwiXCIuY29uY2F0KHRoaXMuZ2V0TW9kdWxlVXJsKCdmcy1vcGVudG9rJyksXCI/XCIpLmNvbmNhdCh0aGlzLmF0dGVtcHQpLCdmcy1vcGVudG9rJylbXCJjYXRjaFwiXShmdW5jdGlvbigpe190aGlzMTQuc3RhdGU9J3NjcmlwdGVycm9yJzt9KTt9LHJlc2V0OmZ1bmN0aW9uIHJlc2V0KCl7dmFyIF90aGlzMTU9dGhpcztpZih0aGlzLnNlc3Npb24pe2lmKHRoaXMucHVibGlzaGVyKXRoaXMuc2Vzc2lvbi51bnB1Ymxpc2godGhpcy5wdWJsaXNoZXIpO3RoaXMuc2Vzc2lvbi5kaXNjb25uZWN0KCk7fXRoaXMuYXR0ZW1wdCs9MTt0aGlzLmxvYWRPcGVuVG9rKCkudGhlbihmdW5jdGlvbih0b2spe190aGlzMTUuaW5pdGlhbGl6ZSh0b2spO30pO30saW5pdGlhbGl6ZTpmdW5jdGlvbiBpbml0aWFsaXplKHRvayl7dmFyIF90aGlzMTY9dGhpcztpZighdG9rKXtjb25zb2xlLmVycm9yKCdDYW5ub3QgaW5pdGlhbGl6ZSBvcGVudG9rJyk7cmV0dXJuO310aGlzLmNsaWVudC50b2tJbml0KHRoaXMuJHByb3BzLnR5cGUpLnRoZW4oZnVuY3Rpb24ocmVzKXtfdGhpczE2Lm90U2Vzc2lvbj1yZXM7dmFyIHB1Yk9wdGlvbnM9X29iamVjdFNwcmVhZCh7fSxfdGhpczE2LnB1Ymxpc2hlck9wdGlvbnMse21pcnJvcjpmYWxzZSxyZXNvbHV0aW9uOl90aGlzMTYuJHN0b3JlLmdldHRlcnMudmlkZW9SZXNvbHV0aW9uLHB1Ymxpc2hWaWRlbzpfdGhpczE2LiRwcm9wcy50eXBlPT09J3ZpZGVvJ30pO190aGlzMTYuc2Vzc2lvbj10b2suaW5pdFNlc3Npb24oX3RoaXMxNi5vdFNlc3Npb24ua2V5LF90aGlzMTYub3RTZXNzaW9uLm90X3Nlc3Npb25faWQpO190aGlzMTYuc2Vzc2lvbi5jb25uZWN0KF90aGlzMTYub3RTZXNzaW9uLm90X3Rva2VuLGZ1bmN0aW9uKGVycil7aWYoIWVyciYmX3RoaXMxNi4kcmVmcyYmX3RoaXMxNi4kcmVmcy52aWRlbyl7X3RoaXMxNi5wdWJsaXNoZXI9dG9rLmluaXRQdWJsaXNoZXIoX3RoaXMxNi4kcmVmcy52aWRlbyxwdWJPcHRpb25zKTtfdGhpczE2LnNlc3Npb24ucHVibGlzaChfdGhpczE2LnB1Ymxpc2hlcik7X3RoaXMxNi5wdWJsaXNoZXIub24oJ2FjY2Vzc0FsbG93ZWQnLGZ1bmN0aW9uKCl7X3RoaXMxNi5zdGF0ZT0ncmVhZHknO190aGlzMTYuc3RhcnRCdXR0b25Jbml0PXRydWU7fSk7X3RoaXMxNi5wdWJsaXNoZXIub24oJ2FjY2Vzc0RlbmllZCcsZnVuY3Rpb24oKXtfdGhpczE2LnN0YXRlPSdhY2Nlc3NEZW5pZWQnO30pO31lbHNle190aGlzMTYuc3RhdGU9J2Vycm9yZWQnO2NvbnNvbGUud2FybignT1RfRVJST1InLGVycik7fX0pO190aGlzMTYuc2Vzc2lvbi5vbignYXJjaGl2ZVN0YXJ0ZWQnLGZ1bmN0aW9uKGV2dCl7X3RoaXMxNi5hcmNoaXZlSWQ9ZXZ0LmlkO190aGlzMTYuc3RhdGU9J3JlY29yZGluZyc7fSk7X3RoaXMxNi5zZXNzaW9uLm9uKCdhcmNoaXZlU3RvcHBlZCcsZnVuY3Rpb24oZXZ0KXtfdGhpczE2LmFyY2hpdmVJZD1ldnQuaWQ7fSk7fSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe190aGlzMTYuc3RhdGU9J2Vycm9yZWQnO30pO30sc3RhcnQ6ZnVuY3Rpb24gc3RhcnQoKXt2YXIgX3RoaXMxNz10aGlzO2lmKCF0aGlzLnN0YXJ0QnV0dG9uSW5pdHx8dGhpcy5wZW5kaW5nUmVxdWVzdCl7cmV0dXJuO310aGlzLnBlbmRpbmdSZXF1ZXN0PXRydWU7dGhpcy5jbGllbnQudG9rU3RhcnQodGhpcy4kcHJvcHMudHlwZSx0aGlzLm90U2Vzc2lvbi5rZXksdGhpcy5vdFNlc3Npb24ub3Rfc2Vzc2lvbl9pZCkudGhlbihmdW5jdGlvbigpe190aGlzMTcucGVuZGluZ1JlcXVlc3Q9ZmFsc2U7fSlbXCJjYXRjaFwiXShmdW5jdGlvbihlcnIpe190aGlzMTcucGVuZGluZ1JlcXVlc3Q9ZmFsc2U7X3RoaXMxNy5zdGF0ZT0nZXJyb3JlZCc7Y29uc29sZS5lcnJvcihlcnIpO30pO30sc3RvcDpmdW5jdGlvbiBzdG9wKCl7dmFyIF90aGlzMTg9dGhpcztpZighdGhpcy5hcmNoaXZlSWR8fHRoaXMucGVuZGluZ1JlcXVlc3Qpe3JldHVybjt9dGhpcy5wZW5kaW5nUmVxdWVzdD10cnVlO3RoaXMuY2xpZW50LnRva1N0b3AodGhpcy4kcHJvcHMudHlwZSx0aGlzLm90U2Vzc2lvbi5rZXksdGhpcy5vdFNlc3Npb24ub3Rfc2Vzc2lvbl9pZCx0aGlzLmFyY2hpdmVJZCkudGhlbihmdW5jdGlvbigpe190aGlzMTgucGVuZGluZ1JlcXVlc3Q9ZmFsc2U7X3RoaXMxOC5zdGF0ZT0ncmVhZHknO3ZhciBsYW5nPV90aGlzMTguJHN0b3JlLmdldHRlcnMubGFuZzt2YXIgZGF0ZT1uZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKGxhbmcse21vbnRoOidzaG9ydCcsZGF5OidudW1lcmljJyxob3VyOidudW1lcmljJyxtaW51dGU6J251bWVyaWMnLHllYXI6J251bWVyaWMnfSk7dmFyIGV4dD1fdGhpczE4LiRwcm9wcy50eXBlPT09J2F1ZGlvJz8nbXAzJzonbXA0Jzt2YXIgbWltZXR5cGU9X3RoaXMxOC4kcHJvcHMudHlwZT09PSdhdWRpbyc/J2F1ZGlvL21wMyc6J3ZpZGVvL21wNCc7X3RoaXMxOC5hZGRGaWxlKHtzb3VyY2U6X3RoaXMxOC4kcHJvcHMudHlwZSxzb3VyY2VLaW5kOidjbG91ZCcscGF0aDpcIi9cIi5jb25jYXQoX3RoaXMxOC5hcmNoaXZlSWQsXCIvcmVjb3JkaW5nLVwiKS5jb25jYXQoZGF0ZSxcIi5cIikuY29uY2F0KGV4dCksbmFtZTpcInJlY29yZGluZy1cIi5jb25jYXQoZGF0ZSxcIi5cIikuY29uY2F0KGV4dCksbWltZXR5cGU6bWltZXR5cGV9KTtpZihfdGhpczE4Lm1heEZpbGVzPjEpe190aGlzMTguZ29Ub1N1bW1hcnkoKTt9fSlbXCJjYXRjaFwiXShmdW5jdGlvbihlcnIpe190aGlzMTgucGVuZGluZ1JlcXVlc3Q9ZmFsc2U7X3RoaXMxOC5zdGF0ZT0nZXJyb3JlZCc7Y29uc29sZS5lcnJvcihlcnIpO30pO319KSxiZWZvcmVNb3VudDpmdW5jdGlvbiBiZWZvcmVNb3VudCgpe2lmKCFuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKXt0aGlzLnN0YXRlPSdicm93c2VyZXJyb3InO319LG1vdW50ZWQ6ZnVuY3Rpb24gbW91bnRlZCgpe3ZhciBfdGhpczE5PXRoaXM7aWYodGhpcy5zdGF0ZSE9PSdicm93c2VyZXJyb3InKXt0aGlzLmxvYWRPcGVuVG9rKCkudGhlbihmdW5jdGlvbih0b2spe190aGlzMTkuaW5pdGlhbGl6ZSh0b2spO30pO319LGRlc3Ryb3llZDpmdW5jdGlvbiBkZXN0cm95ZWQoKXtpZih0aGlzLnNlc3Npb24pe2lmKHRoaXMucHVibGlzaGVyKXRoaXMuc2Vzc2lvbi51bnB1Ymxpc2godGhpcy5wdWJsaXNoZXIpO3RoaXMuc2Vzc2lvbi5kaXNjb25uZWN0KCk7fX0sd2F0Y2g6e3R5cGU6ZnVuY3Rpb24gdHlwZSgpe3ZhciBfdGhpczIwPXRoaXM7aWYodGhpcy5zZXNzaW9uKXtpZih0aGlzLnB1Ymxpc2hlcil0aGlzLnNlc3Npb24udW5wdWJsaXNoKHRoaXMucHVibGlzaGVyKTt0aGlzLnNlc3Npb24uZGlzY29ubmVjdCgpO3RoaXMubG9hZE9wZW5Ub2soKS50aGVuKGZ1bmN0aW9uKHRvayl7X3RoaXMyMC5pbml0aWFsaXplKHRvayk7fSk7fX19fTsvKiBzY3JpcHQgKi92YXIgX192dWVfc2NyaXB0X18kbT1zY3JpcHQkbTsvKiB0ZW1wbGF0ZSAqL3ZhciBfX3Z1ZV9yZW5kZXJfXyRtPWZ1bmN0aW9uIF9fdnVlX3JlbmRlcl9fJG0oKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3AtdmlkZW9cIn0sW192bS5maWxlc0xpc3QubGVuZ3RoPjA/X2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3Atc3VtbWFyeV9fZ28tYmFja1wiLGF0dHJzOnt0aXRsZTpcIkdvIHRvIHN1bW1hcnlcIn0sb246e2NsaWNrOl92bS5nb1RvU3VtbWFyeX19KTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF92bS5zdGF0ZT09PVwiY29ubmVjdGluZ1wiP19jKFwibG9hZGluZ1wiKTpfdm0uc3RhdGU9PT1cImFjY2Vzc0RlbmllZFwiP19jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLXNvdXJjZS1hdXRoX193cmFwcGVyXCJ9LFtfYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3AtaWNvbiBmc3AtaWNvbi0tYXV0aCBmc3Atc291cmNlLWF1dGhfX2VsIGZzcC1pY29uLS12aWRlby1kaXNhYmxlZFwifSksX3ZtLl92KFwiIFwiKSxfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC10ZXh0X190aXRsZSBmc3Atc291cmNlLWF1dGhfX2VsXCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS50KFwiV2ViY2FtIERpc2FibGVkXCIpKSldKSxfdm0uX3YoXCIgXCIpLF9jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLXNvdXJjZS1hdXRoX19lbFwifSxbX2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLXRleHRfX3N1YmhlYWRlclwifSxbX3ZtLl92KF92bS5fcyhfdm0udChcIlBsZWFzZSBlbmFibGUgeW91ciB3ZWJjYW0gdG8gcmVjb3JkIHZpZGVvIG9yIGF1ZGlvLlwiKSkpXSldKSxfdm0uX3YoXCIgXCIpLF9jKFwiZGl2XCIse2tleTpcInJldHJ5Q2FtXCIsc3RhdGljQ2xhc3M6XCJmc3AtYnV0dG9uIGZzcC1idXR0b24tLW91dGxpbmVcIixvbjp7Y2xpY2s6X3ZtLnJlc2V0fX0sW192bS5fdihcIlJldHJ5XCIpXSldKTpfdm0uc3RhdGU9PT1cInNjcmlwdGVycm9yXCI/X2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3Atc291cmNlLWF1dGhfX3dyYXBwZXJcIn0sW19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1pY29uIGZzcC1pY29uLS1hdXRoIGZzcC1zb3VyY2UtYXV0aF9fZWwgZnNwLWljb24tLXZpZGVvLWRpc2FibGVkXCJ9KSxfdm0uX3YoXCIgXCIpLF9jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLXRleHRfX3RpdGxlIGZzcC1zb3VyY2UtYXV0aF9fZWxcIn0sW192bS5fdihfdm0uX3MoXCJGYWlsZWQgdG8gbG9hZCBcIitfdm0udHlwZSkpXSksX3ZtLl92KFwiIFwiKSxfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1zb3VyY2UtYXV0aF9fZWxcIn0sW19jKFwiZGl2XCIse2tleTpcInJldHJ5Q2FsbFwiLHN0YXRpY0NsYXNzOlwiZnNwLWJ1dHRvbiBmc3AtYnV0dG9uLS1vdXRsaW5lXCIsb246e2NsaWNrOl92bS5yZXNldH19LFtfdm0uX3YoXCJSZXRyeVwiKV0pXSldKTpfdm0uc3RhdGU9PT1cImJyb3dzZXJlcnJvclwiP19jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLXNvdXJjZS1hdXRoX193cmFwcGVyXCJ9LFtfYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3AtaWNvbiBmc3AtaWNvbi0tYXV0aCBmc3Atc291cmNlLWF1dGhfX2VsIGZzcC1pY29uLS13ZWJjYW0tZGlzYWJsZWRcIn0pLF92bS5fdihcIiBcIiksX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3AtdGV4dF9fdGl0bGUgZnNwLXNvdXJjZS1hdXRoX19lbFwifSxbX3ZtLl92KF92bS5fcyhfdm0udChcIldlYmNhbSBOb3QgU3VwcG9ydGVkXCIpKSldKSxfdm0uX3YoXCIgXCIpLF9jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLXNvdXJjZS1hdXRoX19lbFwifSxbX2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLXRleHRfX3N1YmhlYWRlclwifSxbX3ZtLl92KF92bS5fcyhfdm0udChcIllvdXIgY3VycmVudCBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgd2ViY2FtIGZ1bmN0aW9uYWxpdHkuXCIpKSldKSxfdm0uX3YoXCIgXCIpLF9jKFwiYnJcIiksX3ZtLl92KFwiIFwiKSxfYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3AtdGV4dF9fc3ViaGVhZGVyXCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS50KFwiV2Ugc3VnZ2VzdCB1c2luZyBDaHJvbWUgb3IgRmlyZWZveC5cIikpKV0pXSldKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF9jKFwiZGl2XCIse3JlZjpcInZpZGVvXCIsc3RhdGljQ2xhc3M6XCJmc3AtdmlkZW9fX2NvbnRhaW5lclwifSksX3ZtLl92KFwiIFwiKSxfYyhcImZvb3Rlci1uYXZcIix7YXR0cnM6e3Nsb3Q6XCJmb290ZXJcIixcImlzLXZpc2libGVcIjpfdm0uc3RhdGUhPT1cImNvbm5lY3RpbmdcIiYmIV92bS5pc0Vycm9yZWR9LHNsb3Q6XCJmb290ZXJcIn0sW19jKFwic3BhblwiLHthdHRyczp7c2xvdDpcIm5hdi1sZWZ0XCJ9LHNsb3Q6XCJuYXYtbGVmdFwifSksX3ZtLl92KFwiIFwiKSxfYyhcInNwYW5cIix7YXR0cnM6e3Nsb3Q6XCJuYXYtY2VudGVyXCJ9LHNsb3Q6XCJuYXYtY2VudGVyXCJ9LFtfdm0uc3RhdGU9PT1cInJlYWR5XCI/X2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLWJ1dHRvbiBmc3AtYnV0dG9uLS1wcmltYXJ5IGZzcC1idXR0b24tLXZpZGVvXCIsXCJjbGFzc1wiOntcImZzcC1idXR0b24tLWRpc2FibGVkXCI6IV92bS5zdGFydEJ1dHRvbkluaXR9LGF0dHJzOnt0aXRsZTpcIlN0YXJ0XCJ9LG9uOntjbGljazpfdm0uc3RhcnR9fSxbX2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLWljb24tLXZpZGVvLXN0YXJ0XCJ9KV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX3ZtLnN0YXRlPT09XCJyZWNvcmRpbmdcIj9fYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3AtYnV0dG9uIGZzcC1idXR0b24tLWNhbmNlbCBmc3AtYnV0dG9uLS12aWRlb1wiLGF0dHJzOnt0aXRsZTpcIlN0b3BcIn0sb246e2NsaWNrOl92bS5zdG9wfX0sW19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1pY29uLS12aWRlby1zdG9wXCJ9KV0pOl92bS5fZSgpXSldKV0sMSk7fTt2YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kbT1bXTtfX3Z1ZV9yZW5kZXJfXyRtLl93aXRoU3RyaXBwZWQ9dHJ1ZTsvKiBzdHlsZSAqL3ZhciBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kbT11bmRlZmluZWQ7Lyogc2NvcGVkICovdmFyIF9fdnVlX3Njb3BlX2lkX18kbT11bmRlZmluZWQ7LyogbW9kdWxlIGlkZW50aWZpZXIgKi92YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyRtPXVuZGVmaW5lZDsvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovdmFyIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyRtPWZhbHNlOy8qIHN0eWxlIGluamVjdCAqLyAvKiBzdHlsZSBpbmplY3QgU1NSICovIC8qIHN0eWxlIGluamVjdCBzaGFkb3cgZG9tICovdmFyIE9wZW5Ub2s9bm9ybWFsaXplQ29tcG9uZW50KHtyZW5kZXI6X192dWVfcmVuZGVyX18kbSxzdGF0aWNSZW5kZXJGbnM6X192dWVfc3RhdGljUmVuZGVyRm5zX18kbX0sX192dWVfaW5qZWN0X3N0eWxlc19fJG0sX192dWVfc2NyaXB0X18kbSxfX3Z1ZV9zY29wZV9pZF9fJG0sX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJG0sX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyRtLGZhbHNlLHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkKTsvL1xudmFyIHNjcmlwdCRuPXtjb21wb25lbnRzOntDbG91ZDpDbG91ZCxDb250ZW50SGVhZGVyOkNvbnRlbnRIZWFkZXIsRm9vdGVyTmF2OkZvb3Rlck5hdixJbWFnZVNlYXJjaDpJbWFnZVNlYXJjaCxMb2NhbDpMb2NhbCxNb2RhbDpNb2RhbCxPcGVuVG9rOk9wZW5Ub2ssU2lkZWJhcjpTaWRlYmFyLFVybDpVcmwsV2ViY2FtOldlYmNhbX0sY29tcHV0ZWQ6X29iamVjdFNwcmVhZCh7fSxpbmRleF9lc20ubWFwR2V0dGVycyhbJ2NhblN0YXJ0VXBsb2FkJywnZmlsZXNOZWVkZWRDb3VudCcsJ2ZpbGVzV2FpdGluZycsJ21vYmlsZU5hdkFjdGl2ZScsJ21pbkZpbGVzJywncm91dGUnXSkse2N1cnJlbnRTb3VyY2U6ZnVuY3Rpb24gY3VycmVudFNvdXJjZSgpe3ZhciBzb3VyY2VOYW1lPXRoaXMucm91dGVbMV07cmV0dXJuIGdldEJ5TmFtZShzb3VyY2VOYW1lKTt9LG1pbkZpbGVzTWVzc2FnZTpmdW5jdGlvbiBtaW5GaWxlc01lc3NhZ2UoKXtpZih0aGlzLmZpbGVzTmVlZGVkQ291bnQ9PT0xKXtyZXR1cm5cIlwiLmNvbmNhdCh0aGlzLnQoJ0FkZCcpLFwiIDEgXCIpLmNvbmNhdCh0aGlzLnQoJ21vcmUgZmlsZScpKTt9aWYodGhpcy5maWxlc05lZWRlZENvdW50PjEpe3JldHVyblwiXCIuY29uY2F0KHRoaXMudCgnQWRkJyksXCIgXCIpLmNvbmNhdCh0aGlzLmZpbGVzTmVlZGVkQ291bnQsXCIgXCIpLmNvbmNhdCh0aGlzLnQoJ21vcmUgZmlsZXMnKSk7fXJldHVybiBudWxsO30saXNJbnNpZGVDbG91ZEZvbGRlcjpmdW5jdGlvbiBpc0luc2lkZUNsb3VkRm9sZGVyKCl7cmV0dXJuIHRoaXMuY3VycmVudFNvdXJjZS51aT09PSdjbG91ZCcmJiF0aGlzLm1vYmlsZU5hdkFjdGl2ZSYmdGhpcy5yb3V0ZVsyXSYmdGhpcy5yb3V0ZVsyXS5sZW5ndGg7fX0pLG1ldGhvZHM6X29iamVjdFNwcmVhZCh7fSxpbmRleF9lc20ubWFwQWN0aW9ucyhbJ2Rlc2VsZWN0QWxsRmlsZXMnLCd1cGRhdGVNb2JpbGVOYXZBY3RpdmUnXSkse2dvQmFjazpmdW5jdGlvbiBnb0JhY2soKXt0aGlzLiRzdG9yZS5jb21taXQoJ0dPX0JBQ0tfV0lUSF9ST1VURV9DVVJSRU5UX1RZUEUnKTt9LGdvVG9TdW1tYXJ5OmZ1bmN0aW9uIGdvVG9TdW1tYXJ5KCl7aWYodGhpcy5jYW5TdGFydFVwbG9hZCl7dGhpcy4kc3RvcmUuY29tbWl0KCdDSEFOR0VfUk9VVEUnLFsnc3VtbWFyeSddKTt0aGlzLnVwZGF0ZU1vYmlsZU5hdkFjdGl2ZShmYWxzZSk7fX19KX07Lyogc2NyaXB0ICovdmFyIF9fdnVlX3NjcmlwdF9fJG49c2NyaXB0JG47LyogdGVtcGxhdGUgKi92YXIgX192dWVfcmVuZGVyX18kbj1mdW5jdGlvbiBfX3Z1ZV9yZW5kZXJfXyRuKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKFwibW9kYWxcIixbX2MoXCJkaXZcIix7YXR0cnM6e3Nsb3Q6XCJoZWFkZXJcIn0sc2xvdDpcImhlYWRlclwifSxbX3ZtLmlzSW5zaWRlQ2xvdWRGb2xkZXI/X2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3Atc3VtbWFyeV9fZ28tYmFja1wiLGF0dHJzOnt0aXRsZTpfdm0udChcIkdvIGJhY2tcIil9LG9uOntjbGljazpfdm0uZ29CYWNrfX0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX2MoXCJjb250ZW50LWhlYWRlclwiLHthdHRyczp7c291cmNlOl92bS5jdXJyZW50U291cmNlfX0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKFwic2lkZWJhclwiLHthdHRyczp7c2xvdDpcInNpZGViYXJcIn0sc2xvdDpcInNpZGViYXJcIn0pLF92bS5fdihcIiBcIiksX3ZtLmN1cnJlbnRTb3VyY2UudWk9PT1cImxvY2FsXCI/X2MoXCJsb2NhbFwiLHthdHRyczp7c2xvdDpcImJvZHlcIn0sc2xvdDpcImJvZHlcIn0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX3ZtLmN1cnJlbnRTb3VyY2UudWk9PT1cImNsb3VkXCI/X2MoXCJjbG91ZFwiLHthdHRyczp7c2xvdDpcImJvZHlcIn0sc2xvdDpcImJvZHlcIn0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX3ZtLmN1cnJlbnRTb3VyY2UudWk9PT1cIndlYmNhbVwiP19jKFwid2ViY2FtXCIse2F0dHJzOntzbG90OlwiYm9keVwifSxzbG90OlwiYm9keVwifSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfdm0uY3VycmVudFNvdXJjZS51aT09PVwib3BlbnRva1wiP19jKFwib3Blbi10b2tcIix7YXR0cnM6e3Nsb3Q6XCJib2R5XCIsdHlwZTpfdm0uY3VycmVudFNvdXJjZS5uYW1lfSxzbG90OlwiYm9keVwifSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfdm0uY3VycmVudFNvdXJjZS51aT09PVwiaW1hZ2VzZWFyY2hcIj9fYyhcImltYWdlLXNlYXJjaFwiLHthdHRyczp7c2xvdDpcImJvZHlcIn0sc2xvdDpcImJvZHlcIn0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX3ZtLmN1cnJlbnRTb3VyY2UudWk9PT1cInVybFwiP19jKFwidXJsXCIse2F0dHJzOntzbG90OlwiYm9keVwifSxzbG90OlwiYm9keVwifSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYyhcImZvb3Rlci1uYXZcIix7YXR0cnM6e3Nsb3Q6XCJmb290ZXJcIixcImlzLXZpc2libGVcIjpfdm0uZmlsZXNXYWl0aW5nLmxlbmd0aD4wJiZfdm0uY3VycmVudFNvdXJjZS51aSE9PVwid2ViY2FtXCImJl92bS5jdXJyZW50U291cmNlLnVpIT09XCJvcGVudG9rXCJ9LHNsb3Q6XCJmb290ZXJcIn0sW19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1mb290ZXItdGV4dFwiLGF0dHJzOntzbG90OlwibmF2LWxlZnRcIn0sc2xvdDpcIm5hdi1sZWZ0XCJ9LFtfYyhcInNwYW5cIixbX3ZtLl92KF92bS5fcyhfdm0udChcIlNlbGVjdGVkIEZpbGVzXCIpKStcIjogXCIrX3ZtLl9zKF92bS5maWxlc1dhaXRpbmcubGVuZ3RoKSldKV0pLF92bS5fdihcIiBcIiksX2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLWJ1dHRvbiBmc3AtYnV0dG9uLS1wcmltYXJ5XCIsXCJjbGFzc1wiOntcImZzcC1idXR0b24tLWRpc2FibGVkXCI6IV92bS5jYW5TdGFydFVwbG9hZH0sYXR0cnM6e3Nsb3Q6XCJuYXYtcmlnaHRcIix0aXRsZTpcIk5leHRcIix0YWJpbmRleDpcIjBcIn0sb246e2NsaWNrOl92bS5nb1RvU3VtbWFyeSxrZXl1cDpmdW5jdGlvbiBrZXl1cCgkZXZlbnQpe2lmKCEkZXZlbnQudHlwZS5pbmRleE9mKFwia2V5XCIpJiZfdm0uX2soJGV2ZW50LmtleUNvZGUsXCJlbnRlclwiLDEzLCRldmVudC5rZXksXCJFbnRlclwiKSl7cmV0dXJuIG51bGw7fXJldHVybiBfdm0uZ29Ub1N1bW1hcnkoJGV2ZW50KTt9fSxzbG90OlwibmF2LXJpZ2h0XCJ9LFshX3ZtLmNhblN0YXJ0VXBsb2FkJiZfdm0uZmlsZXNXYWl0aW5nLmxlbmd0aCE9PTA/X2MoXCJzcGFuXCIsW192bS5fdihcIlxcbiAgICAgICAgXCIrX3ZtLl9zKF92bS5taW5GaWxlc01lc3NhZ2UpK1wiXFxuICAgICAgXCIpXSk6X2MoXCJzcGFuXCIsW192bS5fdihfdm0uX3MoX3ZtLnQoXCJWaWV3L0VkaXQgU2VsZWN0ZWRcIikpKV0pXSldKV0sMSk7fTt2YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kbj1bXTtfX3Z1ZV9yZW5kZXJfXyRuLl93aXRoU3RyaXBwZWQ9dHJ1ZTsvKiBzdHlsZSAqL3ZhciBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kbj11bmRlZmluZWQ7Lyogc2NvcGVkICovdmFyIF9fdnVlX3Njb3BlX2lkX18kbj11bmRlZmluZWQ7LyogbW9kdWxlIGlkZW50aWZpZXIgKi92YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyRuPXVuZGVmaW5lZDsvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovdmFyIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyRuPWZhbHNlOy8qIHN0eWxlIGluamVjdCAqLyAvKiBzdHlsZSBpbmplY3QgU1NSICovIC8qIHN0eWxlIGluamVjdCBzaGFkb3cgZG9tICovdmFyIFBpY2tGcm9tU291cmNlPW5vcm1hbGl6ZUNvbXBvbmVudCh7cmVuZGVyOl9fdnVlX3JlbmRlcl9fJG4sc3RhdGljUmVuZGVyRm5zOl9fdnVlX3N0YXRpY1JlbmRlckZuc19fJG59LF9fdnVlX2luamVjdF9zdHlsZXNfXyRuLF9fdnVlX3NjcmlwdF9fJG4sX192dWVfc2NvcGVfaWRfXyRuLF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyRuLF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kbixmYWxzZSx1bmRlZmluZWQsdW5kZWZpbmVkLHVuZGVmaW5lZCk7dmFyIGNhbnZhc1RvQmxvYj1jcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbihtb2R1bGUpeyhmdW5jdGlvbih3aW5kb3cpe3ZhciBDYW52YXNQcm90b3R5cGU9d2luZG93LkhUTUxDYW52YXNFbGVtZW50JiZ3aW5kb3cuSFRNTENhbnZhc0VsZW1lbnQucHJvdG90eXBlO3ZhciBoYXNCbG9iQ29uc3RydWN0b3I9d2luZG93LkJsb2ImJmZ1bmN0aW9uKCl7dHJ5e3JldHVybiBCb29sZWFuKG5ldyBCbG9iKCkpO31jYXRjaChlKXtyZXR1cm4gZmFsc2U7fX0oKTt2YXIgaGFzQXJyYXlCdWZmZXJWaWV3U3VwcG9ydD1oYXNCbG9iQ29uc3RydWN0b3ImJndpbmRvdy5VaW50OEFycmF5JiZmdW5jdGlvbigpe3RyeXtyZXR1cm4gbmV3IEJsb2IoW25ldyBVaW50OEFycmF5KDEwMCldKS5zaXplPT09MTAwO31jYXRjaChlKXtyZXR1cm4gZmFsc2U7fX0oKTt2YXIgQmxvYkJ1aWxkZXI9d2luZG93LkJsb2JCdWlsZGVyfHx3aW5kb3cuV2ViS2l0QmxvYkJ1aWxkZXJ8fHdpbmRvdy5Nb3pCbG9iQnVpbGRlcnx8d2luZG93Lk1TQmxvYkJ1aWxkZXI7dmFyIGRhdGFVUklQYXR0ZXJuPS9eZGF0YTooKC4qPykoO2NoYXJzZXQ9Lio/KT8pKDtiYXNlNjQpPywvO3ZhciBkYXRhVVJMdG9CbG9iPShoYXNCbG9iQ29uc3RydWN0b3J8fEJsb2JCdWlsZGVyKSYmd2luZG93LmF0b2ImJndpbmRvdy5BcnJheUJ1ZmZlciYmd2luZG93LlVpbnQ4QXJyYXkmJmZ1bmN0aW9uKGRhdGFVUkkpe3ZhciBtYXRjaGVzLG1lZGlhVHlwZSxpc0Jhc2U2NCxkYXRhU3RyaW5nLGJ5dGVTdHJpbmcsYXJyYXlCdWZmZXIsaW50QXJyYXksaSxiYjsvLyBQYXJzZSB0aGUgZGF0YVVSSSBjb21wb25lbnRzIGFzIHBlciBSRkMgMjM5N1xubWF0Y2hlcz1kYXRhVVJJLm1hdGNoKGRhdGFVUklQYXR0ZXJuKTtpZighbWF0Y2hlcyl7dGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGRhdGEgVVJJJyk7fS8vIERlZmF1bHQgdG8gdGV4dC9wbGFpbjtjaGFyc2V0PVVTLUFTQ0lJXG5tZWRpYVR5cGU9bWF0Y2hlc1syXT9tYXRjaGVzWzFdOid0ZXh0L3BsYWluJysobWF0Y2hlc1szXXx8JztjaGFyc2V0PVVTLUFTQ0lJJyk7aXNCYXNlNjQ9ISFtYXRjaGVzWzRdO2RhdGFTdHJpbmc9ZGF0YVVSSS5zbGljZShtYXRjaGVzWzBdLmxlbmd0aCk7aWYoaXNCYXNlNjQpey8vIENvbnZlcnQgYmFzZTY0IHRvIHJhdyBiaW5hcnkgZGF0YSBoZWxkIGluIGEgc3RyaW5nOlxuYnl0ZVN0cmluZz1hdG9iKGRhdGFTdHJpbmcpO31lbHNley8vIENvbnZlcnQgYmFzZTY0L1VSTEVuY29kZWQgZGF0YSBjb21wb25lbnQgdG8gcmF3IGJpbmFyeTpcbmJ5dGVTdHJpbmc9ZGVjb2RlVVJJQ29tcG9uZW50KGRhdGFTdHJpbmcpO30vLyBXcml0ZSB0aGUgYnl0ZXMgb2YgdGhlIHN0cmluZyB0byBhbiBBcnJheUJ1ZmZlcjpcbmFycmF5QnVmZmVyPW5ldyBBcnJheUJ1ZmZlcihieXRlU3RyaW5nLmxlbmd0aCk7aW50QXJyYXk9bmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpO2ZvcihpPTA7aTxieXRlU3RyaW5nLmxlbmd0aDtpKz0xKXtpbnRBcnJheVtpXT1ieXRlU3RyaW5nLmNoYXJDb2RlQXQoaSk7fS8vIFdyaXRlIHRoZSBBcnJheUJ1ZmZlciAob3IgQXJyYXlCdWZmZXJWaWV3KSB0byBhIGJsb2I6XG5pZihoYXNCbG9iQ29uc3RydWN0b3Ipe3JldHVybiBuZXcgQmxvYihbaGFzQXJyYXlCdWZmZXJWaWV3U3VwcG9ydD9pbnRBcnJheTphcnJheUJ1ZmZlcl0se3R5cGU6bWVkaWFUeXBlfSk7fWJiPW5ldyBCbG9iQnVpbGRlcigpO2JiLmFwcGVuZChhcnJheUJ1ZmZlcik7cmV0dXJuIGJiLmdldEJsb2IobWVkaWFUeXBlKTt9O2lmKHdpbmRvdy5IVE1MQ2FudmFzRWxlbWVudCYmIUNhbnZhc1Byb3RvdHlwZS50b0Jsb2Ipe2lmKENhbnZhc1Byb3RvdHlwZS5tb3pHZXRBc0ZpbGUpe0NhbnZhc1Byb3RvdHlwZS50b0Jsb2I9ZnVuY3Rpb24oY2FsbGJhY2ssdHlwZSxxdWFsaXR5KXt2YXIgc2VsZj10aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtpZihxdWFsaXR5JiZDYW52YXNQcm90b3R5cGUudG9EYXRhVVJMJiZkYXRhVVJMdG9CbG9iKXtjYWxsYmFjayhkYXRhVVJMdG9CbG9iKHNlbGYudG9EYXRhVVJMKHR5cGUscXVhbGl0eSkpKTt9ZWxzZXtjYWxsYmFjayhzZWxmLm1vekdldEFzRmlsZSgnYmxvYicsdHlwZSkpO319KTt9O31lbHNlIGlmKENhbnZhc1Byb3RvdHlwZS50b0RhdGFVUkwmJmRhdGFVUkx0b0Jsb2Ipe0NhbnZhc1Byb3RvdHlwZS50b0Jsb2I9ZnVuY3Rpb24oY2FsbGJhY2ssdHlwZSxxdWFsaXR5KXt2YXIgc2VsZj10aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtjYWxsYmFjayhkYXRhVVJMdG9CbG9iKHNlbGYudG9EYXRhVVJMKHR5cGUscXVhbGl0eSkpKTt9KTt9O319aWYobW9kdWxlLmV4cG9ydHMpe21vZHVsZS5leHBvcnRzPWRhdGFVUkx0b0Jsb2I7fWVsc2V7d2luZG93LmRhdGFVUkx0b0Jsb2I9ZGF0YVVSTHRvQmxvYjt9fSkod2luZG93KTt9KTsvL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbnZhciBzY3JpcHQkbz17d2F0Y2g6e3Byb2dyZXNzOmZ1bmN0aW9uIHByb2dyZXNzKG51bSl7dGhpcy4kcmVmcy5iYXIuc3R5bGUud2lkdGg9XCJcIi5jb25jYXQobnVtLFwiJVwiKTt9fSxwcm9wczpbJ3Byb2dyZXNzJ119Oy8qIHNjcmlwdCAqL3ZhciBfX3Z1ZV9zY3JpcHRfXyRvPXNjcmlwdCRvOy8qIHRlbXBsYXRlICovdmFyIF9fdnVlX3JlbmRlcl9fJG89ZnVuY3Rpb24gX192dWVfcmVuZGVyX18kbygpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1wcm9ncmVzcy1iYXJcIn0sW19jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLXByb2dyZXNzLWJhcl9fY29udGFpbmVyXCJ9LFtfYyhcImRpdlwiLHtyZWY6XCJiYXJcIixzdGF0aWNDbGFzczpcImZzcC1wcm9ncmVzcy1iYXJfX2JhclwiLHN0YXRpY1N0eWxlOnt3aWR0aDpcIjBcIn19KV0pXSk7fTt2YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kbz1bXTtfX3Z1ZV9yZW5kZXJfXyRvLl93aXRoU3RyaXBwZWQ9dHJ1ZTsvKiBzdHlsZSAqL3ZhciBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kbz11bmRlZmluZWQ7Lyogc2NvcGVkICovdmFyIF9fdnVlX3Njb3BlX2lkX18kbz11bmRlZmluZWQ7LyogbW9kdWxlIGlkZW50aWZpZXIgKi92YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyRvPXVuZGVmaW5lZDsvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovdmFyIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyRvPWZhbHNlOy8qIHN0eWxlIGluamVjdCAqLyAvKiBzdHlsZSBpbmplY3QgU1NSICovIC8qIHN0eWxlIGluamVjdCBzaGFkb3cgZG9tICovdmFyIFByb2dyZXNzQmFyPW5vcm1hbGl6ZUNvbXBvbmVudCh7cmVuZGVyOl9fdnVlX3JlbmRlcl9fJG8sc3RhdGljUmVuZGVyRm5zOl9fdnVlX3N0YXRpY1JlbmRlckZuc19fJG99LF9fdnVlX2luamVjdF9zdHlsZXNfXyRvLF9fdnVlX3NjcmlwdF9fJG8sX192dWVfc2NvcGVfaWRfXyRvLF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyRvLF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kbyxmYWxzZSx1bmRlZmluZWQsdW5kZWZpbmVkLHVuZGVmaW5lZCk7LyogZXNsaW50IG5vLWJpdHdpc2U6IFtcImVycm9yXCIsIHsgXCJhbGxvd1wiOiBbXCImXCJdIH1dICovdmFyIHRvSGV4U3RyaW5nPWZ1bmN0aW9uIHRvSGV4U3RyaW5nKGJ5dGVBcnJheSl7dmFyIHM9JzB4JztieXRlQXJyYXkuZm9yRWFjaChmdW5jdGlvbihfYnl0ZSl7cys9XCIwXCIuY29uY2F0KChfYnl0ZSYweEZGKS50b1N0cmluZygxNikpLnNsaWNlKC0yKTt9KTtyZXR1cm4gczt9O3ZhciBmaW5kRXhpZlBvc2l0aW9uPWZ1bmN0aW9uIGZpbmRFeGlmUG9zaXRpb24oZmlsZUJ1ZmZlcil7dmFyIGRhdGFWaWV3PW5ldyBEYXRhVmlldyhmaWxlQnVmZmVyKTt2YXIgbGVuZ3RoPWZpbGVCdWZmZXIuYnl0ZUxlbmd0aDt2YXIgcG9zaXRpb249e307dmFyIG1hcmtlcjt2YXIgb2Zmc2V0PTI7dmFyIHN0YXJ0O3ZhciBlbmQ7aWYoZGF0YVZpZXcuZ2V0VWludDgoMCkhPT0weEZGfHxkYXRhVmlldy5nZXRVaW50OCgxKSE9PTB4RDgpey8vIE5vdCBhIHZhbGlkIGpwZWdcbnJldHVybjt9d2hpbGUob2Zmc2V0PGxlbmd0aCl7aWYoZGF0YVZpZXcuZ2V0VWludDgob2Zmc2V0KSE9PTB4RkYpey8vIGNvbnNvbGUubG9nKFwiTm90IGEgdmFsaWQgbWFya2VyIGF0IG9mZnNldCBcIiArIG9mZnNldCArIFwiLCBmb3VuZDogXCIgKyBkYXRhVmlldy5nZXRVaW50OChvZmZzZXQpKTtcbi8vIE5vdCBhIHZhbGlkIG1hcmtlciwgc29tZXRoaW5nIGlzIHdyb25nIGluIHRoZSBpbWFnZSBzdHJ1Y3R1cmUuIEJldHRlciB0byB0ZXJtaW5hdGUuXG5yZXR1cm47fW1hcmtlcj1kYXRhVmlldy5nZXRVaW50OChvZmZzZXQrMSk7c3RhcnQ9b2Zmc2V0O2VuZD1vZmZzZXQrMitkYXRhVmlldy5nZXRVaW50MTYob2Zmc2V0KzIpO2lmKG1hcmtlcj49MHhFMSYmbWFya2VyPD0weEVGKXsvLyBBUFBuIG1hcmtlciBmb3VuZCFcbmlmKHBvc2l0aW9uLnN0YXJ0T2Zmc2V0PT09dW5kZWZpbmVkKXtwb3NpdGlvbi5zdGFydE9mZnNldD1zdGFydDt9cG9zaXRpb24uZW5kT2Zmc2V0PWVuZDt9ZWxzZSBpZihwb3NpdGlvbi5zdGFydE9mZnNldCE9PXVuZGVmaW5lZCl7Ly8gV2UgYWxyZWFkeSBjb2xsZWN0ZWQgc29tZSBkYXRhLCBhbmQgbm93IHN0dW1ibGVkIHVwb24gbm9uLWV4aWYgbWFya2VyLFxuLy8gd2hhdCBtZWFucyB3ZSBoYXZlIGV2ZXJ5dGhpbmcgd2hhdCB3ZSB3YW50ZWQuXG5yZXR1cm4gcG9zaXRpb247Ly8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXJldHVyblxufWVsc2UgaWYobWFya2VyPT09MHhEQSl7Ly8gV2UgZGlkbid0IGZpbmQgYW55IGRhdGEgYW5kIGFmdGVyIHRoaXMgbWFya2VyIGFsbCBtZXRhZGF0YSBoYXMgYmVlbiByZWFkLlxuLy8gTm8gcG9pbnQgaW4gc2VhcmNoaW5nIGZ1cnRoZXIuXG5yZXR1cm47fW9mZnNldD1lbmQ7fX07dmFyIGZpbmRXaGVyZUV4aWZDYW5CZVB1dD1mdW5jdGlvbiBmaW5kV2hlcmVFeGlmQ2FuQmVQdXQoZmlsZUJ1ZmZlcil7dmFyIGRhdGFWaWV3PW5ldyBEYXRhVmlldyhmaWxlQnVmZmVyKTt2YXIgc29mME1hcmtlcj0weEMwO3ZhciBzb2YyTWFya2VyPTB4QzI7dmFyIGFwcDBNYXJrZXI9MHhFMDt2YXIgbGVuZ3RoPWZpbGVCdWZmZXIuYnl0ZUxlbmd0aDt2YXIgb2Zmc2V0PTI7dmFyIG1hcmtlcjt2YXIgZW5kO3ZhciBwb3NpdGlvbjt3aGlsZShvZmZzZXQ8bGVuZ3RoKXttYXJrZXI9ZGF0YVZpZXcuZ2V0VWludDgob2Zmc2V0KzEpO2VuZD1vZmZzZXQrMitkYXRhVmlldy5nZXRVaW50MTYob2Zmc2V0KzIpO2lmKG1hcmtlcj09PXNvZjBNYXJrZXJ8fG1hcmtlcj09PXNvZjJNYXJrZXJ8fG1hcmtlcj09PWFwcDBNYXJrZXIpe3Bvc2l0aW9uPXtzdGFydE9mZnNldDplbmQsZW5kT2Zmc2V0OmVuZH07YnJlYWs7fW9mZnNldD1lbmQ7fXJldHVybiBwb3NpdGlvbjt9O3ZhciBleHRyYWN0RnJvbT1mdW5jdGlvbiBleHRyYWN0RnJvbShmaWxlQnVmZmVyKXt2YXIgcG9zaXRpb249ZmluZEV4aWZQb3NpdGlvbihmaWxlQnVmZmVyKTtpZighcG9zaXRpb24pey8vIFRoaXMgaW1hZ2UgaGFzIG5vIGV4aWYgZGF0YVxucmV0dXJuIG5ldyBBcnJheUJ1ZmZlcigwKTt9cmV0dXJuIGZpbGVCdWZmZXIuc2xpY2UocG9zaXRpb24uc3RhcnRPZmZzZXQscG9zaXRpb24uZW5kT2Zmc2V0KTt9O3ZhciBvdmVyd3JpdGVJbkZpbGU9ZnVuY3Rpb24gb3ZlcndyaXRlSW5GaWxlKHRhcmdldEZpbGUsZXhpZkNodW5rKXt2YXIgdGFyZ2V0RXhpZlBvc2l0aW9uPWZpbmRFeGlmUG9zaXRpb24odGFyZ2V0RmlsZSk7aWYoIXRhcmdldEV4aWZQb3NpdGlvbil7dGFyZ2V0RXhpZlBvc2l0aW9uPWZpbmRXaGVyZUV4aWZDYW5CZVB1dCh0YXJnZXRGaWxlKTt9aWYoIXRhcmdldEV4aWZQb3NpdGlvbil7Ly8gQ291bGRuJ3QgZmluZCBwb3NpdGlvbiBpbiBmaWxlIHdoZXJlIHRoZSBBUFAgZGF0YSBzYWZlbHkgY2FuIGJlIHB1dC5cbi8vIEFib3J0aW5nIHdpdGhvdXQgaW50cm9kdWNpbmcgYW55IGNoYW5nZXMgdG8gZmlsZS5cbnJldHVybiB0YXJnZXRGaWxlO312YXIgaGVhZGVyPXRhcmdldEZpbGUuc2xpY2UoMCx0YXJnZXRFeGlmUG9zaXRpb24uc3RhcnRPZmZzZXQpO3ZhciByZXN0PXRhcmdldEZpbGUuc2xpY2UodGFyZ2V0RXhpZlBvc2l0aW9uLmVuZE9mZnNldCk7dmFyIHJlc3VsdEZpbGU9bmV3IFVpbnQ4QXJyYXkoaGVhZGVyLmJ5dGVMZW5ndGgrZXhpZkNodW5rLmJ5dGVMZW5ndGgrcmVzdC5ieXRlTGVuZ3RoKTtyZXN1bHRGaWxlLnNldChuZXcgVWludDhBcnJheShoZWFkZXIpLDApO3Jlc3VsdEZpbGUuc2V0KG5ldyBVaW50OEFycmF5KGV4aWZDaHVuayksaGVhZGVyLmJ5dGVMZW5ndGgpO3Jlc3VsdEZpbGUuc2V0KG5ldyBVaW50OEFycmF5KHJlc3QpLGhlYWRlci5ieXRlTGVuZ3RoK2V4aWZDaHVuay5ieXRlTGVuZ3RoKTtyZXR1cm4gcmVzdWx0RmlsZS5idWZmZXI7fTsvLyBhZGQgb3JpZW50YXRpb24gdG8gZmlsZSBleGlmIGRhdGFcbnZhciBnZW5lcmF0ZUV4aWZPcmllbnRhdGlvbj1mdW5jdGlvbiBnZW5lcmF0ZUV4aWZPcmllbnRhdGlvbigpe3ZhciBvcmllbnRhdGlvbj1hcmd1bWVudHMubGVuZ3RoPjAmJmFyZ3VtZW50c1swXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMF06MTt2YXIgc3RhbmRhcnRFeGlmU3RyaW5nPSdmZmUxMDAwMDQ1Nzg2OTY2MDAwMDRkNGQwMDJhMDAwMDAwMDgwMDAxMDExMjAwMDMwMDAwMDAwMTAwMDAwMDAwMDAwMCc7dmFyIGV4aWZCdWZmZXI9bmV3IFVpbnQ4QXJyYXkoc3RhbmRhcnRFeGlmU3RyaW5nLmxlbmd0aC8yKTtmb3IodmFyIGk9MDtpPHN0YW5kYXJ0RXhpZlN0cmluZy5sZW5ndGg7aSs9Mil7ZXhpZkJ1ZmZlcltpLzJdPXBhcnNlSW50KHN0YW5kYXJ0RXhpZlN0cmluZy5zdWJzdHJpbmcoaSxpKzIpLDE2KTt9dmFyIGR3PW5ldyBEYXRhVmlldyhleGlmQnVmZmVyLmJ1ZmZlcik7ZHcuc2V0VWludDE2KGR3LmJ5dGVMZW5ndGgtNixvcmllbnRhdGlvbik7ZHcuc2V0VWludDE2KDIsZHcuYnl0ZUxlbmd0aC0yKTsvLyAtMiBleGlmIHByZWFtYnVsZSBieXRlc1xucmV0dXJuIGR3LmJ1ZmZlcjt9O3ZhciBmaW5kRXhpZlN0YXJ0UG9zaXRpb249ZnVuY3Rpb24gZmluZEV4aWZTdGFydFBvc2l0aW9uKGZpbGUpe3ZhciB2aWV3PW5ldyBEYXRhVmlldyhmaWxlKTt2YXIgbGVuZ3RoPXZpZXcuYnl0ZUxlbmd0aDt2YXIgb2Zmc2V0PTI7d2hpbGUob2Zmc2V0PGxlbmd0aCl7aWYodmlldy5nZXRVaW50MTYob2Zmc2V0KzIsZmFsc2UpPD04KXtyZXR1cm4gZmFsc2U7fXZhciBtYXJrZXI9dmlldy5nZXRVaW50MTYob2Zmc2V0LGZhbHNlKTtvZmZzZXQrPTI7aWYobWFya2VyPT09MHhmZmUxKXtvZmZzZXQrPTI7aWYodmlldy5nZXRVaW50MzIob2Zmc2V0LGZhbHNlKSE9PTB4NDU3ODY5NjYpe3JldHVybiBmYWxzZTt9dmFyIGxpdHRsZT12aWV3LmdldFVpbnQxNihvZmZzZXQrPTYsZmFsc2UpPT09MHg0OTQ5O29mZnNldCs9dmlldy5nZXRVaW50MzIob2Zmc2V0KzQsbGl0dGxlKTt2YXIgdGFncz12aWV3LmdldFVpbnQxNihvZmZzZXQsbGl0dGxlKTtvZmZzZXQrPTI7Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5mb3IodmFyIGk9MDtpPHRhZ3M7aSsrKXtpZih2aWV3LmdldFVpbnQxNihvZmZzZXQraSoxMixsaXR0bGUpPT09MHgwMTEyKXtyZXR1cm57b2Zmc2V0Om9mZnNldCtpKjEyKzgsZW5kaWFuOmxpdHRsZX07fX0vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYml0d2lzZVxufWVsc2UgaWYoKG1hcmtlciYweGZmMDApIT09MHhmZjAwKXticmVhazt9ZWxzZXtvZmZzZXQrPXZpZXcuZ2V0VWludDE2KG9mZnNldCxmYWxzZSk7fX1yZXR1cm4gZmFsc2U7fTt2YXIgZ2V0T3JpZW50YXRpb249ZnVuY3Rpb24gZ2V0T3JpZW50YXRpb24oZmlsZSl7dmFyIHZpZXc9bmV3IERhdGFWaWV3KGZpbGUpO3ZhciBleGlmUG9zaXRpb249ZmluZEV4aWZTdGFydFBvc2l0aW9uKGZpbGUpO2lmKCFleGlmUG9zaXRpb24pe3JldHVybiBmYWxzZTt9cmV0dXJuIHZpZXcuZ2V0VWludDE2KGV4aWZQb3NpdGlvbi5vZmZzZXQsZXhpZlBvc2l0aW9uLmVuZGlhbik7fTsvLyBtZXRob2QgcmVwbGFjZSBleGlmIG9yaWVudGF0aW9uIHdpdGggY3VycmVudCBvbmVcbnZhciBzZXRPcmllbnRhdGlvbj1mdW5jdGlvbiBzZXRPcmllbnRhdGlvbihmaWxlLG9yaWVudGF0aW9uKXt2YXIgZXhpZlBvc2l0aW9uPWZpbmRFeGlmU3RhcnRQb3NpdGlvbihmaWxlKTtpZighZXhpZlBvc2l0aW9uKXtyZXR1cm4gZmlsZTt9dmFyIHZpZXc9bmV3IERhdGFWaWV3KGZpbGUpO3ZpZXcuc2V0VWludDE2KGV4aWZQb3NpdGlvbi5vZmZzZXQsb3JpZW50YXRpb24sZXhpZlBvc2l0aW9uLmVuZGlhbik7cmV0dXJuIHZpZXcuYnVmZmVyO307dmFyIGV4aWY9e3RvSGV4U3RyaW5nOnRvSGV4U3RyaW5nLGV4dHJhY3RGcm9tOmV4dHJhY3RGcm9tLG92ZXJ3cml0ZUluRmlsZTpvdmVyd3JpdGVJbkZpbGUsc2V0T3JpZW50YXRpb246c2V0T3JpZW50YXRpb24sZ2V0T3JpZW50YXRpb246Z2V0T3JpZW50YXRpb24sZ2VuZXJhdGVFeGlmT3JpZW50YXRpb246Z2VuZXJhdGVFeGlmT3JpZW50YXRpb259Oy8qKlxuICAgKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gICAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICAgKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcXVlcnkub3JnLz5cbiAgICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICAgKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICAgKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAgICovIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL3ZhciBNQVhfU0FGRV9JTlRFR0VSPTkwMDcxOTkyNTQ3NDA5OTE7LyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL3ZhciBhcmdzVGFnPSdbb2JqZWN0IEFyZ3VtZW50c10nLGZ1bmNUYWc9J1tvYmplY3QgRnVuY3Rpb25dJyxnZW5UYWc9J1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJzsvKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovdmFyIHJlSXNVaW50PS9eKD86MHxbMS05XVxcZCopJC87LyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICovZnVuY3Rpb24gYXJyYXlNYXAkMShhcnJheSxpdGVyYXRlZSl7dmFyIGluZGV4PS0xLGxlbmd0aD1hcnJheT9hcnJheS5sZW5ndGg6MCxyZXN1bHQ9QXJyYXkobGVuZ3RoKTt3aGlsZSgrK2luZGV4PGxlbmd0aCl7cmVzdWx0W2luZGV4XT1pdGVyYXRlZShhcnJheVtpbmRleF0saW5kZXgsYXJyYXkpO31yZXR1cm4gcmVzdWx0O30vKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICAgKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgKi9mdW5jdGlvbiBiYXNlVGltZXMobixpdGVyYXRlZSl7dmFyIGluZGV4PS0xLHJlc3VsdD1BcnJheShuKTt3aGlsZSgrK2luZGV4PG4pe3Jlc3VsdFtpbmRleF09aXRlcmF0ZWUoaW5kZXgpO31yZXR1cm4gcmVzdWx0O30vKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAgICogYXJyYXkgb2YgYG9iamVjdGAgcHJvcGVydHkgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzXG4gICAqIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAqL2Z1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LHByb3BzKXtyZXR1cm4gYXJyYXlNYXAkMShwcm9wcyxmdW5jdGlvbihrZXkpe3JldHVybiBvYmplY3Rba2V5XTt9KTt9LyoqXG4gICAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL2Z1bmN0aW9uIG92ZXJBcmcoZnVuYyx0cmFuc2Zvcm0pe3JldHVybiBmdW5jdGlvbihhcmcpe3JldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTt9O30vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovdmFyIG9iamVjdFByb3RvJDI9T2JqZWN0LnByb3RvdHlwZTsvKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi92YXIgaGFzT3duUHJvcGVydHkkMj1vYmplY3RQcm90byQyLmhhc093blByb3BlcnR5Oy8qKlxuICAgKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gICAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICAgKiBvZiB2YWx1ZXMuXG4gICAqL3ZhciBvYmplY3RUb1N0cmluZyQyPW9iamVjdFByb3RvJDIudG9TdHJpbmc7LyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovdmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlPW9iamVjdFByb3RvJDIucHJvcGVydHlJc0VudW1lcmFibGU7LyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL3ZhciBuYXRpdmVLZXlzPW92ZXJBcmcoT2JqZWN0LmtleXMsT2JqZWN0KTsvKipcbiAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgKi9mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLGluaGVyaXRlZCl7Ly8gU2FmYXJpIDguMSBtYWtlcyBgYXJndW1lbnRzLmNhbGxlZWAgZW51bWVyYWJsZSBpbiBzdHJpY3QgbW9kZS5cbi8vIFNhZmFyaSA5IG1ha2VzIGBhcmd1bWVudHMubGVuZ3RoYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxudmFyIHJlc3VsdD1pc0FycmF5JDEodmFsdWUpfHxpc0FyZ3VtZW50cyh2YWx1ZSk/YmFzZVRpbWVzKHZhbHVlLmxlbmd0aCxTdHJpbmcpOltdO3ZhciBsZW5ndGg9cmVzdWx0Lmxlbmd0aCxza2lwSW5kZXhlcz0hIWxlbmd0aDtmb3IodmFyIGtleSBpbiB2YWx1ZSl7aWYoKGluaGVyaXRlZHx8aGFzT3duUHJvcGVydHkkMi5jYWxsKHZhbHVlLGtleSkpJiYhKHNraXBJbmRleGVzJiYoa2V5PT0nbGVuZ3RoJ3x8aXNJbmRleChrZXksbGVuZ3RoKSkpKXtyZXN1bHQucHVzaChrZXkpO319cmV0dXJuIHJlc3VsdDt9LyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgKi9mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3Qpe2lmKCFpc1Byb3RvdHlwZShvYmplY3QpKXtyZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO312YXIgcmVzdWx0PVtdO2Zvcih2YXIga2V5IGluIE9iamVjdChvYmplY3QpKXtpZihoYXNPd25Qcm9wZXJ0eSQyLmNhbGwob2JqZWN0LGtleSkmJmtleSE9J2NvbnN0cnVjdG9yJyl7cmVzdWx0LnB1c2goa2V5KTt9fXJldHVybiByZXN1bHQ7fS8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAgICovZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSxsZW5ndGgpe2xlbmd0aD1sZW5ndGg9PW51bGw/TUFYX1NBRkVfSU5URUdFUjpsZW5ndGg7cmV0dXJuISFsZW5ndGgmJih0eXBlb2YgdmFsdWU9PSdudW1iZXInfHxyZUlzVWludC50ZXN0KHZhbHVlKSkmJnZhbHVlPi0xJiZ2YWx1ZSUxPT0wJiZ2YWx1ZTxsZW5ndGg7fS8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAgICovZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpe3ZhciBDdG9yPXZhbHVlJiZ2YWx1ZS5jb25zdHJ1Y3Rvcixwcm90bz10eXBlb2YgQ3Rvcj09J2Z1bmN0aW9uJyYmQ3Rvci5wcm90b3R5cGV8fG9iamVjdFByb3RvJDI7cmV0dXJuIHZhbHVlPT09cHJvdG87fS8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSAwLjEuMFxuICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICovZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpey8vIFNhZmFyaSA4LjEgbWFrZXMgYGFyZ3VtZW50cy5jYWxsZWVgIGVudW1lcmFibGUgaW4gc3RyaWN0IG1vZGUuXG5yZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpJiZoYXNPd25Qcm9wZXJ0eSQyLmNhbGwodmFsdWUsJ2NhbGxlZScpJiYoIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsJ2NhbGxlZScpfHxvYmplY3RUb1N0cmluZyQyLmNhbGwodmFsdWUpPT1hcmdzVGFnKTt9LyoqXG4gICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDAuMS4wXG4gICAqIEBjYXRlZ29yeSBMYW5nXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIF8uaXNBcnJheSgnYWJjJyk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIF8uaXNBcnJheShfLm5vb3ApO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKi92YXIgaXNBcnJheSQxPUFycmF5LmlzQXJyYXk7LyoqXG4gICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAgICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICAgKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSA0LjAuMFxuICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqL2Z1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKXtyZXR1cm4gdmFsdWUhPW51bGwmJmlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkmJiFpc0Z1bmN0aW9uKHZhbHVlKTt9LyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAgICogaXMgYW4gb2JqZWN0LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSA0LjAuMFxuICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqL2Z1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKXtyZXR1cm4gaXNPYmplY3RMaWtlJDIodmFsdWUpJiZpc0FycmF5TGlrZSh2YWx1ZSk7fS8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDAuMS4wXG4gICAqIEBjYXRlZ29yeSBMYW5nXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8uaXNGdW5jdGlvbihfKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKi9mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKXsvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3Jcbi8vIGluIFNhZmFyaSA4LTkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXkgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbnZhciB0YWc9aXNPYmplY3QkMyh2YWx1ZSk/b2JqZWN0VG9TdHJpbmckMi5jYWxsKHZhbHVlKTonJztyZXR1cm4gdGFnPT1mdW5jVGFnfHx0YWc9PWdlblRhZzt9LyoqXG4gICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gICAqXG4gICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDQuMC4wXG4gICAqIEBjYXRlZ29yeSBMYW5nXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLmlzTGVuZ3RoKDMpO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBfLmlzTGVuZ3RoKCczJyk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqL2Z1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKXtyZXR1cm4gdHlwZW9mIHZhbHVlPT0nbnVtYmVyJyYmdmFsdWU+LTEmJnZhbHVlJTE9PTAmJnZhbHVlPD1NQVhfU0FGRV9JTlRFR0VSO30vKipcbiAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gICAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAgICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSAwLjEuMFxuICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8uaXNPYmplY3Qoe30pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogXy5pc09iamVjdChudWxsKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICovZnVuY3Rpb24gaXNPYmplY3QkMyh2YWx1ZSl7dmFyIHR5cGU9X3R5cGVvZjIodmFsdWUpO3JldHVybiEhdmFsdWUmJih0eXBlPT0nb2JqZWN0J3x8dHlwZT09J2Z1bmN0aW9uJyk7fS8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAgICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSA0LjAuMFxuICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5pc09iamVjdExpa2Uoe30pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICpcbiAgICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqL2Z1bmN0aW9uIGlzT2JqZWN0TGlrZSQyKHZhbHVlKXtyZXR1cm4hIXZhbHVlJiZfdHlwZW9mMih2YWx1ZSk9PSdvYmplY3QnO30vKipcbiAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAqXG4gICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gICAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAc2luY2UgMC4xLjBcbiAgICogQG1lbWJlck9mIF9cbiAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICogICB0aGlzLmEgPSAxO1xuICAgKiAgIHRoaXMuYiA9IDI7XG4gICAqIH1cbiAgICpcbiAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICpcbiAgICogXy5rZXlzKG5ldyBGb28pO1xuICAgKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAqXG4gICAqIF8ua2V5cygnaGknKTtcbiAgICogLy8gPT4gWycwJywgJzEnXVxuICAgKi9mdW5jdGlvbiBrZXlzKG9iamVjdCl7cmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCk/YXJyYXlMaWtlS2V5cyhvYmplY3QpOmJhc2VLZXlzKG9iamVjdCk7fS8qKlxuICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgKlxuICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAc2luY2UgMC4xLjBcbiAgICogQG1lbWJlck9mIF9cbiAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAqICAgdGhpcy5hID0gMTtcbiAgICogICB0aGlzLmIgPSAyO1xuICAgKiB9XG4gICAqXG4gICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAqXG4gICAqIF8udmFsdWVzKG5ldyBGb28pO1xuICAgKiAvLyA9PiBbMSwgMl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICpcbiAgICogXy52YWx1ZXMoJ2hpJyk7XG4gICAqIC8vID0+IFsnaCcsICdpJ11cbiAgICovZnVuY3Rpb24gdmFsdWVzKG9iamVjdCl7cmV0dXJuIG9iamVjdD9iYXNlVmFsdWVzKG9iamVjdCxrZXlzKG9iamVjdCkpOltdO312YXIgbG9kYXNoX3ZhbHVlcz12YWx1ZXM7dmFyIGlzTWltZXR5cGU9ZnVuY3Rpb24gaXNNaW1ldHlwZShzdHIpe3JldHVybiBzdHIuaW5kZXhPZignLycpIT09LTE7fTt2YXIgbWF0Y2hlc01pbWV0eXBlPWZ1bmN0aW9uIG1hdGNoZXNNaW1ldHlwZShmaWxlRGVmaW5pdGlvbixzaW5nbGVBY2NlcHRPcHRpb24pe2lmKGZpbGVEZWZpbml0aW9uLm1pbWV0eXBlJiZzaW5nbGVBY2NlcHRPcHRpb249PT0naW1hZ2UvKicpe3JldHVybiBmaWxlRGVmaW5pdGlvbi5taW1ldHlwZS5pbmRleE9mKCdpbWFnZS8nKSE9PS0xO31pZihmaWxlRGVmaW5pdGlvbi5taW1ldHlwZSYmc2luZ2xlQWNjZXB0T3B0aW9uPT09J3ZpZGVvLyonKXtyZXR1cm4gZmlsZURlZmluaXRpb24ubWltZXR5cGUuaW5kZXhPZigndmlkZW8vJykhPT0tMTt9aWYoZmlsZURlZmluaXRpb24ubWltZXR5cGUmJnNpbmdsZUFjY2VwdE9wdGlvbj09PSdhdWRpby8qJyl7cmV0dXJuIGZpbGVEZWZpbml0aW9uLm1pbWV0eXBlLmluZGV4T2YoJ2F1ZGlvLycpIT09LTE7fWlmKGZpbGVEZWZpbml0aW9uLm1pbWV0eXBlJiZzaW5nbGVBY2NlcHRPcHRpb249PT0nYXBwbGljYXRpb24vKicpe3JldHVybiBmaWxlRGVmaW5pdGlvbi5taW1ldHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi8nKSE9PS0xO31pZihmaWxlRGVmaW5pdGlvbi5taW1ldHlwZSYmc2luZ2xlQWNjZXB0T3B0aW9uPT09J3RleHQvKicpe3JldHVybiBmaWxlRGVmaW5pdGlvbi5taW1ldHlwZS5pbmRleE9mKCd0ZXh0LycpIT09LTE7fXJldHVybiBmaWxlRGVmaW5pdGlvbi5taW1ldHlwZT09PXNpbmdsZUFjY2VwdE9wdGlvbjt9O3ZhciBleHRyYWN0RXh0ZW5zaW9uPWZ1bmN0aW9uIGV4dHJhY3RFeHRlbnNpb24oZmlsZW5hbWUpe3ZhciBtYXRjaD0vXFwuXFx3KyQvLmV4ZWMoZmlsZW5hbWUpO3JldHVybiBtYXRjaCYmbWF0Y2gubGVuZ3RoJiZtYXRjaFswXTt9O3ZhciBub3JtYWxpemVFeHRlbnNpb249ZnVuY3Rpb24gbm9ybWFsaXplRXh0ZW5zaW9uKGV4dCl7cmV0dXJuIGV4dC5yZXBsYWNlKCcuJywnJykudG9Mb3dlckNhc2UoKTt9O3ZhciBtYXRjaGVzRXh0ZW5zaW9uPWZ1bmN0aW9uIG1hdGNoZXNFeHRlbnNpb24oZmlsZURlZmluaXRpb24sc2luZ2xlQWNjZXB0T3B0aW9uKXt2YXIgZXh0PWV4dHJhY3RFeHRlbnNpb24oZmlsZURlZmluaXRpb24ubmFtZSl8fCcnO3ZhciBmaWxlRXh0PW5vcm1hbGl6ZUV4dGVuc2lvbihleHQpO3ZhciBhY2NlcHRFeHQ9bm9ybWFsaXplRXh0ZW5zaW9uKHNpbmdsZUFjY2VwdE9wdGlvbik7cmV0dXJuIGZpbGVFeHQ9PT1hY2NlcHRFeHQ7fTt2YXIgY2FuQWNjZXB0VGhpc0ZpbGU9ZnVuY3Rpb24gY2FuQWNjZXB0VGhpc0ZpbGUoZmlsZURlZmluaXRpb24sYWNjZXB0KXtpZihhY2NlcHQ9PT11bmRlZmluZWQpe3JldHVybiB0cnVlO31yZXR1cm4gYWNjZXB0LnNvbWUoZnVuY3Rpb24oc2luZ2xlQWNjZXB0T3B0aW9uKXtpZihpc01pbWV0eXBlKHNpbmdsZUFjY2VwdE9wdGlvbikpe3JldHVybiBtYXRjaGVzTWltZXR5cGUoZmlsZURlZmluaXRpb24sc2luZ2xlQWNjZXB0T3B0aW9uKTt9cmV0dXJuIG1hdGNoZXNFeHRlbnNpb24oZmlsZURlZmluaXRpb24sc2luZ2xlQWNjZXB0T3B0aW9uKTt9KTt9Oy8vIEFsbCBkYXRhIHBhc3NlZCB0byBvdXRzaWRlIHdvcmxkIHZpYSBjYWxsYmFja3MgSEFWRSBUTyBiZSBwcm9jZXNzZWQgYnkgb25lXG4vLyBvZiB0aG9zZSBmdW5jdGlvbnMuIFRoaXMgZW5zdXJlcyBubyBpbnRlcm5hbCBkYXRhIHdpbGwgbGVhayBvdXRzaWRlLCBhbmRcbi8vIHRoYXQgYWxsIG9iamVjdHMgYXJlIGNsb25lZCBzbyB1c2VycyBjYW4ndCBjYXVzZSBvdXIgYXBwIHRvIGNyYXNoIGJ5XG4vLyBjaGFuZ2luZyBzb21lIGZpZWxkcyBpbiBvYmplY3QgcGFzc2VkIHRvIHRoZW0uXG52YXIgY29udmVydEZpbGVGb3JPdXRzaWRlV29ybGQ9ZnVuY3Rpb24gY29udmVydEZpbGVGb3JPdXRzaWRlV29ybGQoZixfcmVmMil7dmFyIGV4cG9zZU9yaWdpbmFsRmlsZT1fcmVmMi5leHBvc2VPcmlnaW5hbEZpbGU7dmFyIGZpbGU9e2ZpbGVuYW1lOmYubmFtZSxoYW5kbGU6Zi5oYW5kbGUsbWltZXR5cGU6Zi5taW1ldHlwZXx8Zi50eXBlLG9yaWdpbmFsUGF0aDpmLm9yaWdpbmFsUGF0aHx8Zi5wYXRoLHNpemU6Zi5zaXplLHNvdXJjZTpmLnNvdXJjZSx1cmw6Zi51cmwsdXBsb2FkSWQ6Zi51cGxvYWRJZH07aWYoZi5vcmlnaW5hbEZpbGUpe2lmKGV4cG9zZU9yaWdpbmFsRmlsZSl7ZmlsZS5vcmlnaW5hbEZpbGU9Zi5vcmlnaW5hbEZpbGU7fWVsc2V7ZmlsZS5vcmlnaW5hbEZpbGU9e25hbWU6Zi5vcmlnaW5hbEZpbGUubmFtZSx0eXBlOmYub3JpZ2luYWxGaWxlLnR5cGUsc2l6ZTpmLm9yaWdpbmFsRmlsZS5zaXplfTt9fWlmKGYuc3RhdHVzKWZpbGUuc3RhdHVzPWYuc3RhdHVzO2lmKGYua2V5KWZpbGUua2V5PWYua2V5O2lmKGYuY29udGFpbmVyKWZpbGUuY29udGFpbmVyPWYuY29udGFpbmVyO2lmKGYuY3JvcERhdGEpZmlsZS5jcm9wcGVkPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZi5jcm9wRGF0YSkpO2lmKGYucm90YXRlZClmaWxlLnJvdGF0ZWQ9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShmLnJvdGF0ZWQpKTtpZihmLndvcmtmbG93cylmaWxlLndvcmtmbG93cz1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGYud29ya2Zsb3dzKSk7cmV0dXJuIGZpbGU7fTt2YXIgY29udmVydEZpbGVMaXN0Rm9yT3V0c2lkZVdvcmxkPWZ1bmN0aW9uIGNvbnZlcnRGaWxlTGlzdEZvck91dHNpZGVXb3JsZChsaXN0LGdldHRlcnMpe3JldHVybiBsaXN0Lm1hcChmdW5jdGlvbihmaWxlKXtyZXR1cm4gY29udmVydEZpbGVGb3JPdXRzaWRlV29ybGQoZmlsZSxnZXR0ZXJzKTt9KTt9O3ZhciByZWFkYWJsZVNpemU9ZnVuY3Rpb24gcmVhZGFibGVTaXplKGJ5dGVzKXtpZihieXRlcz09PTApe3JldHVybicwLjAwQic7fXZhciBlPU1hdGguZmxvb3IoTWF0aC5sb2coYnl0ZXMpL01hdGgubG9nKDEwMjQpKTtyZXR1cm5cIlwiLmNvbmNhdCgoYnl0ZXMvTWF0aC5wb3coMTAyNCxlKSkudG9GaXhlZCgyKSxcIiBcIikuY29uY2F0KCcgS01HVFAnLmNoYXJBdChlKSxcIkJcIik7fTt2YXIgZGlzcGxheU5hbWU9ZnVuY3Rpb24gZGlzcGxheU5hbWUobm9ybWFsaXplZEZpbGUpe2lmKG5vcm1hbGl6ZWRGaWxlLm5hbWUubGVuZ3RoPDQ1KXtyZXR1cm4gbm9ybWFsaXplZEZpbGUubmFtZTt9dmFyIGZpbGVTcGxpdD1ub3JtYWxpemVkRmlsZS5uYW1lLnNwbGl0KCcuJyk7aWYoZmlsZVNwbGl0Lmxlbmd0aD09PTIpe3ZhciB0cnVuY05hbWU9XCJcIi5jb25jYXQoZmlsZVNwbGl0WzBdLnN1YnN0cmluZygwLDQyKSxcIi4uXCIpO3ZhciBmaWxlRXh0PWZpbGVTcGxpdFsxXTtyZXR1cm5cIlwiLmNvbmNhdCh0cnVuY05hbWUsXCIuXCIpLmNvbmNhdChmaWxlRXh0KTt9aWYoZmlsZVNwbGl0Lmxlbmd0aD4yKXt2YXIgX3RydW5jTmFtZT1cIlwiLmNvbmNhdChub3JtYWxpemVkRmlsZS5uYW1lLnN1YnN0cmluZygwLDQyKSxcIi4uXCIpO3ZhciBfZmlsZUV4dD1maWxlU3BsaXRbZmlsZVNwbGl0Lmxlbmd0aC0xXTtyZXR1cm5cIlwiLmNvbmNhdChfdHJ1bmNOYW1lLFwiLlwiKS5jb25jYXQoX2ZpbGVFeHQpO31yZXR1cm5cIlwiLmNvbmNhdChub3JtYWxpemVkRmlsZS5uYW1lLnN1YnN0cmluZygwLDQyKSxcIi4uLlwiKTt9O3ZhciBhcj17Ly8gQWN0aW9uc1xuVXBsb2FkOifYqtit2YXZitmEJywnVXBsb2FkIG1vcmUnOifYqtit2YXZitmEINin2YTZhdiy2YrYrycsJ0Rlc2VsZWN0IEFsbCc6J9il2YTYutin2KEg2KrYrdiv2YrYryDYp9mE2YPZhCcsJ1ZpZXcvRWRpdCBTZWxlY3RlZCc6J9i02KfZh9ivIC8g2YLZhSDYqNiq2K3YsdmK2LEg2YXYpyDYqtmFINin2K7YqtmK2KfYsdmHJywnU2lnbiBPdXQnOifYqtiz2KzZitmEINin2YTYrtix2YjYrCcsLy8gU291cmNlIExhYmVsc1xuJ015IERldmljZSc6J9is2YfYp9iy2YonLCdXZWIgU2VhcmNoJzon2KfZhNio2K3YqyDZgdmKINi02KjZg9ipINin2YTZiNmK2KgnLCdUYWtlIFBob3RvJzon2KXZhNiq2YLYtyDYtdmI2LHYqScsJ0xpbmsgKFVSTCknOifYsdin2KjYtyDYudmG2YjYp9mGINin2YTZhdmI2YLYuSDYp9mE2KfZhNmD2KrYsdmI2YbZiicsJ1JlY29yZCBWaWRlbyc6J9iq2LPYrNmK2YQg2YHZitiv2YrZiCcsJ1JlY29yZCBBdWRpbyc6J9iq2LPYrNmK2YQg2LXZiNiqJywvLyBDdXN0b20gU291cmNlXG4nQ3VzdG9tIFNvdXJjZSc6J9mF2LXYr9ixINmF2K7Ytdi1JywvLyBGb290ZXIgVGV4dFxuQWRkOifZgtmFINio2KXYttin2YHYqScsJ21vcmUgZmlsZSc6J9in2YTZhdiy2YrYryDZhdmGINin2YTZhdmE2YHYp9iqJywnbW9yZSBmaWxlcyc6J9mF2YTZgdin2Kog2KPYrtix2YknLC8vIENsb3VkXG4nQ29ubmVjdCB7cHJvdmlkZXJOYW1lfSc6J9mC2YUg2KjYqtmI2LXZitmEIHtwcm92aWRlck5hbWV9JywnU2VsZWN0IEZpbGVzIGZyb20ge3Byb3ZpZGVyTmFtZX0nOifYrdiv2K8g2KfZhNmF2YTZgdin2Kog2YXZhiB7cHJvdmlkZXJOYW1lfScsJ1lvdSBuZWVkIHRvIGF1dGhlbnRpY2F0ZSB3aXRoIHtwcm92aWRlck5hbWV9Lic6J9iq2K3Yqtin2Kwg2KXZhNmJINin2YTZhdi12KfYr9mC2Kkg2YXYuSB7cHJvdmlkZXJOYW1lfS4nLCdBIG5ldyBwYWdlIHdpbGwgb3BlbiB0byBjb25uZWN0IHlvdXIgYWNjb3VudC4nOicu2LPZitiq2YUg2YHYqtitINi12YHYrdipINis2K/Zitiv2Kkg2YTZhNil2KrYtdin2YQg2KjYrdiz2KfYqNmDJywnV2Ugb25seSBleHRyYWN0IGltYWdlcyBhbmQgbmV2ZXIgbW9kaWZ5IG9yIGRlbGV0ZSB0aGVtLic6Jy7ZhtmC2YjZhSDZgdmC2Lcg2KjYpdiz2KrYrtix2KfYrCDYp9mE2LXZiNixINmI2YTZhiDZhtmC2YjZhSDYqNin2YTYqti52K/ZitmEINij2Ygg2KfZhNit2LDZgScsJ1RvIGRpc2Nvbm5lY3QgZnJvbSB7cHJvdmlkZXJOYW1lfSBjbGljayBcIlNpZ24gb3V0XCIgYnV0dG9uIGluIHRoZSBtZW51Lic6J9mE2YLYt9i5INin2YTYp9iq2LXYp9mEINio2YAge3Byb3ZpZGVyTmFtZX0g2Iwg2KfZhtmC2LEg2YHZiNmCINin2YTYstixIFwi2KrYs9is2YrZhCDYp9mE2K7YsdmI2KxcIiDZgdmKINin2YTZgtin2KbZhdipLicsJ1NpZ24gaW4gd2l0aCBHb29nbGUnOifYp9mE2K/YrtmI2YQg2YXYuSDYrNmI2KzZhCcsJ0dvIGJhY2snOifYudivJywnVGhpcyBmb2xkZXIgaXMgZW1wdHkuJzonRGllc2VyIE9yZG5lciBpc3QgbGVlci4nLC8vIFN1bW1hcnlcbkZpbGVzOifZhdmE2YHYp9iqJyxJbWFnZXM6J9i12YjYsScsVXBsb2FkZWQ6J9iq2YUg2KfZhNix2YHYuSAvINin2YTYqtit2YXZitmEJyxVcGxvYWRpbmc6J9mK2KrZhSDYp9mE2LHZgdi5IC8g2KfZhNiq2K3ZhdmK2YQnLENvbXBsZXRlZDon2KrZhdiqINin2YTYudmF2YTZitipJyxGaWx0ZXI6J9mC2YUg2KjYqti12YHZitipJywnQ3JvcHBlZCBJbWFnZXMnOifYp9mE2LXZiNixINin2YTZhdmC2LXZiNi12KknLCdFZGl0ZWQgSW1hZ2VzJzon2KfZhNi12YjYsSDYp9mE2YXYrdix2LHYqScsJ1NlbGVjdGVkIEZpbGVzJzon2KfZhNmF2YTZgdin2Kog2KfZhNmF2K7Yqtin2LHYqScsJ0Nyb3AgaXMgcmVxdWlyZWQgb24gaW1hZ2VzJzon2YXYt9mE2YjYqCDYp9mE2YXYrdin2LXZitmEINi52YTZiSDYp9mE2LXZiNixJywvLyBUcmFuc2Zvcm1cbkNyb3A6J9mC2YUg2KjYpdmC2KrYtdin2LUnLENpcmNsZTon2YLZhSDYqNil2YLYqti12KfYtSDYp9mE2LXZiNix2Kkg2KjYtNmD2YQg2K/Yp9im2LHZiiAvINmC2LfYuSDYr9in2KbYsdmKJyxSb3RhdGU6J9mC2YUg2KjYqtiv2YjZitixJyxNYXNrOifZgtmFINio2K3YrNioJyxSZXZlcnQ6J9iq2LHYp9is2LknLEVkaXQ6J9mC2YUg2KjYqtit2LHZitixJyxSZXNldDon2KXYudivINi22KjYtycsRG9uZTon2KXYp9mG2KrZh9mJJyxTYXZlOifYrdmB2LgnLE5leHQ6J9in2YTYqtin2YTZiScsJ0VkaXQgSW1hZ2UnOifZgtmFINio2KrYrdix2YrYsSDYp9mE2LXZiNix2KknLCdUaGlzIGltYWdlIGNhbm5vdCBiZSBlZGl0ZWQnOifZhNinINmK2YXZg9mGINiq2K3YsdmK2LEg2YfYsNmHINin2YTYtdmI2LHYqScsLy8gUmV0cnkgbWVzc2FnaW5nXG4nQ29ubmVjdGlvbiBMb3N0Jzon2KrZhSDZgti32Lkg2KfZhNil2KrYtdin2YQnLCdGYWlsZWQgV2hpbGUgVXBsb2FkaW5nJzon2K3YtdmEINiu2LfYoyDYo9ir2YbYp9ihINin2YTYqtit2YXZitmEJywnUmV0cnlpbmcgaW4nOifYs9mK2KrZhSDYpdi52KfYr9ipINin2YTZhdit2KfZiNmE2Kkg2KjYudivJywnVHJ5IGFnYWluJzon2K3Yp9mI2YQg2YXYsdipINij2K7YsdmJJywnVHJ5IG5vdyc6J9ij2LnYryDYp9mE2YXYrdin2YjZhNipJywvLyBMb2NhbCBGaWxlIFNvdXJjZVxuJ0RyYWcgYW5kIERyb3AsIENvcHkgYW5kIFBhc3RlIEZpbGVzJzon2LPYrdioINmI2KXYs9mC2KfYtyDYp9mE2YXZhNmB2KfYqiDYjCDZhtiz2K4g2YjZhNi12YIg2KfZhNmF2YTZgdin2KonLCdvciBEcmFnIGFuZCBEcm9wLCBDb3B5IGFuZCBQYXN0ZSBGaWxlcyc6J9ij2Ygg2KXYs9it2Kgg2Ygg2KPYqtix2YPYjCDYpdmG2LPYriDZiCDYo9mE2LXZgiDYp9mE2YXZhNmB2KfYqicsJ1NlbGVjdCBGaWxlcyB0byBVcGxvYWQnOifYp9iu2KrYsSDYp9mE2YXZhNmB2KfYqiDZhNmE2KrYrdmF2YrZhCcsJ1NlbGVjdCBGcm9tJzon2KXYrtiq2LEg2YXZhicsJ0Ryb3AgeW91ciBmaWxlcyBhbnl3aGVyZSc6J9il2LPZgtin2Lcg2KfZhNmF2YTZgdin2Kog2KfZhNiu2KfYtdipINio2YMg2YHZiiDYo9mKINmF2YPYp9mGJywvLyBJbnB1dCBwbGFjZWhvbGRlcnNcbidFbnRlciBhIFVSTCc6J1VSTCDYo9iv2K7ZhCcsJ1NlYXJjaCBpbWFnZXMnOifYpdio2K3YqyDYudmGINin2YTYtdmI2LEnLC8vIFdlYmNhbSBTb3VyY2VcbidXZWJjYW0gRGlzYWJsZWQnOifZg9in2YXZitix2Kcg2KfZhNmI2YrYqCDZhdi52LfZhNipJywnV2ViY2FtIE5vdCBTdXBwb3J0ZWQnOifZg9in2YXZitix2Kcg2KfZhNmI2YrYqCDYutmK2LEg2YXYr9i52YXYqScsJ1BsZWFzZSBlbmFibGUgeW91ciB3ZWJjYW0gdG8gdGFrZSBhIHBob3RvLic6J9in2YTYsdis2KfYoSDYqtmB2YrZhCDZg9in2YXZitix2Kcg2KfZhNmI2YrYqCDZhNij2K7YsCDYtdmI2LHYqScsJ1lvdXIgY3VycmVudCBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgd2ViY2FtIGZ1bmN0aW9uYWxpdHkuJzon2YXYqti12YHYrSDYp9mE2YjZitioINin2YTZhdiz2KrYrtiv2YUg2K3Yp9mE2YrYpyDZhNinINmK2K/YudmFINiu2KfYtdmK2Kkg2YPYp9mF2YrYsdinINin2YTZiNmK2KgnLCdXZSBzdWdnZXN0IHVzaW5nIENocm9tZSBvciBGaXJlZm94Lic6J0ZpcmVmb3gg2KPZiCBDaHJvbWUg2YbZgtiq2LHYrSDYp9iz2KrYrtiv2KfZhSDZhdiq2LXZgditJywvLyBFcnJvciBOb3RpZmljYXRpb25zXG4nRmlsZSB7ZGlzcGxheU5hbWV9IGlzIG5vdCBhbiBhY2NlcHRlZCBmaWxlIHR5cGUuIFRoZSBhY2NlcHRlZCBmaWxlIHR5cGVzIGFyZSB7dHlwZXN9Jzone3R5cGVzfSDZhNmK2LMg2YXZhiDYo9mG2YjYp9i5INin2YTZhdmE2YHYp9iqINin2YTZhdmC2KjZiNmE2Kkg2Iwg2KPZhtmI2KfYuSDYp9mE2YXZhNmB2KfYqiDYp9mE2YXZgtio2YjZhNipINmH2Yoge2Rpc3BsYXlOYW1lfSDZhdmE2YEnLCdGaWxlIHtkaXNwbGF5TmFtZX0gaXMgdG9vIGJpZy4gVGhlIGFjY2VwdGVkIGZpbGUgc2l6ZSBpcyBsZXNzIHRoYW4ge3JvdW5kRmlsZVNpemV9Jzone3JvdW5kRmlsZVNpemV9INij2YPYqNixINmF2YYg2KfZhNit2K8g2KfZhNmF2LPZhdmI2K0g2Iwg2KfZhNit2K8g2KfZhNmF2LPZhdmI2K0g2KPZgtmEINmF2YZ7ZGlzcGxheU5hbWV9INin2YTZhdmE2YEnLCdPdXIgZmlsZSB1cGxvYWQgbGltaXQgaXMge21heEZpbGVzfSB7ZmlsZXNUZXh0fSc6J3ttYXhGaWxlc30ge2ZpbGVzVGV4dH0g2KfZhNit2K8g2KfZhNij2LnZhNmJINin2YTZhdiz2YXZiNitINio2Ycg2YTYqtit2YXZitmEINin2YTZhdmE2YHYp9iqINmH2YgnLCdObyBzZWFyY2ggcmVzdWx0cyBmb3VuZCBmb3IgXCJ7c2VhcmNofVwiJzon2YTZhSDZitiq2YUg2KfZhNi52KvZiNixINi52YTZiSDZhtiq2KfYptisINio2K3YqyDZhNmAIFwie3NlYXJjaH1cIicsJ0FuIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgdHJ5IGFnYWluLic6J9it2K/YqyDYrti32KMuINit2KfZiNmEINmF2LHYqSDYp9iu2LHZiS4nLCdGaWxlcyBbe2Rpc3BsYXlOYW1lfV0gYXJlIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMge21heFNpemV9Jzon2KfZhNmF2YTZgdin2KogW3tkaXNwbGF5TmFtZX1dINmD2KjZitix2Kkg2KzYr9mL2KcuINit2KzZhSDYp9mE2YXZhNmBINin2YTZhdmC2KjZiNmEINmH2Ygge21heFNpemV9JywvLyBPdGhlciBVSSBsYWJlbHMgYW5kIHRpdGxlc1xuJ0NsaWNrIGhlcmUgb3IgaGl0IEVTQyB0byBjbG9zZSBwaWNrZXInOifYp9mG2YLYsSDZh9mG2Kcg2KPZiCDYp9i22LrYtyDYudmE2YkgRVNDINmE2YTYpdi62YTYp9mCJ307dmFyIGNhPXsvLyBBY3Rpb25zXG5VcGxvYWQ6J0NhcnJlZ2EnLCdVcGxvYWQgbW9yZSc6J0NhcnJlZ2FyIG1haXMnLCdEZXNlbGVjdCBBbGwnOidEZXNmw6lzIHRvdGEgbGEgc2VsZWNjacOzJywnVmlldy9FZGl0IFNlbGVjdGVkJzonVmlzdWFsaXR6YS9FZGl0YSBsZXMgc2VsZWNjaW9uYWRlcycsJ1NpZ24gT3V0JzonU3VydCcsLy8gU291cmNlIExhYmVsc1xuJ015IERldmljZSc6J0VsIG1ldSBkaXNwb3NpdGl1JywnV2ViIFNlYXJjaCc6J0NlcmNhIGFsIHdlYicsJ1Rha2UgUGhvdG8nOidGZXMgdW5hIGZvdG8nLCdMaW5rIChVUkwpJzonVVJMJywnUmVjb3JkIFZpZGVvJzonR3JhdmEgdsOtZGVvJywnUmVjb3JkIEF1ZGlvJzonR3JhdmEgbFxcJ8OgdWRpbycsLy8gQ3VzdG9tIFNvdXJjZVxuJ0N1c3RvbSBTb3VyY2UnOidPcmlnZW4gcGVyc29uYWxpdHphZGEnLC8vIEZvb3RlciBUZXh0XG5BZGQ6J0FmZWdlaXgnLCdtb3JlIGZpbGUnOidtw6lzIGFyeGl1JywnbW9yZSBmaWxlcyc6J23DqXMgYXJ4aXVzJywvLyBDbG91ZFxuJ0Nvbm5lY3Qge3Byb3ZpZGVyTmFtZX0nOidDb25uZWN0ZXUge3Byb3ZpZGVyTmFtZX0nLCdTZWxlY3QgRmlsZXMgZnJvbSB7cHJvdmlkZXJOYW1lfSc6J1NlbGVjY2lvbmV1IEZpdHhlcnMgZGUge3Byb3ZpZGVyTmFtZX0nLCdZb3UgbmVlZCB0byBhdXRoZW50aWNhdGUgd2l0aCB7cHJvdmlkZXJOYW1lfS4nOidIZXUgZOKAmWF1dGVudGljYXItdm9zIGFtYiB7cHJvdmlkZXJOYW1lfS4nLCdBIG5ldyBwYWdlIHdpbGwgb3BlbiB0byBjb25uZWN0IHlvdXIgYWNjb3VudC4nOidTXFwnb2JyaXLDoCB1bmEgbm92YSBww6BnaW5hIHBlciBhIGNvbm5lY3Rhci10ZSBhbCB0ZXUgY29tcHRlJywnV2Ugb25seSBleHRyYWN0IGltYWdlcyBhbmQgbmV2ZXIgbW9kaWZ5IG9yIGRlbGV0ZSB0aGVtLic6J1RhbiBzb2xzIGFnYWZlbSBsZXMgaW1hdGdlcywgcGVyw7IgbWFpIGxlcyBtb2RpZmlxdWVtIG8gZWxpbWluZW0uJywnVG8gZGlzY29ubmVjdCBmcm9tIHtwcm92aWRlck5hbWV9IGNsaWNrIFwiU2lnbiBvdXRcIiBidXR0b24gaW4gdGhlIG1lbnUuJzonUGVyIGRlc2Nvbm5lY3Rhci12b3MgZGUge3Byb3ZpZGVyTmFtZX0sIGZldSBjbGljIGFsIGJvdMOzIFwiU3VydFwiIGFsIG1lbsO6LicsJ1NpZ24gaW4gd2l0aCBHb29nbGUnOidJbmljaWV1IGxhIHNlc3Npw7MgYW1iIEdvb2dsZScsJ0dvIGJhY2snOidUb3JuYScsJ1RoaXMgZm9sZGVyIGlzIGVtcHR5Lic6J0RpZXNlciBPcmRuZXIgaXN0IGxlZXIuJywvLyBTdW1tYXJ5XG5GaWxlczonQXJ4aXVzJyxJbWFnZXM6J0ltYXRnZXMnLFVwbG9hZGVkOidDYXJyZWdhZGEnLFVwbG9hZGluZzonQ2FycmVnYW50JyxDb21wbGV0ZWQ6J0ZpbmFsaXR6YXQnLEZpbHRlcjonRmlsdHJhJywnQ3JvcHBlZCBJbWFnZXMnOidJbWF0Z2VzIGVzY2Fww6dhZGVzJywnRWRpdGVkIEltYWdlcyc6J0ltYXRnZXMgZWRpdGFkZXMnLCdTZWxlY3RlZCBGaWxlcyc6J0FyeGl1cyBzZWxlY2Npb25hdHMnLCdDcm9wIGlzIHJlcXVpcmVkIG9uIGltYWdlcyc6J0VzIHJlcXVlcmVpeCB1biBjdWx0aXUgYSBsZXMgaW1hdGdlcycsLy8gVHJhbnNmb3JtXG5Dcm9wOidFc2NhcMOnYScsQ2lyY2xlOidDZXJjbGUnLFJvdGF0ZTonR2lyYScsTWFzazonRW1tYXNjYXJhJyxSZXZlcnQ6J1JldmVydGVpeCcsRWRpdDonRWRpdGEnLFJlc2V0OidSZWluaWNpYScsRG9uZTonRmV0JyxTYXZlOidHdWFyZGFyJyxOZXh0OidQcsOyeGltJywnRWRpdCBJbWFnZSc6J0VkaXRhIGxhIGltYXRnZScsJ1RoaXMgaW1hZ2UgY2Fubm90IGJlIGVkaXRlZCc6J0FxdWVzdGEgaW1hdGdlIG5vIGVzIHBvdCBlZGl0YXInLC8vIFJldHJ5IG1lc3NhZ2luZ1xuJ0Nvbm5lY3Rpb24gTG9zdCc6J1NcXCdoYSBwZXJkdXQgbGEgY29ubmV4acOzJywnRmFpbGVkIFdoaWxlIFVwbG9hZGluZyc6J0Vycm9yIGRlIGPDoHJyZWdhJywnUmV0cnlpbmcgaW4nOidSZWludGVudGFudCBlbicsJ1RyeSBhZ2Fpbic6J1Rvcm5hLWhvIGEgaW50ZW50YXInLCdUcnkgbm93JzonUHJvdmEtaG8gYXJhJywvLyBMb2NhbCBGaWxlIFNvdXJjZVxuJ0RyYWcgYW5kIERyb3AsIENvcHkgYW5kIFBhc3RlIEZpbGVzJzonQXJyb3NzZWd1ZXUgaSBkZWl4ZXUgYW5hciBlbHMgZml0eGVycywgY29waWV1IGkgZW5nYW54ZXUgZml0eGVycycsJ29yIERyYWcgYW5kIERyb3AsIENvcHkgYW5kIFBhc3RlIEZpbGVzJzonbyBhcnJvc2VnYSwgY29waWEgaSBlbmdhbnhhIGVscyBhcnhpdXMnLCdTZWxlY3QgRmlsZXMgdG8gVXBsb2FkJzonU2VsZWNjaW9uYSBlbHMgYXJ4aXVzIGEgY2FycmVnYXInLCdTZWxlY3QgRnJvbSc6J1NlbGVjY2lvbmEgZGUnLCdEcm9wIHlvdXIgZmlsZXMgYW55d2hlcmUnOidEZWl4ZXUgYW5hciBlbHMgZml0eGVycyBlbiBxdWFsc2V2b2wgbGxvYycsLy8gSW5wdXQgcGxhY2Vob2xkZXJzXG4nRW50ZXIgYSBVUkwnOidJbnRyb2R1w691IHVuIFVSTCcsJ1NlYXJjaCBpbWFnZXMnOidDZXJjYSBpbWF0Z2VzJywvLyBXZWJjYW0gU291cmNlXG4nV2ViY2FtIERpc2FibGVkJzonV2ViY2FtIGluaGFiaWxpdGFkYScsJ1dlYmNhbSBOb3QgU3VwcG9ydGVkJzonV2ViY2FtIG5vIGFkbWVzYScsJ1BsZWFzZSBlbmFibGUgeW91ciB3ZWJjYW0gdG8gdGFrZSBhIHBob3RvLic6J1Npc3BsYXUsIGhhYmlsaXRhIGxhIHdlYmNhbSBwZXIgYSBmZXIgbGEgZm90bycsJ1lvdXIgY3VycmVudCBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgd2ViY2FtIGZ1bmN0aW9uYWxpdHkuJzonRWwgdGV1IG5hdmVnYWRvciBubyBhZG1ldCBsYSBmdW5jaW9uYWxpdGF0IGRlIHdlYmNhbScsJ1dlIHN1Z2dlc3QgdXNpbmcgQ2hyb21lIG9yIEZpcmVmb3guJzonUmVjb21hbmVtIHV0aWxpdHphciBDaHJvbWUgbyBGaXJlZm94LicsLy8gRXJyb3IgTm90aWZpY2F0aW9uc1xuJ0ZpbGUge2Rpc3BsYXlOYW1lfSBpcyBub3QgYW4gYWNjZXB0ZWQgZmlsZSB0eXBlLiBUaGUgYWNjZXB0ZWQgZmlsZSB0eXBlcyBhcmUge3R5cGVzfSc6J0xcXCdhcnhpdSB7ZGlzcGxheU5hbWV9IG5vIHTDqSB1biBmb3JtYXQgdsOgbGlkLiBFbHMgZm9ybWF0cyBhY2NlcHRhdHMgc8OzbiB7dHlwZXN9JywnRmlsZSB7ZGlzcGxheU5hbWV9IGlzIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMgbGVzcyB0aGFuIHtyb3VuZEZpbGVTaXplfSc6J0xcXCdhcnhpdSB7ZGlzcGxheU5hbWV9IMOpcyBtYXNzYSBncmFuLiBFbCB0YW1hbnkgbcOgeGltIGFjY2VwdGF0IMOpcyB7cm91bmRGaWxlU2l6ZX0nLCdPdXIgZmlsZSB1cGxvYWQgbGltaXQgaXMge21heEZpbGVzfSB7ZmlsZXNUZXh0fSc6J0VsIGzDrW1pdCBkZSBjw6BycmVnYSDDqXMge21heEZpbGVzfSB7ZmlsZXNUZXh0fScsJ05vIHNlYXJjaCByZXN1bHRzIGZvdW5kIGZvciBcIntzZWFyY2h9XCInOidObyBz4oCZaGFuIHRyb2JhdCByZXN1bHRhdHMgcGVyIGEgXCJ7c2VhcmNofVwiJywnQW4gZXJyb3Igb2NjdXJyZWQuIFBsZWFzZSB0cnkgYWdhaW4uJzonSGkgaGEgaGFndXQgdW4gZXJyb3IuIFNpdXNwbGF1IHRvcm5hLWhvIGEgcHJvdmFyLicsJ0ZpbGVzIFt7ZGlzcGxheU5hbWV9XSBhcmUgdG9vIGJpZy4gVGhlIGFjY2VwdGVkIGZpbGUgc2l6ZSBpcyB7bWF4U2l6ZX0nOidFbHMgZml0eGVycyBbe2Rpc3BsYXlOYW1lfV0gc8OzbiBtYXNzYSBncmFucy4gTGEgbWlkYSBkZWwgZml0eGVyIGFjY2VwdGFkYSDDqXMge21heFNpemV9JywvLyBPdGhlciBVSSBsYWJlbHMgYW5kIHRpdGxlc1xuJ0NsaWNrIGhlcmUgb3IgaGl0IEVTQyB0byBjbG9zZSBwaWNrZXInOidGZXUgY2xpYyBhcXXDrSBvIHByZW1ldSBFU0MgcGVyIHRhbmNhcid9O3ZhciBkYT17Ly8gQWN0aW9uc1xuVXBsb2FkOidVcGxvYWQnLCdVcGxvYWQgbW9yZSc6J1VwbG9hZCBmbGVyZScsJ0Rlc2VsZWN0IEFsbCc6J0ZyYXbDpmxnIGFsbGUnLCdWaWV3L0VkaXQgU2VsZWN0ZWQnOidWaXMvcmVkaWdlciB2YWxndGUnLCdTaWduIE91dCc6J0xvZyB1ZCcsLy8gU291cmNlIExhYmVsc1xuJ015IERldmljZSc6J01pbiBlbmhlZCcsJ1dlYiBTZWFyY2gnOidTw7hnbmluZyBww6UgaW50ZXJuZXR0ZXQnLCdUYWtlIFBob3RvJzonVGFnIGJpbGxlZGUnLCdMaW5rIChVUkwpJzonTGluayAoVVJMKScsJ1JlY29yZCBWaWRlbyc6J09wdGFnIHZpZGVvJywnUmVjb3JkIEF1ZGlvJzonT3B0YWcgbHlkJywvLyBDdXN0b20gU291cmNlXG4nQ3VzdG9tIFNvdXJjZSc6J0JydWdlcmRlZmluZXJldCBLaWxkZScsLy8gRm9vdGVyIFRleHRcbkFkZDonVGlsZsO4aicsJ21vcmUgZmlsZSc6J2ZpbCBtZXJlJywnbW9yZSBmaWxlcyc6J2ZsZXJlIGZpbGVyJywvLyBDbG91ZFxuJ0Nvbm5lY3Qge3Byb3ZpZGVyTmFtZX0nOidUaWxzbHV0IHtwcm92aWRlck5hbWV9JywnU2VsZWN0IEZpbGVzIGZyb20ge3Byb3ZpZGVyTmFtZX0nOidWw6ZsZyBmaWxlciBmcmEge3Byb3ZpZGVyTmFtZX0nLCdZb3UgbmVlZCB0byBhdXRoZW50aWNhdGUgd2l0aCB7cHJvdmlkZXJOYW1lfS4nOidEdSBza2FsIGdvZGtlbmRlIG1lZCB7cHJvdmlkZXJOYW1lfS4nLCdBIG5ldyBwYWdlIHdpbGwgb3BlbiB0byBjb25uZWN0IHlvdXIgYWNjb3VudC4nOidFbiBueSBzaWRlIHZpbCDDpWJuZSBmb3IgYXQgZm9yYmluZGUgbWVkIGRpbiBrb250bycsJ1dlIG9ubHkgZXh0cmFjdCBpbWFnZXMgYW5kIG5ldmVyIG1vZGlmeSBvciBkZWxldGUgdGhlbS4nOidWaSBoaXZlciBrdW4gYmlsbGVkZXIgb2cgbW9kaWZpY2VyZXIgZWxsZXIgc2xldHRlciBkZW0gYWxkcmlnJywnVG8gZGlzY29ubmVjdCBmcm9tIHtwcm92aWRlck5hbWV9IGNsaWNrIFwiU2lnbiBvdXRcIiBidXR0b24gaW4gdGhlIG1lbnUuJzonRm9yIGF0IGFmYnJ5ZGUgZm9yYmluZGVsc2VuIGZyYSB7cHJvdmlkZXJOYW1lfSBza2FsIGR1IGtsaWtrZSBww6Uga25hcHBlbiBcIkxvZyB1ZFwiIGkgbWVudWVuLicsJ1NpZ24gaW4gd2l0aCBHb29nbGUnOidMb2cgaW5kIG1lZCBHb29nbGUnLCdHbyBiYWNrJzonR8OlIHRpbGJhZ2UnLCdUaGlzIGZvbGRlciBpcyBlbXB0eS4nOidEaWVzZXIgT3JkbmVyIGlzdCBsZWVyLicsLy8gU3VtbWFyeVxuRmlsZXM6J0ZpbGVyJyxJbWFnZXM6J0JpbGxlZGVyJyxVcGxvYWRlZDonVXBsb2FkZWQnLFVwbG9hZGluZzonVXBsb2FkZXInLENvbXBsZXRlZDonRnVsZGbDuHJ0JyxGaWx0ZXI6J0ZpbHRyZXInLCdDcm9wcGVkIEltYWdlcyc6J0Jlc2vDpnJlZGUgYmlsbGVkZXInLCdFZGl0ZWQgSW1hZ2VzJzonUmVkaWdlcmVkZSBmaWxlcicsJ1NlbGVjdGVkIEZpbGVzJzonVmFsZ3RlIGZpbGVyJywnQ3JvcCBpcyByZXF1aXJlZCBvbiBpbWFnZXMnOidCZXNrw6ZyaW5nIGVyIHDDpWtyw6Z2ZXQnLC8vIFRyYW5zZm9ybVxuQ3JvcDonS2xpcHBlJyxDaXJjbGU6J0NpcmtlbCcsUm90YXRlOidSb3RlcmUnLE1hc2s6J0Zvcm0nLFJldmVydDonR8O4ciBvbScsRWRpdDonUmVkaWdlcicsUmVzZXQ6J051bHN0aWwnLERvbmU6J0bDpnJkaWcnLFNhdmU6J0dlbW1lJyxOZXh0OidOw6ZzdGUnLCdFZGl0IEltYWdlJzonUmVkaWdlciBiaWxsZWRlJywnVGhpcyBpbWFnZSBjYW5ub3QgYmUgZWRpdGVkJzonJywvLyBSZXRyeSBtZXNzYWdpbmdcbidDb25uZWN0aW9uIExvc3QnOidGb3JiaW5kZWxzZSB0YWJ0JywnRmFpbGVkIFdoaWxlIFVwbG9hZGluZyc6J01pc2x5a2tlZGVzIHVuZGVyIHVwbG9hZCcsJ1JldHJ5aW5nIGluJzonUHLDuHZlciBpZ2VuIG9tJywnVHJ5IGFnYWluJzonUHLDuHYgaWdlbicsJ1RyeSBub3cnOidQcsO4diBudScsLy8gTG9jYWwgRmlsZSBTb3VyY2VcbidEcmFnIGFuZCBEcm9wLCBDb3B5IGFuZCBQYXN0ZSBGaWxlcyc6J1Ryw6ZrIG9nIHNsaXAgZmlsZXIsIGtvcGllciBvZyBpbmRzw6Z0IGZpbGVyJywnb3IgRHJhZyBhbmQgRHJvcCwgQ29weSBhbmQgUGFzdGUgRmlsZXMnOidFbGxlciB0csOmayBvZyBzbGlwLCBrb3BpZXIgb2cgaW5kc8OmdCBmaWxlcicsJ1NlbGVjdCBGaWxlcyB0byBVcGxvYWQnOidWw6ZsZyBmaWxlciB0aWwgdXBsb2FkJywnU2VsZWN0IEZyb20nOidWw6ZsZyBmcmEnLCdEcm9wIHlvdXIgZmlsZXMgYW55d2hlcmUnOidEcm9wIGRpbmUgZmlsZXIgb3ZlcmFsdCcsLy8gSW5wdXQgcGxhY2Vob2xkZXJzXG4nRW50ZXIgYSBVUkwnOidTa3JpdiBlbiB3ZWJhZHJlc3NlJywnU2VhcmNoIGltYWdlcyc6J1PDuGcgYmlsbGVkZXInLC8vIFdlYmNhbSBTb3VyY2VcbidXZWJjYW0gRGlzYWJsZWQnOidXZWJrYW1lcmEgZGVha3RpdmVyZXQnLCdXZWJjYW0gTm90IFN1cHBvcnRlZCc6J1dlYmthbWVyYSB1bmRlcnN0w7h0dGVzIGlra2UnLCdQbGVhc2UgZW5hYmxlIHlvdXIgd2ViY2FtIHRvIHRha2UgYSBwaG90by4nOidBa3RpdsOpciBkaXQgd2ViY2FtIGZvciBhdCB0YWdlIGV0IGJpbGxlZGUnLCdZb3VyIGN1cnJlbnQgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHdlYmNhbSBmdW5jdGlvbmFsaXR5Lic6J0RpbiBudXbDpnJlbmRlIGJyb3dzZXIgdW5kZXJzdMO4dHRlciBpa2tlIHdlYmNhbScsJ1dlIHN1Z2dlc3QgdXNpbmcgQ2hyb21lIG9yIEZpcmVmb3guJzonVmkgZm9yZXNsw6VyIGF0IGJydWdlIENocm9tZSBlbGxlciBGaXJlZm94JywvLyBFcnJvciBOb3RpZmljYXRpb25zXG4nRmlsZSB7ZGlzcGxheU5hbWV9IGlzIG5vdCBhbiBhY2NlcHRlZCBmaWxlIHR5cGUuIFRoZSBhY2NlcHRlZCBmaWxlIHR5cGVzIGFyZSB7dHlwZXN9JzonRmlsZW4ge2Rpc3BsYXlOYW1lfSBlciBpa2tlIGkgZXQgYWNjZXB0YWJlbHQgZm9ybWF0LiBEZSBhY2NlcHRlcmVkZSBmb3JtYXRlciBlciB7dHlwZXN9JywnRmlsZSB7ZGlzcGxheU5hbWV9IGlzIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMgbGVzcyB0aGFuIHtyb3VuZEZpbGVTaXplfSc6JyBGaWxlbiB7ZGlzcGxheU5hbWV9IGVyIGZvciBzdG9yLiBEZW4gYWNjZXB0ZXJlZGUgZmlsc3TDuHJyZWxzZSBlciB7cm91bmRGaWxlU2l6ZX0nLCdPdXIgZmlsZSB1cGxvYWQgbGltaXQgaXMge21heEZpbGVzfSB7ZmlsZXNUZXh0fSc6JyBWb3JlcyBmaWxzdMO4cnJlbHNlIGVyIGJlZ3LDpm5zZXQgdGlsIHttYXhGaWxlc30ge2ZpbGVzVGV4dH0nLCdObyBzZWFyY2ggcmVzdWx0cyBmb3VuZCBmb3IgXCJ7c2VhcmNofVwiJzonSW5nZW4gc8O4Z2VyZXN1bHRhdGVyIGZ1bmRldCBmb3IgXCJ7c2VhcmNofVwiJywnQW4gZXJyb3Igb2NjdXJyZWQuIFBsZWFzZSB0cnkgYWdhaW4uJzonRW4gZmVqbCBvcHN0b2QuIFByw7h2IGlnZW4uJywnRmlsZXMgW3tkaXNwbGF5TmFtZX1dIGFyZSB0b28gYmlnLiBUaGUgYWNjZXB0ZWQgZmlsZSBzaXplIGlzIHttYXhTaXplfSc6J0ZpbGVyIFt7ZGlzcGxheU5hbWV9XSBlciBmb3Igc3RvcmUuIERlbiBhY2NlcHRlcmVkZSBmaWxzdMO4cnJlbHNlIGVyIHttYXhTaXplfScsLy8gT3RoZXIgVUkgbGFiZWxzIGFuZCB0aXRsZXNcbidDbGljayBoZXJlIG9yIGhpdCBFU0MgdG8gY2xvc2UgcGlja2VyJzonS2xpayBoZXIgZWxsZXIgdHJ5ayBFU0MgZm9yIGF0IGx1a2tlJ307dmFyIGRlPXsvLyBBY3Rpb25zXG5VcGxvYWQ6J0hvY2hsYWRlbicsJ1VwbG9hZCBtb3JlJzonTWVociBob2NobGFkZW4nLCdEZXNlbGVjdCBBbGwnOidEZWFrdGl2aWVyZW4gU2llIGFsbGUnLCdWaWV3L0VkaXQgU2VsZWN0ZWQnOidBbnplaWdlbi9CZWFyYmVpdGVuIGF1c2dld8OkaGx0JywnU2lnbiBPdXQnOidBYm1lbGRlbicsLy8gU291cmNlIExhYmVsc1xuJ015IERldmljZSc6J01laW4gR2Vyw6R0JywnV2ViIFNlYXJjaCc6J0ludGVybmV0c3VjaGUnLCdUYWtlIFBob3RvJzonRm90byBtYWNoZW4nLCdMaW5rIChVUkwpJzonVVJMLUFkcmVzc2UnLCdSZWNvcmQgVmlkZW8nOidFaW4gVmlkZW8gYXVmbmVobWVuJywnUmVjb3JkIEF1ZGlvJzonVG9uIGF1Zm5laG1lbicsLy8gQ3VzdG9tIFNvdXJjZVxuJ0N1c3RvbSBTb3VyY2UnOidCZW51dHplcmRlZmluaWVydGUgUXVlbGxlJywvLyBGb290ZXIgVGV4dFxuQWRkOidIaW56dWbDvGdlbicsJ21vcmUgZmlsZSc6J3dlaXRlcmUgRGF0ZWknLCdtb3JlIGZpbGVzJzond2VpdGVyZSBEYXRlaWVuJywvLyBDbG91ZFxuJ0Nvbm5lY3Qge3Byb3ZpZGVyTmFtZX0nOidWZXJiaW5kZW4gbWl0IHtwcm92aWRlck5hbWV9JywnU2VsZWN0IEZpbGVzIGZyb20ge3Byb3ZpZGVyTmFtZX0nOidXw6RobGVuIFNpZSBEYXRlaWVuIGF1cyB7cHJvdmlkZXJOYW1lfScsJ1lvdSBuZWVkIHRvIGF1dGhlbnRpY2F0ZSB3aXRoIHtwcm92aWRlck5hbWV9Lic6J1NpZSBtw7xzc2VuIHNpY2ggbWl0IHtwcm92aWRlck5hbWV9IGFubWVsZGVuJywnQSBuZXcgcGFnZSB3aWxsIG9wZW4gdG8gY29ubmVjdCB5b3VyIGFjY291bnQuJzonRWluZSBuZXVlIFNlaXRlIHdpcmQgZ2XDtmZmbmV0LCB1bSBJaHIgS29udG8genUgdmVyYmluZGVuJywnV2Ugb25seSBleHRyYWN0IGltYWdlcyBhbmQgbmV2ZXIgbW9kaWZ5IG9yIGRlbGV0ZSB0aGVtLic6J1dpciBleHRyYWhpZXJlbiBCaWxkZXIgbnVyIHVuZCBtb2RpZml6aWVyZW4gb2RlciBsw7ZzY2hlbiBzaWUgbmllbWFscycsJ1RvIGRpc2Nvbm5lY3QgZnJvbSB7cHJvdmlkZXJOYW1lfSBjbGljayBcIlNpZ24gb3V0XCIgYnV0dG9uIGluIHRoZSBtZW51Lic6J1VtIGRpZSBWZXJiaW5kdW5nIHp1IHtwcm92aWRlck5hbWV9IHp1IHRyZW5uZW4sIGtsaWNrZW4gU2llIGltIE1lbsO8IGF1ZiBcIkFibWVsZGVuXCIuJywnU2lnbiBpbiB3aXRoIEdvb2dsZSc6J0FubWVsZHVuZyBtaXQgR29vZ2xlJywnR28gYmFjayc6J1p1csO8Y2snLCdUaGlzIGZvbGRlciBpcyBlbXB0eS4nOidEaWVzZXIgT3JkbmVyIGlzdCBsZWVyLicsLy8gU3VtbWFyeVxuRmlsZXM6J0RhdGVpZW4nLEltYWdlczonQmlsZGVyJyxVcGxvYWRlZDonSG9jaGdlbGFkZW4nLFVwbG9hZGluZzonV2lyZCBob2NoZ2VsYWRlbicsQ29tcGxldGVkOidBYmdlc2NobG9zc2VuJyxGaWx0ZXI6J0ZpbHRlcm4nLCdDcm9wcGVkIEltYWdlcyc6J0ZyZWlnZXN0ZWxsdGUgQmlsZGVyJywnRWRpdGVkIEltYWdlcyc6J0JlYXJiZWl0ZXRlIEJpbGRlcicsJ1NlbGVjdGVkIEZpbGVzJzonQXVzZ2V3w6RobHRlbiBEYXRlaWVuJywnQ3JvcCBpcyByZXF1aXJlZCBvbiBpbWFnZXMnOidadXNjaG5laWRlbiBpc3QgZsO8ciBCaWxkZXIgZXJmb3JkZXJsaWNoJywvLyBUcmFuc2Zvcm1cbkNyb3A6J1p1c2NobmVpZGVuJyxDaXJjbGU6J0tyZWlzJyxSb3RhdGU6J1JvdGllcmVuJyxNYXNrOidWZXJkZWNrZW4nLFJldmVydDonUsO8Y2tnw6RuZ2lnJyxFZGl0OidCZWFyYmVpdGVuJyxSZXNldDonWnVyw7xjaycsRG9uZTonRmVydGlnJyxTYXZlOidTcGVpY2hlcm4nLE5leHQ6J07DpGNoc3RlcicsJ0VkaXQgSW1hZ2UnOidCaWxkIGJlYXJiZWl0ZW4nLCdUaGlzIGltYWdlIGNhbm5vdCBiZSBlZGl0ZWQnOidEaWVzZXMgQmlsZCBrYW5uIG5pY2h0IGJlYXJiZWl0ZXQgd2VyZGVuJywvLyBSZXRyeSBtZXNzYWdpbmdcbidDb25uZWN0aW9uIExvc3QnOidLZWluZSBWZXJiaW5kdW5nJywnRmFpbGVkIFdoaWxlIFVwbG9hZGluZyc6J0JlaW0gSG9jaGxhZGVuIGZlaGxnZXNjaGxhZ2VuJywnUmV0cnlpbmcgaW4nOidXaWVkZXJob2xlbiBpbicsJ1RyeSBhZ2Fpbic6J1ZlcnN1Y2ggZXMgbm9jaCBlaW5tYWwnLCdUcnkgbm93JzonVmVyc3VjaGUgZXMgamV0enQnLC8vIExvY2FsIEZpbGUgU291cmNlXG4nRHJhZyBhbmQgRHJvcCwgQ29weSBhbmQgUGFzdGUgRmlsZXMnOidEYXRlaWVuIHppZWhlbiB1bmQgYWJsZWdlbiwgRGF0ZWllbiBrb3BpZXJlbiB1bmQgZWluZsO8Z2VuJywnb3IgRHJhZyBhbmQgRHJvcCwgQ29weSBhbmQgUGFzdGUgRmlsZXMnOidvZGVyIHBlciBEcmFnJkRyb3AgZWluZsO8Z2VuJywnU2VsZWN0IEZpbGVzIHRvIFVwbG9hZCc6J0RhdGVpIGF1c3fDpGhsZW4nLCdTZWxlY3QgRnJvbSc6J1fDpGhsZW4gU2llIGF1cycsJ0Ryb3AgeW91ciBmaWxlcyBhbnl3aGVyZSc6J0xlZ2VuIFNpZSBJaHJlIERhdGVpZW4gw7xiZXJhbGwgYWInLC8vIElucHV0IHBsYWNlaG9sZGVyc1xuJ0VudGVyIGEgVVJMJzonR2ViZW4gU2llIGVpbmUgVVJMIGVpbicsJ1NlYXJjaCBpbWFnZXMnOidTdWNoZSBiaWxkZXInLC8vIFdlYmNhbSBTb3VyY2VcbidXZWJjYW0gRGlzYWJsZWQnOidXZWJjYW0gYXVzZ2VzY2hhbHRldCcsJ1dlYmNhbSBOb3QgU3VwcG9ydGVkJzonV2ViY2FtIG5pY2h0IHVudGVyc3TDvHR6dCcsJ1BsZWFzZSBlbmFibGUgeW91ciB3ZWJjYW0gdG8gdGFrZSBhIHBob3RvLic6J0JpdHRlIGFrdGl2aWVyZW4gU2llIElocmUgV2ViY2FtLCB1bSBlaW4gRm90byB6dSBtYWNoZW4nLCdZb3VyIGN1cnJlbnQgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHdlYmNhbSBmdW5jdGlvbmFsaXR5Lic6J0lociBha3R1ZWxsZXIgQnJvd3NlciB1bnRlcnN0w7x0enQga2VpbmUgV2ViY2FtLUZ1bmt0aW9uZW4uJywnV2Ugc3VnZ2VzdCB1c2luZyBDaHJvbWUgb3IgRmlyZWZveC4nOidXaXIgZW1wZmVobGVuLCBtaXQgQ2hyb21lIG9kZXIgRmlyZWZveC4nLC8vIEVycm9yIE5vdGlmaWNhdGlvbnNcbidGaWxlIHtkaXNwbGF5TmFtZX0gaXMgbm90IGFuIGFjY2VwdGVkIGZpbGUgdHlwZS4gVGhlIGFjY2VwdGVkIGZpbGUgdHlwZXMgYXJlIHt0eXBlc30nOidEYXRlaS17ZGlzcGxheU5hbWV9IGlzdCBrZWluZSBhbmVya2FubnRlIERhdGVpdHlwLiBEaWUgYWt6ZXB0aWVydGVuIERhdGVpdHlwZW4gc2luZCB7dHlwZXN9JywnRmlsZSB7ZGlzcGxheU5hbWV9IGlzIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMgbGVzcyB0aGFuIHtyb3VuZEZpbGVTaXplfSc6J3tkaXNwbGF5TmFtZX0gRGF0ZWkgaXN0IHp1IGdyb8OfLiBEaWUgYWt6ZXB0aWVydGVuIERhdGVpZ3LDtsOfZSBiZXRyw6RndCB7cm91bmRGaWxlU2l6ZX0nLCdPdXIgZmlsZSB1cGxvYWQgbGltaXQgaXMge21heEZpbGVzfSB7ZmlsZXNUZXh0fSc6J1Vuc2VyIERhdGVpZ3LDtsOfZW5saW1pdCBpc3Qge21heEZpbGVzfSB7ZmlsZXNUZXh0fScsJ05vIHNlYXJjaCByZXN1bHRzIGZvdW5kIGZvciBcIntzZWFyY2h9XCInOidLZWluZSBTdWNoZXJnZWJuaXNzZSBmw7xyIFwie3NlYXJjaH1cIiBnZWZ1bmRlbicsJ0FuIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgdHJ5IGFnYWluLic6J0VpbiBGZWhsZXIgaXN0IGF1ZmdldHJldGVuLiBCaXR0ZSB2ZXJzdWNoZSBlcyBlcm5ldXQuJywnRmlsZXMgW3tkaXNwbGF5TmFtZX1dIGFyZSB0b28gYmlnLiBUaGUgYWNjZXB0ZWQgZmlsZSBzaXplIGlzIHttYXhTaXplfSc6J0RhdGVpZW4gW3tkaXNwbGF5TmFtZX1dIHNpbmQgenUgZ3Jvw58uIERpZSBha3plcHRpZXJ0ZSBEYXRlaWdyw7bDn2UgaXN0IHttYXhTaXplfScsLy8gT3RoZXIgVUkgbGFiZWxzIGFuZCB0aXRsZXNcbidDbGljayBoZXJlIG9yIGhpdCBFU0MgdG8gY2xvc2UgcGlja2VyJzonS2xpY2tlbiBTaWUgaGllciB1bSB6dXLDvGNrenVrZWhyZW4gb2RlciBkcsO8Y2tlbiBTaWUgRXNjJ307dmFyIGVuPXsnRmlsZSB7ZGlzcGxheU5hbWV9IGlzIG5vdCBhbiBhY2NlcHRlZCBmaWxlIHR5cGUuIFRoZSBhY2NlcHRlZCBmaWxlIHR5cGVzIGFyZSB7dHlwZXN9JzonRmlsZSB7ZGlzcGxheU5hbWV9IGlzIG5vdCBhbiBhY2NlcHRlZCBmaWxlIHR5cGUuIFRoZSBhY2NlcHRlZCBmaWxlIHR5cGVzIGFyZSB7dHlwZXN9JywnRmlsZSB7ZGlzcGxheU5hbWV9IGlzIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMgbGVzcyB0aGFuIHtyb3VuZEZpbGVTaXplfSc6J0ZpbGUge2Rpc3BsYXlOYW1lfSBpcyB0b28gYmlnLiBUaGUgYWNjZXB0ZWQgZmlsZSBzaXplIGlzIGxlc3MgdGhhbiB7cm91bmRGaWxlU2l6ZX0nLCdPdXIgZmlsZSB1cGxvYWQgbGltaXQgaXMge21heEZpbGVzfSB7ZmlsZXNUZXh0fSc6J091ciBmaWxlIHVwbG9hZCBsaW1pdCBpcyB7bWF4RmlsZXN9IHtmaWxlc1RleHR9JywnTm8gc2VhcmNoIHJlc3VsdHMgZm91bmQgZm9yIFwie3NlYXJjaH1cIic6J05vIHNlYXJjaCByZXN1bHRzIGZvdW5kIGZvciBcIntzZWFyY2h9XCInLCdBbiBlcnJvciBvY2N1cnJlZC4gUGxlYXNlIHRyeSBhZ2Fpbi4nOidBbiBlcnJvciBvY2N1cnJlZC4gUGxlYXNlIHRyeSBhZ2Fpbi4nfTt2YXIgZXM9ey8vIEFjdGlvbnNcblVwbG9hZDonU3ViaXInLCdVcGxvYWQgbW9yZSc6J1N1YmlyIG3DoXMnLCdEZXNlbGVjdCBBbGwnOidEZXNlbGVjY2lvbmFyIFRvZG8nLCdWaWV3L0VkaXQgU2VsZWN0ZWQnOidWZXIvRWRpdGFyIFNlbGVjY2lvbmFkbycsJ1NpZ24gT3V0JzonRGVzY29uZWN0YXInLC8vIFNvdXJjZSBMYWJlbHNcbidNeSBEZXZpY2UnOidNaSBEaXNwb3NpdGl2bycsJ1dlYiBTZWFyY2gnOidCw7pzcXVlZGEgZGUgSW50ZXJuZXQnLCdUYWtlIFBob3RvJzonVG9tYXIgbGEgZm90bycsJ0xpbmsgKFVSTCknOidEaXJlY2Npw7NuIFVSTCcsJ1JlY29yZCBWaWRlbyc6J0dyYWJhciB2aWRlbycsJ1JlY29yZCBBdWRpbyc6J0dyYWJhciBhdWRpbycsLy8gQ3VzdG9tIFNvdXJjZVxuJ0N1c3RvbSBTb3VyY2UnOidGdWVudGUgcGVyc29uYWxpemFkYScsLy8gRm9vdGVyIFRleHRcbkFkZDonQcOxYWRpcicsJ21vcmUgZmlsZSc6J2VsIGFyY2hpdm8gbcOhcycsJ21vcmUgZmlsZXMnOidlbCBhcmNoaXZvIG3DoXMnLC8vIENsb3VkXG4nQ29ubmVjdCB7cHJvdmlkZXJOYW1lfSc6J0NvbmVjdGFyIHtwcm92aWRlck5hbWV9JywnU2VsZWN0IEZpbGVzIGZyb20ge3Byb3ZpZGVyTmFtZX0nOidTZWxlY2Npb25lIEFyY2hpdm9zIGRlIHtwcm92aWRlck5hbWV9JywnWW91IG5lZWQgdG8gYXV0aGVudGljYXRlIHdpdGgge3Byb3ZpZGVyTmFtZX0uJzonTmVjZXNpdGFzIGF1dGVudGljYXJ0ZSBjb24ge3Byb3ZpZGVyTmFtZX0uJywnQSBuZXcgcGFnZSB3aWxsIG9wZW4gdG8gY29ubmVjdCB5b3VyIGFjY291bnQuJzonU2UgYWJyaXLDoSB1bmEgbnVldmEgcMOhZ2luYSBwYXJhIGNvbmVjdGFyIHR1IGN1ZW50YS4nLCdXZSBvbmx5IGV4dHJhY3QgaW1hZ2VzIGFuZCBuZXZlciBtb2RpZnkgb3IgZGVsZXRlIHRoZW0uJzonU8OzbG8gZXh0cmFlbW9zIGltw6FnZW5lcyB5IG51bmNhIGxhcyBtb2RpZmljYW1vcyBvIGVsaW1pbmFtb3MnLCdUbyBkaXNjb25uZWN0IGZyb20ge3Byb3ZpZGVyTmFtZX0gY2xpY2sgXCJTaWduIG91dFwiIGJ1dHRvbiBpbiB0aGUgbWVudS4nOidEZXNjb25lY3RhcnNlIGRlIEluc3RhZ3JhbSwgaGFnYSBjbGljIGVuIGVsIGJvdMOzbiBcIkRlc2NvbmVjdGFyXCIgZW4gZWwgbWVuw7ouJywnU2lnbiBpbiB3aXRoIEdvb2dsZSc6J0luaWNpYSBzZXNpw7NuIGNvbiBHb29nbGUnLCdHbyBiYWNrJzonVm9sdmVyJywnVGhpcyBmb2xkZXIgaXMgZW1wdHkuJzonRGllc2VyIE9yZG5lciBpc3QgbGVlci4nLC8vIFN1bW1hcnlcbkZpbGVzOidBcmNoaXZvcycsSW1hZ2VzOidJbcOhZ2VuZXMnLFVwbG9hZGVkOidTdWJpZG8nLFVwbG9hZGluZzonU3ViaWVuZG8nLENvbXBsZXRlZDonQ29tcGxldGFkbycsRmlsdGVyOidGaWx0cmFyJywnQ3JvcHBlZCBJbWFnZXMnOidJbcOhZ2VuZXMgcmVjb3J0YWRhcycsJ0VkaXRlZCBJbWFnZXMnOidJbcOhZ2VuZXMgZWRpdGFkYXMnLCdTZWxlY3RlZCBGaWxlcyc6J0FyY2hpdm9zIHNlbGVjY2lvbmFkb3MnLCdDcm9wIGlzIHJlcXVpcmVkIG9uIGltYWdlcyc6J1NlIHJlcXVpZXJlIGN1bHRpdm8gZW4gbGFzIGltw6FnZW5lcycsLy8gVHJhbnNmb3JtXG5Dcm9wOidSZWNvcnRhcicsQ2lyY2xlOidDaXJjdWxvJyxSb3RhdGU6J1JvdGFyJyxNYXNrOidFbmN1YnJpcicsUmV2ZXJ0OidEZXNoYWNlcicsRWRpdDonRWRpdGFyJyxSZXNldDonUmVzdGFibGVjZXInLERvbmU6J1Rlcm1pbmFkbycsU2F2ZTonR3VhcmRhcicsTmV4dDonU2lndWllbnRlJywnRWRpdCBJbWFnZSc6J0VkaXRhciBpbWFnZW4nLCdUaGlzIGltYWdlIGNhbm5vdCBiZSBlZGl0ZWQnOidFc3RhIGltYWdlbiBubyBwdWVkZSBzZXIgZWRpdGFkYScsLy8gUmV0cnkgbWVzc2FnaW5nXG4nQ29ubmVjdGlvbiBMb3N0JzonU2UgaGEgcGVyZGlkbyBsYSBjb25leGnDs24nLCdGYWlsZWQgV2hpbGUgVXBsb2FkaW5nJzonRXJyb3IgZHVyYW50ZSBsYSBzdWJpZGEnLCdSZXRyeWluZyBpbic6J1ZvbHZlciBhIGludGVudGFyIGVuJywnVHJ5IGFnYWluJzonSW50w6ludGFsbyBkZSBudWV2bycsJ1RyeSBub3cnOidQcm9iYXIgYWhvcmEnLC8vIExvY2FsIEZpbGUgU291cmNlXG4nRHJhZyBhbmQgRHJvcCwgQ29weSBhbmQgUGFzdGUgRmlsZXMnOidBcnJhc3RyYXIgeSBzb2x0YXIgYXJjaGl2b3MsIGNvcGlhciB5IHBlZ2FyIGFyY2hpdm9zJywnb3IgRHJhZyBhbmQgRHJvcCwgQ29weSBhbmQgUGFzdGUgRmlsZXMnOidPIGFycmFzdHJhIHkgc3XDqWx0YWxvcywgbyBjb3BpYSB5IHDDqWdhbG9zJywnU2VsZWN0IEZpbGVzIHRvIFVwbG9hZCc6J1NlbGVjY2lvbmEgbG9zIGFyY2hpdm9zIGEgc3ViaXInLCdTZWxlY3QgRnJvbSc6J1NlbGVjY2lvbmUgZGUnLCdEcm9wIHlvdXIgZmlsZXMgYW55d2hlcmUnOidEZWphIHR1cyBhcmNoaXZvcyBlbiBjdWFscXVpZXIgbHVnYXInLC8vIElucHV0IHBsYWNlaG9sZGVyc1xuJ0VudGVyIGEgVVJMJzonSW5ncmVzYSB1bmEgVVJMJywnU2VhcmNoIGltYWdlcyc6J0LDunNxdWVkYSBkZSBpbcOhZ2VuZXMnLC8vIFdlYmNhbSBTb3VyY2VcbidXZWJjYW0gRGlzYWJsZWQnOidXZWJjYW0gZGVzaGFiaWxpdGFkYScsJ1dlYmNhbSBOb3QgU3VwcG9ydGVkJzonV2ViY2FtIG5vIHNvcG9ydGFkYScsJ1BsZWFzZSBlbmFibGUgeW91ciB3ZWJjYW0gdG8gdGFrZSBhIHBob3RvLic6J1BvciBmYXZvciwgaGFiaWxpdGUgc3Ugd2ViY2FtIHBhcmEgdG9tYXIgdW5hIGZvdG8nLCdZb3VyIGN1cnJlbnQgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHdlYmNhbSBmdW5jdGlvbmFsaXR5Lic6J1N1IG5hdmVnYWRvciBhY3R1YWwgbm8gYWRtaXRlIGxhIGZ1bmNpb25hbGlkYWQgZGUgd2ViY2FtJywnV2Ugc3VnZ2VzdCB1c2luZyBDaHJvbWUgb3IgRmlyZWZveC4nOidTdWdlcmltb3MgdXNhciBDaHJvbWUgbyBGaXJlZm94JywvLyBFcnJvciBOb3RpZmljYXRpb25zXG4nRmlsZSB7ZGlzcGxheU5hbWV9IGlzIG5vdCBhbiBhY2NlcHRlZCBmaWxlIHR5cGUuIFRoZSBhY2NlcHRlZCBmaWxlIHR5cGVzIGFyZSB7dHlwZXN9JzonQXJjaGl2byB7ZGlzcGxheU5hbWV9IG5vIGVzIHVuIHRpcG8gZGUgYXJjaGl2byBhY2VwdGFkby4gTG9zIHRpcG9zIGRlIGFyY2hpdm8gYWNlcHRhZG9zIHNvbiB7dHlwZXN9JywnRmlsZSB7ZGlzcGxheU5hbWV9IGlzIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMgbGVzcyB0aGFuIHtyb3VuZEZpbGVTaXplfSc6J3tkaXNwbGF5TmFtZX0gRGUgYXJjaGl2byBlcyBkZW1hc2lhZG8gZ3JhbmRlLiBFbCB0YW1hw7FvIGFjZXB0YWRvIGVzIHtyb3VuZEZpbGVTaXplfScsJ091ciBmaWxlIHVwbG9hZCBsaW1pdCBpcyB7bWF4RmlsZXN9IHtmaWxlc1RleHR9JzonTnVlc3RybyBsw61taXRlIGRlIHVwbG9hZCBkZSBhcmNoaXZvIGVzIHttYXhGaWxlc30ge2ZpbGVzVGV4dH0nLCdObyBzZWFyY2ggcmVzdWx0cyBmb3VuZCBmb3IgXCJ7c2VhcmNofVwiJzonTm8gc2UgaGFuIGVuY29udHJhZG8gcmVzdWx0YWRvcyBkZSBiw7pzcXVlZGEgcGFyYSBcIntzZWFyY2h9XCInLCdBbiBlcnJvciBvY2N1cnJlZC4gUGxlYXNlIHRyeSBhZ2Fpbi4nOidPY3VycmnDsyB1biBlcnJvci4gSW50w6ludGFsbyBkZSBudWV2by4nLCdGaWxlcyBbe2Rpc3BsYXlOYW1lfV0gYXJlIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMge21heFNpemV9JzonTG9zIGFyY2hpdm9zIFt7ZGlzcGxheU5hbWV9XSBzb24gZGVtYXNpYWRvIGdyYW5kZXMuIEVsIHRhbWHDsW8gZGUgYXJjaGl2byBhY2VwdGFkbyBlcyB7bWF4U2l6ZX0nLC8vIE90aGVyIFVJIGxhYmVscyBhbmQgdGl0bGVzXG4nQ2xpY2sgaGVyZSBvciBoaXQgRVNDIHRvIGNsb3NlIHBpY2tlcic6J1ByZXNpb25hIGFxdcOtIG8gbGEgdGVjbGEgRVNDIHBhcmEgY2VycmFyJ307dmFyIGZyPXsvLyBBY3Rpb25zXG5VcGxvYWQ6J0Fqb3V0ZXInLCdVcGxvYWQgbW9yZSc6J0Fqb3V0ZXIgcGx1cycsJ0Rlc2VsZWN0IEFsbCc6J1RvdXQgZMOpc2VsZWN0aW9ubmVyJywnVmlldy9FZGl0IFNlbGVjdGVkJzonQVZvaXIvTW9kaWZpZXIgbGEgc8OpbGVjdGlvbicsJ1NpZ24gT3V0JzonU2UgZMOpY29ubmVjdGVyJywvLyBTb3VyY2UgTGFiZWxzXG4nTXkgRGV2aWNlJzonTW9uIGFwcGFyZWlsJywnV2ViIFNlYXJjaCc6J1JlY2hlcmNoZSBJbnRlcm5ldCcsJ1Rha2UgUGhvdG8nOidQcmVuZHJlIHVuZSBQaG90bycsJ0xpbmsgKFVSTCknOidBZHJlc3NlIFVSTCcsJ1JlY29yZCBWaWRlbyc6J0VucmVnaXN0cmVyIHVuZSB2aWTDqW8nLCdSZWNvcmQgQXVkaW8nOidFbnJlZ2lzdHJlbWVudCBhdWRpbycsLy8gQ3VzdG9tIFNvdXJjZVxuJ0N1c3RvbSBTb3VyY2UnOidTb3VyY2UgcGVyc29ubmFsaXPDqWUnLC8vIEZvb3RlciBUZXh0XG5BZGQ6J0Fqb3V0ZXInLCdtb3JlIGZpbGUnOidwbHVzIGRlIGZpY2hpZXInLCdtb3JlIGZpbGVzJzoncGx1cyBkZSBmaWNoaWVycycsLy8gQ2xvdWRcbidDb25uZWN0IHtwcm92aWRlck5hbWV9JzonU2UgY29ubmVjdGVyIGF2ZWMge3Byb3ZpZGVyTmFtZX0nLCdTZWxlY3QgRmlsZXMgZnJvbSB7cHJvdmlkZXJOYW1lfSc6J1PDqWxlY3Rpb25uZXIgZGVzIGZpY2hpZXJzIGRhbnMge3Byb3ZpZGVyTmFtZX0nLCdZb3UgbmVlZCB0byBhdXRoZW50aWNhdGUgd2l0aCB7cHJvdmlkZXJOYW1lfS4nOidWb3VzIGRldmV6IHZvdXMgYXV0aGVudGlmaWVyIGF2ZWMge3Byb3ZpZGVyTmFtZX0uJywnQSBuZXcgcGFnZSB3aWxsIG9wZW4gdG8gY29ubmVjdCB5b3VyIGFjY291bnQuJzpcIlVuZSBub3V2ZWxsZSBwYWdlIHMnb3V2cmlyYSBwb3VyIGNvbm5lY3RlciB2b3RyZSBjb21wdGUuXCIsJ1dlIG9ubHkgZXh0cmFjdCBpbWFnZXMgYW5kIG5ldmVyIG1vZGlmeSBvciBkZWxldGUgdGhlbS4nOidOb3VzIHV0aWxpc29ucyBsZXMgaW1hZ2VzIHNhbnMgbGVzIG1vZGlmaWVyLCBuaSBsZXMgc3VwcHJpbWVyJywnVG8gZGlzY29ubmVjdCBmcm9tIHtwcm92aWRlck5hbWV9IGNsaWNrIFwiU2lnbiBvdXRcIiBidXR0b24gaW4gdGhlIG1lbnUuJzonUG91ciB2b3VzIGTDqWNvbm5lY3RlciB7cHJvdmlkZXJOYW1lfSwgY2xpcXVleiBzdXIgbGUgYm91dG9uIFwiU2UgZMOpY29ubmVjdGVyXCIgZHUgbWVudS4nLCdTaWduIGluIHdpdGggR29vZ2xlJzonQ29ubmVjdGV6LXZvdXMgYXZlYyBHb29nbGUnLCdHbyBiYWNrJzonUmV0b3VybmVyJywnVGhpcyBmb2xkZXIgaXMgZW1wdHkuJzonRGllc2VyIE9yZG5lciBpc3QgbGVlci4nLC8vIFN1bW1hcnlcbkZpbGVzOidGaWNoaWVycycsSW1hZ2VzOidJbWFnZXMnLFVwbG9hZGVkOidBam91dMOpJyxVcGxvYWRpbmc6J0Fqb3V0w6knLENvbXBsZXRlZDonVGVybWluw6knLEZpbHRlcjonRmlsdHJlcicsJ0Nyb3BwZWQgSW1hZ2VzJzonSW1hZ2VzIFJvZ27DqWVzJywnRWRpdGVkIEltYWdlcyc6J0ltYWdlcyDDiWRpdMOpZXMnLCdTZWxlY3RlZCBGaWxlcyc6J0ZpY2hpZXJzIHPDqWxlY3Rpb25uw6lzJywnQ3JvcCBpcyByZXF1aXJlZCBvbiBpbWFnZXMnOidMYSBjdWx0dXJlIGVzdCByZXF1aXNlIHN1ciBsZXMgaW1hZ2VzJywvLyBUcmFuc2Zvcm1cbkNyb3A6J1JvZ25lcicsQ2lyY2xlOidSb25kJyxSb3RhdGU6J1Bpdm90ZXInLE1hc2s6J0NhY2hlJyxSZXZlcnQ6J0FubnVsZXInLEVkaXQ6J01vZGlmaWVyJyxSZXNldDonQW5udWxlcicsRG9uZTonRmluaScsU2F2ZTonQXBwbGlxdWVyJyxOZXh0OidQcm9jaGFpbicsJ0VkaXQgSW1hZ2UnOidJbWFnZSDDiWRpdGVyJywnVGhpcyBpbWFnZSBjYW5ub3QgYmUgZWRpdGVkJzonQ2V0dGUgaW1hZ2UgbmUgcGV1dCBwYXMgw6p0cmUgbW9kaWZpw6llJywvLyBSZXRyeSBtZXNzYWdpbmdcbidDb25uZWN0aW9uIExvc3QnOidDb25uZXhpb24gcGVyZHVlJywnRmFpbGVkIFdoaWxlIFVwbG9hZGluZyc6J8OJY2hlYyBkdSBjaGFyZ2VtZW50JywnUmV0cnlpbmcgaW4nOidSw6llc3NheWVyIGRhbnMnLCdUcnkgYWdhaW4nOidSw6llc3NheWVyJywnVHJ5IG5vdyc6J0Vzc2F5ZXogbWFpbnRlbmFudCcsLy8gTG9jYWwgRmlsZSBTb3VyY2VcbidEcmFnIGFuZCBEcm9wLCBDb3B5IGFuZCBQYXN0ZSBGaWxlcyc6J0dsaXNzZXIgZXQgZMOpcG9zZXIgZGVzIGZpY2hpZXJzLCBjb3BpZXIgZXQgY29sbGVyIGRlcyBmaWNoaWVycycsJ29yIERyYWcgYW5kIERyb3AsIENvcHkgYW5kIFBhc3RlIEZpbGVzJzonb3UgZmFpdGVzIGdsaXNzZXIsIGNvcGllciBldCBjb2xsZXIgZGVzIGZpY2hpZXJzJywnU2VsZWN0IEZpbGVzIHRvIFVwbG9hZCc6J1PDqWxlY3Rpb25uZXogZGVzIGZpY2hpZXJzIMOgIGFqb3V0ZXInLCdTZWxlY3QgRnJvbSc6J1PDqWxlY3Rpb25uZXogZGVwdWlzJywnRHJvcCB5b3VyIGZpbGVzIGFueXdoZXJlJzonRMOpcG9zZXogdm9zIGZpY2hpZXJzIG5cXCdpbXBvcnRlIG/DuScsLy8gSW5wdXQgcGxhY2Vob2xkZXJzXG4nRW50ZXIgYSBVUkwnOidFbnRyZXogdW5lIFVSTCcsJ1NlYXJjaCBpbWFnZXMnOidSZWNoZXJjaGVyIGRlcyBpbWFnZXMnLC8vIFdlYmNhbSBTb3VyY2VcbidXZWJjYW0gRGlzYWJsZWQnOidXZWJjYW0gZMOpc2FjdGl2w6knLCdXZWJjYW0gTm90IFN1cHBvcnRlZCc6J1dlYmNhbSBub24gcHJpc2UgZW4gY2hhcmdlJywnUGxlYXNlIGVuYWJsZSB5b3VyIHdlYmNhbSB0byB0YWtlIGEgcGhvdG8uJzpcIlMnaWwgdm91cyBwbGHDrnQgYWN0aXZlciB2b3RyZSB3ZWJjYW0gcG91ciBwcmVuZHJlIHVuZSBwaG90b1wiLCdZb3VyIGN1cnJlbnQgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHdlYmNhbSBmdW5jdGlvbmFsaXR5Lic6J1ZvdHJlIG5hdmlnYXRldXIgYWN0dWVsIG5lIHByZW5kIHBhcyBlbiBjaGFyZ2UgbGEgZm9uY3Rpb25uYWxpdMOpIHdlYmNhbScsJ1dlIHN1Z2dlc3QgdXNpbmcgQ2hyb21lIG9yIEZpcmVmb3guJzpcIk5vdXMgdm91cyBzdWdnw6lyb25zIGQndXRpbGlzZXIgQ2hyb21lIG91IEZpcmVmb3guXCIsLy8gRXJyb3IgTm90aWZpY2F0aW9uc1xuJ0ZpbGUge2Rpc3BsYXlOYW1lfSBpcyBub3QgYW4gYWNjZXB0ZWQgZmlsZSB0eXBlLiBUaGUgYWNjZXB0ZWQgZmlsZSB0eXBlcyBhcmUge3R5cGVzfSc6J3tkaXNwbGF5TmFtZX0gRGUgZmljaGllciBu4oCZZXN0IHBhcyB1biB0eXBlIGRlIGZpY2hpZXIgYWNjZXB0w6kuIExlcyB0eXBlcyBkZSBmaWNoaWVycyBhY2NlcHTDqXMgc29udCB7dHlwZXN9JywnRmlsZSB7ZGlzcGxheU5hbWV9IGlzIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMgbGVzcyB0aGFuIHtyb3VuZEZpbGVTaXplfSc6J0xlIGZpY2hpZXIge2Rpc3BsYXlOYW1lfSBlc3QgdHJvcCBncmFuZC4gTGEgdGFpbGxlIGRlIGZpY2hpZXIgYWNjZXB0w6llIGVzdCB7cm91bmRGaWxlU2l6ZX0nLCdPdXIgZmlsZSB1cGxvYWQgbGltaXQgaXMge21heEZpbGVzfSB7ZmlsZXNUZXh0fSc6J05vdHJlIGxpbWl0ZSBkZSB0w6lsw6ljaGFyZ2VtZW50IGRlIGZpY2hpZXIgZXN0IHttYXhGaWxlc30ge2ZpbGVzVGV4dH0nLCdObyBzZWFyY2ggcmVzdWx0cyBmb3VuZCBmb3IgXCJ7c2VhcmNofVwiJzonQXVjdW4gcsOpc3VsdGF0IGRlIHJlY2hlcmNoZSB0cm91dsOpIHBvdXIgXCJ7c2VhcmNofVwiJywnQW4gZXJyb3Igb2NjdXJyZWQuIFBsZWFzZSB0cnkgYWdhaW4uJzonVW5lIGVycmV1ciBlc3Qgc3VydmVudWUuIFZldWlsbGV6IHLDqWVzc2F5ZXIuJywnRmlsZXMgW3tkaXNwbGF5TmFtZX1dIGFyZSB0b28gYmlnLiBUaGUgYWNjZXB0ZWQgZmlsZSBzaXplIGlzIHttYXhTaXplfSc6J0xlcyBmaWNoaWVycyBbe2Rpc3BsYXlOYW1lfV0gc29udCB0cm9wIGdyb3MuIExhIHRhaWxsZSBkdSBmaWNoaWVyIGFjY2VwdMOpIGVzdCB7bWF4U2l6ZX0nLC8vIE90aGVyIFVJIGxhYmVscyBhbmQgdGl0bGVzXG4nQ2xpY2sgaGVyZSBvciBoaXQgRVNDIHRvIGNsb3NlIHBpY2tlcic6J0NsaXF1ZXogaWNpIG91IGFwcHV5ZXogc3VyIEVTQyBwb3VyIGZlcm1lcid9O3ZhciBoZT17Ly8gQWN0aW9uc1xuVXBsb2FkOifXlNei15zXlCcsJ1VwbG9hZCBtb3JlJzon15TXotec15Qg16LXldeTJywnRGVzZWxlY3QgQWxsJzon15HXmNecINeR15fXmdeo15QnLCdWaWV3L0VkaXQgU2VsZWN0ZWQnOifXptek15Qv16LXqNeV15og15HXl9eZ16jXlCcsJ1NpZ24gT3V0Jzon15TXqteg16rXpycsLy8gU291cmNlIExhYmVsc1xuJ015IERldmljZSc6J9eU157Xm9ep15nXqCDXqdec15knLCdXZWIgU2VhcmNoJzon15fXmdek15XXqSDXqtee15XXoNeV16onLCdUYWtlIFBob3RvJzon15zXptec150nLCdMaW5rIChVUkwpJzon15vXqteV15HXqiDXkNeq16gnLCdSZWNvcmQgVmlkZW8nOifXnNeU16fXnNeZ15gg16HXqNeY15XXnycsJ1JlY29yZCBBdWRpbyc6J9eU16fXnNeYINep157XoicsLy8gQ3VzdG9tIFNvdXJjZVxuJ0N1c3RvbSBTb3VyY2UnOifXnten15XXqCDXnteV16rXkNedINeQ15nXqdeZ16onLC8vIEZvb3RlciBUZXh0XG5BZGQ6J9eU15XXodejJywnbW9yZSBmaWxlJzon16LXldeTINen15XXkdelJywnbW9yZSBmaWxlcyc6J9ei15XXkyDXp9eR16bXmdedJywvLyBDbG91ZFxuJ0Nvbm5lY3Qge3Byb3ZpZGVyTmFtZX0nOifXl9eR16gge3Byb3ZpZGVyTmFtZX0nLCdTZWxlY3QgRmlsZXMgZnJvbSB7cHJvdmlkZXJOYW1lfSc6J9eR15fXqCDXp9eR16bXmdedINeeLSB7cHJvdmlkZXJOYW1lfScsJ1lvdSBuZWVkIHRvIGF1dGhlbnRpY2F0ZSB3aXRoIHtwcm92aWRlck5hbWV9Lic6J9eQ16rXlCDXpteo15nXmiDXnNeQ157XqiDXotedIHtwcm92aWRlck5hbWV9LicsJ0EgbmV3IHBhZ2Ugd2lsbCBvcGVuIHRvIGNvbm5lY3QgeW91ciBhY2NvdW50Lic6J9ei157XldeTINeX15PXqSDXmdek16rXlyDXotecINee16DXqiDXnNeX15HXqCDXkNeqINeX16nXkdeV16DXmicsJ1dlIG9ubHkgZXh0cmFjdCBpbWFnZXMgYW5kIG5ldmVyIG1vZGlmeSBvciBkZWxldGUgdGhlbS4nOifXnNei15XXnNedINec15Ag16DXqdeg15Qg15DXlSDXoNee15fXpyDXkNeqINeU16rXnteV16DXldeqJywnVG8gZGlzY29ubmVjdCBmcm9tIHtwcm92aWRlck5hbWV9IGNsaWNrIFwiU2lnbiBvdXRcIiBidXR0b24gaW4gdGhlIG1lbnUuJzon15vXk9eZINec15TXqteg16rXpyDXniB7cHJvdmlkZXJOYW1lfSDXnNeX16Ug16LXnCDXlNec15fXptefIFwi15TXqteg16rXp1wiINeR16rXpNeo15nXmC4nLCdTaWduIGluIHdpdGggR29vZ2xlJzon15TXmdeb16DXoSDXkdeQ157Xptei15XXqiBHb29nbGUnLCdHbyBiYWNrJzon16rXl9eW15XXqCcsJ1RoaXMgZm9sZGVyIGlzIGVtcHR5Lic6J0RpZXNlciBPcmRuZXIgaXN0IGxlZXIuJywvLyBTdW1tYXJ5XG5GaWxlczon16fXkdem15nXnScsSW1hZ2VzOifXqtee15XXoNeV16onLFVwbG9hZGVkOifXlNeV16LXnNeVJyxVcGxvYWRpbmc6J9ee16LXnNeUJyxDb21wbGV0ZWQ6J9eU15XXqdec150nLEZpbHRlcjon16HXoNefJywnQ3JvcHBlZCBJbWFnZXMnOifXqtee15XXoNeV16og15fXqteV15vXldeqJywnRWRpdGVkIEltYWdlcyc6J9eq157Xldeg15XXqiDXoteo15XXm9eV16onLCdTZWxlY3RlZCBGaWxlcyc6J9en15HXpteZ150g16nXoNeR15fXqNeVJywnQ3JvcCBpcyByZXF1aXJlZCBvbiBpbWFnZXMnOifXl9eZ16rXldeaINeg15PXqNepINeR16rXnteV16DXldeqJywvLyBUcmFuc2Zvcm1cbkNyb3A6J9ec1rTXkteW15XWudedJyxDaXJjbGU6J9eX15XWvNeSJyxSb3RhdGU6J9ec1rDXlNa016HWsNeq15XWudeR1rXXkScsTWFzazon15zWsNeb1rfXodeV1rnXqiDXkda81rDXnta316HWtdeb1rjXlCcsUmV2ZXJ0OifXkdeY15wg16nXmdeg15XXmdeZ150nLEVkaXQ6J9ei16jXldeaJyxSZXNldDon15zWsNeQ1rfXqteX1rXXnCcsRG9uZTon15HXldem16InLFNhdmU6J9ec15TXpteZ15wnLE5leHQ6J9eU1rfXkda81rjXkCcsJ0VkaXQgSW1hZ2UnOifXoteo15XXmiDXqtee15XXoNeUJywnVGhpcyBpbWFnZSBjYW5ub3QgYmUgZWRpdGVkJzon15zXkCDXoNeZ16rXnyDXnNei16jXldeaINeq157Xldeg15Qg15bXlScsLy8gUmV0cnkgbWVzc2FnaW5nXG4nQ29ubmVjdGlvbiBMb3N0Jzon15fXmdeR15XXqCDXoNei15zXnScsJ0ZhaWxlZCBXaGlsZSBVcGxvYWRpbmcnOifXoNeb16nXnCDXkdei16og15TXotec15DXlCcsJ1JldHJ5aW5nIGluJzon157XoNeh15Qg16nXldeRINeR16LXldeTJywnVHJ5IGFnYWluJzon16DXodeUINep15XXkScsJ1RyeSBub3cnOifXoNeh15Qg16LXm9ep15nXlScsLy8gTG9jYWwgRmlsZSBTb3VyY2VcbidEcmFnIGFuZCBEcm9wLCBDb3B5IGFuZCBQYXN0ZSBGaWxlcyc6J9eS16jXldeoINeV16nXl9eo16gg16fXkdem15nXnSwg15TXoteq16cg15XXlNeT15HXpyDXp9eR16bXmdedJywnb3IgRHJhZyBhbmQgRHJvcCwgQ29weSBhbmQgUGFzdGUgRmlsZXMnOifXkNeVINeS16jXldeoIC8g15TXoteq16cg15XXlNeT15HXpyDXkNeqINeU16fXkdem15nXnScsJ1NlbGVjdCBGaWxlcyB0byBVcGxvYWQnOifXkdeX16gg16fXkdem15nXnSDXnNeU16LXnNeV16onLCdTZWxlY3QgRnJvbSc6J9eR15fXqCDXni0nLCdEcm9wIHlvdXIgZmlsZXMgYW55d2hlcmUnOifXlteo15XXpyDXkNeqINeU16fXkdem15nXnSDXqdec15og15HXm9ecINee16fXldedJywvLyBJbnB1dCBwbGFjZWhvbGRlcnNcbidFbnRlciBhIFVSTCc6J9eU15bXnyDXm9eq15XXkdeqINeQ16rXqCcsJ1NlYXJjaCBpbWFnZXMnOifXl9eZ16TXldepINeq157Xldeg15XXqicsLy8gV2ViY2FtIFNvdXJjZVxuJ1dlYmNhbSBEaXNhYmxlZCc6J9ee16bXnNee15Qg157Xm9eV15HXqicsJ1dlYmNhbSBOb3QgU3VwcG9ydGVkJzon157Xptec157XlCDXnNeQINeg16rXnteb16onLCdQbGVhc2UgZW5hYmxlIHlvdXIgd2ViY2FtIHRvIHRha2UgYSBwaG90by4nOifXoNeQINeU15PXnNenINeQ16og15TXntem15zXnteUINei15wg157XoNeqINec16bXnNedJywnWW91ciBjdXJyZW50IGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB3ZWJjYW0gZnVuY3Rpb25hbGl0eS4nOifXlNeT16TXk9ek158g15HXlSDXkNeq15Qg157Xqdeq157XqSDXkNeZ16DXlSDXqteV157XmiDXkdep15nXnteV16kg15HXntem15zXnteUJywnV2Ugc3VnZ2VzdCB1c2luZyBDaHJvbWUgb3IgRmlyZWZveC4nOifXkNeg15Ug157Xntec15nXpteZ150g16LXnCDXk9ek15PXpNefINek15nXmdeo16TXlden16Eg15DXlSDXm9eo15XXnScsLy8gRXJyb3IgTm90aWZpY2F0aW9uc1xuJ0ZpbGUge2Rpc3BsYXlOYW1lfSBpcyBub3QgYW4gYWNjZXB0ZWQgZmlsZSB0eXBlLiBUaGUgYWNjZXB0ZWQgZmlsZSB0eXBlcyBhcmUge3R5cGVzfSc6J3t0eXBlc30g15TXldeQINec15Ag157XodeV15Ig16nXoNeV15vXnCDXnNen15HXnC7XodeV15LXmSDXlNen15HXpteZ150g15TXnteV16rXqCDXlNedIHtkaXNwbGF5TmFtZX0g15TXp9eV15HXpScsJ0ZpbGUge2Rpc3BsYXlOYW1lfSBpcyB0b28gYmlnLiBUaGUgYWNjZXB0ZWQgZmlsZSBzaXplIGlzIGxlc3MgdGhhbiB7cm91bmRGaWxlU2l6ZX0nOid7cm91bmRGaWxlU2l6ZX0g15LXk9eV15wg157Xk9eZLiDXlNeS15XXk9ecINeU157Xldeq16gg15TXlSDXkCB7ZGlzcGxheU5hbWV9INeU16fXldeR16UnLCdPdXIgZmlsZSB1cGxvYWQgbGltaXQgaXMge21heEZpbGVzfSB7ZmlsZXNUZXh0fSc6J3tmaWxlc1RleHR9IHttYXhGaWxlc30g157XkteR15zXqiDXkteV15PXnCDXlNen15XXkdelINeU15nXkCcsJ05vIHNlYXJjaCByZXN1bHRzIGZvdW5kIGZvciBcIntzZWFyY2h9XCInOifXnNeQINeg157XpteQ15Ug16rXldem15DXldeqINeX15nXpNeV16kg16LXkdeV16ggXCJ7c2VhcmNofVwiJywnQW4gZXJyb3Igb2NjdXJyZWQuIFBsZWFzZSB0cnkgYWdhaW4uJzon15TXqteo15fXqdeUINep15LXmdeQ15QuINeR15HXp9ep15Qg16DXodeUINep15XXkS4nLCdGaWxlcyBbe2Rpc3BsYXlOYW1lfV0gYXJlIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMge21heFNpemV9Jzon15TXp9eR16bXmdedIFt7ZGlzcGxheU5hbWV9XSDXkteT15XXnNeZ150g157Xk9eZLiDXkteV15PXnCDXlNen15XXkdelINeU157Xp9eV15HXnCDXlNeV15Age21heFNpemV9JywvLyBPdGhlciBVSSBsYWJlbHMgYW5kIHRpdGxlc1xuJ0NsaWNrIGhlcmUgb3IgaGl0IEVTQyB0byBjbG9zZSBwaWNrZXInOifXnNeX16Ug15vXkNefINeQ15Ug15zXl9elINei15wgRVNDINeb15PXmSDXnNeh15LXldeoJ307dmFyIGl0PXsvLyBBY3Rpb25zXG5VcGxvYWQ6J0NhcmljYXJlJywnVXBsb2FkIG1vcmUnOidDYXJpY2EgZGkgcGnDuScsJ0Rlc2VsZWN0IEFsbCc6J0Rlc2VsZXppb25hcmUgdHV0dG8nLCdWaWV3L0VkaXQgU2VsZWN0ZWQnOidWaXN1YWxpenphL01vZGlmaWNhIHNlbGV6aW9uYXRvJywnU2lnbiBPdXQnOidFc2NpJywvLyBTb3VyY2UgTGFiZWxzXG4nTXkgRGV2aWNlJzonSWwgbWlvIGRpc3Bvc2l0aXZvJywnV2ViIFNlYXJjaCc6J1JpY2VyY2Egc3VsIFdlYicsJ1Rha2UgUGhvdG8nOidGYXJlIHVuYSBmb3RvJywnTGluayAoVVJMKSc6J0luZGlyaXp6byBVUkwnLCdSZWNvcmQgVmlkZW8nOidSZWdpc3RyYSB2aWRlbycsJ1JlY29yZCBBdWRpbyc6J1JlZ2lzdHJhIGF1ZGlvJywvLyBDdXN0b20gU291cmNlXG4nQ3VzdG9tIFNvdXJjZSc6J0ZvbnRlIHBlcnNvbmFsaXp6YXRhJywvLyBGb290ZXIgVGV4dFxuQWRkOidBZ2dpdW5nZXJlJywnbW9yZSBmaWxlJzoncGnDuSBmaWxlJywnbW9yZSBmaWxlcyc6J3Bpw7kgZmlsZScsLy8gQ2xvdWRcbidDb25uZWN0IHtwcm92aWRlck5hbWV9JzonQ29ubmV0dGkge3Byb3ZpZGVyTmFtZX0nLCdTZWxlY3QgRmlsZXMgZnJvbSB7cHJvdmlkZXJOYW1lfSc6J1NlbGV6aW9uYSBGaWxlIGRhIHtwcm92aWRlck5hbWV9JywnWW91IG5lZWQgdG8gYXV0aGVudGljYXRlIHdpdGgge3Byb3ZpZGVyTmFtZX0uJzonRGV2aSBhdXRlbnRpY2FydGkgY29uIHtwcm92aWRlck5hbWV9LicsJ0EgbmV3IHBhZ2Ugd2lsbCBvcGVuIHRvIGNvbm5lY3QgeW91ciBhY2NvdW50Lic6J1NpIGFwcmlyw6AgdW5hIG51b3ZhIHBhZ2luYSBwZXIgY29sbGVnYXJlIGlsIHR1byBhY2NvdW50JywnV2Ugb25seSBleHRyYWN0IGltYWdlcyBhbmQgbmV2ZXIgbW9kaWZ5IG9yIGRlbGV0ZSB0aGVtLic6J0FiYmlhbW8gZXN0cmF0dG8gc29sbyBpbW1hZ2luaSBlIG5vbiBtb2RpZmljYXJsaSBvIGNhbmNlbGxhcmxpLicsJ1RvIGRpc2Nvbm5lY3QgZnJvbSB7cHJvdmlkZXJOYW1lfSBjbGljayBcIlNpZ24gb3V0XCIgYnV0dG9uIGluIHRoZSBtZW51Lic6J1BlciBkaXNjb25uZXR0ZXJzaSBkYSB7cHJvdmlkZXJOYW1lfSBmYWkgY2xpYyBzdWwgcHVsc2FudGUgXCJFc2NpXCIgbmVsIG1lbnUuJywnU2lnbiBpbiB3aXRoIEdvb2dsZSc6J0FjY2VkaSBjb24gR29vZ2xlJywnR28gYmFjayc6J1Rvcm5hIGluZGlldHJvJywnVGhpcyBmb2xkZXIgaXMgZW1wdHkuJzonUXVlc3RhIGNhcnRlbGxhIMOoIHZ1b3RhLicsLy8gU3VtbWFyeVxuRmlsZXM6J0ZpbGUnLEltYWdlczonSW1tYWdpbmknLFVwbG9hZGVkOidDYXJpY2F0bycsVXBsb2FkaW5nOidDYXJpY2FtZW50bycsQ29tcGxldGVkOidDb21wbGV0YXRvJyxGaWx0ZXI6J0ZpbHRyYXJlJywnQ3JvcHBlZCBJbWFnZXMnOidJbW1hZ2luaSBSaXRhZ2xpYXRlJywnRWRpdGVkIEltYWdlcyc6J0ltbWFnaW5pIE1vZGlmaWNhdGUnLCdTZWxlY3RlZCBGaWxlcyc6J0ZpbGUgc2VsZXppb25hdGknLCdDcm9wIGlzIHJlcXVpcmVkIG9uIGltYWdlcyc6J0lsIHJpdGFnbGlvIMOoIHJpY2hpZXN0byBzdWxsZSBpbW1hZ2luaScsLy8gVHJhbnNmb3JtXG5Dcm9wOidSaXRhZ2xpYScsQ2lyY2xlOidDaXJjb2xvJyxSb3RhdGU6J1J1b3RhcmUnLE1hc2s6J01hc2NoZXJhcmUnLFJldmVydDonQW5udWxsYScsRWRpdDonTW9kaWZpY2EnLFJlc2V0OidSZXNldCcsRG9uZTonRmluaXRvJyxTYXZlOidTYWx2YXJlJyxOZXh0OidJbCBwcm9zc2ltbycsJ0VkaXQgSW1hZ2UnOidNb2RpZmljYSBJbW1hZ2luZScsJ1RoaXMgaW1hZ2UgY2Fubm90IGJlIGVkaXRlZCc6J1F1ZXN0YSBpbW1hZ2luZSBub24gcHXDsiBlc3NlcmUgbW9kaWZpY2F0YScsLy8gUmV0cnkgbWVzc2FnaW5nXG4nQ29ubmVjdGlvbiBMb3N0JzonQ29ubmVzc2lvbmUgUGVyc2EnLCdGYWlsZWQgV2hpbGUgVXBsb2FkaW5nJzonRXJyb3JlIER1cmFudGUgaWwgQ2FyaWNhbWVudG8nLCdSZXRyeWluZyBpbic6J1JpcHJvdmFyZSB0cmEnLCdUcnkgYWdhaW4nOidSaXByb3ZhJywnVHJ5IG5vdyc6J1Byb3ZhIG9yYScsLy8gTG9jYWwgRmlsZSBTb3VyY2VcbidEcmFnIGFuZCBEcm9wLCBDb3B5IGFuZCBQYXN0ZSBGaWxlcyc6J1RyYXNjaW5hIGUgcmlsYXNjaWEgaSBmaWxlLCBjb3BpYSBlIGluY29sbGEgaSBmaWxlJywnb3IgRHJhZyBhbmQgRHJvcCwgQ29weSBhbmQgUGFzdGUgRmlsZXMnOidvIHRyYXNjaW5hcmUsIGNvcGlhcmUgZSBpbmNvbGxhcmUgZmlsZScsJ1NlbGVjdCBGaWxlcyB0byBVcGxvYWQnOidTZWxlemlvbmFyZSBpIGZpbGUgZGEgY2FyaWNhcmUnLCdTZWxlY3QgRnJvbSc6J1NlbGV6aW9uYXJlIGRhJywnRHJvcCB5b3VyIGZpbGVzIGFueXdoZXJlJzonUmlsYXNjaWEgaSB0dW9pIGZpbGUgb3Z1bnF1ZScsLy8gSW5wdXQgcGxhY2Vob2xkZXJzXG4nRW50ZXIgYSBVUkwnOidJbnNlcmlzY2kgdW4gVVJMJywnU2VhcmNoIGltYWdlcyc6J1JpY2VyY2EgaW1tYWdpbmknLC8vIFdlYmNhbSBTb3VyY2VcbidXZWJjYW0gRGlzYWJsZWQnOidXZWJjYW0gc3BlbnRhJywnV2ViY2FtIE5vdCBTdXBwb3J0ZWQnOidXZWJjYW0gbm9uIHN1cHBvcnRhdG8nLCdQbGVhc2UgZW5hYmxlIHlvdXIgd2ViY2FtIHRvIHRha2UgYSBwaG90by4nOidTaSBwcmVnYSBkaSBhdHRpdmFyZSBsYSB3ZWJjYW0gcGVyIHNjYXR0YXJlIHVuYSBmb3RvLicsJ1lvdXIgY3VycmVudCBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgd2ViY2FtIGZ1bmN0aW9uYWxpdHkuJzonSWwgYnJvd3NlciBjb3JyZW50ZSBub24gc3VwcG9ydGEgbGEgZnVuemlvbmFsaXTDoCB3ZWJjYW0uJywnV2Ugc3VnZ2VzdCB1c2luZyBDaHJvbWUgb3IgRmlyZWZveC4nOidTdWdnZXJpYW1vIHVzYW5kbyBDaHJvbWUgbyBGaXJlZm94LicsLy8gRXJyb3IgTm90aWZpY2F0aW9uc1xuJ0ZpbGUge2Rpc3BsYXlOYW1lfSBpcyBub3QgYW4gYWNjZXB0ZWQgZmlsZSB0eXBlLiBUaGUgYWNjZXB0ZWQgZmlsZSB0eXBlcyBhcmUge3R5cGVzfSc6J3tkaXNwbGF5TmFtZX0gRmlsZSBub24gw6ggdW4gdGlwbyBkaSBmaWxlIGFjY2V0dGF0by4gSSB0aXBpIGRpIGZpbGUgYWNjZXR0YXRpIHNvbm8ge3R5cGVzfScsJ0ZpbGUge2Rpc3BsYXlOYW1lfSBpcyB0b28gYmlnLiBUaGUgYWNjZXB0ZWQgZmlsZSBzaXplIGlzIGxlc3MgdGhhbiB7cm91bmRGaWxlU2l6ZX0nOid7ZGlzcGxheU5hbWV9IElsIGZpbGUgw6ggbW9sdG8gZ3JhbmRlLiBMYSBkaW1lbnNpb25lIG1hc3NpbWEgYWNjZXR0YXRhIHBlciBpIGZpbGUgw6gge3JvdW5kRmlsZVNpemV9JywnT3VyIGZpbGUgdXBsb2FkIGxpbWl0IGlzIHttYXhGaWxlc30ge2ZpbGVzVGV4dH0nOifDiCBpbCBub3N0cm8gbGltaXRlIGRpIHVwbG9hZCBkaSBmaWxlIHttYXhGaWxlc30ge2ZpbGVzVGV4dH0nLCdObyBzZWFyY2ggcmVzdWx0cyBmb3VuZCBmb3IgXCJ7c2VhcmNofVwiJzonTmVzc3VuIHJpc3VsdGF0byBkaSByaWNlcmNhIHRyb3ZhdG8gcGVyIFwie3NlYXJjaH1cIicsJ0FuIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgdHJ5IGFnYWluLic6J1NpIMOoIHZlcmlmaWNhdG8gdW4gZXJyb3JlLiBQZXIgZmF2b3JlIHJpcHJvdmEuJywnRmlsZXMgW3tkaXNwbGF5TmFtZX1dIGFyZSB0b28gYmlnLiBUaGUgYWNjZXB0ZWQgZmlsZSBzaXplIGlzIHttYXhTaXplfSc6J0kgZmlsZSBbe2Rpc3BsYXlOYW1lfV0gc29ubyB0cm9wcG8gZ3JhbmRpLiBMYSBkaW1lbnNpb25lIGRlbCBmaWxlIGFjY2V0dGF0YSDDqCB7bWF4U2l6ZX0nLC8vIE90aGVyIFVJIGxhYmVscyBhbmQgdGl0bGVzXG4nQ2xpY2sgaGVyZSBvciBoaXQgRVNDIHRvIGNsb3NlIHBpY2tlcic6J0NsaWNjYSBxdWkgbyBwcmVtaSBFU0MgcGVyIGNoaXVkZXJlJ307dmFyIGphPXsvLyBBY3Rpb25zXG5VcGxvYWQ6J+OCouODg+ODl+ODreODvOODiScsJ1VwbG9hZCBtb3JlJzon44KC44Gj44Go44Ki44OD44OX44Ot44O844OJ44GZ44KLJywnRGVzZWxlY3QgQWxsJzon6YG45oqe44KS5YWo44Gm6Kej6ZmkJywnVmlldy9FZGl0IFNlbGVjdGVkJzon6YG45oqe44GX44Gf44OV44Kh44Kk44Or44KS6Zay6KanL+e3qOmbhicsJ1NpZ24gT3V0Jzon44K144Kk44Oz44Ki44Km44OIJywvLyBTb3VyY2UgTGFiZWxzXG4nTXkgRGV2aWNlJzon44Oe44Kk44OH44OQ44Kk44K5JywnV2ViIFNlYXJjaCc6J+OCpuOCp+ODluaknOe0oicsJ1Rha2UgUGhvdG8nOiflhpnnnJ/jgpLmkq7jgosnLCdMaW5rIChVUkwpJzonVVJM44Ki44OJ44Os44K5JywnUmVjb3JkIFZpZGVvJzon6Yyy55S75pig5YOPJywnUmVjb3JkIEF1ZGlvJzon44Os44Kz44O844OJ44Kq44O844OH44Kj44KqJywvLyBDdXN0b20gU291cmNlXG4nQ3VzdG9tIFNvdXJjZSc6J+OCq+OCueOCv+ODoOOCveODvOOCuScsLy8gRm9vdGVyIFRleHRcbkFkZDon6L+95YqgJywnbW9yZSBmaWxlJzon6L+95Yqg44OV44Kh44Kk44OrJywnbW9yZSBmaWxlcyc6J+i/veWKoOODleOCoeOCpOODqycsLy8gQ2xvdWRcbidDb25uZWN0IHtwcm92aWRlck5hbWV9Jzone3Byb3ZpZGVyTmFtZX3jgavmjqXntponLCdTZWxlY3QgRmlsZXMgZnJvbSB7cHJvdmlkZXJOYW1lfSc6J3twcm92aWRlck5hbWV944GL44KJ44OV44Kh44Kk44Or44KS6YG45oqeJywnWW91IG5lZWQgdG8gYXV0aGVudGljYXRlIHdpdGgge3Byb3ZpZGVyTmFtZX0uJzone3Byb3ZpZGVyTmFtZX3jgpLoqo3oqLzjgZfjgabjgY/jgaDjgZXjgYQnLCdBIG5ldyBwYWdlIHdpbGwgb3BlbiB0byBjb25uZWN0IHlvdXIgYWNjb3VudC4nOifjg57jgqTjg5rjg7zjgrjjgavnp7vli5XjgZfjgb7jgZknLCdXZSBvbmx5IGV4dHJhY3QgaW1hZ2VzIGFuZCBuZXZlciBtb2RpZnkgb3IgZGVsZXRlIHRoZW0uJzon55S75YOP44Gu5oq95Ye644Gg44GR44KS6KGM44GE44CB5L+u5q2j44KE5YmK6Zmk44KS44GZ44KL44GT44Go44Gv44GC44KK44G+44Gb44KTJywnVG8gZGlzY29ubmVjdCBmcm9tIHtwcm92aWRlck5hbWV9IGNsaWNrIFwiU2lnbiBvdXRcIiBidXR0b24gaW4gdGhlIG1lbnUuJzone3Byb3ZpZGVyTmFtZX3jgpLliIfmlq3jgZnjgovjgavjga9b44K144Kk44Oz44Ki44Km44OIXeODnOOCv+ODs+OCkuOCr+ODquODg+OCr+OBl+OBpuOBj+OBoOOBleOBhCcsJ1NpZ24gaW4gd2l0aCBHb29nbGUnOidHb29nbGXjgafjgrXjgqTjg7PjgqTjg7MnLCdHbyBiYWNrJzon5oi744KLJywnVGhpcyBmb2xkZXIgaXMgZW1wdHkuJzon44GT44Gu44OV44Kp44Or44OA44O844Gv56m644Gn44GZ44CCJywvLyBTdW1tYXJ5XG5GaWxlczon44OV44Kh44Kk44OrJyxJbWFnZXM6J+eUu+WDjycsVXBsb2FkZWQ6J+OCouODg+ODl+ODreODvOODieWujOS6hicsVXBsb2FkaW5nOifjgqLjg4Pjg5fjg63jg7zjg4nkuK0nLENvbXBsZXRlZDon5a6M5LqGJyxGaWx0ZXI6J+ODleOCo+ODq+OCv+ODvCcsJ0ZhaWxlZCBXaGlsZSBVcGxvYWRpbmcnOifjgqLjg4Pjg5fjg63jg7zjg4nkuK3jgavlpLHmlZfjgZfjgb7jgZfjgZ8nLCdDcm9wcGVkIEltYWdlcyc6J+WIh+OCiuaKnOOBi+OCjOOBn+eUu+WDjycsJ0VkaXRlZCBJbWFnZXMnOifnt6jpm4bjgZXjgozjgZ/nlLvlg48nLCdTZWxlY3RlZCBGaWxlcyc6J+mBuOaKnua4iOOBruODleOCoeOCpOODqycsJ0Nyb3AgaXMgcmVxdWlyZWQgb24gaW1hZ2VzJzon55S75YOP44Gr5L2c54mp44GM5b+F6KaB44Gn44GZJywnVGhpcyBpbWFnZSBjYW5ub3QgYmUgZWRpdGVkJzon44GT44Gu55S75YOP44Gv57eo6ZuG44Gn44GN44G+44Gb44KTJywvLyBUcmFuc2Zvcm1cbkNyb3A6J+WJquOCiycsQ2lyY2xlOiflhoblnosnLFJvdGF0ZTon5bu744KLJyxNYXNrOifopobjgYYnLFJldmVydDon5YWD44Gr5oi744GZJyxFZGl0Oifnt6jpm4YnLFJlc2V0Oifjgrvjg4Pjg4jjgpLjgZfjgarjgYrjgZknLERvbmU6J+e1guOBiOOBnycsU2F2ZTon6YGp55So44GZ44KLJyxOZXh0OifmrKEnLCdFZGl0IEltYWdlJzon55S75YOP57eo6ZuGJywvLyBSZXRyeSBtZXNzYWdpbmdcbidDb25uZWN0aW9uIExvc3QnOifmjqXntprjgYzliIfmlq3jgZXjgozjgb7jgZfjgZ8nLCdSZXRyeWluZyBpbic6J+S7peS4i+OBp+WGjeippuihjO+8micsJ1RyeSBhZ2Fpbic6J+WGjeippuihjOOBmeOCiycsJ1RyeSBub3cnOifku4rjgZnjgZDjgoTjgaPjgabjgb/jgabkuIvjgZXjgYQnLC8vIExvY2FsIEZpbGUgU291cmNlXG4nRHJhZyBhbmQgRHJvcCwgQ29weSBhbmQgUGFzdGUgRmlsZXMnOifjg5XjgqHjgqTjg6vjga7jg4njg6njg4PjgrDjgqLjg7Pjg4njg4njg63jg4Pjg5fjgIHjg5XjgqHjgqTjg6vjga7jgrPjg5Tjg7zjgajosrzjgorku5jjgZEnLCdvciBEcmFnIGFuZCBEcm9wLCBDb3B5IGFuZCBQYXN0ZSBGaWxlcyc6J+OBvuOBn+OBr+OAgeODleOCoeOCpOODq+OCkuODieODqeODg+OCsOODu+OCouODs+ODieODu+ODieODreODg+ODl+OAgeOCs+ODlOODvOODu+OCouODs+ODieODu+ODmuODvOOCueODiOOBmeOCiycsJ1NlbGVjdCBGaWxlcyB0byBVcGxvYWQnOifjgqLjg4Pjg5fjg63jg7zjg4njgZnjgovjg5XjgqHjgqTjg6vjgpLpgbjmip4nLCdTZWxlY3QgRnJvbSc6J+OBi+OCiemBuOaKnicsJ0Ryb3AgeW91ciBmaWxlcyBhbnl3aGVyZSc6J+OBqeOBk+OBq+OBp+OCguODleOCoeOCpOODq+OCkuODieODreODg+ODl+OBmeOCiycsLy8gSW5wdXQgcGxhY2Vob2xkZXJzXG4nRW50ZXIgYSBVUkwnOidVUkzjgpLlhaXlipsnLCdTZWFyY2ggaW1hZ2VzJzon55S75YOP44KS5qSc57SiJywvLyBXZWJjYW0gU291cmNlXG4nV2ViY2FtIERpc2FibGVkJzon44Km44Kn44OW44Kr44Oh44Op44Gv44Kq44OVJywnV2ViY2FtIE5vdCBTdXBwb3J0ZWQnOifjgqbjgqfjg5bjgqvjg6Hjg6njga/jgrXjg53jg7zjg4jjgZXjgozjgb7jgZvjgpMnLCdQbGVhc2UgZW5hYmxlIHlvdXIgd2ViY2FtIHRvIHRha2UgYSBwaG90by4nOiflhpnnnJ/jgpLmkq7jgovjgZ/jgoHjgavjgqbjgqfjg5bjgqvjg6Hjg6njgpLmnInlirnjgavjgZfjgabjgY/jgaDjgZXjgYTjgIInLCdZb3VyIGN1cnJlbnQgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHdlYmNhbSBmdW5jdGlvbmFsaXR5Lic6J+ePvuWcqOOBruODluODqeOCpuOCtuOBr+OCpuOCp+ODluOCq+ODoeODqeapn+iDveOCkuOCteODneODvOODiOOBl+OBpuOBhOOBvuOBm+OCk+OAgicsJ1dlIHN1Z2dlc3QgdXNpbmcgQ2hyb21lIG9yIEZpcmVmb3guJzon56eB6YGU44GvIGZpcmVmb3gg44KS5L2/55So44GZ44KL44GT44Go44KS5o+Q5qGI44GZ44KL44CCJywvLyBFcnJvciBOb3RpZmljYXRpb25zXG4nRmlsZSB7ZGlzcGxheU5hbWV9IGlzIG5vdCBhbiBhY2NlcHRlZCBmaWxlIHR5cGUuIFRoZSBhY2NlcHRlZCBmaWxlIHR5cGVzIGFyZSB7dHlwZXN9Jzon44OV44Kh44Kk44Or5ZCNe2Rpc3BsYXlOYW1lfeOBr+OAgemAgeWPl+S/oeWPr+iDveOBquODleOCoeOCpOODq+W9ouW8j+OBp+OBr+OBguOCiuOBvuOBm+OCk+OAguWPl+OBkeWFpeOCjOWPr+iDveOBquODleOCoeOCpOODq+W9ouW8j+OBr3t0eXBlc33jgafjgZknLCdGaWxlIHtkaXNwbGF5TmFtZX0gaXMgdG9vIGJpZy4gVGhlIGFjY2VwdGVkIGZpbGUgc2l6ZSBpcyBsZXNzIHRoYW4ge3JvdW5kRmlsZVNpemV9Jzon44OV44Kh44Kk44Or5ZCNe2Rpc3BsYXlOYW1lfeOBruWuuemHj+OBjOWkp+OBjeOBmeOBjuOBvuOBmeOAgumAgeWPl+S/oeWPr+iDveOBquODleOCoeOCpOODq+OBruOCteOCpOOCuuOBr3tyb3VuZEZpbGVTaXplfeOBp+OBmScsJ091ciBmaWxlIHVwbG9hZCBsaW1pdCBpcyB7bWF4RmlsZXN9IHtmaWxlc1RleHR9Jzon5LiA5bqm44Gr44Ki44OD44OX44Ot44O844OJ44Gn44GN44KL44OV44Kh44Kk44Or44Gu5LiK6ZmQ44GvIHttYXhGaWxlc30ge2ZpbGVzVGV4dH0nLCdObyBzZWFyY2ggcmVzdWx0cyBmb3VuZCBmb3IgXCJ7c2VhcmNofVwiJzonXCJ7c2VhcmNofVwi44Gr6Kmy5b2T44GZ44KL44KC44Gu44Gv44GC44KK44G+44Gb44KTJywnQW4gZXJyb3Igb2NjdXJyZWQuIFBsZWFzZSB0cnkgYWdhaW4uJzon44Ko44Op44O844GM55m655Sf44GX44G+44GX44Gf44CCIOOCguOBhuS4gOW6puOChOOCiuebtOOBl+OBpuOBj+OBoOOBleOBhOOAgicsJ0ZpbGVzIFt7ZGlzcGxheU5hbWV9XSBhcmUgdG9vIGJpZy4gVGhlIGFjY2VwdGVkIGZpbGUgc2l6ZSBpcyB7bWF4U2l6ZX0nOifjg5XjgqHjgqTjg6tbe2Rpc3BsYXlOYW1lfV3jga/lpKfjgY3jgZnjgY7jgb7jgZnjgIIg5Y+X44GR5YWl44KM44KJ44KM44KL44OV44Kh44Kk44Or44K144Kk44K644Gve21heFNpemV944Gn44GZJywvLyBPdGhlciBVSSBsYWJlbHMgYW5kIHRpdGxlc1xuJ0NsaWNrIGhlcmUgb3IgaGl0IEVTQyB0byBjbG9zZSBwaWNrZXInOifjgZPjgZPjgpLjgq/jg6rjg4Pjgq/jgZnjgovjgYtFU0PjgpLmirzjgZnjgajplonjgZjjgb7jgZknfTt2YXIga289ey8vIEFjdGlvbnNcblVwbG9hZDon7JeF66Gc65Oc7ZWY6riwJywnVXBsb2FkIG1vcmUnOifrjZQg7JeF66Gc65OcJywnRGVzZWxlY3QgQWxsJzon66qo65GQIOy3qOyGjO2VmOq4sCcsJ1ZpZXcvRWRpdCBTZWxlY3RlZCc6J+yEoO2Dne2VnCDtjIzsnbzrk6Qg67O06riwL+yImOygle2VmOq4sCcsJ1NpZ24gT3V0Jzon66Gc6re47JWE7JuDJywvLyBTb3VyY2UgTGFiZWxzXG4nTXkgRGV2aWNlJzon64K0IOq4sOq4sCcsJ1dlYiBTZWFyY2gnOifsm7kg6rKA7IOJJywnVGFrZSBQaG90byc6J+yCrOynhOydhCDssI3slrQnLCdMaW5rIChVUkwpJzon66eB7YGsJywnUmVjb3JkIFZpZGVvJzon67mE65SU7JikIOuFue2ZlCcsJ1JlY29yZCBBdWRpbyc6J+yYpOuUlOyYpCDrhbnsnYwnLEZhY2Vib29rOiftjpjsnbTsiqTrtoEnLEluc3RhZ3JhbTon7J247Iqk7YOA6re4656oJyxEcm9wYm94Oifrk5zrno3rsJXsiqQnLCdHb29nbGUgUGhvdG9zJzon6rWs6riAIO2PrO2GoCcsJ0dvb2dsZSBEcml2ZSc6J+q1rOq4gCDrk5zrnbzsnbTruIwnLC8vIEN1c3RvbSBTb3VyY2VcbidDdXN0b20gU291cmNlJzon66ee7LakIOyGjOyKpCcsLy8gRm9vdGVyIFRleHRcbkFkZDon7LaU6rCAJywnbW9yZSBmaWxlJzon64uk66W4IO2MjOydvCcsJ21vcmUgZmlsZXMnOifri6Trpbgg7YyM7J2865OkJywvLyBDbG91ZFxuJ0Nvbm5lY3Qge3Byb3ZpZGVyTmFtZX0nOid7cHJvdmlkZXJOYW1lfSDsl7DqsrAnLCdTZWxlY3QgRmlsZXMgZnJvbSB7cHJvdmlkZXJOYW1lfSc6J3twcm92aWRlck5hbWV97JeQ7IScIO2MjOydvCDshKDtg50nLCdZb3UgbmVlZCB0byBhdXRoZW50aWNhdGUgd2l0aCB7cHJvdmlkZXJOYW1lfS4nOid7cHJvdmlkZXJOYW1lfeuhnCDsnbjspp3tlbTslbztlanri4jri6QuJywnQSBuZXcgcGFnZSB3aWxsIG9wZW4gdG8gY29ubmVjdCB5b3VyIGFjY291bnQuJzon6rOE7KCV7JeQIOyXsOqysO2VmOq4sCDsnITtlbQg7IOI66Gc7Jq0IOywveydtCDsl7Trpr3ri4jri6QnLCdXZSBvbmx5IGV4dHJhY3QgaW1hZ2VzIGFuZCBuZXZlciBtb2RpZnkgb3IgZGVsZXRlIHRoZW0uJzon7J2066+47KeA66W8IOyImOyglSDrmJDripQg7IKt7KCc7ZWY7KeAIOyViuqzoCDrtojrn6zrk6TsnoXri4jri6QnLCdUbyBkaXNjb25uZWN0IGZyb20ge3Byb3ZpZGVyTmFtZX0gY2xpY2sgXCJTaWduIG91dFwiIGJ1dHRvbiBpbiB0aGUgbWVudS4nOid7cHJvdmlkZXJOYW1lfeyXkOyEnCDsl7DqsrDsnYQg64GK7Jy866Ck66m0IOuplOuJtOyXkOyEnCBcIuuhnOq3uCDslYTsm4NcIuuyhO2KvOydhCDtgbTrpq3tlZjsi63si5zsmKQuJywnU2lnbiBpbiB3aXRoIEdvb2dsZSc6J0dvb2dsZeuhnCDroZzqt7jsnbgnLCdHbyBiYWNrJzon64+M7JWEIOqwgOq4sCcsJ1RoaXMgZm9sZGVyIGlzIGVtcHR5Lic6J+ydtCDtj7TrjZTripQg67mE7Ja0IOyeiOyKteuLiOuLpC4nLC8vIFN1bW1hcnlcbkZpbGVzOiftjIzsnbzrk6QnLEltYWdlczon7J2066+47KeAJyxVcGxvYWRlZDon7JeF66Gc65Oc65CY7JeI7Iq164uI64ukJyxVcGxvYWRpbmc6J+yXheuhnOuTnCDspJEnLENvbXBsZXRlZDon7JmE66OMIOuQqCcsRmlsdGVyOiftlYTthLAnLCdDcm9wcGVkIEltYWdlcyc6J+yekOuluCDsnbTrr7jsp4AnLCdFZGl0ZWQgSW1hZ2VzJzon7IiY7KCV65CcIO2MjOydvCcsJ1NlbGVjdGVkIEZpbGVzJzon7ISg7YOd65CcIO2MjOydvCcsJ0Nyb3AgaXMgcmVxdWlyZWQgb24gaW1hZ2VzJzon7J2066+47KeA7JeQIOyekOultOq4sOqwgCDtlYTsmpTtlanri4jri6QuJywvLyBUcmFuc2Zvcm1cbkNyb3A6J+yImO2ZleqzoCcsQ2lyY2xlOifsm5AnLFJvdGF0ZTon7ZqM7KCE7ZWY64ukJyxNYXNrOifqsJDstpTri6QnLFJldmVydDon67O17JuQJyxFZGl0OifsiJjsoJUnLFJlc2V0Oifri6Tsi5wg64aT6riwJyxEb25lOifrgZ3rgpwnLFNhdmU6J+q1rO2VmOuLpCcsTmV4dDon64uk7J2MIOqygycsJ0VkaXQgSW1hZ2UnOifsnbTrr7jsp4Ag7Y647KeRJywnVGhpcyBpbWFnZSBjYW5ub3QgYmUgZWRpdGVkJzon7J20IOydtOuvuOyngOuKlCDtjrjsp5Eg7ZWgIOyImCDsl4bsirXri4jri6QuJywvLyBSZXRyeSBtZXNzYWdpbmdcbidDb25uZWN0aW9uIExvc3QnOifsl7DqsrDsnbQg64GK7Ja07KeQJywnRmFpbGVkIFdoaWxlIFVwbG9hZGluZyc6J+yXheuhnOuTnO2VmOuKlCDrj5nslYgg7Iuk7Yyo7ZaI7Iq164uI64ukJywnUmV0cnlpbmcgaW4nOifsl5DshJwg64uk7IucIOyLnOuPhCcsJ1RyeSBhZ2Fpbic6J+uLpOyLnCDsi5zrj4TtlbTrs7Tsi63si5zsmKQnLCdUcnkgbm93Jzon7KeA6riIIOyLnOuPhCcsLy8gTG9jYWwgRmlsZSBTb3VyY2VcbidEcmFnIGFuZCBEcm9wLCBDb3B5IGFuZCBQYXN0ZSBGaWxlcyc6J+2MjOydvCDrk5zrnpjqt7gg7JWkIOuTnOuhrSwg7YyM7J28IOuzteyCrCDrsI8g67aZ7JesIOuEo+q4sCcsJ29yIERyYWcgYW5kIERyb3AsIENvcHkgYW5kIFBhc3RlIEZpbGVzJzon65iQ64qUIO2MjOydvOydhCDsnbTqs7Psl5Ag64GM7Ja064ukIOuGk+qxsOuCmCwg67O17IKsIOu2meyXrOuEo+q4sOulvCDtlaAg7IiYIOyeiOyKteuLiOuLpCcsJ1NlbGVjdCBGaWxlcyB0byBVcGxvYWQnOiftgbTrpq3tlbTshJwg7JeF66Gc65Oc7ZWgIO2MjOydvOydhCDshKDtg53tlbTso7zshLjsmpQnLCdTZWxlY3QgRnJvbSc6J+yEoO2Dneu2gO2EsCcsJ0Ryb3AgeW91ciBmaWxlcyBhbnl3aGVyZSc6J+yWtOuUlOyEnOuCmCDtjIzsnbwg64aT6riwJywvLyBJbnB1dCBwbGFjZWhvbGRlcnNcbidFbnRlciBhIFVSTCc6J1VSTCDsnoXroKUnLCdTZWFyY2ggaW1hZ2VzJzon7J2066+47KeAIOqygOyDie2VmOq4sCcsLy8gV2ViY2FtIFNvdXJjZVxuJ1dlYmNhbSBEaXNhYmxlZCc6J+ybuey6oCDquLDriqXsnbQg67mE7Zmc7ISx7ZmU65CY7JeI7Iq164uI64ukJywnV2ViY2FtIE5vdCBTdXBwb3J0ZWQnOifsm7nsuqDsnbQg7KeA7JuQ65CY7KeAIOyViuuKlCDquLDquLDsnoXri4jri6QnLCdQbGVhc2UgZW5hYmxlIHlvdXIgd2ViY2FtIHRvIHRha2UgYSBwaG90by4nOifsgqzsp4TsnYQg7LCN7Jy866Ck66m0IOybuey6oCDquLDriqXsnYQg7Zmc7ISx7ZmU7ZW07KO87IS47JqUJywnWW91ciBjdXJyZW50IGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB3ZWJjYW0gZnVuY3Rpb25hbGl0eS4nOiftmITsnqwg67iM65287Jqw7KCA64qUIOybuey6oCDquLDriqXsnYQg7KeA7JuQ7ZWY7KeAIOyViuyKteuLiOuLpCcsJ1dlIHN1Z2dlc3QgdXNpbmcgQ2hyb21lIG9yIEZpcmVmb3guJzon7YGs66GsIOuYkOuKlCDtjIzsnbTslrTtj63siqTrpbwg7J207Jqp7ZW07KO87IS47JqUJywvLyBFcnJvciBOb3RpZmljYXRpb25zXG4nRmlsZSB7ZGlzcGxheU5hbWV9IGlzIG5vdCBhbiBhY2NlcHRlZCBmaWxlIHR5cGUuIFRoZSBhY2NlcHRlZCBmaWxlIHR5cGVzIGFyZSB7dHlwZXN9Jzone2Rpc3BsYXlOYW1lfTog7JeF66Gc65OcIOqwgOuKpe2VnCDtjIzsnbwg7ZiV7IudKHt0eXBlc30p7J20IOyVhOuLiOudvCDsl4XroZzrk5ztlaAg7IiYIOyXhuyKteuLiOuLpCcsJ0ZpbGUge2Rpc3BsYXlOYW1lfSBpcyB0b28gYmlnLiBUaGUgYWNjZXB0ZWQgZmlsZSBzaXplIGlzIGxlc3MgdGhhbiB7cm91bmRGaWxlU2l6ZX0nOid7ZGlzcGxheU5hbWV9OiDsl4XroZzrk5wg6rCA64ql7ZWcIO2MjOydvCDsgqzsnbTspogoe3JvdW5kRmlsZVNpemV9KeuztOuLpCDsu6TshJwg7JeF66Gc65Oc7ZWgIOyImCDsl4bsirXri4jri6QnLCdPdXIgZmlsZSB1cGxvYWQgbGltaXQgaXMge21heEZpbGVzfSB7ZmlsZXNUZXh0fSc6J+y1nOuMgCB7bWF4RmlsZXN96rCcIO2MjOydvOydhCDsl4XroZzrk5ztlaAg7IiYIOyeiOyKteuLiOuLpCAoe2ZpbGVzVGV4dH0pJywnTm8gc2VhcmNoIHJlc3VsdHMgZm91bmQgZm9yIFwie3NlYXJjaH1cIic6J1wie3NlYXJjaH1cIuyXkCDrjIDtlZwg6rKA7IOJIOqysOqzvOqwgCDsl4bsirXri4jri6QuJywnQW4gZXJyb3Igb2NjdXJyZWQuIFBsZWFzZSB0cnkgYWdhaW4uJzon7Jik66WY6rCAIOuwnOyDne2WiOyKteuLiOuLpC4g64uk7IucIOyLnOuPhO2VmOyLreyLnOyYpC4nLCdGaWxlcyBbe2Rpc3BsYXlOYW1lfV0gYXJlIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMge21heFNpemV9JzonW3tkaXNwbGF5TmFtZX1dIO2MjOydvOydtCDrhIjrrLQg7YG964uI64ukLiDtl4jsmqnrkJjripQg7YyM7J28IO2BrOq4sOuKlCB7bWF4U2l6ZX3snoXri4jri6QuJywvLyBPdGhlciBVSSBsYWJlbHMgYW5kIHRpdGxlc1xuJ0NsaWNrIGhlcmUgb3IgaGl0IEVTQyB0byBjbG9zZSBwaWNrZXInOifsl6zquLDrpbwg7YG066at7ZWY6rGw64KYIEVzYyDtgqTrpbwg64iM65+sIOuLq+yKteuLiOuLpC4nfTt2YXIgbmw9ey8vIEFjdGlvbnNcblVwbG9hZDonVXBsb2FkZW4nLCdVcGxvYWQgbW9yZSc6J1VwbG9hZCBtZWVyJywnRGVzZWxlY3QgQWxsJzonRGVzZWxlY3RlZXIgYWxsZXMnLCdWaWV3L0VkaXQgU2VsZWN0ZWQnOidTZWxlY3RpZSBiZWtpamtlbi9hYW5wYXNzZW4nLCdTaWduIE91dCc6J0FmbWVsZGVuJywvLyBTb3VyY2UgTGFiZWxzXG4nTXkgRGV2aWNlJzonTWlqbiBhcHBhcmFhdCcsJ1dlYiBTZWFyY2gnOidab2VrZW4gb3AgaGV0IHdlYicsJ1Rha2UgUGhvdG8nOidGb3RvIG5lbWVuJywnTGluayAoVVJMKSc6J0xpbmsgKFVSTCknLCdSZWNvcmQgVmlkZW8nOidWaWRlbyBvcG5lbWVuJywnUmVjb3JkIEF1ZGlvJzonR2VsdWlkIG9wbmVtZW4nLC8vIEN1c3RvbSBTb3VyY2VcbidDdXN0b20gU291cmNlJzonQWFuZ2VwYXN0ZSBicm9uJywvLyBGb290ZXIgVGV4dFxuQWRkOidUb2V2b2VnZW4nLCdtb3JlIGZpbGUnOidtZWVyIGJlc3RhbmQnLCdtb3JlIGZpbGVzJzonbWVlciBiZXN0YW5kZW4nLC8vIENsb3VkXG4nQ29ubmVjdCB7cHJvdmlkZXJOYW1lfSc6J1ZlcmJpbmQge3Byb3ZpZGVyTmFtZX0nLCdTZWxlY3QgRmlsZXMgZnJvbSB7cHJvdmlkZXJOYW1lfSc6J1NlbGVjdGVlciBiZXN0YW5kZW4gb3Age3Byb3ZpZGVyTmFtZX0nLCdZb3UgbmVlZCB0byBhdXRoZW50aWNhdGUgd2l0aCB7cHJvdmlkZXJOYW1lfS4nOidVIG1vZXQgdmVyaWZpw6tyZW4gbWV0IHtwcm92aWRlck5hbWV9LicsJ0EgbmV3IHBhZ2Ugd2lsbCBvcGVuIHRvIGNvbm5lY3QgeW91ciBhY2NvdW50Lic6J0VlbiBuaWV1d2UgcGFnaW5hIHdvcmR0IGdlb3BlbmQgb20gdmVyYmluZGluZyB0ZSBtYWtlbiBtZXQgdXcgYWNjb3VudCcsJ1dlIG9ubHkgZXh0cmFjdCBpbWFnZXMgYW5kIG5ldmVyIG1vZGlmeSBvciBkZWxldGUgdGhlbS4nOidXZSBoYWxlbiBhbGxlZW4gdXcgYWZiZWVsZGluZ2VuIG9wIGVuIHp1bGxlbiBkZXplIG5vb2l0IGFhbnBhc3NlbiBvZiB2ZXJ3aWpkZXJlbicsJ1RvIGRpc2Nvbm5lY3QgZnJvbSB7cHJvdmlkZXJOYW1lfSBjbGljayBcIlNpZ24gb3V0XCIgYnV0dG9uIGluIHRoZSBtZW51Lic6J09tIGRlIHZlcmJpbmRpbmcgbWV0IHtwcm92aWRlck5hbWV9IHRlIHZlcmJyZWtlbiwga2xpayBqZSBvcCBcIkFmbWVsZGVuXCIgaW4gaGV0IG1lbnUuJywnU2lnbiBpbiB3aXRoIEdvb2dsZSc6J0xvZyBpbiBtZXQgR29vZ2xlJywnR28gYmFjayc6J0dhIHRlcnVnJywnVGhpcyBmb2xkZXIgaXMgZW1wdHkuJzonRGV6ZSBtYXAgaXMgbGVlZy4nLC8vIFN1bW1hcnlcbkZpbGVzOidCZXN0YW5kZW4nLEltYWdlczonQWZiZWVsZGluZ2VuJyxVcGxvYWRlZDonR2XDvHBsb2FkJyxVcGxvYWRpbmc6J0FhbiBoZXQgdXBsb2FkZW4nLENvbXBsZXRlZDonVm9sdG9vaWQnLEZpbHRlcjonWm9la2VuJywnQ3JvcHBlZCBJbWFnZXMnOidCaWpnZXNuZWRlbiBhZmJlZWxkaW5nZW4nLCdFZGl0ZWQgSW1hZ2VzJzonQmV3ZXJrdGUgYWZiZWVsZGluZ2VuJywnU2VsZWN0ZWQgRmlsZXMnOidHZXNlbGVjdGVlcmRlIGJlc3RhbmRlbicsJ0Nyb3AgaXMgcmVxdWlyZWQgb24gaW1hZ2VzJzonVWl0c25lZGUgaXMgdmVyZWlzdCBvcCBhZmJlZWxkaW5nZW4nLC8vIFRyYW5zZm9ybVxuQ3JvcDonVmVya2xlaW5lbicsQ2lyY2xlOidDaXJrZWwnLFJvdGF0ZTonRHJhYWllbicsTWFzazonTWFza2VyZW4nLFJldmVydDonT25nZWRhYW4gbWFrZW4nLEVkaXQ6J0Jld2Vya2VuJyxSZXNldDonT3BuaWV1dyB6ZXR0ZW4nLERvbmU6J0dlZGFhbicsU2F2ZTonT3BzbGFhbicsTmV4dDonVm9sZ2VuZGUnLCdFZGl0IEltYWdlJzonQmV3ZXJrIGFmYmVlbGRpbmcnLCdUaGlzIGltYWdlIGNhbm5vdCBiZSBlZGl0ZWQnOidEZXplIGFmYmVlbGRpbmcga2FuIG5pZXQgd29yZGVuIGJld2Vya3QnLC8vIFJldHJ5IG1lc3NhZ2luZ1xuJ0Nvbm5lY3Rpb24gTG9zdCc6J1ZlcmJpbmRpbmcgdmVyYnJva2VuJywnRmFpbGVkIFdoaWxlIFVwbG9hZGluZyc6J01pc2x1a3QgdGlqZGVucyBoZXQgdXBsb2FkZW4nLCdSZXRyeWluZyBpbic6J09wbmlldXcgcHJvYmVyZW4gb3ZlcicsJ1RyeSBhZ2Fpbic6J1Byb2JlZXIgaGV0IG5vZyBlZW5zJywnVHJ5IG5vdyc6J1Byb2JlZXIgbnUnLC8vIExvY2FsIEZpbGUgU291cmNlXG4nRHJhZyBhbmQgRHJvcCwgQ29weSBhbmQgUGFzdGUgRmlsZXMnOidTbGVlcCBiZXN0YW5kZW4gZW4gemV0IHplIG5lZXIsIGtvcGllZXIgZW4gcGxhayBiZXN0YW5kZW4nLCdvciBEcmFnIGFuZCBEcm9wLCBDb3B5IGFuZCBQYXN0ZSBGaWxlcyc6J29mIHNsZXBlbiwga29wacOrcmVuIGVuIHBsYWtrZW4gdmFuIGJlc3RhbmRlbicsJ1NlbGVjdCBGaWxlcyB0byBVcGxvYWQnOidTZWxlY3RlZXIgYmVzdGFuZGVuIG9tIHRlIHVwbG9hZGVuJywnU2VsZWN0IEZyb20nOidTZWxlY3RlcmVuJywnRHJvcCB5b3VyIGZpbGVzIGFueXdoZXJlJzonWmV0IGplIGJlc3RhbmRlbiBvdmVyYWwgbmVlcicsLy8gSW5wdXQgcGxhY2Vob2xkZXJzXG4nRW50ZXIgYSBVUkwnOidWb2VyIGVlbiBVUkwgaW4nLCdTZWFyY2ggaW1hZ2VzJzonWm9layBiZWVsZGVuJywvLyBXZWJjYW0gU291cmNlXG4nV2ViY2FtIERpc2FibGVkJzonV2ViY2FtIHVpdGdlc2NoYWtlbGQnLCdXZWJjYW0gTm90IFN1cHBvcnRlZCc6J1dlYmNhbSBuaWV0IG9uZGVyc3RldW5kJywnUGxlYXNlIGVuYWJsZSB5b3VyIHdlYmNhbSB0byB0YWtlIGEgcGhvdG8uJzonU2NoYWtlbCBkZSB3ZWJjYW0gaW4gb20gZWVuIGZvdG8gdGUgbWFrZW4nLCdZb3VyIGN1cnJlbnQgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHdlYmNhbSBmdW5jdGlvbmFsaXR5Lic6J0RlemUgYnJvd3NlciBoZWVmdCBnZWVuIG9uZGVyc3RldW5pbmcgdm9vciBlZW4gd2ViY2FtJywnV2Ugc3VnZ2VzdCB1c2luZyBDaHJvbWUgb3IgRmlyZWZveC4nOidXaWogcmFkZW4gYWFuIG9tIENocm9tZSBvZiBGaXJlZm94IHRlIGdlYnJ1aWtlbi4nLC8vIEVycm9yIE5vdGlmaWNhdGlvbnNcbidGaWxlIHtkaXNwbGF5TmFtZX0gaXMgbm90IGFuIGFjY2VwdGVkIGZpbGUgdHlwZS4gVGhlIGFjY2VwdGVkIGZpbGUgdHlwZXMgYXJlIHt0eXBlc30nOidIZXQgYmVzdGFuZHN0eXBlIHZhbiB7ZGlzcGxheU5hbWV9IHdvcmR0IG5pZXQgZ2VhY2NlcHRlZXJkLiBXZWwgdG9lZ2VzdGFuZSBiZXN0YW5kc3R5cGVuIHppam46IHt0eXBlc30nLCdGaWxlIHtkaXNwbGF5TmFtZX0gaXMgdG9vIGJpZy4gVGhlIGFjY2VwdGVkIGZpbGUgc2l6ZSBpcyBsZXNzIHRoYW4ge3JvdW5kRmlsZVNpemV9JzonSGV0IHtkaXNwbGF5TmFtZX0gaXMgdGUgZ3Jvb3QuIERlIG1heGltYWFsIHRvZWdlc3RhbmUgYmVzdGFuZHNncm9vdHRlIGlzOiB7cm91bmRGaWxlU2l6ZX0nLCdPdXIgZmlsZSB1cGxvYWQgbGltaXQgaXMge21heEZpbGVzfSB7ZmlsZXNUZXh0fSc6J0hldCBtYXhpbWFhbCBhYW50YWwsIHRlIHVwbG9hZGVuLCBiZXN0YW5kZW4gaXMge21heEZpbGVzfSB7ZmlsZXNUZXh0fScsJ05vIHNlYXJjaCByZXN1bHRzIGZvdW5kIGZvciBcIntzZWFyY2h9XCInOidHZWVuIHpvZWtyZXN1bHRhdGVuIGdldm9uZGVuIHZvb3IgXCJ7c2VhcmNofVwiJywnQW4gZXJyb3Igb2NjdXJyZWQuIFBsZWFzZSB0cnkgYWdhaW4uJzonRXIgaXMgZWVuIGZvdXQgb3BnZXRyZWRlbi4gUHJvYmVlciBoZXQgb3BuaWV1dy4nLCdGaWxlcyBbe2Rpc3BsYXlOYW1lfV0gYXJlIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMge21heFNpemV9JzonQmVzdGFuZGVuIFt7ZGlzcGxheU5hbWV9XSB6aWpuIHRlIGdyb290LiBEZSBnZWFjY2VwdGVlcmRlIGJlc3RhbmRzZ3Jvb3R0ZSBpcyB7bWF4U2l6ZX0nLC8vIE90aGVyIFVJIGxhYmVscyBhbmQgdGl0bGVzXG4nQ2xpY2sgaGVyZSBvciBoaXQgRVNDIHRvIGNsb3NlIHBpY2tlcic6J0tsaWsgaGllciBvZiBkcnVrIG9wIEVTQyBvbSB0ZSBzbHVpdGVuJ307dmFyIG5vJDE9ey8vIEFjdGlvbnNcblVwbG9hZDonTGFzdCBvcHAnLCdVcGxvYWQgbW9yZSc6J0xhc3Qgb3BwIG1lcicsJ0Rlc2VsZWN0IEFsbCc6J09wcGhldiBhbGxlJywnVmlldy9FZGl0IFNlbGVjdGVkJzonVmlzLyByZWRpZ2VyIHZhbGd0ZScsJ1NpZ24gT3V0JzonTG9nZyB1dCcsLy8gU291cmNlIExhYmVsc1xuJ015IERldmljZSc6J01pbiBlbmhldCcsJ1dlYiBTZWFyY2gnOidOZXR0c8O4aycsJ1Rha2UgUGhvdG8nOidUYSBiaWxkZScsJ0xpbmsgKFVSTCknOidMaW5rIChVUkwpJywnUmVjb3JkIFZpZGVvJzonVGEgb3BwIHZpZGVvJywnUmVjb3JkIEF1ZGlvJzonVGEgb3BwIGx5ZCcsLy8gQ3VzdG9tIFNvdXJjZVxuJ0N1c3RvbSBTb3VyY2UnOidFZ2VuZGVmaW5lcnQga2lsZGUnLC8vIEZvb3RlciBUZXh0XG5BZGQ6J0xlZ2cgdGlsJywnbW9yZSBmaWxlJzonZmxlcmUgZmlsZXInLCdtb3JlIGZpbGVzJzonZmxlcmUgZmlsZXInLC8vIENsb3VkXG4nQ29ubmVjdCB7cHJvdmlkZXJOYW1lfSc6J0tvYmxlIHtwcm92aWRlck5hbWV9JywnU2VsZWN0IEZpbGVzIGZyb20ge3Byb3ZpZGVyTmFtZX0nOidWZWxnIGZpbGVyIGZyYSB7cHJvdmlkZXJOYW1lfScsJ1lvdSBuZWVkIHRvIGF1dGhlbnRpY2F0ZSB3aXRoIHtwcm92aWRlck5hbWV9Lic6J0R1IG3DpSBhdXRlbnRpc2VyZSBtZWQge3Byb3ZpZGVyTmFtZX0uJywnQSBuZXcgcGFnZSB3aWxsIG9wZW4gdG8gY29ubmVjdCB5b3VyIGFjY291bnQuJzonRW4gbnkgc2lkZSB2aWwgw6VwbmVzIGZvciDDpSBrb2JsZSB0aWwgZGluIGtvbnRvJywnV2Ugb25seSBleHRyYWN0IGltYWdlcyBhbmQgbmV2ZXIgbW9kaWZ5IG9yIGRlbGV0ZSB0aGVtLic6J1ZpIHRyZWtrZXIga3VuIHV0IGJpbGRlciBvZyB2aWwgYWxkcmkgZW5kcmUgZWxsZXIgc2xldHRlIGRlbScsJ1RvIGRpc2Nvbm5lY3QgZnJvbSB7cHJvdmlkZXJOYW1lfSBjbGljayBcIlNpZ24gb3V0XCIgYnV0dG9uIGluIHRoZSBtZW51Lic6J0ZvciDDpSBrb2JsZSBmcmEge3Byb3ZpZGVyTmFtZX0ga2xpa2tlciBkdSBww6UgXCJMb2dnIHV0XCIgLWtuYXBwZW4gaSBtZW55ZW4uJywnU2lnbiBpbiB3aXRoIEdvb2dsZSc6J0xvZ2cgcMOlIG1lZCBHb29nbGUnLCdHbyBiYWNrJzonR8OlIHRpbGJha2UnLCdUaGlzIGZvbGRlciBpcyBlbXB0eS4nOidEZW5uZSBtYXBwZW4gZXIgdG9tLicsLy8gU3VtbWFyeVxuRmlsZXM6J0ZpbGVyJyxJbWFnZXM6J0JpbGRlcicsVXBsb2FkZWQ6J0xhc3RldCBvcHAnLFVwbG9hZGluZzonTGFzdGVyIG9wcCcsQ29tcGxldGVkOidGdWxsZsO4cnQnLEZpbHRlcjonRmlsdHJlcicsJ0Nyb3BwZWQgSW1hZ2VzJzonRmlsZXIgb2cgbWFwcGVyJywnRWRpdGVkIEltYWdlcyc6J1JlZGlnZXJ0ZSBiaWxkZXInLCdTZWxlY3RlZCBGaWxlcyc6J1ZhbGd0ZSBmaWxlcicsJ0Nyb3AgaXMgcmVxdWlyZWQgb24gaW1hZ2VzJzonQmVza2rDpnJpbmcgZXIgcMOla3JldmQgZm9yIGJpbGRlcicsLy8gVHJhbnNmb3JtXG5Dcm9wOidCZXNrasOmcicsQ2lyY2xlOidTaXJrZWwnLFJvdGF0ZTonUm90ZXJlJyxNYXNrOidNYXNrZScsUmV2ZXJ0OidUaWxiYWtlc3RpbGwnLEVkaXQ6J1JlZGlnZXInLFJlc2V0OidUaWxiYWtlc3RpbGwnLERvbmU6J0ZlcmRpZycsU2F2ZTonTGFncmUnLE5leHQ6J05lc3RlJywnRWRpdCBJbWFnZSc6J1JlZGlnZXIgYmlsZGUgJywnVGhpcyBpbWFnZSBjYW5ub3QgYmUgZWRpdGVkJzonRGV0dGUgYmlsZGV0IGthbiBpa2tlIHJlZGlnZXJlcycsLy8gUmV0cnkgbWVzc2FnaW5nXG4nQ29ubmVjdGlvbiBMb3N0JzonRm9yYmluZGVsc2UgbWlzdGV0JywnRmFpbGVkIFdoaWxlIFVwbG9hZGluZyc6J01pc2x5a3RlcyB1bmRlciBvcHBsYXN0aW5nJywnUmV0cnlpbmcgaW4nOidQcsO4dmVyIHDDpSBueXR0IG9tJywnVHJ5IGFnYWluJzonUHLDuHYgaWdqZW4nLCdUcnkgbm93JzonUHLDuHYgbsOlJywvLyBMb2NhbCBGaWxlIFNvdXJjZVxuJ0RyYWcgYW5kIERyb3AsIENvcHkgYW5kIFBhc3RlIEZpbGVzJzonRHJhIG9nIHNsaXBwLCBrb3BpZXIgb2cgbGltIGlubiBmaWxlcicsJ29yIERyYWcgYW5kIERyb3AsIENvcHkgYW5kIFBhc3RlIEZpbGVzJzonZWxsZXIgZHJhIG9nIHNsaXBwLCBrb3BpZXIgb2cgbGltIGlubiBmaWxlcicsJ1NlbGVjdCBGaWxlcyB0byBVcGxvYWQnOidWZWxnIGZpbGVyIHNvbSBza2FsIGxhc3RlcyBvcHAnLCdTZWxlY3QgRnJvbSc6J1ZlbGcgZnJhJywnRHJvcCB5b3VyIGZpbGVzIGFueXdoZXJlJzonU2xldHQgZmlsZW5lIGRpbmUgaHZvciBzb20gaGVsc3QnLC8vIElucHV0IHBsYWNlaG9sZGVyc1xuJ0VudGVyIGEgVVJMJzonU2tyaXYgaW5uIFVSTCcsJ1NlYXJjaCBpbWFnZXMnOidTw7hrIGJpbGRlcicsLy8gV2ViY2FtIFNvdXJjZVxuJ1dlYmNhbSBEaXNhYmxlZCc6J1dlYmthbWVyYSBkZWFrdGl2ZXJ0JywnV2ViY2FtIE5vdCBTdXBwb3J0ZWQnOidXZWJrYW1lcmEgaWtrZSBzdMO4dHRldCcsJ1BsZWFzZSBlbmFibGUgeW91ciB3ZWJjYW0gdG8gdGFrZSBhIHBob3RvLic6J1Zlbm5saWdzdCBha3RpdmVyIGRpdHQgd2Via2FtZXJhIGZvciDDpSB0YSBldCBiaWxkZS4nLCdZb3VyIGN1cnJlbnQgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHdlYmNhbSBmdW5jdGlvbmFsaXR5Lic6J0RpbiBuw6V2w6ZyZW5kZSBuZXR0bGVzZXIgc3TDuHR0ZXIgaWtrZSB3ZWJrYW1lcmEgZnVua3Nqb25hbGl0ZXQuJywnV2Ugc3VnZ2VzdCB1c2luZyBDaHJvbWUgb3IgRmlyZWZveC4nOidWaSBmb3Jlc2zDpXIgQ2hyb21lIGVsbGVyIEZpcmVmb3gnLC8vIEVycm9yIE5vdGlmaWNhdGlvbnNcbidGaWxlIHtkaXNwbGF5TmFtZX0gaXMgbm90IGFuIGFjY2VwdGVkIGZpbGUgdHlwZS4gVGhlIGFjY2VwdGVkIGZpbGUgdHlwZXMgYXJlIHt0eXBlc30nOidGaWxlbiB7ZGlzcGxheU5hbWV9IGVyIGlra2UgZW4gYWtzZXB0ZXJ0IGZpbHR5cGUuIERlIGdvZGtqZW50ZSBmaWx0eXBlciBlciB7dHlwZXN9JywnRmlsZSB7ZGlzcGxheU5hbWV9IGlzIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMgbGVzcyB0aGFuIHtyb3VuZEZpbGVTaXplfSc6J0ZpbGVuIHtkaXNwbGF5TmFtZX0gZXIgZm9yIHN0b3IuIEFrc2VwdGVydCBmaWxzdMO4cnJlbHNlIGVyIHtyb3VuZEZpbGVTaXplfScsJ091ciBmaWxlIHVwbG9hZCBsaW1pdCBpcyB7bWF4RmlsZXN9IHtmaWxlc1RleHR9JzonVsOlciBmaWxvcHBsYXN0aW5nc2dyZW5zZSBlciB7bWF4RmlsZXN9IHtmaWxlc1RleHR9JywnTm8gc2VhcmNoIHJlc3VsdHMgZm91bmQgZm9yIFwie3NlYXJjaH1cIic6J0luZ2VuIHPDuGtlcmVzdWx0YXRlciBmdW5uZXQgZm9yIFwie3NlYXJjaH1cIicsJ0FuIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgdHJ5IGFnYWluLic6J0VuIGZlaWwgb3Bwc3RvZC4gVsOmciBzw6Ugc25pbGwsIHByw7h2IHDDpSBueXR0LicsJ0ZpbGVzIFt7ZGlzcGxheU5hbWV9XSBhcmUgdG9vIGJpZy4gVGhlIGFjY2VwdGVkIGZpbGUgc2l6ZSBpcyB7bWF4U2l6ZX0nOidGaWxlbmUgW3tkaXNwbGF5TmFtZX1dIGVyIGZvciBzdG9yZS4gRGVuIGFrc2VwdGVydGUgZmlsc3TDuHJyZWxzZW4gZXIge21heFNpemV9JywvLyBPdGhlciBVSSBsYWJlbHMgYW5kIHRpdGxlc1xuJ0NsaWNrIGhlcmUgb3IgaGl0IEVTQyB0byBjbG9zZSBwaWNrZXInOidLbGlrayBoZXIgZWxsZXIgdHJ5a2sgRVNDIGZvciDDpSBsdWtrZSd9O3ZhciBwbD17Ly8gQWN0aW9uc1xuVXBsb2FkOidQcnplxZtsaWogcGxpa2knLCdVcGxvYWQgbW9yZSc6J1ByemXFm2xpaiB3acSZY2VqJywnRGVzZWxlY3QgQWxsJzonT2R6bmFjeiB3c3p5c3RrbycsJ1ZpZXcvRWRpdCBTZWxlY3RlZCc6J1d5xZt3aWV0bC9FZHl0dWogemF6bmFjem9uZScsJ1NpZ24gT3V0JzonV3lsb2d1aiBzacSZJywvLyBTb3VyY2UgTGFiZWxzXG4nTXkgRGV2aWNlJzonTW9qZSB1cnrEhWR6ZW5pZScsJ1dlYiBTZWFyY2gnOidHcmFmaWthIHogaW50ZXJuZXR1JywnVGFrZSBQaG90byc6J1pyw7NiIHpkasSZY2llJywnTGluayAoVVJMKSc6J0FkcmVzIFVSTCcsJ1JlY29yZCBWaWRlbyc6J05hZ3JhxIcgd2lkZW8nLCdSZWNvcmQgQXVkaW8nOidOYWdyYcSHIGTFundpxJlrJywvLyBDdXN0b20gU291cmNlXG4nQ3VzdG9tIFNvdXJjZSc6J05pZXN0YW5kYXJkb3dlIMW6csOzZMWCbycsLy8gRm9vdGVyIFRleHRcbkFkZDonRG9kYWonLCdtb3JlIGZpbGUnOid3acSZY2VqIHBsaWvDs3cnLCdtb3JlIGZpbGVzJzond2nEmWNlaiBwbGlrw7N3JywvLyBDbG91ZFxuJ0Nvbm5lY3Qge3Byb3ZpZGVyTmFtZX0nOidQb8WCxIVjeiB6IHtwcm92aWRlck5hbWV9JywnU2VsZWN0IEZpbGVzIGZyb20ge3Byb3ZpZGVyTmFtZX0nOidXeWJpZXJ6IHBsaWtpIHoge3Byb3ZpZGVyTmFtZX0nLCdZb3UgbmVlZCB0byBhdXRoZW50aWNhdGUgd2l0aCB7cHJvdmlkZXJOYW1lfS4nOidNdXNpc3ogem9zdGHEhyB6YXV0b3J5em93YW55IHByemV6IHtwcm92aWRlck5hbWV9LicsJ0EgbmV3IHBhZ2Ugd2lsbCBvcGVuIHRvIGNvbm5lY3QgeW91ciBhY2NvdW50Lic6J05vd2Egc3Ryb25hIHpvc3RhbmllIG90d2FydGEgdyBjZWx1IHBvxYLEhWN6ZW5pYSB6IFR3b2ltIGtvbnRlbS4nLCdXZSBvbmx5IGV4dHJhY3QgaW1hZ2VzIGFuZCBuZXZlciBtb2RpZnkgb3IgZGVsZXRlIHRoZW0uJzonTWFteSB0eWxrbyB3eW9kcsSZYm5pxIcgb2JyYXp5IGkgbmlnZHkgem1vZHlmaWtvd2HEhyBsdWIgdXN1bsSFxIcgamUnLCdUbyBkaXNjb25uZWN0IGZyb20ge3Byb3ZpZGVyTmFtZX0gY2xpY2sgXCJTaWduIG91dFwiIGJ1dHRvbiBpbiB0aGUgbWVudS4nOidBYnkgcm96xYLEhWN6ecSHIHNpxJkgeiB7cHJvdmlkZXJOYW1lfSBrbGlrbmlqIFwiV3lsb2d1aiBzacSZXCIgdyBtZW51LicsJ1NpZ24gaW4gd2l0aCBHb29nbGUnOidaYWxvZ3VqIHNpxJkgZG8gR29vZ2xlJywnR28gYmFjayc6J1dyw7PEhycsJ1RoaXMgZm9sZGVyIGlzIGVtcHR5Lic6J1RlbiBmb2xkZXIgamVzdCBwdXN0eS4nLC8vIFN1bW1hcnlcbkZpbGVzOidQbGlraScsSW1hZ2VzOidPYnJhenknLFVwbG9hZGVkOidQcnplc8WCYW55JyxVcGxvYWRpbmc6J1ByemVzecWCYW5pZSBkYW55Y2gnLENvbXBsZXRlZDonVWtvxYRjem9ubycsRmlsdGVyOidTenVrYWonLCdDcm9wcGVkIEltYWdlcyc6J1ByenljacSZdGUgb2JyYXp5JywnRWRpdGVkIEltYWdlcyc6J0VkeXRvd2FuZSBvYnJhenknLCdTZWxlY3RlZCBGaWxlcyc6J1d5YnJhbmUgcGxpa2knLCdDcm9wIGlzIHJlcXVpcmVkIG9uIGltYWdlcyc6J1ByenljaW5hbmllIGplc3Qgd3ltYWdhbmUgbmEgb2JyYXphY2gnLC8vIFRyYW5zZm9ybVxuQ3JvcDoncHJ6eXRuaWonLENpcmNsZToncHJ6eXRuaWogdyBrc3p0YcWCY2llIGtvxYJhJyxSb3RhdGU6J29icsOzxIcnLE1hc2s6J2RvZGFqIHdhcnN0d8SZJyxSZXZlcnQ6J0NvZm5paicsRWRpdDonRWR5dHVqJyxSZXNldDoncHJ6eXdyw7PEhyBvcnlnaW5hxYInLERvbmU6J0dvdG93ZScsU2F2ZTonWmFwaXNhxIcnLE5leHQ6J0tvbGVqbnknLCdFZGl0IEltYWdlJzonRWR5dHVqIHpkasSZY2llJywnVGhpcyBpbWFnZSBjYW5ub3QgYmUgZWRpdGVkJzonVGVnbyBvYnJhenUgbmllIG1vxbxuYSBlZHl0b3dhxIcnLC8vIFJldHJ5IG1lc3NhZ2luZ1xuJ0Nvbm5lY3Rpb24gTG9zdCc6J1V0cmFjb25vIHBvxYLEhWN6ZW5pZScsJ0ZhaWxlZCBXaGlsZSBVcGxvYWRpbmcnOidXeXN0xIVwacWCIGLFgsSFZCBwb2RjemFzIHByemVzecWCYW5pYScsJ1JldHJ5aW5nIGluJzonUG9uYXdpYW0gcHLDs2LEmScsJ1RyeSBhZ2Fpbic6J1NwcsOzYnVqIHBvbm93bmllJywnVHJ5IG5vdyc6J1NwcsOzYnVqIHRlcmF6JywvLyBMb2NhbCBGaWxlIFNvdXJjZVxuJ0RyYWcgYW5kIERyb3AsIENvcHkgYW5kIFBhc3RlIEZpbGVzJzonUHJ6ZWNpxIVnbmlqIGkgdXB1xZvEhyBwbGlraScsJ29yIERyYWcgYW5kIERyb3AsIENvcHkgYW5kIFBhc3RlIEZpbGVzJzonbHViIHByemVjacSFZ25paiBpIHVwdcWbxIcsIGtvcGlvd2HEhyBpIHdrbGVqYcSHIHBsaWtpJywnU2VsZWN0IEZpbGVzIHRvIFVwbG9hZCc6J1d5YmllcnogcGxpa2kgZG8gcHJ6ZXPFgmFuaWEnLCdTZWxlY3QgRnJvbSc6J1d5YmllcnogeicsJ0Ryb3AgeW91ciBmaWxlcyBhbnl3aGVyZSc6J1VwdcWbxIcgc3dvamUgcGxpa2kgdyBkb3dvbG55bSBtaWVqc2N1JywvLyBJbnB1dCBwbGFjZWhvbGRlcnNcbidFbnRlciBhIFVSTCc6J1dwcm93YWTFuiBhZHJlcyBVUkwnLCdTZWFyY2ggaW1hZ2VzJzonU3p1a2FqIG9icmF6w7N3JywvLyBXZWJjYW0gU291cmNlXG4nV2ViY2FtIERpc2FibGVkJzonS2FtZXJhIGplc3Qgd3nFgsSFY3pvbmEnLCdXZWJjYW0gTm90IFN1cHBvcnRlZCc6J0thbWVyYSBuaWUgamVzdCBvYnPFgnVnaXdhbmEnLCdQbGVhc2UgZW5hYmxlIHlvdXIgd2ViY2FtIHRvIHRha2UgYSBwaG90by4nOidQcm9zesSZIHfFgsSFY3p5xIcga2FtZXLEmSBpbnRlcm5ldG93xIUsIGFieSB6cm9iacSHIHpkasSZY2llJywnWW91ciBjdXJyZW50IGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB3ZWJjYW0gZnVuY3Rpb25hbGl0eS4nOidUd29qYSBwcnplZ2zEhWRhcmthIG9iZWNuaWUgbmllIG9ic8WCdWd1amUgZnVua2NqaSBrYW1lcnkgaW50ZXJuZXRvd2VqLicsJ1dlIHN1Z2dlc3QgdXNpbmcgQ2hyb21lIG9yIEZpcmVmb3guJzonWmFsZWNhbXkgdcW8eWNpZSBDaHJvbWUgbHViIEZpcmVmb3gnLC8vIEVycm9yIE5vdGlmaWNhdGlvbnNcbidGaWxlIHtkaXNwbGF5TmFtZX0gaXMgbm90IGFuIGFjY2VwdGVkIGZpbGUgdHlwZS4gVGhlIGFjY2VwdGVkIGZpbGUgdHlwZXMgYXJlIHt0eXBlc30nOid7ZGlzcGxheU5hbWV9IFBsaWsgbmllIGplc3QgdHlwZW0gcGxpa8OzdyBha2NlcHRvd2FuZS4gVHlweSBwbGlrw7N3IGFrY2VwdG93YW5lIHPEhSB7dHlwZXN9JywnRmlsZSB7ZGlzcGxheU5hbWV9IGlzIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMgbGVzcyB0aGFuIHtyb3VuZEZpbGVTaXplfSc6J3tkaXNwbGF5TmFtZX0gUGxpayBqZXN0IHpieXQgZHXFvGUuIFJvem1pYXIgcGxpa8OzdyBha2NlcHRvd2FuZSBqZXN0IHtyb3VuZEZpbGVTaXplfScsJ091ciBmaWxlIHVwbG9hZCBsaW1pdCBpcyB7bWF4RmlsZXN9IHtmaWxlc1RleHR9JzonTmFzeiBsaW1pdCB1cGxvYWR1IHBsaWt1IGplc3Qge21heEZpbGVzfSB7ZmlsZXNUZXh0fScsJ05vIHNlYXJjaCByZXN1bHRzIGZvdW5kIGZvciBcIntzZWFyY2h9XCInOidOaWUgem5hbGV6aW9ubyB3eW5pa293IGRsYSBcIntzZWFyY2h9XCInLCdBbiBlcnJvciBvY2N1cnJlZC4gUGxlYXNlIHRyeSBhZ2Fpbi4nOidXeXN0xIVwacWCIGLFgsSFZC4gU3Byw7NidWogcG9ub3duaWUuJywnRmlsZXMgW3tkaXNwbGF5TmFtZX1dIGFyZSB0b28gYmlnLiBUaGUgYWNjZXB0ZWQgZmlsZSBzaXplIGlzIHttYXhTaXplfSc6J1BsaWtpIFt7ZGlzcGxheU5hbWV9XSBzxIUgemEgZHXFvGUuIEFrY2VwdG93YW55IHJvem1pYXIgcGxpa3UgdG8ge21heFNpemV9JywvLyBPdGhlciBVSSBsYWJlbHMgYW5kIHRpdGxlc1xuJ0NsaWNrIGhlcmUgb3IgaGl0IEVTQyB0byBjbG9zZSBwaWNrZXInOidLbGlrbmlqIHR1dGFqIGx1YiBuYWNpxZtuaWogRVNDLCBhYnkgemFta27EhcSHJ307dmFyIHB0PXsvLyBBY3Rpb25zXG5VcGxvYWQ6J0NhcnJlZ2FyJywnVXBsb2FkIG1vcmUnOidDYXJyZWdhciBtYWlzJywnRGVzZWxlY3QgQWxsJzonRGVzbWFyY2FyIHRvZG9zJywnVmlldy9FZGl0IFNlbGVjdGVkJzonRXhpYmlyL0VkaXRhciBzZWxlY2lvbmFkYScsJ1NpZ24gT3V0JzonRGVzY29uZWN0YXInLC8vIFNvdXJjZSBMYWJlbHNcbidNeSBEZXZpY2UnOidNZXUgZGlzcG9zaXRpdm8nLCdXZWIgU2VhcmNoJzonQnVzY2FyIGltYWdlbnMgbmEgV2ViJywnVGFrZSBQaG90byc6J1RpcmFyIEZvdG8nLCdMaW5rIChVUkwpJzonTGluayAoVVJMKScsJ1JlY29yZCBWaWRlbyc6J0dyYXZhciB2w61kZW8nLCdSZWNvcmQgQXVkaW8nOidHcmF2YXIgYXVkaW8nLC8vIEN1c3RvbSBTb3VyY2VcbidDdXN0b20gU291cmNlJzonRm9udGUgUGVyc29uYWxpemFkYScsLy8gRm9vdGVyIFRleHRcbkFkZDonQWRpY2lvbmFyJywnbW9yZSBmaWxlJzonYXJxdWl2byBtYWlzJywnbW9yZSBmaWxlcyc6J21haXMgYXJxdWl2b3MnLC8vIENsb3VkXG4nQ29ubmVjdCB7cHJvdmlkZXJOYW1lfSc6J0NvbmVjdGUgbyB7cHJvdmlkZXJOYW1lfScsJ1NlbGVjdCBGaWxlcyBmcm9tIHtwcm92aWRlck5hbWV9JzonU2VsZWNpb25lIGFycXVpdm9zIGRvIHtwcm92aWRlck5hbWV9JywnWW91IG5lZWQgdG8gYXV0aGVudGljYXRlIHdpdGgge3Byb3ZpZGVyTmFtZX0uJzonVm9jw6ogcHJlY2lzYSBzZSBhdXRlbnRpY2FyIGNvbSBvIHtwcm92aWRlck5hbWV9LicsJ0EgbmV3IHBhZ2Ugd2lsbCBvcGVuIHRvIGNvbm5lY3QgeW91ciBhY2NvdW50Lic6J1VtYSBub3ZhIHDDoWdpbmEgc2Vyw6EgYWJlcnRhIHBhcmEgY29uZWN0YXIgYSBzdWEgY29udGEuJywnV2Ugb25seSBleHRyYWN0IGltYWdlcyBhbmQgbmV2ZXIgbW9kaWZ5IG9yIGRlbGV0ZSB0aGVtLic6J07Ds3MgYXBlbmFzIGV4dHJhw61tb3Mgb3MgYXJxdWl2b3Mgc2VsZWNpb25hZG9zIGUgbnVuY2Egb3MgbW9kaWZpY2Ftb3Mgb3Ugb3MgcmVtb3ZlbW9zLicsJ1RvIGRpc2Nvbm5lY3QgZnJvbSB7cHJvdmlkZXJOYW1lfSBjbGljayBcIlNpZ24gb3V0XCIgYnV0dG9uIGluIHRoZSBtZW51Lic6J1BhcmEgZGVzY29uZWN0YXIgZG8ge3Byb3ZpZGVyTmFtZX0sIGNsaXF1ZSBubyBib3TDo28gXCJEZXNjb25lY3RhclwiIG5vIG1lbnUuJywnU2lnbiBpbiB3aXRoIEdvb2dsZSc6J0Zhw6dhIGxvZ2luIG5vIEdvb2dsZScsJ0dvIGJhY2snOidWb2x0ZScsJ1RoaXMgZm9sZGVyIGlzIGVtcHR5Lic6J0VzdGEgcGFzdGEgZXN0w6EgdmF6aWEuJywvLyBTdW1tYXJ5XG5GaWxlczonRmljaGVpcm9zJyxJbWFnZXM6J0ltYWdlbnMnLFVwbG9hZGVkOidDYXJyZWdhZG8nLFVwbG9hZGluZzonQSBFbnZpYXInLENvbXBsZXRlZDonQ29uY2x1w61kbycsRmlsdGVyOidPcmRlbmFyJywnQ3JvcHBlZCBJbWFnZXMnOidJbWFnZW5zIENvcnRhZGFzJywnRWRpdGVkIEltYWdlcyc6J0ltYWdlbnMgRWRpdGFkYXMnLCdTZWxlY3RlZCBGaWxlcyc6J0FycXVpdm9zIHNlbGVjaW9uYWRvcycsJ0Nyb3AgaXMgcmVxdWlyZWQgb24gaW1hZ2VzJzonQSBjb2xoZWl0YSDDqSBuZWNlc3PDoXJpYSBlbSBpbWFnZW5zJywvLyBUcmFuc2Zvcm1cbkNyb3A6J0NvcnRhcicsQ2lyY2xlOidDw61yY3VsbycsUm90YXRlOidSb2RhcicsTWFzazonTWFzY2FyYXInLFJldmVydDonRGVzZmF6ZXInLEVkaXQ6J0VkaXRhcicsUmVzZXQ6J1JlY29tcG9yJyxEb25lOidGZWl0bycsU2F2ZTonU2FsdmUnLE5leHQ6J1Byw7N4aW1vJywnRWRpdCBJbWFnZSc6J0VkaXRhciBJbWFnZW0nLCdUaGlzIGltYWdlIGNhbm5vdCBiZSBlZGl0ZWQnOidFc3RhIGltYWdlbSBuw6NvIHBvZGUgc2VyIGVkaXRhZGEnLC8vIFJldHJ5IG1lc3NhZ2luZ1xuJ0ZhaWxlZCBXaGlsZSBVcGxvYWRpbmcnOidGYWxoYSBhbyBlbnZpYXInLCdSZXRyeWluZyBpbic6J0EgVGVudGFyIE5vdmFtZW50ZSBlbScsJ0Nvbm5lY3Rpb24gTG9zdCc6J0xpZ2HDp8OjbyBwZXJkaWRhJywnVHJ5IGFnYWluJzonVGVudGUgbm92YW1lbnRlJywnVHJ5IG5vdyc6J1RlbnRlIGFnb3JhJywvLyBMb2NhbCBGaWxlIFNvdXJjZVxuJ0RyYWcgYW5kIERyb3AsIENvcHkgYW5kIFBhc3RlIEZpbGVzJzonQXJyYXN0ZSBlIHNvbHRlLCBjb3BpZSBlIGNvbGUgYXJxdWl2b3MnLCdvciBEcmFnIGFuZCBEcm9wLCBDb3B5IGFuZCBQYXN0ZSBGaWxlcyc6J291IGFycmFzdGFyLCBjb3BpYXIgZSBjb2xhciBhcnF1aXZvcycsJ1NlbGVjdCBGaWxlcyB0byBVcGxvYWQnOidTZWxlY2lvbmFyIGFycXVpdm9zIHBhcmEgdXBsb2FkJywnU2VsZWN0IEZyb20nOidTZWxlY2lvbmUgZGUnLCdEcm9wIHlvdXIgZmlsZXMgYW55d2hlcmUnOidTb2x0ZSBzZXVzIGFycXVpdm9zIGVtIHF1YWxxdWVyIGx1Z2FyJywvLyBJbnB1dCBwbGFjZWhvbGRlcnNcbidFbnRlciBhIFVSTCc6J0luc2lyYSB1bSBVUkwnLCdTZWFyY2ggaW1hZ2VzJzonUHJvY3VyYXIgZm90b3MnLC8vIFdlYmNhbSBTb3VyY2VcbidXZWJjYW0gRGlzYWJsZWQnOidXZWJjYW0gRGVzYXRpdmFkYScsJ1dlYmNhbSBOb3QgU3VwcG9ydGVkJzonV2ViY2FtIE7Do28gU3Vwb3J0YWRhJywnUGxlYXNlIGVuYWJsZSB5b3VyIHdlYmNhbSB0byB0YWtlIGEgcGhvdG8uJzonUG9yIGZhdm9yLCBhdGl2ZSBzdWEgd2ViY2FtIHBhcmEgdGlyYXIgdW1hIGZvdG8nLCdZb3VyIGN1cnJlbnQgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHdlYmNhbSBmdW5jdGlvbmFsaXR5Lic6J1NldSBuYXZlZ2Fkb3IgYXR1YWwgbsOjbyBzdXBvcnRhIGNvbmV4w6NvIGNvbSBhIHdlYmNhbS4nLCdXZSBzdWdnZXN0IHVzaW5nIENocm9tZSBvciBGaXJlZm94Lic6J07Ds3Mgc3VnZXJpbW9zIENocm9tZSBvdSBGaXJlZm94LicsLy8gRXJyb3IgTm90aWZpY2F0aW9uc1xuJ0ZpbGUge2Rpc3BsYXlOYW1lfSBpcyBub3QgYW4gYWNjZXB0ZWQgZmlsZSB0eXBlLiBUaGUgYWNjZXB0ZWQgZmlsZSB0eXBlcyBhcmUge3R5cGVzfSc6JyBBcnF1aXZvIHtkaXNwbGF5TmFtZX0gbsOjbyDDqSB1bSB0aXBvIGRlIGFycXVpdm8gYWNlaXRvcy4gT3MgdGlwb3MgZGUgYXJxdWl2byBhY2VpdG9zIHPDo28ge3R5cGVzfScsJ0ZpbGUge2Rpc3BsYXlOYW1lfSBpcyB0b28gYmlnLiBUaGUgYWNjZXB0ZWQgZmlsZSBzaXplIGlzIGxlc3MgdGhhbiB7cm91bmRGaWxlU2l6ZX0nOid7ZGlzcGxheU5hbWV9IEFycXVpdm8gw6kgbXVpdG8gZ3JhbmRlLiBPIHRhbWFuaG8gZGUgYXJxdWl2byBhY2VpdG8gw6kge3JvdW5kRmlsZVNpemV9JywnT3VyIGZpbGUgdXBsb2FkIGxpbWl0IGlzIHttYXhGaWxlc30ge2ZpbGVzVGV4dH0nOifDiSBvIG5vc3NvIGxpbWl0ZSBkZSB1cGxvYWQgZGUgYXJxdWl2byB7bWF4RmlsZXN9IHtmaWxlc1RleHR9JywnTm8gc2VhcmNoIHJlc3VsdHMgZm91bmQgZm9yIFwie3NlYXJjaH1cIic6J05lbmh1bSByZXN1bHRhZG8gZGUgcGVzcXVpc2EgZW5jb250cmFkbyBwYXJhIFwie3NlYXJjaH1cIicsJ0FuIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgdHJ5IGFnYWluLic6J1VtIGVycm8gb2NvcnJldS4gUG9yIGZhdm9yLCB0ZW50ZSBub3ZhbWVudGUuJywnRmlsZXMgW3tkaXNwbGF5TmFtZX1dIGFyZSB0b28gYmlnLiBUaGUgYWNjZXB0ZWQgZmlsZSBzaXplIGlzIHttYXhTaXplfSc6J09zIGFycXVpdm9zIFt7ZGlzcGxheU5hbWV9XSBzw6NvIG11aXRvIGdyYW5kZXMuIE8gdGFtYW5obyBkbyBhcnF1aXZvIGFjZWl0byDDqSB7bWF4U2l6ZX0nLC8vIE90aGVyIFVJIGxhYmVscyBhbmQgdGl0bGVzXG4nQ2xpY2sgaGVyZSBvciBoaXQgRVNDIHRvIGNsb3NlIHBpY2tlcic6J0NsaXF1ZSBhcXVpIG91IHByZXNzaW9uZSBFU0MgcGFyYSBmZWNoYXInfTt2YXIgcnU9ey8vIEFjdGlvbnNcblVwbG9hZDon0LfQsNCz0YDRg9C30LjRgtGMJywnVXBsb2FkIG1vcmUnOifQl9Cw0LPRgNGD0LfQuNGC0Ywg0LHQvtC70YzRiNC1JywnRGVzZWxlY3QgQWxsJzon0L7RgtC80LXQvdCwJywnVmlldy9FZGl0IFNlbGVjdGVkJzon0L/RgNC+0YHQvNC+0YLRgNC10YLRjC/RgNC10LTQsNC60YLQuNGA0L7QstCw0YLRjCcsJ1NpZ24gT3V0Jzon0LLRi9C50YLQuCcsLy8gU291cmNlIExhYmVsc1xuJ015IERldmljZSc6J9Cc0L7RkSDRg9GB0YLRgNC+0LnRgdGC0LLQvicsJ1dlYiBTZWFyY2gnOifQn9C+0LjRgdC6INC40LfQvtCx0YDQsNC20LXQvdC40Lkg0LIg0YHQtdGC0LgnLCdUYWtlIFBob3RvJzon0KTQvtGC0L7Qs9GA0LDRhNC40YDQvtCy0LDRgtGMJywnTGluayAoVVJMKSc6J1VSTC3QsNC00YDQtdGBJywnUmVjb3JkIFZpZGVvJzon0JfQsNC/0LjRgdGMINCy0LjQtNC10L4nLCdSZWNvcmQgQXVkaW8nOifQl9Cw0L/QuNGB0Ywg0LDRg9C00LjQvicsLy8gQ3VzdG9tIFNvdXJjZVxuJ0N1c3RvbSBTb3VyY2UnOifQn9C+0LvRjNC30L7QstCw0YLQtdC70YzRgdC60LjQuSDQuNGB0YLQvtGH0L3QuNC6JywvLyBGb290ZXIgVGV4dFxuQWRkOifQlNC+0LHQsNCy0LjRgtGMJywnbW9yZSBmaWxlJzon0LHQvtC70LXQtSDRhNCw0LnQu9CwJywnbW9yZSBmaWxlcyc6J9Cx0L7Qu9GM0YjQtSDRhNCw0LnQu9C+0LInLC8vIENsb3VkXG4nQ29ubmVjdCB7cHJvdmlkZXJOYW1lfSc6J9Cf0L7QtNC60LvRjtGH0LjRgtC1IHtwcm92aWRlck5hbWV9JywnU2VsZWN0IEZpbGVzIGZyb20ge3Byb3ZpZGVyTmFtZX0nOifQktGL0LHRgNCw0YLRjCDRhNCw0LnQu9GLINC40Lcge3Byb3ZpZGVyTmFtZX0nLCdZb3UgbmVlZCB0byBhdXRoZW50aWNhdGUgd2l0aCB7cHJvdmlkZXJOYW1lfS4nOifQktCw0Lwg0L3Rg9C20L3QviDQv9GA0L7QudGC0Lgg0LDRg9GC0LXQvdGC0LjRhNC40LrQsNGG0LjRjiDRgSDQv9C+0LzQvtGJ0YzRjiB7cHJvdmlkZXJOYW1lfS4nLCdBIG5ldyBwYWdlIHdpbGwgb3BlbiB0byBjb25uZWN0IHlvdXIgYWNjb3VudC4nOifQndC+0LLQsNGPINGB0YLRgNCw0L3QuNGG0LAg0L7RgtC60YDRi9Cy0LDQtdGC0YHRjyDRh9GC0L7QsdGLINC/0L7QtNC60LvRjtGH0LjRgtGMINCy0LDRiCDQsNC60LrQsNGD0L3RgicsJ1dlIG9ubHkgZXh0cmFjdCBpbWFnZXMgYW5kIG5ldmVyIG1vZGlmeSBvciBkZWxldGUgdGhlbS4nOifQnNGLINC/0YDQvtGB0YLQviDQuNC30LLQu9C10LrQsNC10Lwg0YTQvtGC0L4sINCwINC90LjQutC+0LPQtNCwINC90LUg0LjRhSDQuNC30LzQtdC90Y/QtdC8INC40LvQuCDRg9C00LDQu9C40LwnLCdUbyBkaXNjb25uZWN0IGZyb20ge3Byb3ZpZGVyTmFtZX0gY2xpY2sgXCJTaWduIG91dFwiIGJ1dHRvbiBpbiB0aGUgbWVudS4nOifQp9GC0L7QsdGLINC+0YLQutC70Y7Rh9C40YLRjNGB0Y8g0L7RgiB7cHJvdmlkZXJOYW1lfSwg0L3QsNC20LzQuNGC0LUg0LrQvdC+0L/QutGDIMKr0JLRi9C50YLQuMK7INCyINC80LXQvdGOLicsJ1NpZ24gaW4gd2l0aCBHb29nbGUnOifQktC+0LnRgtC4INGH0LXRgNC10LcgR29vZ2xlJywnR28gYmFjayc6J9CS0LXRgNC90LjRgtC10YHRjCcsJ1RoaXMgZm9sZGVyIGlzIGVtcHR5Lic6J9Ct0YLQsCDQv9Cw0L/QutCwINC/0YPRgdGC0LAuJywvLyBTdW1tYXJ5XG5GaWxlczon0YTQsNC50LvRiycsSW1hZ2VzOifRhNC+0YLQvicsVXBsb2FkZWQ6J9C30LDQs9GA0YPQttC10L3RiycsVXBsb2FkaW5nOifQl9Cw0LPRgNGD0LbQsNC10YLRgdGPJyxDb21wbGV0ZWQ6J9CX0LDQstC10YDRiNC10L3QvicsRmlsdGVyOifRgdC+0YDRgtC40YDQvtCy0LDRgtGMINC/0L4g0LTQsNGC0LUnLCdDcm9wcGVkIEltYWdlcyc6J9Ce0LHRgNC10LfQsNC90L3Ri9C1INC40LfQvtCx0YDQsNC20LXQvdC40Y8nLCdFZGl0ZWQgSW1hZ2VzJzon0J7RgtGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC90YvQtSDQuNC30L7QsdGA0LDQttC10L3QuNGPJywnU2VsZWN0ZWQgRmlsZXMnOifQktGL0LHRgNCw0L3QvdGL0LUg0YTQsNC50LvRiycsJ0Nyb3AgaXMgcmVxdWlyZWQgb24gaW1hZ2VzJzon0KPRgNC+0LbQsNC5INGC0YDQtdCx0YPQtdGC0YHRjyDQtNC70Y8g0LjQt9C+0LHRgNCw0LbQtdC90LjQuScsLy8gVHJhbnNmb3JtXG5Dcm9wOifQvtGC0LTQtdC70LrQsCcsQ2lyY2xlOifQutGA0YPQsycsUm90YXRlOifQstGA0LDRidCw0YLRjNGB0Y8nLE1hc2s6J9GB0LrRgNGL0LLQsNGC0YwnLFJldmVydDon0J7RgtC80LXQvdC40YLRjCcsRWRpdDon0JjQt9C80LXQvdC40YLRjCcsUmVzZXQ6J9GB0LHRgNC+0YEnLERvbmU6J9C30LDQutC+0L3Rh9C10L3QvdGL0LknLFNhdmU6J9Ch0L7RhdGA0LDQvdC40YLRjCcsTmV4dDon0KHQu9C10LTRg9GO0YnQuNC5JywnRWRpdCBJbWFnZSc6J9GA0LXQtNCw0LrRgtC40YDQvtCy0LDRgtGMINC40LfQvtCx0YDQsNC20LXQvdC40LUnLCdUaGlzIGltYWdlIGNhbm5vdCBiZSBlZGl0ZWQnOifQrdGC0L4g0LjQt9C+0LHRgNCw0LbQtdC90LjQtSDQvdC10LvRjNC30Y8g0L7RgtGA0LXQtNCw0LrRgtC40YDQvtCy0LDRgtGMJywvLyBSZXRyeSBtZXNzYWdpbmdcbidDb25uZWN0aW9uIExvc3QnOifQodC+0LXQtNC40L3QtdC90LjQtSDQv9C+0YLQtdGA0Y/QvdC+JywnRmFpbGVkIFdoaWxlIFVwbG9hZGluZyc6J9Ce0YjQuNCx0LrQsCDQv9GA0Lgg0LfQsNCz0YDRg9C30LrQtScsJ1JldHJ5aW5nIGluJzon0J/QvtCy0YLQvtGA0L3QsNGPINC/0L7Qv9GL0YLQutCwINGH0LXRgNC10LcnLCdUcnkgYWdhaW4nOifQn9C+0L/RgNC+0LHRg9C5INC10YnQtSDRgNCw0LcnLCdUcnkgbm93Jzon0J/QvtC/0YDQvtCx0YPQuScsLy8gTG9jYWwgRmlsZSBTb3VyY2VcbidEcmFnIGFuZCBEcm9wLCBDb3B5IGFuZCBQYXN0ZSBGaWxlcyc6J9Cf0LXRgNC10YLQsNGB0LrQuNCy0LDQvdC40LUsINC60L7Qv9C40YDQvtCy0LDQvdC40LUg0Lgg0LLRgdGC0LDQstC60LAg0YTQsNC50LvQvtCyJywnb3IgRHJhZyBhbmQgRHJvcCwgQ29weSBhbmQgUGFzdGUgRmlsZXMnOifQuNC70Lgg0L/QtdGA0LXRgtCw0YHQutC40LLQsNGC0YwsINC60L7Qv9C40YDQvtCy0LDRgtGMINC4INCy0YHRgtCw0LLQu9GP0YLRjCDRhNCw0LnQu9GLJywnU2VsZWN0IEZpbGVzIHRvIFVwbG9hZCc6J9CS0YvQsdC10YDQuNGC0LUg0YTQsNC50LvRiyDQtNC70Y8g0LfQsNCz0YDRg9C30LrQuCcsJ1NlbGVjdCBGcm9tJzon0LLRi9Cx0YDQsNGC0Ywg0LIuLi4nLCdEcm9wIHlvdXIgZmlsZXMgYW55d2hlcmUnOifQn9C10YDQtdGC0LDRidC40YLQtSDRgdCy0L7QuCDRhNCw0LnQu9GLINC60YPQtNCwINGD0LPQvtC00L3QvicsLy8gSW5wdXQgcGxhY2Vob2xkZXJzXG4nRW50ZXIgYSBVUkwnOifQktCy0LXQtNC40YLQtSBVUkwt0LDQtNGA0LXRgScsJ1NlYXJjaCBpbWFnZXMnOifQv9C+0LjRgdC6INGE0L7RgtC+JywvLyBXZWJjYW0gU291cmNlXG4nV2ViY2FtIERpc2FibGVkJzon0JLQtdCxLdC60LDQvNC10YDQsCDQvtGC0LrQu9GO0YfQtdC90LAnLCdXZWJjYW0gTm90IFN1cHBvcnRlZCc6J9CS0LXQsS3QutCw0LzQtdGA0LAg0L3QtSDQv9C+0LTQtNC10YDQttC40LLQsNC10YLRgdGPJywnUGxlYXNlIGVuYWJsZSB5b3VyIHdlYmNhbSB0byB0YWtlIGEgcGhvdG8uJzon0J/QvtC20LDQu9GD0LnRgdGC0LAsINCy0LrQu9GO0YfQuNGC0LUg0YTQvtGC0L7QutCw0LzQtdGA0YMsINGH0YLQvtCx0Ysg0YHQtNC10LvQsNGC0Ywg0YTQvtGC0L7Qs9GA0LDRhNC40Y4nLCdZb3VyIGN1cnJlbnQgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHdlYmNhbSBmdW5jdGlvbmFsaXR5Lic6J9Ci0LXQutGD0YnQuNC5INCx0YDQsNGD0LfQtdGAINC90LUg0L/QvtC00LTQtdGA0LbQuNCy0LDQtdGCINGE0YPQvdC60YbQuNC+0L3QsNC70YzQvdC+0YHRgtGMINCy0LXQsS3QutCw0LzQtdGA0YsnLCdXZSBzdWdnZXN0IHVzaW5nIENocm9tZSBvciBGaXJlZm94Lic6J9Cc0Ysg0L/RgNC10LTQu9Cw0LPQsNC10Lwg0LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGMIEZpcmVmb3gnLC8vIEVycm9yIE5vdGlmaWNhdGlvbnNcbidGaWxlIHtkaXNwbGF5TmFtZX0gaXMgbm90IGFuIGFjY2VwdGVkIGZpbGUgdHlwZS4gVGhlIGFjY2VwdGVkIGZpbGUgdHlwZXMgYXJlIHt0eXBlc30nOid7ZGlzcGxheU5hbWV9INCk0LDQudC70L7QsiDQvdC1INGP0LLQu9GP0LXRgtGB0Y8g0YLQuNC/0L7QvCDQv9GA0LjQutC70LDQtNGL0LLQsNC10LzRi9GFINGE0LDQudC70L7Qsi4g0KLQuNC/0Ysg0L/RgNC40LrQu9Cw0LTRi9Cy0LDQtdC80YvRhSDRhNCw0LnQu9C+0LIg0Y/QstC70Y/RjtGC0YHRjyB7dHlwZXN9JywnRmlsZSB7ZGlzcGxheU5hbWV9IGlzIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMgbGVzcyB0aGFuIHtyb3VuZEZpbGVTaXplfSc6J3tkaXNwbGF5TmFtZX0g0KTQsNC50Lsg0YHQu9C40YjQutC+0Lwg0LHQvtC70YzRiNC+0LkuINCf0YDQuNC30L3QsNC90L3Ri9GFINGE0LDQudC7INC40LzQtdC10YIg0YDQsNC30LzQtdGAIHtyb3VuZEZpbGVTaXplfScsJ091ciBmaWxlIHVwbG9hZCBsaW1pdCBpcyB7bWF4RmlsZXN9IHtmaWxlc1RleHR9Jzon0J3QsNGIINC/0YDQtdC00LXQuyDQt9Cw0LPRgNGD0LfQutC4INGE0LDQudC70L7QsiB7bWF4RmlsZXN9IHtmaWxlc1RleHR9JywnTm8gc2VhcmNoIHJlc3VsdHMgZm91bmQgZm9yIFwie3NlYXJjaH1cIic6J9Cf0L4g0LfQsNC/0YDQvtGB0YMgXCJ7c2VhcmNofVwiINC90LjRh9C10LPQviDQvdC1INC90LDQudC00LXQvdC+JywnQW4gZXJyb3Igb2NjdXJyZWQuIFBsZWFzZSB0cnkgYWdhaW4uJzon0J/RgNC+0LjQt9C+0YjQu9CwINC+0YjQuNCx0LrQsC4g0J/QvtC20LDQu9GD0LnRgdGC0LAsINC/0L7Qv9GA0L7QsdGD0LnRgtC1INC10YnQtSDRgNCw0LcuJywnRmlsZXMgW3tkaXNwbGF5TmFtZX1dIGFyZSB0b28gYmlnLiBUaGUgYWNjZXB0ZWQgZmlsZSBzaXplIGlzIHttYXhTaXplfSc6J9Ck0LDQudC70YsgW3tkaXNwbGF5TmFtZX1dINGB0LvQuNGI0LrQvtC8INCy0LXQu9C40LrQuC4g0J/RgNC40L3Rj9GC0YvQuSDRgNCw0LfQvNC10YAg0YTQsNC50LvQsDoge21heFNpemV9JywvLyBPdGhlciBVSSBsYWJlbHMgYW5kIHRpdGxlc1xuJ0NsaWNrIGhlcmUgb3IgaGl0IEVTQyB0byBjbG9zZSBwaWNrZXInOifQndCw0LbQvNC40YLQtSDQt9C00LXRgdGMINC40LvQuCDQvdCw0LbQvNC40YLQtSBFU0MsINGH0YLQvtCx0Ysg0LfQsNC60YDRi9GC0YwnfTt2YXIgc3Y9ey8vIEFjdGlvbnNcblVwbG9hZDonTGFkZGEgdXBwJywnVXBsb2FkIG1vcmUnOidMYWRkYSB1cHAgbWVyJywnRGVzZWxlY3QgQWxsJzonQXZtYXJrZXJhIEFsbGEnLCdWaWV3L0VkaXQgU2VsZWN0ZWQnOidWaXNhL0VkaXRlcmEgVmFsZGEnLCdTaWduIE91dCc6J0xvZ2dhIHV0JywvLyBTb3VyY2UgTGFiZWxzXG4nTXkgRGV2aWNlJzonTWluIGVuaGV0JywnV2ViIFNlYXJjaCc6J1dlYmJzw7ZrbmluZycsJ1Rha2UgUGhvdG8nOidUYSBFdHQgRm90bycsJ0xpbmsgKFVSTCknOidVUkwtYWRyZXNzJywnUmVjb3JkIFZpZGVvJzonU3BlbGEgaW4gdmlkZW8nLCdSZWNvcmQgQXVkaW8nOidTcGVsYSBpbiBsanVkJywvLyBDdXN0b20gU291cmNlXG4nQ3VzdG9tIFNvdXJjZSc6J0FucGFzc2FkIGvDpGxsYScsLy8gRm9vdGVyIFRleHRcbkFkZDonTMOkZ2cgdGlsbCcsJ21vcmUgZmlsZSc6J21vcmUgZmlsJywnbW9yZSBmaWxlcyc6J2ZsZXIgZmlsZXInLC8vIENsb3VkXG4nQ29ubmVjdCB7cHJvdmlkZXJOYW1lfSc6J0Fuc2x1dCB7cHJvdmlkZXJOYW1lfScsJ1NlbGVjdCBGaWxlcyBmcm9tIHtwcm92aWRlck5hbWV9JzonVsOkbGogZmlsZXIgZnLDpW4ge3Byb3ZpZGVyTmFtZX0nLCdZb3UgbmVlZCB0byBhdXRoZW50aWNhdGUgd2l0aCB7cHJvdmlkZXJOYW1lfS4nOidEdSBtw6VzdGUgdmVyaWZpZXJhIG1lZCBnb29nbGUtZW5oZXRlbiB7cHJvdmlkZXJOYW1lfS4nLCdBIG5ldyBwYWdlIHdpbGwgb3BlbiB0byBjb25uZWN0IHlvdXIgYWNjb3VudC4nOidFbiBueSBzaWRhIMO2cHBuYXMgZsO2ciBhdHQgYW5zbHV0YSBkaXR0IGtvbnRvJywnV2Ugb25seSBleHRyYWN0IGltYWdlcyBhbmQgbmV2ZXIgbW9kaWZ5IG9yIGRlbGV0ZSB0aGVtLic6J1ZpIGFudsOkbmRlciBiYXJhIGJpbGRlcm4gb2NoIMOkbmRyYXIgYWxkcmlnIGVsbGVyIHRhciBib3J0IGRlbScsJ1RvIGRpc2Nvbm5lY3QgZnJvbSB7cHJvdmlkZXJOYW1lfSBjbGljayBcIlNpZ24gb3V0XCIgYnV0dG9uIGluIHRoZSBtZW51Lic6J0bDtnIgYXR0IGtvcHBsYSBmcsOlbiB7cHJvdmlkZXJOYW1lfSwga2xpY2thIHDDpSBcIkxvZ2dhIHV0XCIgLWtuYXBwZW4gaSBtZW55bi4nLCdTaWduIGluIHdpdGggR29vZ2xlJzonTG9nZ2EgaW4gbWVkIEdvb2dsZScsJ0dvIGJhY2snOidHw6UgdGlsbGJha2EnLCdUaGlzIGZvbGRlciBpcyBlbXB0eS4nOidEZW5uYSBtYXBwIMOkciB0b20uJywvLyBTdW1tYXJ5XG5GaWxlczonRmlsZXInLEltYWdlczonQmlsZGVyJyxVcGxvYWRlZDonVXBwbGFkZGFkZScsVXBsb2FkaW5nOidVcHBsYWRkbmluZycsQ29tcGxldGVkOidBdnNsdXRhZCcsRmlsdGVyOidGaWx0ZXInLCdDcm9wcGVkIEltYWdlcyc6J0Jlc2t1cm5hIEJpbGRlcicsJ0VkaXRlZCBJbWFnZXMnOidSZWRpZ2VyYWQgQmlsZCcsJ1NlbGVjdGVkIEZpbGVzJzonVmFsZGEgZmlsZXInLCdDcm9wIGlzIHJlcXVpcmVkIG9uIGltYWdlcyc6J0Jlc2vDpHIga3LDpHZzIHDDpSBiaWxkZXInLC8vIFRyYW5zZm9ybVxuQ3JvcDonQmVza8OkcmEnLENpcmNsZTonQ2lya2VsJyxSb3RhdGU6J1JvdGVyYScsTWFzazonTWFza2VyYScsUmV2ZXJ0OidJbnZlcnRlcmEnLEVkaXQ6J0VkaXRlcmEnLFJlc2V0OifDhXRlcnN0w6RsbCcsRG9uZTonR2pvcnQnLFNhdmU6J1NwYXJhJyxOZXh0OidOw6RzdGEnLCdFZGl0IEltYWdlJzonUmVkaWdlcmEgQmlsZCcsJ1RoaXMgaW1hZ2UgY2Fubm90IGJlIGVkaXRlZCc6J0RlbiBow6RyIGJpbGRlbiBrYW4gaW50ZSByZWRpZ2VyYXMnLC8vIFJldHJ5IG1lc3NhZ2luZ1xuJ0Nvbm5lY3Rpb24gTG9zdCc6J0Fuc2x1dG5pbmcgZsO2cmxvcmFkJywnRmFpbGVkIFdoaWxlIFVwbG9hZGluZyc6J01pc3NseWNrYWRlcyBWaWQgVXBwbGFkZG5pbmcnLCdSZXRyeWluZyBpbic6J0bDtnJzw7ZrZXIgSWdlbicsJ1RyeSBhZ2Fpbic6J0bDtnJzw7ZrIElnZW4nLCdUcnkgbm93JzonUHJvdmEgbnUnLC8vIExvY2FsIEZpbGUgU291cmNlXG4nRHJhZyBhbmQgRHJvcCwgQ29weSBhbmQgUGFzdGUgRmlsZXMnOidEcmEgb2NoIHNsw6RwcCwga29waWVyYSBvY2gga2xpc3RyYSBpbiBmaWxlcicsJ29yIERyYWcgYW5kIERyb3AsIENvcHkgYW5kIFBhc3RlIEZpbGVzJzonRWxsZXIgZHJhIG9jaCBzbMOkcHAsIGtvcGllcmEgb2NoIGtsaXN0cmEgaW4gZmlsZXInLCdTZWxlY3QgRmlsZXMgdG8gVXBsb2FkJzonVsOkbGogZGluYSBmaWxlciBmw7ZyIGF0dCBsYWRkYSB1cHAnLCdTZWxlY3QgRnJvbSc6J1bDpGxqIGZyw6VuJywnRHJvcCB5b3VyIGZpbGVzIGFueXdoZXJlJzonU2zDpHBwIGRpbmEgZmlsZXIgdmFyIHNvbSBoZWxzdCcsLy8gSW5wdXQgcGxhY2Vob2xkZXJzXG4nRW50ZXIgYSBVUkwnOidBbmdlIGVuIHdlYmJhZHJlc3MnLCdTZWFyY2ggaW1hZ2VzJzonU8O2ayBiaWxkZXInLC8vIFdlYmNhbSBTb3VyY2VcbidXZWJjYW0gRGlzYWJsZWQnOidXZWJrYW1lcmFuIEF2YWt0aXZlcmFkJywnV2ViY2FtIE5vdCBTdXBwb3J0ZWQnOidXZWJrYW1lcmFuIMOkciBpbnRlIGtvbXBhdGliZWwnLCdQbGVhc2UgZW5hYmxlIHlvdXIgd2ViY2FtIHRvIHRha2UgYSBwaG90by4nOidWw6RubGlnZW4gYWt0aXZlcmEgZGluIHdlYmthbWVyYSBmw7ZyIGF0dCB0YSBldHQgZm90bycsJ1lvdXIgY3VycmVudCBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgd2ViY2FtIGZ1bmN0aW9uYWxpdHkuJzonRGluIG51dmFyYW5kZSB3ZWJibMOkc2FyZSBzdMO2ZGVyIGludGUgd2ViYmthbWVyYScsJ1dlIHN1Z2dlc3QgdXNpbmcgQ2hyb21lIG9yIEZpcmVmb3guJzonVmkgZsO2cmVzbMOlciBhdHQgZHUgYW52w6RuZGVyIENocm9tZSBlbGxlciBGaXJlZm94LicsLy8gRXJyb3IgTm90aWZpY2F0aW9uc1xuJ0ZpbGUge2Rpc3BsYXlOYW1lfSBpcyBub3QgYW4gYWNjZXB0ZWQgZmlsZSB0eXBlLiBUaGUgYWNjZXB0ZWQgZmlsZSB0eXBlcyBhcmUge3R5cGVzfSc6J0ZpbCB7ZGlzcGxheU5hbWV9IMOkciBpbnRlIGVuIGFjY2VwdGVyYWQgZmlsdHlwLiBEZSBhY2NlcHRlcmFkZSBmaWx0eXBlcm5hIMOkciB7dHlwZXN9JywnRmlsZSB7ZGlzcGxheU5hbWV9IGlzIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMgbGVzcyB0aGFuIHtyb3VuZEZpbGVTaXplfSc6J0ZpbCB7ZGlzcGxheU5hbWV9IMOkciBmw7ZyIHN0b3IuIERlbiBhY2NlcHRlcmFkZSBmaWxzdG9ybGVrZW4gw6RyIG1pbmRyZSDDpG4ge3JvdW5kRmlsZVNpemV9JywnT3VyIGZpbGUgdXBsb2FkIGxpbWl0IGlzIHttYXhGaWxlc30ge2ZpbGVzVGV4dH0nOidWw6VyIEZpbMO2dmVyZsO2cmluZ3NncsOkbnMgw6RyIHttYXhGaWxlc30ge2ZpbGVzVGV4dH0nLCdObyBzZWFyY2ggcmVzdWx0cyBmb3VuZCBmb3IgXCJ7c2VhcmNofVwiJzonSW5nYSBzw7ZrcmVzdWx0YXQgZnVubmEgZsO2ciBcIntzZWFyY2h9XCInLCdBbiBlcnJvciBvY2N1cnJlZC4gUGxlYXNlIHRyeSBhZ2Fpbi4nOidFdHQgZmVsIHVwcHN0b2QuIFZhciBnb2QgZsO2cnPDtmsgaWdlbi4nLCdGaWxlcyBbe2Rpc3BsYXlOYW1lfV0gYXJlIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMge21heFNpemV9JzonRmlsZXIgW3tkaXNwbGF5TmFtZX1dIMOkciBmw7ZyIHN0b3JhLiBEZW4gYWNjZXB0ZXJhZGUgZmlsc3Rvcmxla2VuIMOkciB7bWF4U2l6ZX0nLC8vIE90aGVyIFVJIGxhYmVscyBhbmQgdGl0bGVzXG4nQ2xpY2sgaGVyZSBvciBoaXQgRVNDIHRvIGNsb3NlIHBpY2tlcic6J0tsaWNrYSBow6RyIGVsbGVyIHRyeWNrIEVTQyBmw7ZyIGF0dCBzdMOkbmdhJ307dmFyIHRyPXsvLyBBY3Rpb25zXG5VcGxvYWQ6J1Jlc2ltbGVyaSBZw7xrbGUnLCdEZXNlbGVjdCBBbGwnOidTZcOnaW1pIEthbGTEsXInLCdWaWV3L0VkaXQgU2VsZWN0ZWQnOidHw7Zyw7xudMO8bGUvRMO8emVubGUnLCdTaWduIE91dCc6J8OHxLFrxLHFnyBZYXAnLCdVcGxvYWQgbW9yZSc6J0RhaGEgZmF6bGEgZWtsZScsLy8gU291cmNlIExhYmVsc1xuJ015IERldmljZSc6J0JpbGdpc2F5YXLEsW0nLCdXZWIgU2VhcmNoJzonV2ViIEFyYW1hJywnVGFrZSBQaG90byc6J0ZvdG/En3JhZiDDh2VrJywnTGluayAoVVJMKSc6J0xpbmsnLCdSZWNvcmQgVmlkZW8nOidWaWRlbyBrYXlkZXRtZWsnLCdSZWNvcmQgQXVkaW8nOidTZXMga2F5ZMSxJywvLyBDdXN0b20gU291cmNlXG4nQ3VzdG9tIFNvdXJjZSc6J8OWemVsIGtheW5haycsLy8gRm9vdGVyIFRleHRcbkFkZDonRWtsZScsJ21vcmUgZmlsZSc6J0RhaGEgRmF6bGEnLCdtb3JlIGZpbGVzJzonRGFoYSBGYXpsYScsLy8gQ2xvdWRcbidDb25uZWN0IHtwcm92aWRlck5hbWV9Jzone3Byb3ZpZGVyTmFtZX0gYmHEn2xhecSxbicsJ1NlbGVjdCBGaWxlcyBmcm9tIHtwcm92aWRlck5hbWV9Jzone3Byb3ZpZGVyTmFtZX0gRG9zeWFsYXLEsSBTZcOnJywnWW91IG5lZWQgdG8gYXV0aGVudGljYXRlIHdpdGgge3Byb3ZpZGVyTmFtZX0uJzone3Byb3ZpZGVyTmFtZX0gc8O8csO8Y8O8IGlsZSBraW1saWsgZG/En3J1bGFtYXPEsSB5YXBtYW7EsXogZ2VyZWtpci4nLCdBIG5ldyBwYWdlIHdpbGwgb3BlbiB0byBjb25uZWN0IHlvdXIgYWNjb3VudC4nOidHaXJpxZ8geWFwbWFuIGnDp2luIHllbmkgc2F5ZmEgYcOnxLFsYWNhaycsJ1dlIG9ubHkgZXh0cmFjdCBpbWFnZXMgYW5kIG5ldmVyIG1vZGlmeSBvciBkZWxldGUgdGhlbS4nOidCaXogc2FkZWNlIHJlc2ltbGVyaW5pemkgZ8O2csO8bnTDvGxlcml6LCBkw7x6ZW5sZW1lIHZlIHNpbG1lIGnFn2xlbWkgeWFwbWF5xLF6LicsJ1RvIGRpc2Nvbm5lY3QgZnJvbSB7cHJvdmlkZXJOYW1lfSBjbGljayBcIlNpZ24gb3V0XCIgYnV0dG9uIGluIHRoZSBtZW51Lic6J3twcm92aWRlck5hbWV9IGlsZSBiYcSfbGFudMSxc8SxbsSxIGtlc21layBpw6dpbiBtZW7DvGRla2kgXCLDh8Sxa8SxxZ8gWWFwXCIgYnV0b251bmEgdMSxa2xhecSxbi4nLCdTaWduIGluIHdpdGggR29vZ2xlJzonR29vZ2xlIGlsZSBnaXJpxZ8geWFwJywnR28gYmFjayc6J0dlcmkgZMO2bicsJ1RoaXMgZm9sZGVyIGlzIGVtcHR5Lic6J0J1IGtsYXPDtnIgYm/Fny4nLC8vIFN1bW1hcnlcbkZpbGVzOidEb3N5YWxhcicsSW1hZ2VzOidSZXNpbWxlcicsVXBsb2FkZWQ6J1nDvGtsZW5kaScsVXBsb2FkaW5nOidZw7xrbGVuaXlvcicsQ29tcGxldGVkOidUYW1hbWxhbmTEsScsRmlsdGVyOidGaWx0cmUnLCdDcm9wcGVkIEltYWdlcyc6J0tlc2lsZW4gcmVzaW1sZXInLCdFZGl0ZWQgSW1hZ2VzJzonRMO8emVubGVuZW4gcmVzaW1sZXInLCdTZWxlY3RlZCBGaWxlcyc6J1Nlw6dpbGVuIHJlc2ltbGVyJywnQ3JvcCBpcyByZXF1aXJlZCBvbiBpbWFnZXMnOidLZXNpbSBpxZ9sZW1pIHJlc2ltbGVyZGUgem9ydW5sdWR1cicsLy8gVHJhbnNmb3JtXG5Dcm9wOidLZXMnLENpcmNsZTonWXV2YXJsYWsnLFJvdGF0ZTonRMO2bmTDvHInLE1hc2s6J01hc2tlbGUnLFJldmVydDonR2VyaSBBbCcsRWRpdDonRMO8emVubGUnLFJlc2V0OidTxLFmxLFybGEnLERvbmU6J1RhbWFtJyxTYXZlOidLYXlkZXQnLE5leHQ6J1NvbnJha2knLCdFZGl0IEltYWdlJzonUmVzbWkgZMO8emVubGUnLCdUaGlzIGltYWdlIGNhbm5vdCBiZSBlZGl0ZWQnOidCdSByZXNpbSBkw7x6ZW5sZW5lbWV6JywvLyBSZXRyeSBtZXNzYWdpbmdcbidDb25uZWN0aW9uIExvc3QnOifEsGxldGnFn2ltIGtvcHR1JywnRmFpbGVkIFdoaWxlIFVwbG9hZGluZyc6J1nDvGtsZW5pcmtlbiBoYXRhIG9sdcWfdHUnLCdSZXRyeWluZyBpbic6J1Rla3JhciBkZW5lbmVjZWs6ICcsJ1RyeSBhZ2Fpbic6J1Rla3JhciBkZW5lJywnVHJ5IG5vdyc6J8WeaW1kaSB0ZWtyYXIgZGVuZScsLy8gTG9jYWwgRmlsZSBTb3VyY2VcbidEcmFnIGFuZCBEcm9wLCBDb3B5IGFuZCBQYXN0ZSBGaWxlcyc6J1PDvHLDvGtsZSB2ZSBCxLFyYWssIERvc3lhbGFyxLEgS29weWFsYSB2ZSBZYXDEscWfdMSxcicsJ29yIERyYWcgYW5kIERyb3AsIENvcHkgYW5kIFBhc3RlIEZpbGVzJzondmV5YSBzw7xyw7xrbGUgYsSxcmFrIHlhIGRhIGJ1cmF5YSBrb3B5YWxhL3lhcMSxxZ90xLFyJywnU2VsZWN0IEZpbGVzIHRvIFVwbG9hZCc6J0ZvdG/En3JhZmxhcsSxIHnDvGtsZW1layBpw6dpbiBzZcOnaW4nLCdTZWxlY3QgRnJvbSc6J1Nlw6dpbWluaXppIHlhcMSxbjogJywnRHJvcCB5b3VyIGZpbGVzIGFueXdoZXJlJzonUmVzaW1sZXJpbml6aSBoZXJoYW5naSBiaXIgeWVyZSBzw7xyw7xrbGV5aW4nLC8vIElucHV0IHBsYWNlaG9sZGVyc1xuJ0VudGVyIGEgVVJMJzonTGluayBnaXJpbicsJ1NlYXJjaCBpbWFnZXMnOidSZXNpbSBhcmEnLC8vIFdlYmNhbSBTb3VyY2VcbidXZWJjYW0gRGlzYWJsZWQnOidXZWJjYW0gRGV2cmUgRMSxxZ/EsScsJ1dlYmNhbSBOb3QgU3VwcG9ydGVkJzonV2ViY2FtIERlc3Rla2xlbm1peW9yJywnUGxlYXNlIGVuYWJsZSB5b3VyIHdlYmNhbSB0byB0YWtlIGEgcGhvdG8uJzonTMO8dGZlbiB3ZWIga2FtZXJhbsSxesSxbiBmb3RvxJ9yYWYgw6dla21lc2luaSBzYcSfbGF5xLFuLicsJ1lvdXIgY3VycmVudCBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgd2ViY2FtIGZ1bmN0aW9uYWxpdHkuJzonTWV2Y3V0IHRhcmF5xLFjxLFuxLF6IHdlYiBrYW1lcmFzxLEgacWfbGV2aW5pIGRlc3Rla2xlbWl5b3IuJywnV2Ugc3VnZ2VzdCB1c2luZyBDaHJvbWUgb3IgRmlyZWZveC4nOidDaHJvbWUgdmV5YSBGaXJlZm94IGt1bGxhbm1hbsSxesSxIMO2bmVyaXJpei4nLC8vIEVycm9yIE5vdGlmaWNhdGlvbnNcbidGaWxlIHtkaXNwbGF5TmFtZX0gaXMgbm90IGFuIGFjY2VwdGVkIGZpbGUgdHlwZS4gVGhlIGFjY2VwdGVkIGZpbGUgdHlwZXMgYXJlIHt0eXBlc30nOid7ZGlzcGxheU5hbWV9IGlzaW1saSBkb3N5YW7EsW4gdGlwaSBrYWJ1bCBlZGlsbWl5b3IuIEthYnVsIGVkaWxlbiBkb3N5YSB0aXBsZXJpOiB7dHlwZXN9JywnRmlsZSB7ZGlzcGxheU5hbWV9IGlzIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMgbGVzcyB0aGFuIHtyb3VuZEZpbGVTaXplfSc6J3tkaXNwbGF5TmFtZX0gaXNpbWxpIHJlc2ltIGRvc3lhc8SxbsSxbiBib3l1dHUgw6dvayBiw7x5w7xrLiBLYWJ1bCBlZGlsZW4gZW4gecO8a3NlayBkb3N5YSBib3l1dHU6IHtyb3VuZEZpbGVTaXplfScsJ091ciBmaWxlIHVwbG9hZCBsaW1pdCBpcyB7bWF4RmlsZXN9IHtmaWxlc1RleHR9JzonUmVzaW0gecO8a2xlbWUgbGltaXRpIHttYXhGaWxlc30gYWRldC4nLCdObyBzZWFyY2ggcmVzdWx0cyBmb3VuZCBmb3IgXCJ7c2VhcmNofVwiJzonQXJhbWEgc29udWN1IFwie3NlYXJjaH1cIicsJ0FuIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgdHJ5IGFnYWluLic6J0JpciBoYXRhIG9sdcWfdHUuIEzDvHRmZW4gdGVrcmFyIGRlbmV5aW4uJywnRmlsZXMgW3tkaXNwbGF5TmFtZX1dIGFyZSB0b28gYmlnLiBUaGUgYWNjZXB0ZWQgZmlsZSBzaXplIGlzIHttYXhTaXplfSc6J1t7RGlzcGxheU5hbWV9XSBkb3N5YWxhcsSxIMOnb2sgYsO8ecO8ay4gS2FidWwgZWRpbGVuIGRvc3lhIGJveXV0dToge21heFNpemV9JywvLyBPdGhlciBVSSBsYWJlbHMgYW5kIHRpdGxlc1xuJ0NsaWNrIGhlcmUgb3IgaGl0IEVTQyB0byBjbG9zZSBwaWNrZXInOidCdXJheWEgdMSxa2xhecSxbiB2ZXlhIGthcGF0bWFrIGnDp2luIEVTQyBiYXPEsW4uJ307dmFyIHZpPXsvLyBBY3Rpb25zXG5VcGxvYWQ6J1ThuqNpIGzDqm4nLCdVcGxvYWQgbW9yZSc6J1ThuqNpIGzDqm4gbmhp4buBdSBoxqFuJywnRGVzZWxlY3QgQWxsJzonQuG7jyBjaOG7jW4gdOG6pXQgY+G6oycsJ1ZpZXcvRWRpdCBTZWxlY3RlZCc6J1hlbS9DaOG7iW5oIHPhu61hIHThuq1wIHRpbiDEkcOjIGNo4buNbicsJ1NpZ24gT3V0JzonxJDEg25nIHh14bqldCcsLy8gU291cmNlIExhYmVsc1xuJ015IERldmljZSc6J1RoaeG6v3QgYuG7iyBj4bunYSB0w7RpJywnV2ViIFNlYXJjaCc6J1TDrG0ga2nhur9tIHRyw6puIHdlYicsJ1Rha2UgUGhvdG8nOidDaOG7pXAg4bqjbmgnLCdMaW5rIChVUkwpJzonxJDhu4thIGNo4buJIFVSTCcsJ1JlY29yZCBWaWRlbyc6J1F1YXkgdmlkZW8nLCdSZWNvcmQgQXVkaW8nOidHaGkgw6JtJywvLyBDdXN0b20gU291cmNlXG4nQ3VzdG9tIFNvdXJjZSc6J05ndeG7k24gdMO5eSBjaOG7iW5oJywvLyBGb290ZXIgVGV4dFxuQWRkOidUaMOqbScsJ21vcmUgZmlsZSc6J1Row6ptIHThuq1wIHRpbicsJ21vcmUgZmlsZXMnOidUaMOqbSB04bqtcCB0aW4nLC8vIENsb3VkXG4nQ29ubmVjdCB7cHJvdmlkZXJOYW1lfSc6J0vhur90IG7hu5FpIHtwcm92aWRlck5hbWV9JywnU2VsZWN0IEZpbGVzIGZyb20ge3Byb3ZpZGVyTmFtZX0nOidDaOG7jW4gdOG7h3AgdOG7qyB7cHJvdmlkZXJOYW1lfScsJ1lvdSBuZWVkIHRvIGF1dGhlbnRpY2F0ZSB3aXRoIHtwcm92aWRlck5hbWV9Lic6J0LhuqFuIGPhuqduIHjDoWMgdGjhu7FjIHbhu5tpIHtwcm92aWRlck5hbWV9LicsJ0EgbmV3IHBhZ2Ugd2lsbCBvcGVuIHRvIGNvbm5lY3QgeW91ciBhY2NvdW50Lic6J03hu5l0IHRyYW5nIGvhur90IG7hu5FpIHbhu5tpIHTDoGkga2hv4bqjbiBj4bunYSBi4bqhbiBz4bq9IMSRxrDhu6NjIG3hu58nLCdXZSBvbmx5IGV4dHJhY3QgaW1hZ2VzIGFuZCBuZXZlciBtb2RpZnkgb3IgZGVsZXRlIHRoZW0uJzonQ2jDum5nIHTDtGkgY2jhu4kgdHLDrWNoIHh14bqldCBow6xuaCDhuqNuaCB2w6Aga2jDtG5nIGJhbyBnaeG7nSBz4butYSDEkeG7lWkgaG/hurdjIHjDs2EgY2jDum5nJywnVG8gZGlzY29ubmVjdCBmcm9tIHtwcm92aWRlck5hbWV9IGNsaWNrIFwiU2lnbiBvdXRcIiBidXR0b24gaW4gdGhlIG1lbnUuJzonxJDhu4Mgbmfhuq90IGvhur90IG7hu5FpIGto4buPaSB7cHJvdmlkZXJOYW1lfSwgbmjhuqVwIHbDoG8gbsO6dCBcIsSQxINuZyB4deG6pXRcIiB0cm9uZyBtZW51LicsJ1NpZ24gaW4gd2l0aCBHb29nbGUnOifEkMSDbmcgbmjhuq1wIGLhurFuZyBHb29nbGUnLCdHbyBiYWNrJzonUXVheSBs4bqhaScsJ1RoaXMgZm9sZGVyIGlzIGVtcHR5Lic6J1RoxrAgbeG7pWMgbsOgeSB0cuG7kW5nLicsLy8gU3VtbWFyeVxuRmlsZXM6J0PDoWMgdOG6rXAgdGluJyxJbWFnZXM6J0jDrG5oIOG6o25oJyxVcGxvYWRlZDonxJDDoyB04bqjaSBsw6puJyxVcGxvYWRpbmc6J1ThuqNpIGzDqm4nLENvbXBsZXRlZDonxJDDoyBob8OgbiB0aMOgbmgnLEZpbHRlcjonQuG7mSBs4buNYycsJ0Nyb3BwZWQgSW1hZ2VzJzonSMOsbmgg4bqjbmggYuG7iyBj4bqvdCcsJ0VkaXRlZCBJbWFnZXMnOidDaOG7iW5oIHPhu61hIGjDrG5oIOG6o25oJywnU2VsZWN0ZWQgRmlsZXMnOidU4bqtcCB0aW4gxJHDoyDEkcaw4bujYyBjaOG7jW4nLCdDcm9wIGlzIHJlcXVpcmVkIG9uIGltYWdlcyc6J0PDonkgdHLhu5NuZyDEkcaw4bujYyB5w6p1IGPhuqd1IHRyw6puIGjDrG5oIOG6o25oJywvLyBUcmFuc2Zvcm1cbkNyb3A6J0Phuq90JyxDaXJjbGU6J0dpxqHNgWknLFJvdGF0ZTonUXVheScsTWFzazonTeG6t3QgbuG6oScsUmV2ZXJ0OidRdWF5IGzhuqFpJyxFZGl0OidDaOG7iW5oIHPhu61hJyxSZXNldDonQ8OgaSBs4bqhaScsRG9uZTonSG/DoG4gdOG6pXQnLFNhdmU6J1Rp4bq/dCBraeG7h20nLE5leHQ6J0vhur8gdGnhur9wJywnRWRpdCBJbWFnZSc6J0No4buJbmggc+G7rWEgaMOsbmgg4bqjbmgnLCdUaGlzIGltYWdlIGNhbm5vdCBiZSBlZGl0ZWQnOidLaMO0bmcgdGjhu4MgY2jhu4luaCBz4butYSBow6xuaCDhuqNuaCBuw6B5JywvLyBSZXRyeSBtZXNzYWdpbmdcbidDb25uZWN0aW9uIExvc3QnOidL4bq/dCBu4buRaSBi4buLIG3huqV0JywnRmFpbGVkIFdoaWxlIFVwbG9hZGluZyc6J0tow7RuZyB0aOG7gyB04bqjaSBsw6puJywnUmV0cnlpbmcgaW4nOifEkGFuZyB0aOG7rSBs4bqhaScsJ1RyeSBhZ2Fpbic6J1Ro4butIGzhuqFpJywnVHJ5IG5vdyc6J1Ro4butIG5nYXkgYsOieSBnaeG7nScsLy8gTG9jYWwgRmlsZSBTb3VyY2VcbidEcmFnIGFuZCBEcm9wLCBDb3B5IGFuZCBQYXN0ZSBGaWxlcyc6J0vDqW8gdsOgIHRo4bqjLCBzYW8gY2jDqXAgdsOgIGTDoW4gdOG6rXAgdGluJywnb3IgRHJhZyBhbmQgRHJvcCwgQ29weSBhbmQgUGFzdGUgRmlsZXMnOidob+G6t2MgS8OpbyB2w6AgVGjhuqMsIFNhbyBjaMOpcCB2w6AgRMOhbiBU4bqtcCB0aW4nLCdTZWxlY3QgRmlsZXMgdG8gVXBsb2FkJzonQ2jhu41uIHThuq1wIHRpbiDEkeG7gyB04bqjaSBsw6puJywnU2VsZWN0IEZyb20nOidDaOG7jW4gdOG7qycsJ0Ryb3AgeW91ciBmaWxlcyBhbnl3aGVyZSc6J1Ro4bqjIHThuq1wIHRpbiBj4bunYSBi4bqhbiBi4bqldCBj4bupIG7GoWkgbsOgbycsLy8gSW5wdXQgcGxhY2Vob2xkZXJzXG4nRW50ZXIgYSBVUkwnOidOaOG6rXAgVVJMJywnU2VhcmNoIGltYWdlcyc6J1TDrG0ga2nhu4NtIGjDrG5oIOG6o25oJywvLyBXZWJjYW0gU291cmNlXG4nV2ViY2FtIERpc2FibGVkJzonV2ViY2FtIGLhu4sgdsO0IGhp4buHdSBow7NhJywnV2ViY2FtIE5vdCBTdXBwb3J0ZWQnOidXZWJjYW0ga2jDtG5nIMSRxrDhu6NjIGjhu5cgdHLhu6MnLCdQbGVhc2UgZW5hYmxlIHlvdXIgd2ViY2FtIHRvIHRha2UgYSBwaG90by4nOidIw6N5IGvDrWNoIGhv4bqhdCB3ZWJjYW0gY+G7p2EgYuG6oW4gxJHhu4MgY2jhu6VwIOG6o25oLicsJ1lvdXIgY3VycmVudCBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgd2ViY2FtIGZ1bmN0aW9uYWxpdHkuJzonVHLDrG5oIGR1eeG7h3QgaGnhu4duIHThuqFpIGPhu6dhIGLhuqFuIGtow7RuZyBo4buXIHRy4bujIGNo4bupYyBuxINuZyB3ZWJjYW0uJywnV2Ugc3VnZ2VzdCB1c2luZyBDaHJvbWUgb3IgRmlyZWZveC4nOidDaMO6bmcgdMO0aSBraHV5w6puIGLhuqFuIHPhu60gZOG7pW5nIENocm9tZSBob+G6t2MgRmlyZWZveC4nLC8vIEVycm9yIE5vdGlmaWNhdGlvbnNcbidGaWxlIHtkaXNwbGF5TmFtZX0gaXMgbm90IGFuIGFjY2VwdGVkIGZpbGUgdHlwZS4gVGhlIGFjY2VwdGVkIGZpbGUgdHlwZXMgYXJlIHt0eXBlc30nOidU4bqtcCB0aW4ge2Rpc3BsYXlOYW1lfSBraMO0bmcgcGjhuqNpIGzDoCBsb+G6oWkgdOG6rXAgdGluIMSRxrDhu6NjIGNo4bqlcCBuaOG6rW4uIEPDoWMgbG/huqFpIHThuq1wIHRpbiDEkcaw4bujYyBjaOG6pXAgbmjhuq1uIGzDoCB7dHlwZXN9JywnRmlsZSB7ZGlzcGxheU5hbWV9IGlzIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMgbGVzcyB0aGFuIHtyb3VuZEZpbGVTaXplfSc6J1Thuq1wIHRpbiB7ZGlzcGxheU5hbWV9IHF1w6EgbOG7m24uIEvDrWNoIHRoxrDhu5tjIHThuq1wIHRpbiDEkcaw4bujYyBjaOG6pXAgbmjhuq1uIGzDoCB7cm91bmRGaWxlU2l6ZX0nLCdPdXIgZmlsZSB1cGxvYWQgbGltaXQgaXMge21heEZpbGVzfSB7ZmlsZXNUZXh0fSc6J0dp4bubaSBo4bqhbiB04bqtcCB0aW4gdOG6o2kgbMOqbiBsw6Age21heEZpbGVzfSB7ZmlsZXNUZXh0fScsJ05vIHNlYXJjaCByZXN1bHRzIGZvdW5kIGZvciBcIntzZWFyY2h9XCInOidLaMO0bmcgdMOsbSB0aOG6pXkga+G6v3QgcXXhuqMgdMOsbSBraeG6v20gY2hvIFwie3NlYXJjaH1cIicsJ0FuIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgdHJ5IGFnYWluLic6J1jhuqN5IHJhIGzhu5dpIFZ1aSBsw7JuZyB0aOG7rSBs4bqhaS4nLCdGaWxlcyBbe2Rpc3BsYXlOYW1lfV0gYXJlIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMge21heFNpemV9JzonVOG7h3AgW3tkaXNwbGF5TmFtZX1dIHF1w6EgbOG7m24uIEvDrWNoIHRoxrDhu5tjIHThu4dwIMSRxrDhu6NjIGNo4bqlcCBuaOG6rW4gbMOgIHttYXhTaXplfScsLy8gT3RoZXIgVUkgbGFiZWxzIGFuZCB0aXRsZXNcbidDbGljayBoZXJlIG9yIGhpdCBFU0MgdG8gY2xvc2UgcGlja2VyJzonTmjhuqVuIHbDoG8gxJHDonkgaG/hurdjIG5o4bqlbiBFU0MgxJHhu4MgxJHDs25nJ307dmFyIHpoPXsvLyBBY3Rpb25zXG5VcGxvYWQ6J+S4iuS8oCcsJ1VwbG9hZCBtb3JlJzon5LiK5Lyg5pu05aSaJywnRGVzZWxlY3QgQWxsJzon5Y+W5raI6YCJ5oup5YWo6YOoJywnVmlldy9FZGl0IFNlbGVjdGVkJzon5p+l55yLL+e8lui+keaJgOmAiemhuScsJ1NpZ24gT3V0Jzon55m75Ye6JywvLyBTb3VyY2UgTGFiZWxzXG4nTXkgRGV2aWNlJzon5oiR55qE6K6+5aSHJywnV2ViIFNlYXJjaCc6J+S4uuWbvueJh+aQnOe0oue9kee7nCcsJ1Rha2UgUGhvdG8nOifmi43nhacnLCdMaW5rIChVUkwpJzon572R5Z2AJywnUmVjb3JkIFZpZGVvJzon5b2V6KeG6aKRJywnUmVjb3JkIEF1ZGlvJzon5b2V5Yi26Z+z6aKRJywvLyBDdXN0b20gU291cmNlXG4nQ3VzdG9tIFNvdXJjZSc6J+iHquWumuS5ieadpea6kCcsLy8gRm9vdGVyIFRleHRcbkFkZDon5YaN5re75YqgJywnbW9yZSBmaWxlJzon5pu05aSa5paH5Lu2JywnbW9yZSBmaWxlcyc6J+abtOWkmuaWh+S7ticsLy8gQ2xvdWRcbidDb25uZWN0IHtwcm92aWRlck5hbWV9Jzon6L+e5o6le3Byb3ZpZGVyTmFtZX0nLCdTZWxlY3QgRmlsZXMgZnJvbSB7cHJvdmlkZXJOYW1lfSc6J+S7jntwcm92aWRlck5hbWV95Lit6YCJ5oup5paH5Lu2JywnWW91IG5lZWQgdG8gYXV0aGVudGljYXRlIHdpdGgge3Byb3ZpZGVyTmFtZX0uJzon5oKo6ZyA6KaB5L2/55Soe3Byb3ZpZGVyTmFtZX3pqbHliqjlmajov5vooYzouqvku73pqozor4HjgIInLCdBIG5ldyBwYWdlIHdpbGwgb3BlbiB0byBjb25uZWN0IHlvdXIgYWNjb3VudC4nOifkuIDkuKrmlrDpobXpnaLkvJrmiZPlvIDku6XlhbPogZTmgqjnmoTluJDmiLcnLCdXZSBvbmx5IGV4dHJhY3QgaW1hZ2VzIGFuZCBuZXZlciBtb2RpZnkgb3IgZGVsZXRlIHRoZW0uJzon5oiR5Lus5Y+q5o+Q5Y+W5Zu+5YOP77yM5LuO5LiN5L+u5pS55oiW5Yig6Zmk5a6D5LusJywnVG8gZGlzY29ubmVjdCBmcm9tIHtwcm92aWRlck5hbWV9IGNsaWNrIFwiU2lnbiBvdXRcIiBidXR0b24gaW4gdGhlIG1lbnUuJzon6KaB5pat5byA5LiOe3Byb3ZpZGVyTmFtZX3nmoTov57mjqXvvIzor7fljZXlh7voj5zljZXkuK3nmoTigJznmbvlh7rigJ3mjInpkq7jgIInLCdTaWduIGluIHdpdGggR29vZ2xlJzon5L2/55SoR29vZ2xl55m75b2VJywnR28gYmFjayc6J+WbnuWOuycsJ1RoaXMgZm9sZGVyIGlzIGVtcHR5Lic6J+i/meS4quaWh+S7tuWkueaYr+epuueahOOAgicsLy8gU3VtbWFyeVxuRmlsZXM6J+aWh+S7ticsSW1hZ2VzOiflm77niYcnLFVwbG9hZGVkOiflt7LkuIrkvKAnLFVwbG9hZGluZzon5q2j5Zyo5LiK5LygJyxDb21wbGV0ZWQ6J+W3suWujOaIkCcsRmlsdGVyOifov4fmu6QnLCdDcm9wcGVkIEltYWdlcyc6J+ijgeWJquWbvueJhycsJ0VkaXRlZCBJbWFnZXMnOifnvJbovpHnmoTlm77lg48nLCdTZWxlY3RlZCBGaWxlcyc6J+aJgOmAieaWh+S7ticsJ0Nyb3AgaXMgcmVxdWlyZWQgb24gaW1hZ2VzJzon5Zu+5YOP5LiK6ZyA6KaB6KOB5YmqJywvLyBUcmFuc2Zvcm1cbkNyb3A6J+WJqicsQ2lyY2xlOiflnIYnLFJvdGF0ZTon5Zue6L2sJyxNYXNrOifph43mlrDnm5bkuIonLFJldmVydDon6L+Y5Y6fJyxFZGl0OifnvJbovpEnLFJlc2V0Oifph43lkK8nLERvbmU6J+avlScsU2F2ZTon5L+d5a2YJyxOZXh0OifkuIvkuIDkuKonLCdFZGl0IEltYWdlJzon57yW6L6R5Zu+5YOPJywnVGhpcyBpbWFnZSBjYW5ub3QgYmUgZWRpdGVkJzon5q2k5Zu+5YOP5peg5rOV57yW6L6RJywvLyBSZXRyeSBtZXNzYWdpbmdcbidDb25uZWN0aW9uIExvc3QnOifov57mjqXkuK3mlq0nLCdGYWlsZWQgV2hpbGUgVXBsb2FkaW5nJzon5LiK5Lyg5aSx6LSlJywnUmV0cnlpbmcgaW4nOifph43or5XlgJLorqHml7YnLCdUcnkgYWdhaW4nOiflho3or5XkuIDmrKEnLCdUcnkgbm93Jzon546w5Zyo6K+V6K+VJywvLyBMb2NhbCBGaWxlIFNvdXJjZVxuJ0RyYWcgYW5kIERyb3AsIENvcHkgYW5kIFBhc3RlIEZpbGVzJzon5ouW5pS+77yM5aSN5Yi25ZKM57KY6LS05paH5Lu2Jywnb3IgRHJhZyBhbmQgRHJvcCwgQ29weSBhbmQgUGFzdGUgRmlsZXMnOifmiJbmi5bmlL7vvIzlpI3liLblkoznspjotLTmlofku7YnLCdTZWxlY3QgRmlsZXMgdG8gVXBsb2FkJzon6YCJ5oup6KaB5LiK5Lyg55qE5paH5Lu2JywnU2VsZWN0IEZyb20nOifpgInmi6noh6onLCdEcm9wIHlvdXIgZmlsZXMgYW55d2hlcmUnOiflsIbmlofku7bmlL7lnKjku7vkvZXlnLDmlrknLC8vIElucHV0IHBsYWNlaG9sZGVyc1xuJ0VudGVyIGEgVVJMJzon6L6T5YWl5LiA5Liq572R5Z2AJywnU2VhcmNoIGltYWdlcyc6J+aQnOe0ouWbvuWDjycsLy8gV2ViY2FtIFNvdXJjZVxuJ1dlYmNhbSBEaXNhYmxlZCc6J+aRhOWDj+WktOWFs+mXrScsJ1dlYmNhbSBOb3QgU3VwcG9ydGVkJzon5LiN5pSv5oyB5pGE5YOP5aS0JywnUGxlYXNlIGVuYWJsZSB5b3VyIHdlYmNhbSB0byB0YWtlIGEgcGhvdG8uJzon6K+35omT5byA5pGE5YOP5aS0JywnWW91ciBjdXJyZW50IGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB3ZWJjYW0gZnVuY3Rpb25hbGl0eS4nOifmgqjnmoTmtY/op4jlmajkuI3mlK/mjIHnvZHnu5zmkYTlg4/lpLTlip/og73jgIInLCdXZSBzdWdnZXN0IHVzaW5nIENocm9tZSBvciBGaXJlZm94Lic6J+aIkeS7rOW7uuiuruS9v+eUqOeBq+eLkOOAgicsLy8gRXJyb3IgTm90aWZpY2F0aW9uc1xuJ0ZpbGUge2Rpc3BsYXlOYW1lfSBpcyBub3QgYW4gYWNjZXB0ZWQgZmlsZSB0eXBlLiBUaGUgYWNjZXB0ZWQgZmlsZSB0eXBlcyBhcmUge3R5cGVzfSc6JyDmlofku7Z7ZGlzcGxheU5hbWV95LiN5piv5Y+v5o6l5Y+X55qE5paH5Lu257G75Z6L44CCIOWPr+aOpeWPl+eahOaWh+S7tuexu+Wei+S4unt0eXBlc30nLCdGaWxlIHtkaXNwbGF5TmFtZX0gaXMgdG9vIGJpZy4gVGhlIGFjY2VwdGVkIGZpbGUgc2l6ZSBpcyBsZXNzIHRoYW4ge3JvdW5kRmlsZVNpemV9JzonIOaWh+S7tntkaXNwbGF5TmFtZX3lpKrlpKfjgIIg5Y+v5o6l5Y+X55qE5paH5Lu25aSn5bCP5Li6e3JvdW5kRmlsZVNpemV9JywnT3VyIGZpbGUgdXBsb2FkIGxpbWl0IGlzIHttYXhGaWxlc30ge2ZpbGVzVGV4dH0nOifmiJHku6znmoTmlofku7bkuIrkvKDpmZDliLbkuLoge21heEZpbGVzfSB7ZmlsZXNUZXh0fScsJ05vIHNlYXJjaCByZXN1bHRzIGZvdW5kIGZvciBcIntzZWFyY2h9XCInOifmnKrmib7liLB7c2VhcmNofeeahOaQnOe0oue7k+aenCcsJ0FuIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgdHJ5IGFnYWluLic6J+WPkeeUn+mUmeivr+OAgiDor7flho3or5XkuIDmrKHjgIInLCdGaWxlcyBbe2Rpc3BsYXlOYW1lfV0gYXJlIHRvbyBiaWcuIFRoZSBhY2NlcHRlZCBmaWxlIHNpemUgaXMge21heFNpemV9Jzon5paH5Lu2W3tkaXNwbGF5TmFtZX1d5aSq5aSn44CCIOWPr+aOpeWPl+eahOaWh+S7tuWkp+Wwj+S4unttYXhTaXplfScsLy8gT3RoZXIgVUkgbGFiZWxzIGFuZCB0aXRsZXNcbidDbGljayBoZXJlIG9yIGhpdCBFU0MgdG8gY2xvc2UgcGlja2VyJzon5Y2V5Ye75q2k5aSE5oiW5oyJRVND6ZSu5YWz6ZetJ307dmFyIGxhbmd1YWdlcz17YXI6YXIsY2E6Y2EsZGE6ZGEsZGU6ZGUsZW46ZW4sZXM6ZXMsZnI6ZnIsaGU6aGUsaXQ6aXQsamE6amEsa286a28sbmw6bmwsbm86bm8kMSxwbDpwbCxwdDpwdCxydTpydSxzdjpzdix0cjp0cix2aTp2aSx6aDp6aH07dmFyIGVycm9ycz1mdW5jdGlvbiBlcnJvcnMoKXt2YXIgbGFuZz1hcmd1bWVudHMubGVuZ3RoPjAmJmFyZ3VtZW50c1swXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMF06J2VuJzt2YXIgY3VzdG9tVGV4dD1hcmd1bWVudHMubGVuZ3RoPjEmJmFyZ3VtZW50c1sxXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMV06e307dmFyIHBocmFzZXM9X29iamVjdFNwcmVhZCh7fSxsYW5ndWFnZXNbbGFuZ10se30sY3VzdG9tVGV4dCk7dmFyIGdldFBocmFzZT1mdW5jdGlvbiBnZXRQaHJhc2UocCl7cmV0dXJuIHBocmFzZXNbcF18fHA7fTtyZXR1cm57RVJST1JfRklMRV9OT1RfQUNDRVBUQUJMRTpnZXRQaHJhc2UoJ0ZpbGUge2Rpc3BsYXlOYW1lfSBpcyBub3QgYW4gYWNjZXB0ZWQgZmlsZSB0eXBlLiBUaGUgYWNjZXB0ZWQgZmlsZSB0eXBlcyBhcmUge3R5cGVzfScpLEVSUk9SX0ZJTEVfVE9PX0JJRzpnZXRQaHJhc2UoJ0ZpbGUge2Rpc3BsYXlOYW1lfSBpcyB0b28gYmlnLiBUaGUgYWNjZXB0ZWQgZmlsZSBzaXplIGlzIGxlc3MgdGhhbiB7cm91bmRGaWxlU2l6ZX0nKSxFUlJPUl9GSUxFU19UT09fQklHOmdldFBocmFzZSgnRmlsZXMgW3tkaXNwbGF5TmFtZX1dIGFyZSB0b28gYmlnLiBUaGUgYWNjZXB0ZWQgZmlsZSBzaXplIGlzIHttYXhTaXplfScpLEVSUk9SX01BWF9GSUxFU19SRUFDSEVEOmdldFBocmFzZSgnT3VyIGZpbGUgdXBsb2FkIGxpbWl0IGlzIHttYXhGaWxlc30ge2ZpbGVzVGV4dH0nKX07fTt2YXIgcGljYT1jcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7LyogcGljYSA0LjIuMCBub2RlY2EvcGljYSAqLyhmdW5jdGlvbihmKXt7bW9kdWxlLmV4cG9ydHM9ZigpO319KShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIGNvbW1vbmpzUmVxdWlyZSYmY29tbW9uanNSZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYTt9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpO30scCxwLmV4cG9ydHMscixlLG4sdCk7fXJldHVybiBuW2ldLmV4cG9ydHM7fWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBjb21tb25qc1JlcXVpcmUmJmNvbW1vbmpzUmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspe28odFtpXSk7fXJldHVybiBvO31yZXR1cm4gcjt9KCkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBpbmhlcml0cz1yZXF1aXJlKCdpbmhlcml0cycpO3ZhciBNdWx0aW1hdGg9cmVxdWlyZSgnbXVsdGltYXRoJyk7dmFyIG1tX3Vuc2hhcnBfbWFzaz1yZXF1aXJlKCdtdWx0aW1hdGgvbGliL3Vuc2hhcnBfbWFzaycpO3ZhciBtbV9yZXNpemU9cmVxdWlyZSgnLi9tbV9yZXNpemUnKTtmdW5jdGlvbiBNYXRoTGliKHJlcXVlc3RlZF9mZWF0dXJlcyl7dmFyIF9fcmVxdWVzdGVkX2ZlYXR1cmVzPXJlcXVlc3RlZF9mZWF0dXJlc3x8W107dmFyIGZlYXR1cmVzPXtqczpfX3JlcXVlc3RlZF9mZWF0dXJlcy5pbmRleE9mKCdqcycpPj0wLHdhc206X19yZXF1ZXN0ZWRfZmVhdHVyZXMuaW5kZXhPZignd2FzbScpPj0wfTtNdWx0aW1hdGguY2FsbCh0aGlzLGZlYXR1cmVzKTt0aGlzLmZlYXR1cmVzPXtqczpmZWF0dXJlcy5qcyx3YXNtOmZlYXR1cmVzLndhc20mJnRoaXMuaGFzX3dhc219O3RoaXMudXNlKG1tX3Vuc2hhcnBfbWFzayk7dGhpcy51c2UobW1fcmVzaXplKTt9aW5oZXJpdHMoTWF0aExpYixNdWx0aW1hdGgpO01hdGhMaWIucHJvdG90eXBlLnJlc2l6ZUFuZFVuc2hhcnA9ZnVuY3Rpb24gcmVzaXplQW5kVW5zaGFycChvcHRpb25zLGNhY2hlKXt2YXIgcmVzdWx0PXRoaXMucmVzaXplKG9wdGlvbnMsY2FjaGUpO2lmKG9wdGlvbnMudW5zaGFycEFtb3VudCl7dGhpcy51bnNoYXJwX21hc2socmVzdWx0LG9wdGlvbnMudG9XaWR0aCxvcHRpb25zLnRvSGVpZ2h0LG9wdGlvbnMudW5zaGFycEFtb3VudCxvcHRpb25zLnVuc2hhcnBSYWRpdXMsb3B0aW9ucy51bnNoYXJwVGhyZXNob2xkKTt9cmV0dXJuIHJlc3VsdDt9O21vZHVsZS5leHBvcnRzPU1hdGhMaWI7fSx7XCIuL21tX3Jlc2l6ZVwiOjQsXCJpbmhlcml0c1wiOjE1LFwibXVsdGltYXRoXCI6MTYsXCJtdWx0aW1hdGgvbGliL3Vuc2hhcnBfbWFza1wiOjE5fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ly8gUHJlY2lzaW9uIG9mIGZpeGVkIEZQIHZhbHVlc1xuLy92YXIgRklYRURfRlJBQ19CSVRTID0gMTQ7XG5mdW5jdGlvbiBjbGFtcFRvOChpKXtyZXR1cm4gaTwwPzA6aT4yNTU/MjU1Omk7fS8vIENvbnZvbHZlIGltYWdlIGluIGhvcml6b250YWwgZGlyZWN0aW9ucyBhbmQgdHJhbnNwb3NlIG91dHB1dC4gSW4gdGhlb3J5LFxuLy8gdHJhbnNwb3NlIGFsbG93OlxuLy9cbi8vIC0gdXNlIHRoZSBzYW1lIGNvbnZvbHZlciBmb3IgYm90aCBwYXNzZXMgKHRoaXMgZmFpbHMgZHVlIGRpZmZlcmVudFxuLy8gICB0eXBlcyBvZiBpbnB1dCBhcnJheSBhbmQgdGVtcG9yYXJ5IGJ1ZmZlcilcbi8vIC0gbWFraW5nIHZlcnRpY2FsIHBhc3MgYnkgaG9yaXNvbmx0YWwgbGluZXMgaW5wcm92ZSBDUFUgY2FjaGUgdXNlLlxuLy9cbi8vIEJ1dCBpbiByZWFsIGxpZmUgdGhpcyBkb2Vzbid0IHdvcmsgOilcbi8vXG5mdW5jdGlvbiBjb252b2x2ZUhvcml6b250YWxseShzcmMsZGVzdCxzcmNXLHNyY0gsZGVzdFcsZmlsdGVycyl7dmFyIHIsZyxiLGE7dmFyIGZpbHRlclB0cixmaWx0ZXJTaGlmdCxmaWx0ZXJTaXplO3ZhciBzcmNQdHIsc3JjWSxkZXN0WCxmaWx0ZXJWYWw7dmFyIHNyY09mZnNldD0wLGRlc3RPZmZzZXQ9MDsvLyBGb3IgZWFjaCByb3dcbmZvcihzcmNZPTA7c3JjWTxzcmNIO3NyY1krKyl7ZmlsdGVyUHRyPTA7Ly8gQXBwbHkgcHJlY29tcHV0ZWQgZmlsdGVycyB0byBlYWNoIGRlc3RpbmF0aW9uIHJvdyBwb2ludFxuZm9yKGRlc3RYPTA7ZGVzdFg8ZGVzdFc7ZGVzdFgrKyl7Ly8gR2V0IHRoZSBmaWx0ZXIgdGhhdCBkZXRlcm1pbmVzIHRoZSBjdXJyZW50IG91dHB1dCBwaXhlbC5cbmZpbHRlclNoaWZ0PWZpbHRlcnNbZmlsdGVyUHRyKytdO2ZpbHRlclNpemU9ZmlsdGVyc1tmaWx0ZXJQdHIrK107c3JjUHRyPXNyY09mZnNldCtmaWx0ZXJTaGlmdCo0fDA7cj1nPWI9YT0wOy8vIEFwcGx5IHRoZSBmaWx0ZXIgdG8gdGhlIHJvdyB0byBnZXQgdGhlIGRlc3RpbmF0aW9uIHBpeGVsIHIsIGcsIGIsIGFcbmZvcig7ZmlsdGVyU2l6ZT4wO2ZpbHRlclNpemUtLSl7ZmlsdGVyVmFsPWZpbHRlcnNbZmlsdGVyUHRyKytdOy8vIFVzZSByZXZlcnNlIG9yZGVyIHRvIHdvcmthcm91bmQgZGVvcHRzIGluIG9sZCB2OCAobm9kZSB2LjEwKVxuLy8gQmlnIHRoYW5rcyB0byBAbXJhbGVwaCAoVnlhY2hlc2xhdiBFZ29yb3YpIGZvciB0aGUgdGlwLlxuYT1hK2ZpbHRlclZhbCpzcmNbc3JjUHRyKzNdfDA7Yj1iK2ZpbHRlclZhbCpzcmNbc3JjUHRyKzJdfDA7Zz1nK2ZpbHRlclZhbCpzcmNbc3JjUHRyKzFdfDA7cj1yK2ZpbHRlclZhbCpzcmNbc3JjUHRyXXwwO3NyY1B0cj1zcmNQdHIrNHwwO30vLyBCcmluZyB0aGlzIHZhbHVlIGJhY2sgaW4gcmFuZ2UuIEFsbCBvZiB0aGUgZmlsdGVyIHNjYWxpbmcgZmFjdG9yc1xuLy8gYXJlIGluIGZpeGVkIHBvaW50IHdpdGggRklYRURfRlJBQ19CSVRTIGJpdHMgb2YgZnJhY3Rpb25hbCBwYXJ0LlxuLy9cbi8vICghKSBBZGQgMS8yIG9mIHZhbHVlIGJlZm9yZSBjbGFtcGluZyB0byBnZXQgcHJvcGVyIHJvdW5kaW5nLiBJbiBvdGhlclxuLy8gY2FzZSBicmlnaHRuZXNzIGxvc3Mgd2lsbCBiZSBub3RpY2VhYmxlIGlmIHlvdSByZXNpemUgaW1hZ2Ugd2l0aCB3aGl0ZVxuLy8gYm9yZGVyIGFuZCBwbGFjZSBpdCBvbiB3aGl0ZSBiYWNrZ3JvdW5kLlxuLy9cbmRlc3RbZGVzdE9mZnNldCszXT1jbGFtcFRvOChhKygxPDwxMyk+PjE0LypGSVhFRF9GUkFDX0JJVFMqLyk7ZGVzdFtkZXN0T2Zmc2V0KzJdPWNsYW1wVG84KGIrKDE8PDEzKT4+MTQvKkZJWEVEX0ZSQUNfQklUUyovKTtkZXN0W2Rlc3RPZmZzZXQrMV09Y2xhbXBUbzgoZysoMTw8MTMpPj4xNC8qRklYRURfRlJBQ19CSVRTKi8pO2Rlc3RbZGVzdE9mZnNldF09Y2xhbXBUbzgocisoMTw8MTMpPj4xNC8qRklYRURfRlJBQ19CSVRTKi8pO2Rlc3RPZmZzZXQ9ZGVzdE9mZnNldCtzcmNIKjR8MDt9ZGVzdE9mZnNldD0oc3JjWSsxKSo0fDA7c3JjT2Zmc2V0PShzcmNZKzEpKnNyY1cqNHwwO319Ly8gVGVjaG5pY2FsbHksIGNvbnZvbHZlcnMgYXJlIHRoZSBzYW1lLiBCdXQgaW5wdXQgYXJyYXkgYW5kIHRlbXBvcmFyeVxuLy8gYnVmZmVyIGNhbiBiZSBvZiBkaWZmZXJlbnQgdHlwZSAoZXNwZWNpYWxseSwgaW4gb2xkIGJyb3dzZXJzKS4gU28sXG4vLyBrZWVwIGNvZGUgaW4gc2VwYXJhdGUgZnVuY3Rpb25zIHRvIGF2b2lkIGRlb3B0aW1pemF0aW9ucyAmIHNwZWVkIGxvc3MuXG5mdW5jdGlvbiBjb252b2x2ZVZlcnRpY2FsbHkoc3JjLGRlc3Qsc3JjVyxzcmNILGRlc3RXLGZpbHRlcnMpe3ZhciByLGcsYixhO3ZhciBmaWx0ZXJQdHIsZmlsdGVyU2hpZnQsZmlsdGVyU2l6ZTt2YXIgc3JjUHRyLHNyY1ksZGVzdFgsZmlsdGVyVmFsO3ZhciBzcmNPZmZzZXQ9MCxkZXN0T2Zmc2V0PTA7Ly8gRm9yIGVhY2ggcm93XG5mb3Ioc3JjWT0wO3NyY1k8c3JjSDtzcmNZKyspe2ZpbHRlclB0cj0wOy8vIEFwcGx5IHByZWNvbXB1dGVkIGZpbHRlcnMgdG8gZWFjaCBkZXN0aW5hdGlvbiByb3cgcG9pbnRcbmZvcihkZXN0WD0wO2Rlc3RYPGRlc3RXO2Rlc3RYKyspey8vIEdldCB0aGUgZmlsdGVyIHRoYXQgZGV0ZXJtaW5lcyB0aGUgY3VycmVudCBvdXRwdXQgcGl4ZWwuXG5maWx0ZXJTaGlmdD1maWx0ZXJzW2ZpbHRlclB0cisrXTtmaWx0ZXJTaXplPWZpbHRlcnNbZmlsdGVyUHRyKytdO3NyY1B0cj1zcmNPZmZzZXQrZmlsdGVyU2hpZnQqNHwwO3I9Zz1iPWE9MDsvLyBBcHBseSB0aGUgZmlsdGVyIHRvIHRoZSByb3cgdG8gZ2V0IHRoZSBkZXN0aW5hdGlvbiBwaXhlbCByLCBnLCBiLCBhXG5mb3IoO2ZpbHRlclNpemU+MDtmaWx0ZXJTaXplLS0pe2ZpbHRlclZhbD1maWx0ZXJzW2ZpbHRlclB0cisrXTsvLyBVc2UgcmV2ZXJzZSBvcmRlciB0byB3b3JrYXJvdW5kIGRlb3B0cyBpbiBvbGQgdjggKG5vZGUgdi4xMClcbi8vIEJpZyB0aGFua3MgdG8gQG1yYWxlcGggKFZ5YWNoZXNsYXYgRWdvcm92KSBmb3IgdGhlIHRpcC5cbmE9YStmaWx0ZXJWYWwqc3JjW3NyY1B0ciszXXwwO2I9YitmaWx0ZXJWYWwqc3JjW3NyY1B0cisyXXwwO2c9ZytmaWx0ZXJWYWwqc3JjW3NyY1B0cisxXXwwO3I9citmaWx0ZXJWYWwqc3JjW3NyY1B0cl18MDtzcmNQdHI9c3JjUHRyKzR8MDt9Ly8gQnJpbmcgdGhpcyB2YWx1ZSBiYWNrIGluIHJhbmdlLiBBbGwgb2YgdGhlIGZpbHRlciBzY2FsaW5nIGZhY3RvcnNcbi8vIGFyZSBpbiBmaXhlZCBwb2ludCB3aXRoIEZJWEVEX0ZSQUNfQklUUyBiaXRzIG9mIGZyYWN0aW9uYWwgcGFydC5cbi8vXG4vLyAoISkgQWRkIDEvMiBvZiB2YWx1ZSBiZWZvcmUgY2xhbXBpbmcgdG8gZ2V0IHByb3BlciByb3VuZGluZy4gSW4gb3RoZXJcbi8vIGNhc2UgYnJpZ2h0bmVzcyBsb3NzIHdpbGwgYmUgbm90aWNlYWJsZSBpZiB5b3UgcmVzaXplIGltYWdlIHdpdGggd2hpdGVcbi8vIGJvcmRlciBhbmQgcGxhY2UgaXQgb24gd2hpdGUgYmFja2dyb3VuZC5cbi8vXG5kZXN0W2Rlc3RPZmZzZXQrM109Y2xhbXBUbzgoYSsoMTw8MTMpPj4xNC8qRklYRURfRlJBQ19CSVRTKi8pO2Rlc3RbZGVzdE9mZnNldCsyXT1jbGFtcFRvOChiKygxPDwxMyk+PjE0LypGSVhFRF9GUkFDX0JJVFMqLyk7ZGVzdFtkZXN0T2Zmc2V0KzFdPWNsYW1wVG84KGcrKDE8PDEzKT4+MTQvKkZJWEVEX0ZSQUNfQklUUyovKTtkZXN0W2Rlc3RPZmZzZXRdPWNsYW1wVG84KHIrKDE8PDEzKT4+MTQvKkZJWEVEX0ZSQUNfQklUUyovKTtkZXN0T2Zmc2V0PWRlc3RPZmZzZXQrc3JjSCo0fDA7fWRlc3RPZmZzZXQ9KHNyY1krMSkqNHwwO3NyY09mZnNldD0oc3JjWSsxKSpzcmNXKjR8MDt9fW1vZHVsZS5leHBvcnRzPXtjb252b2x2ZUhvcml6b250YWxseTpjb252b2x2ZUhvcml6b250YWxseSxjb252b2x2ZVZlcnRpY2FsbHk6Y29udm9sdmVWZXJ0aWNhbGx5fTt9LHt9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovbW9kdWxlLmV4cG9ydHM9J0FHRnpiUUVBQUFBQkZBSmdCbjkvZjM5L2Z3QmdCMzkvZjM5L2YzOEFBZzhCQTJWdWRnWnRaVzF2Y25rQ0FBRURBd0lBQVFRRUFYQUFBQWNaQWdoamIyNTJiMngyWlFBQUNtTnZiblp2YkhabFNGWUFBUWtCQUFybUF3TEJBd0VRZndKQUlBTkZEUUFnQkVVTkFDQUZRUVJxSVJWQkFDRU1RUUFoRFFOQUlBMGhEa0VBSVJGQkFDRUhBMEFnQjBFQ2FpRVNBbjhnQlNBSFFRRjBJZ2RxSWdaQkFtb3VBUUFpRXdSQVFRQWhDRUVBSUJOcklSUWdGU0FIYWlFUElBQWdEQ0FHTGdFQWFrRUNkR29oRUVFQUlRbEJBQ0VLUVFBaEN3TkFJQkFvQWdBaUIwRVlkaUFQTGdFQUlnWnNJQXRxSVFzZ0IwSC9BWEVnQm13Z0NHb2hDQ0FIUVJCMlFmOEJjU0FHYkNBS2FpRUtJQWRCQ0haQi93RnhJQVpzSUFscUlRa2dEMEVDYWlFUElCQkJCR29oRUNBVVFRRnFJaFFOQUFzZ0VpQVRhZ3dCQzBFQUlRdEJBQ0VLUVFBaENVRUFJUWdnRWdzaEJ5QUJJQTVCQW5ScUlBcEJnTUFBYWtFT2RTSUdRZjhCSUFaQi93RklHMEVRZEVHQWdQd0hjVUVBSUFaQkFFb2JJQXRCZ01BQWFrRU9kU0lHUWY4QklBWkIvd0ZJRzBFWWRFRUFJQVpCQUVvYmNpQUpRWURBQUdwQkRuVWlCa0gvQVNBR1FmOEJTQnRCQ0hSQmdQNERjVUVBSUFaQkFFb2JjaUFJUVlEQUFHcEJEblVpQmtIL0FTQUdRZjhCU0J0Qi93RnhRUUFnQmtFQVNodHlOZ0lBSUE0Z0Eyb2hEaUFSUVFGcUloRWdCRWNOQUFzZ0RDQUNhaUVNSUExQkFXb2lEU0FEUncwQUN3c0xJUUFDUUVFQUlBSWdBeUFFSUFVZ0FCQUFJQUpCQUNBRUlBVWdCaUFCRUFBTEN3PT0nO30se31dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPXtuYW1lOidyZXNpemUnLGZuOnJlcXVpcmUoJy4vcmVzaXplJyksd2FzbV9mbjpyZXF1aXJlKCcuL3Jlc2l6ZV93YXNtJyksd2FzbV9zcmM6cmVxdWlyZSgnLi9jb252b2x2ZV93YXNtX2Jhc2U2NCcpfTt9LHtcIi4vY29udm9sdmVfd2FzbV9iYXNlNjRcIjozLFwiLi9yZXNpemVcIjo1LFwiLi9yZXNpemVfd2FzbVwiOjh9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgY3JlYXRlRmlsdGVycz1yZXF1aXJlKCcuL3Jlc2l6ZV9maWx0ZXJfZ2VuJyk7dmFyIGNvbnZvbHZlSG9yaXpvbnRhbGx5PXJlcXVpcmUoJy4vY29udm9sdmUnKS5jb252b2x2ZUhvcml6b250YWxseTt2YXIgY29udm9sdmVWZXJ0aWNhbGx5PXJlcXVpcmUoJy4vY29udm9sdmUnKS5jb252b2x2ZVZlcnRpY2FsbHk7ZnVuY3Rpb24gcmVzZXRBbHBoYShkc3Qsd2lkdGgsaGVpZ2h0KXt2YXIgcHRyPTMsbGVuPXdpZHRoKmhlaWdodCo0fDA7d2hpbGUocHRyPGxlbil7ZHN0W3B0cl09MHhGRjtwdHI9cHRyKzR8MDt9fW1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHJlc2l6ZShvcHRpb25zKXt2YXIgc3JjPW9wdGlvbnMuc3JjO3ZhciBzcmNXPW9wdGlvbnMud2lkdGg7dmFyIHNyY0g9b3B0aW9ucy5oZWlnaHQ7dmFyIGRlc3RXPW9wdGlvbnMudG9XaWR0aDt2YXIgZGVzdEg9b3B0aW9ucy50b0hlaWdodDt2YXIgc2NhbGVYPW9wdGlvbnMuc2NhbGVYfHxvcHRpb25zLnRvV2lkdGgvb3B0aW9ucy53aWR0aDt2YXIgc2NhbGVZPW9wdGlvbnMuc2NhbGVZfHxvcHRpb25zLnRvSGVpZ2h0L29wdGlvbnMuaGVpZ2h0O3ZhciBvZmZzZXRYPW9wdGlvbnMub2Zmc2V0WHx8MDt2YXIgb2Zmc2V0WT1vcHRpb25zLm9mZnNldFl8fDA7dmFyIGRlc3Q9b3B0aW9ucy5kZXN0fHxuZXcgVWludDhBcnJheShkZXN0VypkZXN0SCo0KTt2YXIgcXVhbGl0eT10eXBlb2Ygb3B0aW9ucy5xdWFsaXR5PT09J3VuZGVmaW5lZCc/MzpvcHRpb25zLnF1YWxpdHk7dmFyIGFscGhhPW9wdGlvbnMuYWxwaGF8fGZhbHNlO3ZhciBmaWx0ZXJzWD1jcmVhdGVGaWx0ZXJzKHF1YWxpdHksc3JjVyxkZXN0VyxzY2FsZVgsb2Zmc2V0WCksZmlsdGVyc1k9Y3JlYXRlRmlsdGVycyhxdWFsaXR5LHNyY0gsZGVzdEgsc2NhbGVZLG9mZnNldFkpO3ZhciB0bXA9bmV3IFVpbnQ4QXJyYXkoZGVzdFcqc3JjSCo0KTsvLyBUbyB1c2Ugc2luZ2xlIGZ1bmN0aW9uIHdlIG5lZWQgc3JjICYgdG1wIG9mIHRoZSBzYW1lIHR5cGUuXG4vLyBCdXQgc3JjIGNhbiBiZSBDYW52YXNQaXhlbEFycmF5LCBhbmQgdG1wIC0gVWludDhBcnJheS4gU28sIGtlZXBcbi8vIHZlcnRpY2FsIGFuZCBob3Jpem9udGFsIHBhc3NlcyBzZXBhcmF0ZWx5IHRvIGF2b2lkIGRlb3B0aW1pemF0aW9uLlxuY29udm9sdmVIb3Jpem9udGFsbHkoc3JjLHRtcCxzcmNXLHNyY0gsZGVzdFcsZmlsdGVyc1gpO2NvbnZvbHZlVmVydGljYWxseSh0bXAsZGVzdCxzcmNILGRlc3RXLGRlc3RILGZpbHRlcnNZKTsvLyBUaGF0J3MgZmFzdGVyIHRoYW4gZG9pbmcgY2hlY2tzIGluIGNvbnZvbHZlci5cbi8vICEhISBOb3RlLCBjYW52YXMgZGF0YSBpcyBub3QgcHJlbXVsdGlwbGVkLiBXZSBkb24ndCBuZWVkIG90aGVyXG4vLyBhbHBoYSBjb3JyZWN0aW9ucy5cbmlmKCFhbHBoYSlyZXNldEFscGhhKGRlc3QsZGVzdFcsZGVzdEgpO3JldHVybiBkZXN0O307fSx7XCIuL2NvbnZvbHZlXCI6MixcIi4vcmVzaXplX2ZpbHRlcl9nZW5cIjo2fV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIEZJTFRFUl9JTkZPPXJlcXVpcmUoJy4vcmVzaXplX2ZpbHRlcl9pbmZvJyk7Ly8gUHJlY2lzaW9uIG9mIGZpeGVkIEZQIHZhbHVlc1xudmFyIEZJWEVEX0ZSQUNfQklUUz0xNDtmdW5jdGlvbiB0b0ZpeGVkUG9pbnQobnVtKXtyZXR1cm4gTWF0aC5yb3VuZChudW0qKCgxPDxGSVhFRF9GUkFDX0JJVFMpLTEpKTt9bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gcmVzaXplRmlsdGVyR2VuKHF1YWxpdHksc3JjU2l6ZSxkZXN0U2l6ZSxzY2FsZSxvZmZzZXQpe3ZhciBmaWx0ZXJGdW5jdGlvbj1GSUxURVJfSU5GT1txdWFsaXR5XS5maWx0ZXI7dmFyIHNjYWxlSW52ZXJ0ZWQ9MS4wL3NjYWxlO3ZhciBzY2FsZUNsYW1wZWQ9TWF0aC5taW4oMS4wLHNjYWxlKTsvLyBGb3IgdXBzY2FsZVxuLy8gRmlsdGVyIHdpbmRvdyAoYXZlcmFnaW5nIGludGVydmFsKSwgc2NhbGVkIHRvIHNyYyBpbWFnZVxudmFyIHNyY1dpbmRvdz1GSUxURVJfSU5GT1txdWFsaXR5XS53aW4vc2NhbGVDbGFtcGVkO3ZhciBkZXN0UGl4ZWwsc3JjUGl4ZWwsc3JjRmlyc3Qsc3JjTGFzdCxmaWx0ZXJFbGVtZW50U2l6ZSxmbG9hdEZpbHRlcixmeHBGaWx0ZXIsdG90YWwscHhsLGlkeCxmbG9hdFZhbCxmaWx0ZXJUb3RhbCxmaWx0ZXJWYWw7dmFyIGxlZnROb3RFbXB0eSxyaWdodE5vdEVtcHR5LGZpbHRlclNoaWZ0LGZpbHRlclNpemU7dmFyIG1heEZpbHRlckVsZW1lbnRTaXplPU1hdGguZmxvb3IoKHNyY1dpbmRvdysxKSoyKTt2YXIgcGFja2VkRmlsdGVyPW5ldyBJbnQxNkFycmF5KChtYXhGaWx0ZXJFbGVtZW50U2l6ZSsyKSpkZXN0U2l6ZSk7dmFyIHBhY2tlZEZpbHRlclB0cj0wO3ZhciBzbG93Q29weT0hcGFja2VkRmlsdGVyLnN1YmFycmF5fHwhcGFja2VkRmlsdGVyLnNldDsvLyBGb3IgZWFjaCBkZXN0aW5hdGlvbiBwaXhlbCBjYWxjdWxhdGUgc291cmNlIHJhbmdlIGFuZCBidWlsdCBmaWx0ZXIgdmFsdWVzXG5mb3IoZGVzdFBpeGVsPTA7ZGVzdFBpeGVsPGRlc3RTaXplO2Rlc3RQaXhlbCsrKXsvLyBTY2FsaW5nIHNob3VsZCBiZSBkb25lIHJlbGF0aXZlIHRvIGNlbnRyYWwgcGl4ZWwgcG9pbnRcbnNyY1BpeGVsPShkZXN0UGl4ZWwrMC41KSpzY2FsZUludmVydGVkK29mZnNldDtzcmNGaXJzdD1NYXRoLm1heCgwLE1hdGguZmxvb3Ioc3JjUGl4ZWwtc3JjV2luZG93KSk7c3JjTGFzdD1NYXRoLm1pbihzcmNTaXplLTEsTWF0aC5jZWlsKHNyY1BpeGVsK3NyY1dpbmRvdykpO2ZpbHRlckVsZW1lbnRTaXplPXNyY0xhc3Qtc3JjRmlyc3QrMTtmbG9hdEZpbHRlcj1uZXcgRmxvYXQzMkFycmF5KGZpbHRlckVsZW1lbnRTaXplKTtmeHBGaWx0ZXI9bmV3IEludDE2QXJyYXkoZmlsdGVyRWxlbWVudFNpemUpO3RvdGFsPTAuMDsvLyBGaWxsIGZpbHRlciB2YWx1ZXMgZm9yIGNhbGN1bGF0ZWQgcmFuZ2VcbmZvcihweGw9c3JjRmlyc3QsaWR4PTA7cHhsPD1zcmNMYXN0O3B4bCsrLGlkeCsrKXtmbG9hdFZhbD1maWx0ZXJGdW5jdGlvbigocHhsKzAuNS1zcmNQaXhlbCkqc2NhbGVDbGFtcGVkKTt0b3RhbCs9ZmxvYXRWYWw7ZmxvYXRGaWx0ZXJbaWR4XT1mbG9hdFZhbDt9Ly8gTm9ybWFsaXplIGZpbHRlciwgY29udmVydCB0byBmaXhlZCBwb2ludCBhbmQgYWNjdW11bGF0ZSBjb252ZXJzaW9uIGVycm9yXG5maWx0ZXJUb3RhbD0wO2ZvcihpZHg9MDtpZHg8ZmxvYXRGaWx0ZXIubGVuZ3RoO2lkeCsrKXtmaWx0ZXJWYWw9ZmxvYXRGaWx0ZXJbaWR4XS90b3RhbDtmaWx0ZXJUb3RhbCs9ZmlsdGVyVmFsO2Z4cEZpbHRlcltpZHhdPXRvRml4ZWRQb2ludChmaWx0ZXJWYWwpO30vLyBDb21wZW5zYXRlIG5vcm1hbGl6YXRpb24gZXJyb3IsIHRvIG1pbmltaXplIGJyaWdodG5lc3MgZHJpZnRcbmZ4cEZpbHRlcltkZXN0U2l6ZT4+MV0rPXRvRml4ZWRQb2ludCgxLjAtZmlsdGVyVG90YWwpOy8vXG4vLyBOb3cgcGFjayBmaWx0ZXIgdG8gdXNlYWJsZSBmb3JtXG4vL1xuLy8gMS4gVHJpbSBoZWFkaW5nIGFuZCB0YWlsaW5nIHplcm8gdmFsdWVzLCBhbmQgY29tcGVuc2F0ZSBzaGl0Zi9sZW5ndGhcbi8vIDIuIFB1dCBhbGwgdG8gc2luZ2xlIGFycmF5IGluIHRoaXMgZm9ybWF0OlxuLy9cbi8vICAgIFsgcG9zIHNoaWZ0LCBkYXRhIGxlbmd0aCwgdmFsdWUxLCB2YWx1ZTIsIHZhbHVlMywgLi4uIF1cbi8vXG5sZWZ0Tm90RW1wdHk9MDt3aGlsZShsZWZ0Tm90RW1wdHk8ZnhwRmlsdGVyLmxlbmd0aCYmZnhwRmlsdGVyW2xlZnROb3RFbXB0eV09PT0wKXtsZWZ0Tm90RW1wdHkrKzt9aWYobGVmdE5vdEVtcHR5PGZ4cEZpbHRlci5sZW5ndGgpe3JpZ2h0Tm90RW1wdHk9ZnhwRmlsdGVyLmxlbmd0aC0xO3doaWxlKHJpZ2h0Tm90RW1wdHk+MCYmZnhwRmlsdGVyW3JpZ2h0Tm90RW1wdHldPT09MCl7cmlnaHROb3RFbXB0eS0tO31maWx0ZXJTaGlmdD1zcmNGaXJzdCtsZWZ0Tm90RW1wdHk7ZmlsdGVyU2l6ZT1yaWdodE5vdEVtcHR5LWxlZnROb3RFbXB0eSsxO3BhY2tlZEZpbHRlcltwYWNrZWRGaWx0ZXJQdHIrK109ZmlsdGVyU2hpZnQ7Ly8gc2hpZnRcbnBhY2tlZEZpbHRlcltwYWNrZWRGaWx0ZXJQdHIrK109ZmlsdGVyU2l6ZTsvLyBzaXplXG5pZighc2xvd0NvcHkpe3BhY2tlZEZpbHRlci5zZXQoZnhwRmlsdGVyLnN1YmFycmF5KGxlZnROb3RFbXB0eSxyaWdodE5vdEVtcHR5KzEpLHBhY2tlZEZpbHRlclB0cik7cGFja2VkRmlsdGVyUHRyKz1maWx0ZXJTaXplO31lbHNley8vIGZhbGxiYWNrIGZvciBvbGQgSUUgPCAxMSwgd2l0aG91dCBzdWJhcnJheS9zZXQgbWV0aG9kc1xuZm9yKGlkeD1sZWZ0Tm90RW1wdHk7aWR4PD1yaWdodE5vdEVtcHR5O2lkeCsrKXtwYWNrZWRGaWx0ZXJbcGFja2VkRmlsdGVyUHRyKytdPWZ4cEZpbHRlcltpZHhdO319fWVsc2V7Ly8gemVybyBkYXRhLCB3cml0ZSBoZWFkZXIgb25seVxucGFja2VkRmlsdGVyW3BhY2tlZEZpbHRlclB0cisrXT0wOy8vIHNoaWZ0XG5wYWNrZWRGaWx0ZXJbcGFja2VkRmlsdGVyUHRyKytdPTA7Ly8gc2l6ZVxufX1yZXR1cm4gcGFja2VkRmlsdGVyO307fSx7XCIuL3Jlc2l6ZV9maWx0ZXJfaW5mb1wiOjd9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXttb2R1bGUuZXhwb3J0cz1bey8vIE5lYXJlc3QgbmVpYm9yIChCb3gpXG53aW46MC41LGZpbHRlcjpmdW5jdGlvbiBmaWx0ZXIoeCl7cmV0dXJuIHg+PS0wLjUmJng8MC41PzEuMDowLjA7fX0sey8vIEhhbW1pbmdcbndpbjoxLjAsZmlsdGVyOmZ1bmN0aW9uIGZpbHRlcih4KXtpZih4PD0tMS4wfHx4Pj0xLjApe3JldHVybiAwLjA7fWlmKHg+LTEuMTkyMDkyOTBFLTA3JiZ4PDEuMTkyMDkyOTBFLTA3KXtyZXR1cm4gMS4wO312YXIgeHBpPXgqTWF0aC5QSTtyZXR1cm4gTWF0aC5zaW4oeHBpKS94cGkqKDAuNTQrMC40NipNYXRoLmNvcyh4cGkvMS4wKSk7fX0sey8vIExhbmN6b3MsIHdpbiA9IDJcbndpbjoyLjAsZmlsdGVyOmZ1bmN0aW9uIGZpbHRlcih4KXtpZih4PD0tMi4wfHx4Pj0yLjApe3JldHVybiAwLjA7fWlmKHg+LTEuMTkyMDkyOTBFLTA3JiZ4PDEuMTkyMDkyOTBFLTA3KXtyZXR1cm4gMS4wO312YXIgeHBpPXgqTWF0aC5QSTtyZXR1cm4gTWF0aC5zaW4oeHBpKS94cGkqTWF0aC5zaW4oeHBpLzIuMCkvKHhwaS8yLjApO319LHsvLyBMYW5jem9zLCB3aW4gPSAzXG53aW46My4wLGZpbHRlcjpmdW5jdGlvbiBmaWx0ZXIoeCl7aWYoeDw9LTMuMHx8eD49My4wKXtyZXR1cm4gMC4wO31pZih4Pi0xLjE5MjA5MjkwRS0wNyYmeDwxLjE5MjA5MjkwRS0wNyl7cmV0dXJuIDEuMDt9dmFyIHhwaT14Kk1hdGguUEk7cmV0dXJuIE1hdGguc2luKHhwaSkveHBpKk1hdGguc2luKHhwaS8zLjApLyh4cGkvMy4wKTt9fV07fSx7fV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIGNyZWF0ZUZpbHRlcnM9cmVxdWlyZSgnLi9yZXNpemVfZmlsdGVyX2dlbicpO2Z1bmN0aW9uIHJlc2V0QWxwaGEoZHN0LHdpZHRoLGhlaWdodCl7dmFyIHB0cj0zLGxlbj13aWR0aCpoZWlnaHQqNHwwO3doaWxlKHB0cjxsZW4pe2RzdFtwdHJdPTB4RkY7cHRyPXB0cis0fDA7fX1mdW5jdGlvbiBhc1VpbnQ4QXJyYXkoc3JjKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc3JjLmJ1ZmZlciwwLHNyYy5ieXRlTGVuZ3RoKTt9dmFyIElTX0xFPXRydWU7Ly8gc2hvdWxkIG5vdCBjcmFzaCBldmVyeXRoaW5nIG9uIG1vZHVsZSBsb2FkIGluIG9sZCBicm93c2Vyc1xudHJ5e0lTX0xFPW5ldyBVaW50MzJBcnJheShuZXcgVWludDhBcnJheShbMSwwLDAsMF0pLmJ1ZmZlcilbMF09PT0xO31jYXRjaChfXyl7fWZ1bmN0aW9uIGNvcHlJbnQxNmFzTEUoc3JjLHRhcmdldCx0YXJnZXRfb2Zmc2V0KXtpZihJU19MRSl7dGFyZ2V0LnNldChhc1VpbnQ4QXJyYXkoc3JjKSx0YXJnZXRfb2Zmc2V0KTtyZXR1cm47fWZvcih2YXIgcHRyPXRhcmdldF9vZmZzZXQsaT0wO2k8c3JjLmxlbmd0aDtpKyspe3ZhciBkYXRhPXNyY1tpXTt0YXJnZXRbcHRyKytdPWRhdGEmMHhGRjt0YXJnZXRbcHRyKytdPWRhdGE+PjgmMHhGRjt9fW1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHJlc2l6ZV93YXNtKG9wdGlvbnMpe3ZhciBzcmM9b3B0aW9ucy5zcmM7dmFyIHNyY1c9b3B0aW9ucy53aWR0aDt2YXIgc3JjSD1vcHRpb25zLmhlaWdodDt2YXIgZGVzdFc9b3B0aW9ucy50b1dpZHRoO3ZhciBkZXN0SD1vcHRpb25zLnRvSGVpZ2h0O3ZhciBzY2FsZVg9b3B0aW9ucy5zY2FsZVh8fG9wdGlvbnMudG9XaWR0aC9vcHRpb25zLndpZHRoO3ZhciBzY2FsZVk9b3B0aW9ucy5zY2FsZVl8fG9wdGlvbnMudG9IZWlnaHQvb3B0aW9ucy5oZWlnaHQ7dmFyIG9mZnNldFg9b3B0aW9ucy5vZmZzZXRYfHwwLjA7dmFyIG9mZnNldFk9b3B0aW9ucy5vZmZzZXRZfHwwLjA7dmFyIGRlc3Q9b3B0aW9ucy5kZXN0fHxuZXcgVWludDhBcnJheShkZXN0VypkZXN0SCo0KTt2YXIgcXVhbGl0eT10eXBlb2Ygb3B0aW9ucy5xdWFsaXR5PT09J3VuZGVmaW5lZCc/MzpvcHRpb25zLnF1YWxpdHk7dmFyIGFscGhhPW9wdGlvbnMuYWxwaGF8fGZhbHNlO3ZhciBmaWx0ZXJzWD1jcmVhdGVGaWx0ZXJzKHF1YWxpdHksc3JjVyxkZXN0VyxzY2FsZVgsb2Zmc2V0WCksZmlsdGVyc1k9Y3JlYXRlRmlsdGVycyhxdWFsaXR5LHNyY0gsZGVzdEgsc2NhbGVZLG9mZnNldFkpOy8vIGRlc3RpbmF0aW9uIGlzIDAgdG9vLlxudmFyIHNyY19vZmZzZXQ9MDsvLyBidWZmZXIgYmV0d2VlbiBjb252b2x2ZSBwYXNzZXNcbnZhciB0bXBfb2Zmc2V0PXRoaXMuX19hbGlnbihzcmNfb2Zmc2V0K01hdGgubWF4KHNyYy5ieXRlTGVuZ3RoLGRlc3QuYnl0ZUxlbmd0aCkpO3ZhciBmaWx0ZXJzWF9vZmZzZXQ9dGhpcy5fX2FsaWduKHRtcF9vZmZzZXQrc3JjSCpkZXN0Vyo0KTt2YXIgZmlsdGVyc1lfb2Zmc2V0PXRoaXMuX19hbGlnbihmaWx0ZXJzWF9vZmZzZXQrZmlsdGVyc1guYnl0ZUxlbmd0aCk7dmFyIGFsbG9jX2J5dGVzPWZpbHRlcnNZX29mZnNldCtmaWx0ZXJzWS5ieXRlTGVuZ3RoO3ZhciBpbnN0YW5jZT10aGlzLl9faW5zdGFuY2UoJ3Jlc2l6ZScsYWxsb2NfYnl0ZXMpOy8vXG4vLyBGaWxsIG1lbW9yeSBibG9jayB3aXRoIGRhdGEgdG8gcHJvY2Vzc1xuLy9cbnZhciBtZW09bmV3IFVpbnQ4QXJyYXkodGhpcy5fX21lbW9yeS5idWZmZXIpO3ZhciBtZW0zMj1uZXcgVWludDMyQXJyYXkodGhpcy5fX21lbW9yeS5idWZmZXIpOy8vIDMyLWJpdCBjb3B5IGlzIG11Y2ggZmFzdGVyIGluIGNocm9tZVxudmFyIHNyYzMyPW5ldyBVaW50MzJBcnJheShzcmMuYnVmZmVyKTttZW0zMi5zZXQoc3JjMzIpOy8vIFdlIHNob3VsZCBndWFyYW50ZWUgTEUgYnl0ZXMgb3JkZXIuIEZpbHRlcnMgYXJlIG5vdCBiaWcsIHNvXG4vLyBzcGVlZCBkaWZmZXJlbmNlIGlzIG5vdCBzaWduaWZpY2FudCB2cyBkaXJlY3QgLnNldCgpXG5jb3B5SW50MTZhc0xFKGZpbHRlcnNYLG1lbSxmaWx0ZXJzWF9vZmZzZXQpO2NvcHlJbnQxNmFzTEUoZmlsdGVyc1ksbWVtLGZpbHRlcnNZX29mZnNldCk7Ly9cbi8vIE5vdyBjYWxsIHdlYmFzc2VtYmx5IG1ldGhvZFxuLy8gZW1zZGsgZG9lcyBtZXRob2QgbmFtZXMgd2l0aCAnXydcbnZhciBmbj1pbnN0YW5jZS5leHBvcnRzLmNvbnZvbHZlSFZ8fGluc3RhbmNlLmV4cG9ydHMuX2NvbnZvbHZlSFY7Zm4oZmlsdGVyc1hfb2Zmc2V0LGZpbHRlcnNZX29mZnNldCx0bXBfb2Zmc2V0LHNyY1csc3JjSCxkZXN0VyxkZXN0SCk7Ly9cbi8vIENvcHkgZGF0YSBiYWNrIHRvIHR5cGVkIGFycmF5XG4vL1xuLy8gMzItYml0IGNvcHkgaXMgbXVjaCBmYXN0ZXIgaW4gY2hyb21lXG52YXIgZGVzdDMyPW5ldyBVaW50MzJBcnJheShkZXN0LmJ1ZmZlcik7ZGVzdDMyLnNldChuZXcgVWludDMyQXJyYXkodGhpcy5fX21lbW9yeS5idWZmZXIsMCxkZXN0SCpkZXN0VykpOy8vIFRoYXQncyBmYXN0ZXIgdGhhbiBkb2luZyBjaGVja3MgaW4gY29udm9sdmVyLlxuLy8gISEhIE5vdGUsIGNhbnZhcyBkYXRhIGlzIG5vdCBwcmVtdWx0aXBsZWQuIFdlIGRvbid0IG5lZWQgb3RoZXJcbi8vIGFscGhhIGNvcnJlY3Rpb25zLlxuaWYoIWFscGhhKXJlc2V0QWxwaGEoZGVzdCxkZXN0VyxkZXN0SCk7cmV0dXJuIGRlc3Q7fTt9LHtcIi4vcmVzaXplX2ZpbHRlcl9nZW5cIjo2fV0sOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIEdDX0lOVEVSVkFMPTEwMDtmdW5jdGlvbiBQb29sKGNyZWF0ZSxpZGxlKXt0aGlzLmNyZWF0ZT1jcmVhdGU7dGhpcy5hdmFpbGFibGU9W107dGhpcy5hY3F1aXJlZD17fTt0aGlzLmxhc3RJZD0xO3RoaXMudGltZW91dElkPTA7dGhpcy5pZGxlPWlkbGV8fDIwMDA7fVBvb2wucHJvdG90eXBlLmFjcXVpcmU9ZnVuY3Rpb24oKXt2YXIgX3RoaXM9dGhpczt2YXIgcmVzb3VyY2U9dm9pZCAwO2lmKHRoaXMuYXZhaWxhYmxlLmxlbmd0aCE9PTApe3Jlc291cmNlPXRoaXMuYXZhaWxhYmxlLnBvcCgpO31lbHNle3Jlc291cmNlPXRoaXMuY3JlYXRlKCk7cmVzb3VyY2UuaWQ9dGhpcy5sYXN0SWQrKztyZXNvdXJjZS5yZWxlYXNlPWZ1bmN0aW9uKCl7cmV0dXJuIF90aGlzLnJlbGVhc2UocmVzb3VyY2UpO307fXRoaXMuYWNxdWlyZWRbcmVzb3VyY2UuaWRdPXJlc291cmNlO3JldHVybiByZXNvdXJjZTt9O1Bvb2wucHJvdG90eXBlLnJlbGVhc2U9ZnVuY3Rpb24ocmVzb3VyY2Upe3ZhciBfdGhpczI9dGhpcztkZWxldGUgdGhpcy5hY3F1aXJlZFtyZXNvdXJjZS5pZF07cmVzb3VyY2UubGFzdFVzZWQ9RGF0ZS5ub3coKTt0aGlzLmF2YWlsYWJsZS5wdXNoKHJlc291cmNlKTtpZih0aGlzLnRpbWVvdXRJZD09PTApe3RoaXMudGltZW91dElkPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMyLmdjKCk7fSxHQ19JTlRFUlZBTCk7fX07UG9vbC5wcm90b3R5cGUuZ2M9ZnVuY3Rpb24oKXt2YXIgX3RoaXMzPXRoaXM7dmFyIG5vdz1EYXRlLm5vdygpO3RoaXMuYXZhaWxhYmxlPXRoaXMuYXZhaWxhYmxlLmZpbHRlcihmdW5jdGlvbihyZXNvdXJjZSl7aWYobm93LXJlc291cmNlLmxhc3RVc2VkPl90aGlzMy5pZGxlKXtyZXNvdXJjZS5kZXN0cm95KCk7cmV0dXJuIGZhbHNlO31yZXR1cm4gdHJ1ZTt9KTtpZih0aGlzLmF2YWlsYWJsZS5sZW5ndGghPT0wKXt0aGlzLnRpbWVvdXRJZD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cmV0dXJuIF90aGlzMy5nYygpO30sR0NfSU5URVJWQUwpO31lbHNle3RoaXMudGltZW91dElkPTA7fX07bW9kdWxlLmV4cG9ydHM9UG9vbDt9LHt9XSwxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ly8gbWluIHNpemUgPSAwIHJlc3VsdHMgaW4gaW5maW5pdGUgbG9vcCxcbi8vIG1pbiBzaXplID0gMSBjYW4gY29uc3VtZSBsYXJnZSBhbW91bnQgb2YgbWVtb3J5XG52YXIgTUlOX0lOTkVSX1RJTEVfU0laRT0yO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGNyZWF0ZVN0YWdlcyhmcm9tV2lkdGgsZnJvbUhlaWdodCx0b1dpZHRoLHRvSGVpZ2h0LHNyY1RpbGVTaXplLGRlc3RUaWxlQm9yZGVyKXt2YXIgc2NhbGVYPXRvV2lkdGgvZnJvbVdpZHRoO3ZhciBzY2FsZVk9dG9IZWlnaHQvZnJvbUhlaWdodDsvLyBkZXJpdmVkIGZyb20gY3JlYXRlUmVnaW9ucyBlcXVhdGlvbjpcbi8vIGlubmVyVGlsZVdpZHRoID0gcGl4ZWxGbG9vcihzcmNUaWxlU2l6ZSAqIHNjYWxlWCkgLSAyICogZGVzdFRpbGVCb3JkZXI7XG52YXIgbWluU2NhbGU9KDIqZGVzdFRpbGVCb3JkZXIrTUlOX0lOTkVSX1RJTEVfU0laRSsxKS9zcmNUaWxlU2l6ZTsvLyByZWZ1c2UgdG8gc2NhbGUgaW1hZ2UgbXVsdGlwbGUgdGltZXMgYnkgbGVzcyB0aGFuIHR3aWNlIGVhY2ggdGltZSxcbi8vIGl0IGNvdWxkIG9ubHkgaGFwcGVuIGJlY2F1c2Ugb2YgaW52YWxpZCBvcHRpb25zXG5pZihtaW5TY2FsZT4wLjUpcmV0dXJuW1t0b1dpZHRoLHRvSGVpZ2h0XV07dmFyIHN0YWdlQ291bnQ9TWF0aC5jZWlsKE1hdGgubG9nKE1hdGgubWluKHNjYWxlWCxzY2FsZVkpKS9NYXRoLmxvZyhtaW5TY2FsZSkpOy8vIG5vIGFkZGl0aW9uYWwgcmVzaXplcyBhcmUgbmVjZXNzYXJ5LFxuLy8gc3RhZ2VDb3VudCBjYW4gYmUgemVybyBvciBiZSBuZWdhdGl2ZSB3aGVuIGVubGFyZ2luZyB0aGUgaW1hZ2VcbmlmKHN0YWdlQ291bnQ8PTEpcmV0dXJuW1t0b1dpZHRoLHRvSGVpZ2h0XV07dmFyIHJlc3VsdD1bXTtmb3IodmFyIGk9MDtpPHN0YWdlQ291bnQ7aSsrKXt2YXIgd2lkdGg9TWF0aC5yb3VuZChNYXRoLnBvdyhNYXRoLnBvdyhmcm9tV2lkdGgsc3RhZ2VDb3VudC1pLTEpKk1hdGgucG93KHRvV2lkdGgsaSsxKSwxL3N0YWdlQ291bnQpKTt2YXIgaGVpZ2h0PU1hdGgucm91bmQoTWF0aC5wb3coTWF0aC5wb3coZnJvbUhlaWdodCxzdGFnZUNvdW50LWktMSkqTWF0aC5wb3codG9IZWlnaHQsaSsxKSwxL3N0YWdlQ291bnQpKTtyZXN1bHQucHVzaChbd2lkdGgsaGVpZ2h0XSk7fXJldHVybiByZXN1bHQ7fTt9LHt9XSwxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7LypcbiAgICogcGl4ZWxGbG9vciBhbmQgcGl4ZWxDZWlsIGFyZSBtb2RpZmllZCB2ZXJzaW9ucyBvZiBNYXRoLmZsb29yIGFuZCBNYXRoLmNlaWxcbiAgICogZnVuY3Rpb25zIHdoaWNoIHRha2UgaW50byBhY2NvdW50IGZsb2F0aW5nIHBvaW50IGFyaXRobWV0aWMgZXJyb3JzLlxuICAgKiBUaG9zZSBlcnJvcnMgY2FuIGNhdXNlIHVuZGVzaXJlZCBpbmNyZW1lbnRzL2RlY3JlbWVudHMgb2Ygc2l6ZXMgYW5kIG9mZnNldHM6XG4gICAqIE1hdGguY2VpbCgzNiAvICgzNiAvIDUwMCkpID0gNTAxXG4gICAqIHBpeGVsQ2VpbCgzNiAvICgzNiAvIDUwMCkpID0gNTAwXG4gICAqL3ZhciBQSVhFTF9FUFNJTE9OPTFlLTU7ZnVuY3Rpb24gcGl4ZWxGbG9vcih4KXt2YXIgbmVhcmVzdD1NYXRoLnJvdW5kKHgpO2lmKE1hdGguYWJzKHgtbmVhcmVzdCk8UElYRUxfRVBTSUxPTil7cmV0dXJuIG5lYXJlc3Q7fXJldHVybiBNYXRoLmZsb29yKHgpO31mdW5jdGlvbiBwaXhlbENlaWwoeCl7dmFyIG5lYXJlc3Q9TWF0aC5yb3VuZCh4KTtpZihNYXRoLmFicyh4LW5lYXJlc3QpPFBJWEVMX0VQU0lMT04pe3JldHVybiBuZWFyZXN0O31yZXR1cm4gTWF0aC5jZWlsKHgpO31tb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBjcmVhdGVSZWdpb25zKG9wdGlvbnMpe3ZhciBzY2FsZVg9b3B0aW9ucy50b1dpZHRoL29wdGlvbnMud2lkdGg7dmFyIHNjYWxlWT1vcHRpb25zLnRvSGVpZ2h0L29wdGlvbnMuaGVpZ2h0O3ZhciBpbm5lclRpbGVXaWR0aD1waXhlbEZsb29yKG9wdGlvbnMuc3JjVGlsZVNpemUqc2NhbGVYKS0yKm9wdGlvbnMuZGVzdFRpbGVCb3JkZXI7dmFyIGlubmVyVGlsZUhlaWdodD1waXhlbEZsb29yKG9wdGlvbnMuc3JjVGlsZVNpemUqc2NhbGVZKS0yKm9wdGlvbnMuZGVzdFRpbGVCb3JkZXI7Ly8gcHJldmVudCBpbmZpbml0ZSBsb29wLCB0aGlzIHNob3VsZCBuZXZlciBoYXBwZW5cbmlmKGlubmVyVGlsZVdpZHRoPDF8fGlubmVyVGlsZUhlaWdodDwxKXt0aHJvdyBuZXcgRXJyb3IoJ0ludGVybmFsIGVycm9yIGluIHBpY2E6IHRhcmdldCB0aWxlIHdpZHRoL2hlaWdodCBpcyB0b28gc21hbGwuJyk7fXZhciB4LHk7dmFyIGlubmVyWCxpbm5lclksdG9UaWxlV2lkdGgsdG9UaWxlSGVpZ2h0O3ZhciB0aWxlcz1bXTt2YXIgdGlsZTsvLyB3ZSBnbyB0b3AtdG8tZG93biBpbnN0ZWFkIG9mIGxlZnQtdG8tcmlnaHQgdG8gbWFrZSBpbWFnZSBkaXNwbGF5ZWQgZnJvbSB0b3AgdG9cbi8vIGRvZXNuIGluIHRoZSBicm93c2VyXG5mb3IoaW5uZXJZPTA7aW5uZXJZPG9wdGlvbnMudG9IZWlnaHQ7aW5uZXJZKz1pbm5lclRpbGVIZWlnaHQpe2Zvcihpbm5lclg9MDtpbm5lclg8b3B0aW9ucy50b1dpZHRoO2lubmVyWCs9aW5uZXJUaWxlV2lkdGgpe3g9aW5uZXJYLW9wdGlvbnMuZGVzdFRpbGVCb3JkZXI7aWYoeDwwKXt4PTA7fXRvVGlsZVdpZHRoPWlubmVyWCtpbm5lclRpbGVXaWR0aCtvcHRpb25zLmRlc3RUaWxlQm9yZGVyLXg7aWYoeCt0b1RpbGVXaWR0aD49b3B0aW9ucy50b1dpZHRoKXt0b1RpbGVXaWR0aD1vcHRpb25zLnRvV2lkdGgteDt9eT1pbm5lclktb3B0aW9ucy5kZXN0VGlsZUJvcmRlcjtpZih5PDApe3k9MDt9dG9UaWxlSGVpZ2h0PWlubmVyWStpbm5lclRpbGVIZWlnaHQrb3B0aW9ucy5kZXN0VGlsZUJvcmRlci15O2lmKHkrdG9UaWxlSGVpZ2h0Pj1vcHRpb25zLnRvSGVpZ2h0KXt0b1RpbGVIZWlnaHQ9b3B0aW9ucy50b0hlaWdodC15O310aWxlPXt0b1g6eCx0b1k6eSx0b1dpZHRoOnRvVGlsZVdpZHRoLHRvSGVpZ2h0OnRvVGlsZUhlaWdodCx0b0lubmVyWDppbm5lclgsdG9Jbm5lclk6aW5uZXJZLHRvSW5uZXJXaWR0aDppbm5lclRpbGVXaWR0aCx0b0lubmVySGVpZ2h0OmlubmVyVGlsZUhlaWdodCxvZmZzZXRYOngvc2NhbGVYLXBpeGVsRmxvb3IoeC9zY2FsZVgpLG9mZnNldFk6eS9zY2FsZVktcGl4ZWxGbG9vcih5L3NjYWxlWSksc2NhbGVYOnNjYWxlWCxzY2FsZVk6c2NhbGVZLHg6cGl4ZWxGbG9vcih4L3NjYWxlWCkseTpwaXhlbEZsb29yKHkvc2NhbGVZKSx3aWR0aDpwaXhlbENlaWwodG9UaWxlV2lkdGgvc2NhbGVYKSxoZWlnaHQ6cGl4ZWxDZWlsKHRvVGlsZUhlaWdodC9zY2FsZVkpfTt0aWxlcy5wdXNoKHRpbGUpO319cmV0dXJuIHRpbGVzO307fSx7fV0sMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe2Z1bmN0aW9uIG9iakNsYXNzKG9iail7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopO31tb2R1bGUuZXhwb3J0cy5pc0NhbnZhcz1mdW5jdGlvbiBpc0NhbnZhcyhlbGVtZW50KXsvL3JldHVybiAoZWxlbWVudC5ub2RlTmFtZSAmJiBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdjYW52YXMnKSB8fFxudmFyIGNuYW1lPW9iakNsYXNzKGVsZW1lbnQpO3JldHVybiBjbmFtZT09PSdbb2JqZWN0IEhUTUxDYW52YXNFbGVtZW50XScvKiBicm93c2VyICovfHxjbmFtZT09PSdbb2JqZWN0IENhbnZhc10nLyogbm9kZS1jYW52YXMgKi87fTttb2R1bGUuZXhwb3J0cy5pc0ltYWdlPWZ1bmN0aW9uIGlzSW1hZ2UoZWxlbWVudCl7Ly9yZXR1cm4gZWxlbWVudC5ub2RlTmFtZSAmJiBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbWcnO1xucmV0dXJuIG9iakNsYXNzKGVsZW1lbnQpPT09J1tvYmplY3QgSFRNTEltYWdlRWxlbWVudF0nO307bW9kdWxlLmV4cG9ydHMubGltaXRlcj1mdW5jdGlvbiBsaW1pdGVyKGNvbmN1cnJlbmN5KXt2YXIgYWN0aXZlPTAscXVldWU9W107ZnVuY3Rpb24gcm9sbCgpe2lmKGFjdGl2ZTxjb25jdXJyZW5jeSYmcXVldWUubGVuZ3RoKXthY3RpdmUrKztxdWV1ZS5zaGlmdCgpKCk7fX1yZXR1cm4gZnVuY3Rpb24gbGltaXQoZm4pe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7cXVldWUucHVzaChmdW5jdGlvbigpe2ZuKCkudGhlbihmdW5jdGlvbihyZXN1bHQpe3Jlc29sdmUocmVzdWx0KTthY3RpdmUtLTtyb2xsKCk7fSxmdW5jdGlvbihlcnIpe3JlamVjdChlcnIpO2FjdGl2ZS0tO3JvbGwoKTt9KTt9KTtyb2xsKCk7fSk7fTt9O21vZHVsZS5leHBvcnRzLmNpYl9xdWFsaXR5X25hbWU9ZnVuY3Rpb24gY2liX3F1YWxpdHlfbmFtZShudW0pe3N3aXRjaChudW0pe2Nhc2UgMDpyZXR1cm4ncGl4ZWxhdGVkJztjYXNlIDE6cmV0dXJuJ2xvdyc7Y2FzZSAyOnJldHVybidtZWRpdW0nO31yZXR1cm4naGlnaCc7fTttb2R1bGUuZXhwb3J0cy5jaWJfc3VwcG9ydD1mdW5jdGlvbiBjaWJfc3VwcG9ydCgpe3JldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCl7aWYodHlwZW9mIGNyZWF0ZUltYWdlQml0bWFwPT09J3VuZGVmaW5lZCd8fHR5cGVvZiBkb2N1bWVudD09PSd1bmRlZmluZWQnKXtyZXR1cm4gZmFsc2U7fXZhciBjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO2Mud2lkdGg9MTAwO2MuaGVpZ2h0PTEwMDtyZXR1cm4gY3JlYXRlSW1hZ2VCaXRtYXAoYywwLDAsMTAwLDEwMCx7cmVzaXplV2lkdGg6MTAscmVzaXplSGVpZ2h0OjEwLHJlc2l6ZVF1YWxpdHk6J2hpZ2gnfSkudGhlbihmdW5jdGlvbihiaXRtYXApe3ZhciBzdGF0dXM9Yml0bWFwLndpZHRoPT09MTA7Ly8gQnJhbmNoIGJlbG93IGlzIGZpbHRlcmVkIG9uIHVwcGVyIGxldmVsLiBXZSBkbyBub3QgY2FsbCByZXNpemVcbi8vIGRldGVjdGlvbiBmb3IgYmFzaWMgSW1hZ2VCaXRtYXAuXG4vL1xuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ltYWdlQml0bWFwXG4vLyBvbGQgQ3JvbWUgNTEgaGFzIEltYWdlQml0bWFwIHdpdGhvdXQgLmNsb3NlKCkuIFRoZW4gdGhpcyBjb2RlXG4vLyB3aWxsIHRocm93IGFuZCByZXR1cm4gJ2ZhbHNlJyBhcyBleHBlY3RlZC5cbi8vXG5iaXRtYXAuY2xvc2UoKTtjPW51bGw7cmV0dXJuIHN0YXR1czt9KTt9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7cmV0dXJuIGZhbHNlO30pO307fSx7fV0sMTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKCl7dmFyIE1hdGhMaWI9cmVxdWlyZSgnLi9tYXRobGliJyk7dmFyIG1hdGhMaWI9dm9pZCAwOy8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovb25tZXNzYWdlPWZ1bmN0aW9uIG9ubWVzc2FnZShldil7dmFyIG9wdHM9ZXYuZGF0YS5vcHRzO2lmKCFtYXRoTGliKW1hdGhMaWI9bmV3IE1hdGhMaWIoZXYuZGF0YS5mZWF0dXJlcyk7Ly8gVXNlIG11bHRpbWF0aCdzIHN5bmMgYXV0by1pbml0LiBBdm9pZCBQcm9taXNlIHVzZSBpbiBvbGQgYnJvd3NlcnMsXG4vLyBiZWNhdXNlIHBvbHlmaWxscyBhcmUgbm90IHByb3BhZ2F0ZWQgdG8gd2Vid29ya2VyLlxudmFyIHJlc3VsdD1tYXRoTGliLnJlc2l6ZUFuZFVuc2hhcnAob3B0cyk7cG9zdE1lc3NhZ2Uoe3Jlc3VsdDpyZXN1bHR9LFtyZXN1bHQuYnVmZmVyXSk7fTt9O30se1wiLi9tYXRobGliXCI6MX1dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsvLyBDYWxjdWxhdGUgR2F1c3NpYW4gYmx1ciBvZiBhbiBpbWFnZSB1c2luZyBJSVIgZmlsdGVyXG4vLyBUaGUgbWV0aG9kIGlzIHRha2VuIGZyb20gSW50ZWwncyB3aGl0ZSBwYXBlciBhbmQgY29kZSBleGFtcGxlIGF0dGFjaGVkIHRvIGl0OlxuLy8gaHR0cHM6Ly9zb2Z0d2FyZS5pbnRlbC5jb20vZW4tdXMvYXJ0aWNsZXMvaWlyLWdhdXNzaWFuLWJsdXItZmlsdGVyXG4vLyAtaW1wbGVtZW50YXRpb24tdXNpbmctaW50ZWwtYWR2YW5jZWQtdmVjdG9yLWV4dGVuc2lvbnNcbnZhciBhMCxhMSxhMixhMyxiMSxiMixsZWZ0X2Nvcm5lcixyaWdodF9jb3JuZXI7ZnVuY3Rpb24gZ2F1c3NDb2VmKHNpZ21hKXtpZihzaWdtYTwwLjUpe3NpZ21hPTAuNTt9dmFyIGE9TWF0aC5leHAoMC43MjYqMC43MjYpL3NpZ21hLGcxPU1hdGguZXhwKC1hKSxnMj1NYXRoLmV4cCgtMiphKSxrPSgxLWcxKSooMS1nMSkvKDErMiphKmcxLWcyKTthMD1rO2ExPWsqKGEtMSkqZzE7YTI9ayooYSsxKSpnMTthMz0taypnMjtiMT0yKmcxO2IyPS1nMjtsZWZ0X2Nvcm5lcj0oYTArYTEpLygxLWIxLWIyKTtyaWdodF9jb3JuZXI9KGEyK2EzKS8oMS1iMS1iMik7Ly8gQXR0ZW1wdCB0byBmb3JjZSB0eXBlIHRvIEZQMzIuXG5yZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbYTAsYTEsYTIsYTMsYjEsYjIsbGVmdF9jb3JuZXIscmlnaHRfY29ybmVyXSk7fWZ1bmN0aW9uIGNvbnZvbHZlTW9ubzE2KHNyYyxvdXQsbGluZSxjb2VmZix3aWR0aCxoZWlnaHQpey8vIHRha2VzIHNyYyBpbWFnZSBhbmQgd3JpdGVzIHRoZSBibHVycmVkIGFuZCB0cmFuc3Bvc2VkIHJlc3VsdCBpbnRvIG91dFxudmFyIHByZXZfc3JjLGN1cnJfc3JjLGN1cnJfb3V0LHByZXZfb3V0LHByZXZfcHJldl9vdXQ7dmFyIHNyY19pbmRleCxvdXRfaW5kZXgsbGluZV9pbmRleDt2YXIgaSxqO3ZhciBjb2VmZl9hMCxjb2VmZl9hMSxjb2VmZl9iMSxjb2VmZl9iMjtmb3IoaT0wO2k8aGVpZ2h0O2krKyl7c3JjX2luZGV4PWkqd2lkdGg7b3V0X2luZGV4PWk7bGluZV9pbmRleD0wOy8vIGxlZnQgdG8gcmlnaHRcbnByZXZfc3JjPXNyY1tzcmNfaW5kZXhdO3ByZXZfcHJldl9vdXQ9cHJldl9zcmMqY29lZmZbNl07cHJldl9vdXQ9cHJldl9wcmV2X291dDtjb2VmZl9hMD1jb2VmZlswXTtjb2VmZl9hMT1jb2VmZlsxXTtjb2VmZl9iMT1jb2VmZls0XTtjb2VmZl9iMj1jb2VmZls1XTtmb3Ioaj0wO2o8d2lkdGg7aisrKXtjdXJyX3NyYz1zcmNbc3JjX2luZGV4XTtjdXJyX291dD1jdXJyX3NyYypjb2VmZl9hMCtwcmV2X3NyYypjb2VmZl9hMStwcmV2X291dCpjb2VmZl9iMStwcmV2X3ByZXZfb3V0KmNvZWZmX2IyO3ByZXZfcHJldl9vdXQ9cHJldl9vdXQ7cHJldl9vdXQ9Y3Vycl9vdXQ7cHJldl9zcmM9Y3Vycl9zcmM7bGluZVtsaW5lX2luZGV4XT1wcmV2X291dDtsaW5lX2luZGV4Kys7c3JjX2luZGV4Kys7fXNyY19pbmRleC0tO2xpbmVfaW5kZXgtLTtvdXRfaW5kZXgrPWhlaWdodCood2lkdGgtMSk7Ly8gcmlnaHQgdG8gbGVmdFxucHJldl9zcmM9c3JjW3NyY19pbmRleF07cHJldl9wcmV2X291dD1wcmV2X3NyYypjb2VmZls3XTtwcmV2X291dD1wcmV2X3ByZXZfb3V0O2N1cnJfc3JjPXByZXZfc3JjO2NvZWZmX2EwPWNvZWZmWzJdO2NvZWZmX2ExPWNvZWZmWzNdO2ZvcihqPXdpZHRoLTE7aj49MDtqLS0pe2N1cnJfb3V0PWN1cnJfc3JjKmNvZWZmX2EwK3ByZXZfc3JjKmNvZWZmX2ExK3ByZXZfb3V0KmNvZWZmX2IxK3ByZXZfcHJldl9vdXQqY29lZmZfYjI7cHJldl9wcmV2X291dD1wcmV2X291dDtwcmV2X291dD1jdXJyX291dDtwcmV2X3NyYz1jdXJyX3NyYztjdXJyX3NyYz1zcmNbc3JjX2luZGV4XTtvdXRbb3V0X2luZGV4XT1saW5lW2xpbmVfaW5kZXhdK3ByZXZfb3V0O3NyY19pbmRleC0tO2xpbmVfaW5kZXgtLTtvdXRfaW5kZXgtPWhlaWdodDt9fX1mdW5jdGlvbiBibHVyTW9ubzE2KHNyYyx3aWR0aCxoZWlnaHQscmFkaXVzKXsvLyBRdWljayBleGl0IG9uIHplcm8gcmFkaXVzXG5pZighcmFkaXVzKXtyZXR1cm47fXZhciBvdXQ9bmV3IFVpbnQxNkFycmF5KHNyYy5sZW5ndGgpLHRtcF9saW5lPW5ldyBGbG9hdDMyQXJyYXkoTWF0aC5tYXgod2lkdGgsaGVpZ2h0KSk7dmFyIGNvZWZmPWdhdXNzQ29lZihyYWRpdXMpO2NvbnZvbHZlTW9ubzE2KHNyYyxvdXQsdG1wX2xpbmUsY29lZmYsd2lkdGgsaGVpZ2h0KTtjb252b2x2ZU1vbm8xNihvdXQsc3JjLHRtcF9saW5lLGNvZWZmLGhlaWdodCx3aWR0aCk7fW1vZHVsZS5leHBvcnRzPWJsdXJNb25vMTY7fSx7fV0sMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe2lmKHR5cGVvZiBPYmplY3QuY3JlYXRlPT09J2Z1bmN0aW9uJyl7Ly8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbm1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGluaGVyaXRzKGN0b3Isc3VwZXJDdG9yKXtjdG9yLnN1cGVyXz1zdXBlckN0b3I7Y3Rvci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6Y3RvcixlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7fTt9ZWxzZXsvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xubW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gaW5oZXJpdHMoY3RvcixzdXBlckN0b3Ipe2N0b3Iuc3VwZXJfPXN1cGVyQ3Rvcjt2YXIgVGVtcEN0b3I9ZnVuY3Rpb24gVGVtcEN0b3IoKXt9O1RlbXBDdG9yLnByb3RvdHlwZT1zdXBlckN0b3IucHJvdG90eXBlO2N0b3IucHJvdG90eXBlPW5ldyBUZW1wQ3RvcigpO2N0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yPWN0b3I7fTt9fSx7fV0sMTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBhc3NpZ249cmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO3ZhciBiYXNlNjRkZWNvZGU9cmVxdWlyZSgnLi9saWIvYmFzZTY0ZGVjb2RlJyk7dmFyIGhhc1dlYkFzc2VtYmx5PXJlcXVpcmUoJy4vbGliL3dhX2RldGVjdCcpO3ZhciBERUZBVUxUX09QVElPTlM9e2pzOnRydWUsd2FzbTp0cnVlfTtmdW5jdGlvbiBNdWx0aU1hdGgob3B0aW9ucyl7aWYoISh0aGlzIGluc3RhbmNlb2YgTXVsdGlNYXRoKSlyZXR1cm4gbmV3IE11bHRpTWF0aChvcHRpb25zKTt2YXIgb3B0cz1hc3NpZ24oe30sREVGQVVMVF9PUFRJT05TLG9wdGlvbnN8fHt9KTt0aGlzLm9wdGlvbnM9b3B0czt0aGlzLl9fY2FjaGU9e307dGhpcy5oYXNfd2FzbT1oYXNXZWJBc3NlbWJseSgpO3RoaXMuX19pbml0X3Byb21pc2U9bnVsbDt0aGlzLl9fbW9kdWxlcz1vcHRzLm1vZHVsZXN8fHt9O3RoaXMuX19tZW1vcnk9bnVsbDt0aGlzLl9fd2FzbT17fTt0aGlzLl9faXNMRT1uZXcgVWludDMyQXJyYXkobmV3IFVpbnQ4QXJyYXkoWzEsMCwwLDBdKS5idWZmZXIpWzBdPT09MTtpZighdGhpcy5vcHRpb25zLmpzJiYhdGhpcy5vcHRpb25zLndhc20pe3Rocm93IG5ldyBFcnJvcignbWF0aGxpYjogYXQgbGVhc3QgXCJqc1wiIG9yIFwid2FzbVwiIHNob3VsZCBiZSBlbmFibGVkJyk7fX1NdWx0aU1hdGgucHJvdG90eXBlLnVzZT1mdW5jdGlvbihtb2R1bGUpe3RoaXMuX19tb2R1bGVzW21vZHVsZS5uYW1lXT1tb2R1bGU7Ly8gUGluIHRoZSBiZXN0IHBvc3NpYmxlIGltcGxlbWVudGF0aW9uXG5pZighdGhpcy5oYXNfd2FzbXx8IXRoaXMub3B0aW9ucy53YXNtfHwhbW9kdWxlLndhc21fZm4pe3RoaXNbbW9kdWxlLm5hbWVdPW1vZHVsZS5mbjt9ZWxzZXt0aGlzW21vZHVsZS5uYW1lXT1tb2R1bGUud2FzbV9mbjt9cmV0dXJuIHRoaXM7fTtNdWx0aU1hdGgucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oKXtpZih0aGlzLl9faW5pdF9wcm9taXNlKXJldHVybiB0aGlzLl9faW5pdF9wcm9taXNlO2lmKCF0aGlzLm9wdGlvbnMuanMmJnRoaXMub3B0aW9ucy53YXNtJiYhdGhpcy5oYXNfd2FzbSl7cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignbWF0aGxpYjogb25seSBcIndhc21cIiB3YXMgZW5hYmxlZCwgYnV0IGl0XFwncyBub3Qgc3VwcG9ydGVkJykpO312YXIgc2VsZj10aGlzO3RoaXMuX19pbml0X3Byb21pc2U9UHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoc2VsZi5fX21vZHVsZXMpLm1hcChmdW5jdGlvbihuYW1lKXt2YXIgbW9kdWxlPXNlbGYuX19tb2R1bGVzW25hbWVdO2lmKCFzZWxmLmhhc193YXNtfHwhc2VsZi5vcHRpb25zLndhc218fCFtb2R1bGUud2FzbV9mbilyZXR1cm4gbnVsbDsvLyBJZiBhbHJlYWR5IGNvbXBpbGVkIC0gZXhpdFxuaWYoc2VsZi5fX3dhc21bbmFtZV0pcmV0dXJuIG51bGw7Ly8gQ29tcGlsZSB3YXNtIHNvdXJjZVxucmV0dXJuIFdlYkFzc2VtYmx5LmNvbXBpbGUoc2VsZi5fX2Jhc2U2NGRlY29kZShtb2R1bGUud2FzbV9zcmMpKS50aGVuKGZ1bmN0aW9uKG0pe3NlbGYuX193YXNtW25hbWVdPW07fSk7fSkpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gc2VsZjt9KTtyZXR1cm4gdGhpcy5fX2luaXRfcHJvbWlzZTt9Oy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBNZXRob2RzIGJlbG93IGFyZSBmb3IgaW50ZXJuYWwgdXNlIGZyb20gcGx1Z2luc1xuLy8gU2ltcGxlIGRlY29kZSBiYXNlNjQgdG8gdHlwZWQgYXJyYXkuIFVzZWZ1bCB0byBsb2FkIGVtYmVkZGVkIHdlYmFzc2VtYmx5XG4vLyBjb2RlLiBZb3UgcHJvYmFibHkgZG9uJ3QgbmVlZCB0byBjYWxsIHRoaXMgbWV0aG9kIGRpcmVjdGx5LlxuLy9cbk11bHRpTWF0aC5wcm90b3R5cGUuX19iYXNlNjRkZWNvZGU9YmFzZTY0ZGVjb2RlOy8vIEluY3JlYXNlIGN1cnJlbnQgbWVtb3J5IHRvIGluY2x1ZGUgc3BlY2lmaWVkIG51bWJlciBvZiBieXRlcy4gRG8gbm90aGluZyBpZlxuLy8gc2l6ZSBpcyBhbHJlYWR5IG9rLiBZb3UgcHJvYmFibHkgZG9uJ3QgbmVlZCB0byBjYWxsIHRoaXMgbWV0aG9kIGRpcmVjdGx5LFxuLy8gYmVjYXVzZSBpdCB3aWxsIGJlIGludm9rZWQgZnJvbSBgLl9faW5zdGFuY2UoKWAuXG4vL1xuTXVsdGlNYXRoLnByb3RvdHlwZS5fX3JlYWxsb2NhdGU9ZnVuY3Rpb24gbWVtX2dyb3dfdG8oYnl0ZXMpe2lmKCF0aGlzLl9fbWVtb3J5KXt0aGlzLl9fbWVtb3J5PW5ldyBXZWJBc3NlbWJseS5NZW1vcnkoe2luaXRpYWw6TWF0aC5jZWlsKGJ5dGVzLyg2NCoxMDI0KSl9KTtyZXR1cm4gdGhpcy5fX21lbW9yeTt9dmFyIG1lbV9zaXplPXRoaXMuX19tZW1vcnkuYnVmZmVyLmJ5dGVMZW5ndGg7aWYobWVtX3NpemU8Ynl0ZXMpe3RoaXMuX19tZW1vcnkuZ3JvdyhNYXRoLmNlaWwoKGJ5dGVzLW1lbV9zaXplKS8oNjQqMTAyNCkpKTt9cmV0dXJuIHRoaXMuX19tZW1vcnk7fTsvLyBSZXR1cm5zIGluc3RhbnRpbmF0ZWQgd2ViYXNzZW1ibHkgaXRlbSBieSBuYW1lLCB3aXRoIHNwZWNpZmllZCBtZW1vcnkgc2l6ZVxuLy8gYW5kIGVudmlyb25tZW50LlxuLy8gLSB1c2UgY2FjaGUgaWYgYXZhaWxhYmxlXG4vLyAtIGRvIHN5bmMgbW9kdWxlIGluaXQsIGlmIGFzeW5jIGluaXQgd2FzIG5vdCBjYWxsZWQgZWFybGllclxuLy8gLSBhbGxvY2F0ZSBtZW1vcnkgaWYgbm90IGVub3VndGhcbi8vIC0gY2FuIGV4cG9ydCBmdW5jdGlvbnMgdG8gd2ViYXNzZW1ibHkgdmlhIFwiZW52X2V4dHJhXCIsXG4vLyAgIGZvciBleGFtcGxlLCB7IGV4cDogTWF0aC5leHAgfVxuLy9cbk11bHRpTWF0aC5wcm90b3R5cGUuX19pbnN0YW5jZT1mdW5jdGlvbiBpbnN0YW5jZShuYW1lLG1lbXNpemUsZW52X2V4dHJhKXtpZihtZW1zaXplKXRoaXMuX19yZWFsbG9jYXRlKG1lbXNpemUpOy8vIElmIC5pbml0KCkgd2FzIG5vdCBjYWxsZWQsIGRvIHN5bmMgY29tcGlsZVxuaWYoIXRoaXMuX193YXNtW25hbWVdKXt2YXIgbW9kdWxlPXRoaXMuX19tb2R1bGVzW25hbWVdO3RoaXMuX193YXNtW25hbWVdPW5ldyBXZWJBc3NlbWJseS5Nb2R1bGUodGhpcy5fX2Jhc2U2NGRlY29kZShtb2R1bGUud2FzbV9zcmMpKTt9aWYoIXRoaXMuX19jYWNoZVtuYW1lXSl7dmFyIGVudl9iYXNlPXttZW1vcnlCYXNlOjAsbWVtb3J5OnRoaXMuX19tZW1vcnksdGFibGVCYXNlOjAsdGFibGU6bmV3IFdlYkFzc2VtYmx5LlRhYmxlKHtpbml0aWFsOjAsZWxlbWVudDonYW55ZnVuYyd9KX07dGhpcy5fX2NhY2hlW25hbWVdPW5ldyBXZWJBc3NlbWJseS5JbnN0YW5jZSh0aGlzLl9fd2FzbVtuYW1lXSx7ZW52OmFzc2lnbihlbnZfYmFzZSxlbnZfZXh0cmF8fHt9KX0pO31yZXR1cm4gdGhpcy5fX2NhY2hlW25hbWVdO307Ly8gSGVscGVyIHRvIGNhbGN1bGF0ZSBtZW1vcnkgYWxpZ2ggZm9yIHBvaW50ZXJzLiBXZWJhc3NlbWJseSBkb2VzIG5vdCByZXF1aXJlXG4vLyB0aGlzLCBidXQgeW91IG1heSB3aXNoIHRvIGV4cGVyaW1lbnQuIERlZmF1bHQgYmFzZSA9IDg7XG4vL1xuTXVsdGlNYXRoLnByb3RvdHlwZS5fX2FsaWduPWZ1bmN0aW9uIGFsaWduKG51bWJlcixiYXNlKXtiYXNlPWJhc2V8fDg7dmFyIHJlbWluZGVyPW51bWJlciViYXNlO3JldHVybiBudW1iZXIrKHJlbWluZGVyP2Jhc2UtcmVtaW5kZXI6MCk7fTttb2R1bGUuZXhwb3J0cz1NdWx0aU1hdGg7fSx7XCIuL2xpYi9iYXNlNjRkZWNvZGVcIjoxNyxcIi4vbGliL3dhX2RldGVjdFwiOjIzLFwib2JqZWN0LWFzc2lnblwiOjI0fV0sMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBCQVNFNjRfTUFQPSdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJzttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBiYXNlNjRkZWNvZGUoc3RyKXt2YXIgaW5wdXQ9c3RyLnJlcGxhY2UoL1tcXHJcXG49XS9nLCcnKSwvLyByZW1vdmUgQ1IvTEYgJiBwYWRkaW5nIHRvIHNpbXBsaWZ5IHNjYW5cbm1heD1pbnB1dC5sZW5ndGg7dmFyIG91dD1uZXcgVWludDhBcnJheShtYXgqMz4+Mik7Ly8gQ29sbGVjdCBieSA2KjQgYml0cyAoMyBieXRlcylcbnZhciBiaXRzPTA7dmFyIHB0cj0wO2Zvcih2YXIgaWR4PTA7aWR4PG1heDtpZHgrKyl7aWYoaWR4JTQ9PT0wJiZpZHgpe291dFtwdHIrK109Yml0cz4+MTYmMHhGRjtvdXRbcHRyKytdPWJpdHM+PjgmMHhGRjtvdXRbcHRyKytdPWJpdHMmMHhGRjt9Yml0cz1iaXRzPDw2fEJBU0U2NF9NQVAuaW5kZXhPZihpbnB1dC5jaGFyQXQoaWR4KSk7fS8vIER1bXAgdGFpbFxudmFyIHRhaWxiaXRzPW1heCU0KjY7aWYodGFpbGJpdHM9PT0wKXtvdXRbcHRyKytdPWJpdHM+PjE2JjB4RkY7b3V0W3B0cisrXT1iaXRzPj44JjB4RkY7b3V0W3B0cisrXT1iaXRzJjB4RkY7fWVsc2UgaWYodGFpbGJpdHM9PT0xOCl7b3V0W3B0cisrXT1iaXRzPj4xMCYweEZGO291dFtwdHIrK109Yml0cz4+MiYweEZGO31lbHNlIGlmKHRhaWxiaXRzPT09MTIpe291dFtwdHIrK109Yml0cz4+NCYweEZGO31yZXR1cm4gb3V0O307fSx7fV0sMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGhzbF9sMTZfanMoaW1nLHdpZHRoLGhlaWdodCl7dmFyIHNpemU9d2lkdGgqaGVpZ2h0O3ZhciBvdXQ9bmV3IFVpbnQxNkFycmF5KHNpemUpO3ZhciByLGcsYixtaW4sbWF4O2Zvcih2YXIgaT0wO2k8c2l6ZTtpKyspe3I9aW1nWzQqaV07Zz1pbWdbNCppKzFdO2I9aW1nWzQqaSsyXTttYXg9cj49ZyYmcj49Yj9yOmc+PWImJmc+PXI/ZzpiO21pbj1yPD1nJiZyPD1iP3I6Zzw9YiYmZzw9cj9nOmI7b3V0W2ldPShtYXgrbWluKSoyNTc+PjE7fXJldHVybiBvdXQ7fTt9LHt9XSwxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9e25hbWU6J3Vuc2hhcnBfbWFzaycsZm46cmVxdWlyZSgnLi91bnNoYXJwX21hc2snKSx3YXNtX2ZuOnJlcXVpcmUoJy4vdW5zaGFycF9tYXNrX3dhc20nKSx3YXNtX3NyYzpyZXF1aXJlKCcuL3Vuc2hhcnBfbWFza193YXNtX2Jhc2U2NCcpfTt9LHtcIi4vdW5zaGFycF9tYXNrXCI6MjAsXCIuL3Vuc2hhcnBfbWFza193YXNtXCI6MjEsXCIuL3Vuc2hhcnBfbWFza193YXNtX2Jhc2U2NFwiOjIyfV0sMjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBnbHVyX21vbm8xNj1yZXF1aXJlKCdnbHVyL21vbm8xNicpO3ZhciBoc2xfbDE2PXJlcXVpcmUoJy4vaHNsX2wxNicpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHVuc2hhcnAoaW1nLHdpZHRoLGhlaWdodCxhbW91bnQscmFkaXVzLHRocmVzaG9sZCl7dmFyIHIsZyxiO3ZhciBoLHMsbDt2YXIgbWluLG1heDt2YXIgbTEsbTIsaFNoaWZ0ZWQ7dmFyIGRpZmYsaVRpbWVzNDtpZihhbW91bnQ9PT0wfHxyYWRpdXM8MC41KXtyZXR1cm47fWlmKHJhZGl1cz4yLjApe3JhZGl1cz0yLjA7fXZhciBsaWdodG5lc3M9aHNsX2wxNihpbWcsd2lkdGgsaGVpZ2h0KTt2YXIgYmx1cmVkPW5ldyBVaW50MTZBcnJheShsaWdodG5lc3MpOy8vIGNvcHksIGJlY2F1c2UgYmx1ciBtb2RpZnkgc3JjXG5nbHVyX21vbm8xNihibHVyZWQsd2lkdGgsaGVpZ2h0LHJhZGl1cyk7dmFyIGFtb3VudEZwPWFtb3VudC8xMDAqMHgxMDAwKzAuNXwwO3ZhciB0aHJlc2hvbGRGcD10aHJlc2hvbGQqMjU3fDA7dmFyIHNpemU9d2lkdGgqaGVpZ2h0Oy8qIGVzbGludC1kaXNhYmxlIGluZGVudCAqL2Zvcih2YXIgaT0wO2k8c2l6ZTtpKyspe2RpZmY9MioobGlnaHRuZXNzW2ldLWJsdXJlZFtpXSk7aWYoTWF0aC5hYnMoZGlmZik+PXRocmVzaG9sZEZwKXtpVGltZXM0PWkqNDtyPWltZ1tpVGltZXM0XTtnPWltZ1tpVGltZXM0KzFdO2I9aW1nW2lUaW1lczQrMl07Ly8gY29udmVydCBSR0IgdG8gSFNMXG4vLyB0YWtlIFJHQiwgOC1iaXQgdW5zaWduZWQgaW50ZWdlciBwZXIgZWFjaCBjaGFubmVsXG4vLyBzYXZlIEhTTCwgSCBhbmQgTCBhcmUgMTYtYml0IHVuc2lnbmVkIGludGVnZXJzLCBTIGlzIDEyLWJpdCB1bnNpZ25lZCBpbnRlZ2VyXG4vLyBtYXRoIGlzIHRha2VuIGZyb20gaGVyZTogaHR0cDovL3d3dy5lYXN5cmdiLmNvbS9pbmRleC5waHA/WD1NQVRIJkg9MThcbi8vIGFuZCBhZG9wdGVkIHRvIGJlIGludGVnZXIgKGZpeGVkIHBvaW50IGluIGZhY3QpIGZvciBzYWtlIG9mIHBlcmZvcm1hbmNlXG5tYXg9cj49ZyYmcj49Yj9yOmc+PXImJmc+PWI/ZzpiOy8vIG1pbiBhbmQgbWF4IGFyZSBpbiBbMC4uMHhmZl1cbm1pbj1yPD1nJiZyPD1iP3I6Zzw9ciYmZzw9Yj9nOmI7bD0obWF4K21pbikqMjU3Pj4xOy8vIGwgaXMgaW4gWzAuLjB4ZmZmZl0gdGhhdCBpcyBjYXVzZWQgYnkgbXVsdGlwbGljYXRpb24gYnkgMjU3XG5pZihtaW49PT1tYXgpe2g9cz0wO31lbHNle3M9bDw9MHg3ZmZmPyhtYXgtbWluKSoweGZmZi8obWF4K21pbil8MDoobWF4LW1pbikqMHhmZmYvKDIqMHhmZi1tYXgtbWluKXwwOy8vIHMgaXMgaW4gWzAuLjB4ZmZmXVxuLy8gaCBjb3VsZCBiZSBsZXNzIDAsIGl0IHdpbGwgYmUgZml4ZWQgaW4gYmFja3dhcmQgY29udmVyc2lvbiB0byBSR0IsIHxofCA8PSAweGZmZmYgLyA2XG5oPXI9PT1tYXg/KGctYikqMHhmZmZmLyg2KihtYXgtbWluKSl8MDpnPT09bWF4PzB4NTU1NSsoKGItcikqMHhmZmZmLyg2KihtYXgtbWluKSl8MCkvLyAweDU1NTUgPT0gMHhmZmZmIC8gM1xuOjB4YWFhYSsoKHItZykqMHhmZmZmLyg2KihtYXgtbWluKSl8MCk7Ly8gMHhhYWFhID09IDB4ZmZmZiAqIDIgLyAzXG59Ly8gYWRkIHVuc2hhcnAgbWFzayBtYXNrIHRvIHRoZSBsaWdodG5lc3MgY2hhbm5lbFxubCs9YW1vdW50RnAqZGlmZisweDgwMD4+MTI7aWYobD4weGZmZmYpe2w9MHhmZmZmO31lbHNlIGlmKGw8MCl7bD0wO30vLyBjb252ZXJ0IEhTTCBiYWNrIHRvIFJHQlxuLy8gZm9yIGluZm9ybWF0aW9uIGFib3V0IG1hdGggbG9vayBhYm92ZVxuaWYocz09PTApe3I9Zz1iPWw+Pjg7fWVsc2V7bTI9bDw9MHg3ZmZmP2wqKDB4MTAwMCtzKSsweDgwMD4+MTI6bCsoKDB4ZmZmZi1sKSpzKzB4ODAwPj4xMik7bTE9MipsLW0yPj44O20yPj49ODsvLyBzYXZlIHJlc3VsdCB0byBSR0IgY2hhbm5lbHNcbi8vIFIgY2hhbm5lbFxuaFNoaWZ0ZWQ9aCsweDU1NTUmMHhmZmZmOy8vIDB4NTU1NSA9PSAweGZmZmYgLyAzXG5yPWhTaGlmdGVkPj0weGFhYWE/bTEvLyAweGFhYWEgPT0gMHhmZmZmICogMiAvIDNcbjpoU2hpZnRlZD49MHg3ZmZmP20xKygobTItbTEpKjYqKDB4YWFhYS1oU2hpZnRlZCkrMHg4MDAwPj4xNik6aFNoaWZ0ZWQ+PTB4MmFhYT9tMi8vIDB4MmFhYSA9PSAweGZmZmYgLyA2XG46bTErKChtMi1tMSkqNipoU2hpZnRlZCsweDgwMDA+PjE2KTsvLyBHIGNoYW5uZWxcbmhTaGlmdGVkPWgmMHhmZmZmO2c9aFNoaWZ0ZWQ+PTB4YWFhYT9tMS8vIDB4YWFhYSA9PSAweGZmZmYgKiAyIC8gM1xuOmhTaGlmdGVkPj0weDdmZmY/bTErKChtMi1tMSkqNiooMHhhYWFhLWhTaGlmdGVkKSsweDgwMDA+PjE2KTpoU2hpZnRlZD49MHgyYWFhP20yLy8gMHgyYWFhID09IDB4ZmZmZiAvIDZcbjptMSsoKG0yLW0xKSo2KmhTaGlmdGVkKzB4ODAwMD4+MTYpOy8vIEIgY2hhbm5lbFxuaFNoaWZ0ZWQ9aC0weDU1NTUmMHhmZmZmO2I9aFNoaWZ0ZWQ+PTB4YWFhYT9tMS8vIDB4YWFhYSA9PSAweGZmZmYgKiAyIC8gM1xuOmhTaGlmdGVkPj0weDdmZmY/bTErKChtMi1tMSkqNiooMHhhYWFhLWhTaGlmdGVkKSsweDgwMDA+PjE2KTpoU2hpZnRlZD49MHgyYWFhP20yLy8gMHgyYWFhID09IDB4ZmZmZiAvIDZcbjptMSsoKG0yLW0xKSo2KmhTaGlmdGVkKzB4ODAwMD4+MTYpO31pbWdbaVRpbWVzNF09cjtpbWdbaVRpbWVzNCsxXT1nO2ltZ1tpVGltZXM0KzJdPWI7fX19O30se1wiLi9oc2xfbDE2XCI6MTgsXCJnbHVyL21vbm8xNlwiOjE0fV0sMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHVuc2hhcnAoaW1nLHdpZHRoLGhlaWdodCxhbW91bnQscmFkaXVzLHRocmVzaG9sZCl7aWYoYW1vdW50PT09MHx8cmFkaXVzPDAuNSl7cmV0dXJuO31pZihyYWRpdXM+Mi4wKXtyYWRpdXM9Mi4wO312YXIgcGl4ZWxzPXdpZHRoKmhlaWdodDt2YXIgaW1nX2J5dGVzX2NudD1waXhlbHMqNDt2YXIgaHNsX2J5dGVzX2NudD1waXhlbHMqMjt2YXIgYmx1cl9ieXRlc19jbnQ9cGl4ZWxzKjI7dmFyIGJsdXJfbGluZV9ieXRlX2NudD1NYXRoLm1heCh3aWR0aCxoZWlnaHQpKjQ7Ly8gZmxvYXQzMiBhcnJheVxudmFyIGJsdXJfY29lZmZzX2J5dGVfY250PTgqNDsvLyBmbG9hdDMyIGFycmF5XG52YXIgaW1nX29mZnNldD0wO3ZhciBoc2xfb2Zmc2V0PWltZ19ieXRlc19jbnQ7dmFyIGJsdXJfb2Zmc2V0PWhzbF9vZmZzZXQraHNsX2J5dGVzX2NudDt2YXIgYmx1cl90bXBfb2Zmc2V0PWJsdXJfb2Zmc2V0K2JsdXJfYnl0ZXNfY250O3ZhciBibHVyX2xpbmVfb2Zmc2V0PWJsdXJfdG1wX29mZnNldCtibHVyX2J5dGVzX2NudDt2YXIgYmx1cl9jb2VmZnNfb2Zmc2V0PWJsdXJfbGluZV9vZmZzZXQrYmx1cl9saW5lX2J5dGVfY250O3ZhciBpbnN0YW5jZT10aGlzLl9faW5zdGFuY2UoJ3Vuc2hhcnBfbWFzaycsaW1nX2J5dGVzX2NudCtoc2xfYnl0ZXNfY250K2JsdXJfYnl0ZXNfY250KjIrYmx1cl9saW5lX2J5dGVfY250K2JsdXJfY29lZmZzX2J5dGVfY250LHtleHA6TWF0aC5leHB9KTsvLyAzMi1iaXQgY29weSBpcyBtdWNoIGZhc3RlciBpbiBjaHJvbWVcbnZhciBpbWczMj1uZXcgVWludDMyQXJyYXkoaW1nLmJ1ZmZlcik7dmFyIG1lbTMyPW5ldyBVaW50MzJBcnJheSh0aGlzLl9fbWVtb3J5LmJ1ZmZlcik7bWVtMzIuc2V0KGltZzMyKTsvLyBIU0xcbnZhciBmbj1pbnN0YW5jZS5leHBvcnRzLmhzbF9sMTZ8fGluc3RhbmNlLmV4cG9ydHMuX2hzbF9sMTY7Zm4oaW1nX29mZnNldCxoc2xfb2Zmc2V0LHdpZHRoLGhlaWdodCk7Ly8gQkxVUlxuZm49aW5zdGFuY2UuZXhwb3J0cy5ibHVyTW9ubzE2fHxpbnN0YW5jZS5leHBvcnRzLl9ibHVyTW9ubzE2O2ZuKGhzbF9vZmZzZXQsYmx1cl9vZmZzZXQsYmx1cl90bXBfb2Zmc2V0LGJsdXJfbGluZV9vZmZzZXQsYmx1cl9jb2VmZnNfb2Zmc2V0LHdpZHRoLGhlaWdodCxyYWRpdXMpOy8vIFVOU0hBUlBcbmZuPWluc3RhbmNlLmV4cG9ydHMudW5zaGFycHx8aW5zdGFuY2UuZXhwb3J0cy5fdW5zaGFycDtmbihpbWdfb2Zmc2V0LGltZ19vZmZzZXQsaHNsX29mZnNldCxibHVyX29mZnNldCx3aWR0aCxoZWlnaHQsYW1vdW50LHRocmVzaG9sZCk7Ly8gMzItYml0IGNvcHkgaXMgbXVjaCBmYXN0ZXIgaW4gY2hyb21lXG5pbWczMi5zZXQobmV3IFVpbnQzMkFycmF5KHRoaXMuX19tZW1vcnkuYnVmZmVyLDAscGl4ZWxzKSk7fTt9LHt9XSwyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL21vZHVsZS5leHBvcnRzPSdBR0Z6YlFFQUFBQUJNUVpnQVh3QmZHQUNmWDhBWUFaL2YzOS9mMzhBWUFoL2YzOS9mMzkvZlFCZ0JIOS9mMzhBWUFoL2YzOS9mMzkvZndBQ0dRSURaVzUyQTJWNGNBQUFBMlZ1ZGdadFpXMXZjbmtDQUFFREJnVUJBZ01FQlFRRUFYQUFBQWRNQlJaZlgySjFhV3hrWDJkaGRYTnphV0Z1WDJOdlpXWnpBQUVPWDE5bllYVnpjekUyWDJ4cGJtVUFBZ3BpYkhWeVRXOXViekUyQUFNSGFITnNYMnd4TmdBRUIzVnVjMmhoY25BQUJRa0JBQXFKRUFYWkFRRUdmQUpBSUFGRTI0YTZRNElhK3o4Z0FMdWpJZ09hRUFBaUJDQUVvQ0lHdGpnQ0VDQUJJQU5FQUFBQUFBQUFBTUNpRUFBaUJiYU1PQUlVSUFGRUFBQUFBQUFBOEQ4Z0JLRWlBaUFDb2lBRUlBTWdBNkNpUkFBQUFBQUFBUEEvb0NBRm9hTWlBclk0QWdBZ0FTQUVJQU5FQUFBQUFBQUE4TCtnSUFLaW9pSUh0amdDQkNBQklBUWdBMFFBQUFBQUFBRHdQNkFnQXFLaUlnTzJPQUlJSUFFZ0JTQUNvaUlFdG93NEFnd2dBU0FDSUFlZ0lBVkVBQUFBQUFBQThEOGdCcUdnSWdLanRqZ0NHQ0FCSUFNZ0JLRWdBcU8yT0FJY0N3dTNBd01EZndSOUNId0NRQ0FES2dJVUlRa2dBeW9DRUNFS0lBTXFBZ3doQ3lBREtnSUlJUXdDUUNBRVFYOXFJZ2RCQUVnaUNBMEFJQUlnQUM4QkFMZ2lEU0FES2dJWXU2SWlEaUFKdXlJUW9pQU9JQXE3SWhHaUlBMGdBeW9DQkxzaUVxSWdBeW9DQUxzaUV5QU5vcUNnb0NJUHRqZ0NBQ0FDUVFScUlRSWdBRUVDYWlFQUlBZEZEUUFnQkNFR0EwQWdBaUFPSUJDaUlBOGlEaUFSb2lBTklCS2lJQk1nQUM4QkFMZ2lEYUtnb0tBaUQ3WTRBZ0FnQWtFRWFpRUNJQUJCQW1vaEFDQUdRWDlxSWdaQkFVb05BQXNMQWtBZ0NBMEFJQUVnQnlBRmJFRUJkR29nQUVGK2FpOEJBQ0lJdUNJTklBdTdJaEdpSUEwZ0RMc2lFcUtnSUEwZ0F5b0NITHVpSWc0Z0Nyc2lFNktnSUE0Z0Nic2lGS0tnSWc4Z0FrRjhhaW9DQUx1Z3F6c0JBQ0FIUlEwQUlBSkJlR29oQWlBQVFYeHFJUUJCQUNBRlFRRjBheUVISUFFZ0JTQUVRUUYwUVh4cWJHb2hCZ05BSUFnaEF5QUFMd0VBSVFnZ0JpQU5JQkdpSUFPNElnMGdFcUtnSUE4aUVDQVRvcUFnRGlBVW9xQWlEeUFDS2dJQXU2Q3JPd0VBSUFZZ0Iyb2hCaUFBUVg1cUlRQWdBa0Y4YWlFQ0lCQWhEaUFFUVg5cUlnUkJBVW9OQUFzTEN3dmZBZ0lEZndaOEFrQWdCME1BQUFBQVd3MEFJQVJFMjRhNlE0SWErejhnQjBNQUFBQS9sN3VqSWd5YUVBQWlEU0FOb0NJUHRqZ0NFQ0FFSUF4RUFBQUFBQUFBQU1DaUVBQWlEcmFNT0FJVUlBUkVBQUFBQUFBQThEOGdEYUVpQ3lBTG9pQU5JQXdnREtDaVJBQUFBQUFBQVBBL29DQU9vYU1pQzdZNEFnQWdCQ0FOSUF4RUFBQUFBQUFBOEwrZ0lBdWlvaUlRdGpnQ0JDQUVJQTBnREVRQUFBQUFBQUR3UDZBZ0M2S2lJZ3kyT0FJSUlBUWdEaUFMb2lJTnRvdzRBZ3dnQkNBTElCQ2dJQTVFQUFBQUFBQUE4RDhnRDZHZ0lndWp0amdDR0NBRUlBd2dEYUVnQzZPMk9BSWNJQVlFUUNBRlFRRjBJUW9nQmlFSklBSWhDQU5BSUFBZ0NDQURJQVFnQlNBR0VBSWdBQ0FLYWlFQUlBaEJBbW9oQ0NBSlFYOXFJZ2tOQUFzTElBVkZEUUFnQmtFQmRDRUlJQVVoQUFOQUlBSWdBU0FESUFRZ0JpQUZFQUlnQWlBSWFpRUNJQUZCQW1vaEFTQUFRWDlxSWdBTkFBc0xDN3dCQVFWL0lBTWdBbXdpQXdSQVFRQWdBMnNoQmdOQUlBQW9BZ0FpQkVFSWRpSUhRZjhCY1NFQ0FuOGdCRUgvQVhFaUF5QUVRUkIySWdSQi93RnhJZ1ZQQkVBZ0F5SUlJQU1nQWs4TkFSb0xJQVFnQkNBSElBSWdBMGtiSUFJZ0JVa2JRZjhCY1FzaENBSkFJQU1nQWswRVFDQURJQVZORFFFTElBUWdCeUFFSUFNZ0FrOGJJQUlnQlVzYlFmOEJjU0VEQ3lBQVFRUnFJUUFnQVNBRElBaHFRWUVDYkVFQmRqc0JBQ0FCUVFKcUlRRWdCa0VCYWlJR0RRQUxDd3ZUQmdFS2Z3SkFJQWF6UXdBQWdFV1VRd0FBeUVLVnUwUUFBQUFBQUFEZ1A2Q3FJUTBnQlNBRWJDSUxCRUFnQjBHQkFtd2hEZ05BUVFBZ0FpOEJBQ0FETHdFQWF5SUdRUUYwSWdkcklBY2dCa0VBU0JzZ0RrOEVRQ0FBUVFKcUxRQUFJUVVDZnlBQUxRQUFJZ1lnQUVFQmFpMEFBQ0lFU1NJSlJRUkFJQVlpQ0NBR0lBVlBEUUVhQ3lBRklBVWdCQ0FFSUFWSkd5QUdJQVJMR3dzaENBSi9JQVlnQkUwRVFDQUdJZ29nQmlBRlRRMEJHZ3NnQlNBRklBUWdCQ0FGU3hzZ0NSc0xJZ29nQ0dvaUQwR0JBbXdpRUVFQmRpRVJRUUFoREFKL1FRQWlDU0FJSUFwR0RRQWFJQWdnQ21zaUNVSC9IMndnRDBIK0F5QUlheUFLYXlBUVFZQ0FCRWtiYlNFTUlBWWdDRVlFUUNBRUlBVnJRZi8vQTJ3Z0NVRUdiRzBNQVFzZ0JTQUdheUFHSUFScklBUWdDRVlpQmh0Qi8vOERiQ0FKUVFac2JVSFZxZ0ZCcXRVQ0lBWWJhZ3NoQ1NBUklBY2dEV3hCZ0JCcVFReDFhaUlHUVFBZ0JrRUFTaHNpQmtILy93TWdCa0gvL3dOSUd5RUdBa0FDZndKQUlBeEIvLzhEY1NJRkJFQWdCa0gvL3dGS0RRRWdCVUdBSUdvZ0JteEJnQkJxUVF4MkRBSUxJQVpCQ0hZaUJpRUZJQVloQkF3Q0N5QUZJQVpCLy84RGMyeEJnQkJxUVF4MklBWnFDeUlGUVFoMklRY2dCa0VCZENBRmEwRUlkaUlHSVFRQ1FDQUpRZFdxQVdwQi8vOERjU0lGUWFuVkFrc05BQ0FGUWYvL0FVOEVRRUdxMVFJZ0JXc2dCeUFHYTJ4QkJteEJnSUFDYWtFUWRpQUdhaUVFREFFTElBY2hCQ0FGUWFuVkFFc05BQ0FGSUFjZ0JtdHNRUVpzUVlDQUFtcEJFSFlnQm1vaEJBc0NmeUFHSWdVZ0NVSC8vd054SWdoQnFkVUNTdzBBR2tHcTFRSWdDR3NnQnlBR2EyeEJCbXhCZ0lBQ2FrRVFkaUFHYWlBSVFmLy9BVThOQUJvZ0J5SUZJQWhCcWRVQVN3MEFHaUFJSUFjZ0JtdHNRUVpzUVlDQUFtcEJFSFlnQm1vTElRVWdDVUdyMVFKcVFmLy9BM0VpQ0VHcDFRSkxEUUFnQ0VILy93RlBCRUJCcXRVQ0lBaHJJQWNnQm10c1FRWnNRWUNBQW1wQkVIWWdCbW9oQmd3QkN5QUlRYW5WQUVzRVFDQUhJUVlNQVFzZ0NDQUhJQVpyYkVFR2JFR0FnQUpxUVJCMklBWnFJUVlMSUFFZ0JEb0FBQ0FCUVFGcUlBVTZBQUFnQVVFQ2FpQUdPZ0FBQ3lBRFFRSnFJUU1nQWtFQ2FpRUNJQUJCQkdvaEFDQUJRUVJxSVFFZ0MwRi9haUlMRFFBTEN3c0wnO30se31dLDIzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgd2E7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gaGFzV2ViQXNzZW1ibHkoKXsvLyB1c2UgY2FjaGUgaWYgY2FsbGVkIGJlZm9yZTtcbmlmKHR5cGVvZiB3YSE9PSd1bmRlZmluZWQnKXJldHVybiB3YTt3YT1mYWxzZTtpZih0eXBlb2YgV2ViQXNzZW1ibHk9PT0ndW5kZWZpbmVkJylyZXR1cm4gd2E7Ly8gSWYgV2ViQXNzZW5ibHkgaXMgZGlzYWJsZWQsIGNvZGUgY2FuIHRocm93IG9uIGNvbXBpbGVcbnRyeXsvLyBodHRwczovL2dpdGh1Yi5jb20vYnJpb24vbWluLXdhc20tZmFpbC9ibG9iL21hc3Rlci9taW4td2FzbS1mYWlsLmluLmpzXG4vLyBBZGRpdGlvbmFsIGNoZWNrIHRoYXQgV0EgaW50ZXJuYWxzIGFyZSBjb3JyZWN0XG4vKiBlc2xpbnQtZGlzYWJsZSBjb21tYS1zcGFjaW5nLCBtYXgtbGVuICovdmFyIGJpbj1uZXcgVWludDhBcnJheShbMCw5NywxMTUsMTA5LDEsMCwwLDAsMSw2LDEsOTYsMSwxMjcsMSwxMjcsMywyLDEsMCw1LDMsMSwwLDEsNyw4LDEsNCwxMTYsMTAxLDExNSwxMTYsMCwwLDEwLDE2LDEsMTQsMCwzMiwwLDY1LDEsNTQsMiwwLDMyLDAsNDAsMiwwLDExXSk7dmFyIG1vZHVsZT1uZXcgV2ViQXNzZW1ibHkuTW9kdWxlKGJpbik7dmFyIGluc3RhbmNlPW5ldyBXZWJBc3NlbWJseS5JbnN0YW5jZShtb2R1bGUse30pOy8vIHRlc3Qgc3RvcmluZyB0byBhbmQgbG9hZGluZyBmcm9tIGEgbm9uLXplcm8gbG9jYXRpb24gdmlhIGEgcGFyYW1ldGVyLlxuLy8gU2FmYXJpIG9uIGlPUyAxMS4yLjUgcmV0dXJucyAwIHVuZXhwZWN0ZWRseSBhdCBub24temVybyBsb2NhdGlvbnNcbmlmKGluc3RhbmNlLmV4cG9ydHMudGVzdCg0KSE9PTApd2E9dHJ1ZTtyZXR1cm4gd2E7fWNhdGNoKF9fKXt9cmV0dXJuIHdhO307fSx7fV0sMjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpey8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovdmFyIGdldE93blByb3BlcnR5U3ltYm9scz1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO3ZhciBoYXNPd25Qcm9wZXJ0eT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O3ZhciBwcm9wSXNFbnVtZXJhYmxlPU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7ZnVuY3Rpb24gdG9PYmplY3QodmFsKXtpZih2YWw9PT1udWxsfHx2YWw9PT11bmRlZmluZWQpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7fXJldHVybiBPYmplY3QodmFsKTt9ZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCl7dHJ5e2lmKCFPYmplY3QuYXNzaWduKXtyZXR1cm4gZmFsc2U7fS8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcbnZhciB0ZXN0MT1uZXcgU3RyaW5nKCdhYmMnKTsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xudGVzdDFbNV09J2RlJztpZihPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF09PT0nNScpe3JldHVybiBmYWxzZTt9Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxudmFyIHRlc3QyPXt9O2Zvcih2YXIgaT0wO2k8MTA7aSsrKXt0ZXN0MlsnXycrU3RyaW5nLmZyb21DaGFyQ29kZShpKV09aTt9dmFyIG9yZGVyMj1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uKG4pe3JldHVybiB0ZXN0MltuXTt9KTtpZihvcmRlcjIuam9pbignJykhPT0nMDEyMzQ1Njc4OScpe3JldHVybiBmYWxzZTt9Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxudmFyIHRlc3QzPXt9OydhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24obGV0dGVyKXt0ZXN0M1tsZXR0ZXJdPWxldHRlcjt9KTtpZihPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LHRlc3QzKSkuam9pbignJykhPT0nYWJjZGVmZ2hpamtsbW5vcHFyc3QnKXtyZXR1cm4gZmFsc2U7fXJldHVybiB0cnVlO31jYXRjaChlcnIpey8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5yZXR1cm4gZmFsc2U7fX1tb2R1bGUuZXhwb3J0cz1zaG91bGRVc2VOYXRpdmUoKT9PYmplY3QuYXNzaWduOmZ1bmN0aW9uKHRhcmdldCxzb3VyY2Upe3ZhciBmcm9tO3ZhciB0bz10b09iamVjdCh0YXJnZXQpO3ZhciBzeW1ib2xzO2Zvcih2YXIgcz0xO3M8YXJndW1lbnRzLmxlbmd0aDtzKyspe2Zyb209T2JqZWN0KGFyZ3VtZW50c1tzXSk7Zm9yKHZhciBrZXkgaW4gZnJvbSl7aWYoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLGtleSkpe3RvW2tleV09ZnJvbVtrZXldO319aWYoZ2V0T3duUHJvcGVydHlTeW1ib2xzKXtzeW1ib2xzPWdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtmb3IodmFyIGk9MDtpPHN5bWJvbHMubGVuZ3RoO2krKyl7aWYocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sc3ltYm9sc1tpXSkpe3RvW3N5bWJvbHNbaV1dPWZyb21bc3ltYm9sc1tpXV07fX19fXJldHVybiB0bzt9O30se31dLDI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgYnVuZGxlRm49YXJndW1lbnRzWzNdO3ZhciBzb3VyY2VzPWFyZ3VtZW50c1s0XTt2YXIgY2FjaGU9YXJndW1lbnRzWzVdO3ZhciBzdHJpbmdpZnk9SlNPTi5zdHJpbmdpZnk7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZm4sb3B0aW9ucyl7dmFyIHdrZXk7dmFyIGNhY2hlS2V5cz1PYmplY3Qua2V5cyhjYWNoZSk7Zm9yKHZhciBpPTAsbD1jYWNoZUtleXMubGVuZ3RoO2k8bDtpKyspe3ZhciBrZXk9Y2FjaGVLZXlzW2ldO3ZhciBleHA9Y2FjaGVba2V5XS5leHBvcnRzOy8vIFVzaW5nIGJhYmVsIGFzIGEgdHJhbnNwaWxlciB0byB1c2UgZXNtb2R1bGUsIHRoZSBleHBvcnQgd2lsbCBhbHdheXNcbi8vIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBkZWZhdWx0IGV4cG9ydCBhcyBhIHByb3BlcnR5IG9mIGl0LiBUbyBlbnN1cmVcbi8vIHRoZSBleGlzdGluZyBhcGkgYW5kIGJhYmVsIGVzbW9kdWxlIGV4cG9ydHMgYXJlIGJvdGggc3VwcG9ydGVkIHdlXG4vLyBjaGVjayBmb3IgYm90aFxuaWYoZXhwPT09Zm58fGV4cCYmZXhwW1wiZGVmYXVsdFwiXT09PWZuKXt3a2V5PWtleTticmVhazt9fWlmKCF3a2V5KXt3a2V5PU1hdGguZmxvb3IoTWF0aC5wb3coMTYsOCkqTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoMTYpO3ZhciB3Y2FjaGU9e307Zm9yKHZhciBpPTAsbD1jYWNoZUtleXMubGVuZ3RoO2k8bDtpKyspe3ZhciBrZXk9Y2FjaGVLZXlzW2ldO3djYWNoZVtrZXldPWtleTt9c291cmNlc1t3a2V5XT1bJ2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpeycrZm4rJyhzZWxmKTsgfScsd2NhY2hlXTt9dmFyIHNrZXk9TWF0aC5mbG9vcihNYXRoLnBvdygxNiw4KSpNYXRoLnJhbmRvbSgpKS50b1N0cmluZygxNik7dmFyIHNjYWNoZT17fTtzY2FjaGVbd2tleV09d2tleTtzb3VyY2VzW3NrZXldPVsnZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7JysvLyB0cnkgdG8gY2FsbCBkZWZhdWx0IGlmIGRlZmluZWQgdG8gYWxzbyBzdXBwb3J0IGJhYmVsIGVzbW9kdWxlIGV4cG9ydHNcbid2YXIgZiA9IHJlcXVpcmUoJytzdHJpbmdpZnkod2tleSkrJyk7JysnKGYuZGVmYXVsdCA/IGYuZGVmYXVsdCA6IGYpKHNlbGYpOycrJ30nLHNjYWNoZV07dmFyIHdvcmtlclNvdXJjZXM9e307cmVzb2x2ZVNvdXJjZXMoc2tleSk7ZnVuY3Rpb24gcmVzb2x2ZVNvdXJjZXMoa2V5KXt3b3JrZXJTb3VyY2VzW2tleV09dHJ1ZTtmb3IodmFyIGRlcFBhdGggaW4gc291cmNlc1trZXldWzFdKXt2YXIgZGVwS2V5PXNvdXJjZXNba2V5XVsxXVtkZXBQYXRoXTtpZighd29ya2VyU291cmNlc1tkZXBLZXldKXtyZXNvbHZlU291cmNlcyhkZXBLZXkpO319fXZhciBzcmM9JygnK2J1bmRsZUZuKycpKHsnK09iamVjdC5rZXlzKHdvcmtlclNvdXJjZXMpLm1hcChmdW5jdGlvbihrZXkpe3JldHVybiBzdHJpbmdpZnkoa2V5KSsnOlsnK3NvdXJjZXNba2V5XVswXSsnLCcrc3RyaW5naWZ5KHNvdXJjZXNba2V5XVsxXSkrJ10nO30pLmpvaW4oJywnKSsnfSx7fSxbJytzdHJpbmdpZnkoc2tleSkrJ10pJzt2YXIgVVJMPXdpbmRvdy5VUkx8fHdpbmRvdy53ZWJraXRVUkx8fHdpbmRvdy5tb3pVUkx8fHdpbmRvdy5tc1VSTDt2YXIgYmxvYj1uZXcgQmxvYihbc3JjXSx7dHlwZTondGV4dC9qYXZhc2NyaXB0J30pO2lmKG9wdGlvbnMmJm9wdGlvbnMuYmFyZSl7cmV0dXJuIGJsb2I7fXZhciB3b3JrZXJVcmw9VVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTt2YXIgd29ya2VyPW5ldyBXb3JrZXIod29ya2VyVXJsKTt3b3JrZXIub2JqZWN0VVJMPXdvcmtlclVybDtyZXR1cm4gd29ya2VyO307fSx7fV0sXCIvXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBfc2xpY2VkVG9BcnJheT1mdW5jdGlvbigpe2Z1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLGkpe3ZhciBfYXJyPVtdO3ZhciBfbj10cnVlO3ZhciBfZD1mYWxzZTt2YXIgX2U9dW5kZWZpbmVkO3RyeXtmb3IodmFyIF9pPWFycltTeW1ib2wuaXRlcmF0b3JdKCksX3M7IShfbj0oX3M9X2kubmV4dCgpKS5kb25lKTtfbj10cnVlKXtfYXJyLnB1c2goX3MudmFsdWUpO2lmKGkmJl9hcnIubGVuZ3RoPT09aSlicmVhazt9fWNhdGNoKGVycil7X2Q9dHJ1ZTtfZT1lcnI7fWZpbmFsbHl7dHJ5e2lmKCFfbiYmX2lbXCJyZXR1cm5cIl0pX2lbXCJyZXR1cm5cIl0oKTt9ZmluYWxseXtpZihfZCl0aHJvdyBfZTt9fXJldHVybiBfYXJyO31yZXR1cm4gZnVuY3Rpb24oYXJyLGkpe2lmKEFycmF5LmlzQXJyYXkoYXJyKSl7cmV0dXJuIGFycjt9ZWxzZSBpZihTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpe3JldHVybiBzbGljZUl0ZXJhdG9yKGFycixpKTt9ZWxzZXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTt9fTt9KCk7dmFyIGFzc2lnbj1yZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7dmFyIHdlYndvcmtpZnk9cmVxdWlyZSgnd2Vid29ya2lmeScpO3ZhciBNYXRoTGliPXJlcXVpcmUoJy4vbGliL21hdGhsaWInKTt2YXIgUG9vbD1yZXF1aXJlKCcuL2xpYi9wb29sJyk7dmFyIHV0aWxzPXJlcXVpcmUoJy4vbGliL3V0aWxzJyk7dmFyIHdvcmtlcj1yZXF1aXJlKCcuL2xpYi93b3JrZXInKTt2YXIgY3JlYXRlU3RhZ2VzPXJlcXVpcmUoJy4vbGliL3N0ZXBwZXInKTt2YXIgY3JlYXRlUmVnaW9ucz1yZXF1aXJlKCcuL2xpYi90aWxlcicpOy8vIERlZHVwbGljYXRlIHBvb2xzICYgbGltaXRlcnMgd2l0aCB0aGUgc2FtZSBjb25maWdzXG4vLyB3aGVuIHVzZXIgY3JlYXRlcyBtdWx0aXBsZSBwaWNhIGluc3RhbmNlcy5cbnZhciBzaW5nbGV0b25lcz17fTt2YXIgTkVFRF9TQUZBUklfRklYPWZhbHNlO3RyeXtpZih0eXBlb2YgbmF2aWdhdG9yIT09J3VuZGVmaW5lZCcmJm5hdmlnYXRvci51c2VyQWdlbnQpe05FRURfU0FGQVJJX0ZJWD1uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1NhZmFyaScpPj0wO319Y2F0Y2goZSl7fXZhciBjb25jdXJyZW5jeT0xO2lmKHR5cGVvZiBuYXZpZ2F0b3IhPT0ndW5kZWZpbmVkJyl7Y29uY3VycmVuY3k9TWF0aC5taW4obmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3l8fDEsNCk7fXZhciBERUZBVUxUX1BJQ0FfT1BUUz17dGlsZToxMDI0LGNvbmN1cnJlbmN5OmNvbmN1cnJlbmN5LGZlYXR1cmVzOlsnanMnLCd3YXNtJywnd3cnXSxpZGxlOjIwMDB9O3ZhciBERUZBVUxUX1JFU0laRV9PUFRTPXtxdWFsaXR5OjMsYWxwaGE6ZmFsc2UsdW5zaGFycEFtb3VudDowLHVuc2hhcnBSYWRpdXM6MC4wLHVuc2hhcnBUaHJlc2hvbGQ6MH07dmFyIENBTl9ORVdfSU1BR0VfREFUQT12b2lkIDA7dmFyIENBTl9DUkVBVEVfSU1BR0VfQklUTUFQPXZvaWQgMDtmdW5jdGlvbiB3b3JrZXJGYWJyaWMoKXtyZXR1cm57dmFsdWU6d2Vid29ya2lmeSh3b3JrZXIpLGRlc3Ryb3k6ZnVuY3Rpb24gZGVzdHJveSgpe3RoaXMudmFsdWUudGVybWluYXRlKCk7aWYodHlwZW9mIHdpbmRvdyE9PSd1bmRlZmluZWQnKXt2YXIgdXJsPXdpbmRvdy5VUkx8fHdpbmRvdy53ZWJraXRVUkx8fHdpbmRvdy5tb3pVUkx8fHdpbmRvdy5tc1VSTDtpZih1cmwmJnVybC5yZXZva2VPYmplY3RVUkwmJnRoaXMudmFsdWUub2JqZWN0VVJMKXt1cmwucmV2b2tlT2JqZWN0VVJMKHRoaXMudmFsdWUub2JqZWN0VVJMKTt9fX19O30vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gQVBJIG1ldGhvZHNcbmZ1bmN0aW9uIFBpY2Eob3B0aW9ucyl7aWYoISh0aGlzIGluc3RhbmNlb2YgUGljYSkpcmV0dXJuIG5ldyBQaWNhKG9wdGlvbnMpO3RoaXMub3B0aW9ucz1hc3NpZ24oe30sREVGQVVMVF9QSUNBX09QVFMsb3B0aW9uc3x8e30pO3ZhciBsaW1pdGVyX2tleT0nbGtfJyt0aGlzLm9wdGlvbnMuY29uY3VycmVuY3k7Ly8gU2hhcmUgbGltaXRlcnMgdG8gYXZvaWQgbXVsdGlwbGUgcGFyYWxsZWwgd29ya2VycyB3aGVuIHVzZXIgY3JlYXRlc1xuLy8gbXVsdGlwbGUgcGljYSBpbnN0YW5jZXMuXG50aGlzLl9fbGltaXQ9c2luZ2xldG9uZXNbbGltaXRlcl9rZXldfHx1dGlscy5saW1pdGVyKHRoaXMub3B0aW9ucy5jb25jdXJyZW5jeSk7aWYoIXNpbmdsZXRvbmVzW2xpbWl0ZXJfa2V5XSlzaW5nbGV0b25lc1tsaW1pdGVyX2tleV09dGhpcy5fX2xpbWl0Oy8vIExpc3Qgb2Ygc3VwcG9ydGVkIGZlYXR1cmVzLCBhY2NvcmRpbmcgdG8gb3B0aW9ucyAmIGJyb3dzZXIvbm9kZS5qc1xudGhpcy5mZWF0dXJlcz17anM6ZmFsc2UsLy8gcHVyZSBKUyBpbXBsZW1lbnRhdGlvbiwgY2FuIGJlIGRpc2FibGVkIGZvciB0ZXN0aW5nXG53YXNtOmZhbHNlLC8vIHdlYmFzc2VtYmx5IGltcGxlbWVudGF0aW9uIGZvciBoZWF2eSBmdW5jdGlvbnNcbmNpYjpmYWxzZSwvLyByZXNpemUgdmlhIGNyZWF0ZUltYWdlQml0bWFwIChvbmx5IEZGIGF0IHRoaXMgbW9tZW50KVxud3c6ZmFsc2UvLyB3ZWJ3b3JrZXJzXG59O3RoaXMuX193b3JrZXJzUG9vbD1udWxsOy8vIFN0b3JlIHJlcXVlc3RlZCBmZWF0dXJlcyBmb3Igd2Vid29ya2Vyc1xudGhpcy5fX3JlcXVlc3RlZF9mZWF0dXJlcz1bXTt0aGlzLl9fbWF0aGxpYj1udWxsO31QaWNhLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKCl7dmFyIF90aGlzPXRoaXM7aWYodGhpcy5fX2luaXRQcm9taXNlKXJldHVybiB0aGlzLl9faW5pdFByb21pc2U7Ly8gVGVzdCBpZiB3ZSBjYW4gY3JlYXRlIEltYWdlRGF0YSB3aXRob3V0IGNhbnZhcyBhbmQgbWVtb3J5IGNvcHlcbmlmKENBTl9ORVdfSU1BR0VfREFUQSE9PWZhbHNlJiZDQU5fTkVXX0lNQUdFX0RBVEEhPT10cnVlKXtDQU5fTkVXX0lNQUdFX0RBVEE9ZmFsc2U7aWYodHlwZW9mIEltYWdlRGF0YSE9PSd1bmRlZmluZWQnJiZ0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkhPT0ndW5kZWZpbmVkJyl7dHJ5ey8qIGVzbGludC1kaXNhYmxlIG5vLW5ldyAqL25ldyBJbWFnZURhdGEobmV3IFVpbnQ4Q2xhbXBlZEFycmF5KDQwMCksMTAsMTApO0NBTl9ORVdfSU1BR0VfREFUQT10cnVlO31jYXRjaChfXyl7fX19Ly8gSW1hZ2VCaXRtYXAgY2FuIGJlIGVmZmVjdGl2ZSBpbiAyIHBsYWNlczpcbi8vXG4vLyAxLiBUaHJlYWRlZCBqcGVnIHVucGFjayAoYmFzaWMpXG4vLyAyLiBCdWlsdC1pbiByZXNpemUgKGJsb2NrZWQgZHVlIHByb2JsZW0gaW4gY2hyb21lLCBzZWUgaXNzdWUgIzg5KVxuLy9cbi8vIEZvciBiYXNpYyB1c2Ugd2UgYWxzbyBuZWVkIEltYWdlQml0bWFwIHdvIHN1cHBvcnQgLmNsb3NlKCkgbWV0aG9kLFxuLy8gc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL3J1L2RvY3MvV2ViL0FQSS9JbWFnZUJpdG1hcFxuaWYoQ0FOX0NSRUFURV9JTUFHRV9CSVRNQVAhPT1mYWxzZSYmQ0FOX0NSRUFURV9JTUFHRV9CSVRNQVAhPT10cnVlKXtDQU5fQ1JFQVRFX0lNQUdFX0JJVE1BUD1mYWxzZTtpZih0eXBlb2YgSW1hZ2VCaXRtYXAhPT0ndW5kZWZpbmVkJyl7aWYoSW1hZ2VCaXRtYXAucHJvdG90eXBlJiZJbWFnZUJpdG1hcC5wcm90b3R5cGUuY2xvc2Upe0NBTl9DUkVBVEVfSU1BR0VfQklUTUFQPXRydWU7fWVsc2V7dGhpcy5kZWJ1ZygnSW1hZ2VCaXRtYXAgZG9lcyBub3Qgc3VwcG9ydCAuY2xvc2UoKSwgZGlzYWJsZWQnKTt9fX12YXIgZmVhdHVyZXM9dGhpcy5vcHRpb25zLmZlYXR1cmVzLnNsaWNlKCk7aWYoZmVhdHVyZXMuaW5kZXhPZignYWxsJyk+PTApe2ZlYXR1cmVzPVsnY2liJywnd2FzbScsJ2pzJywnd3cnXTt9dGhpcy5fX3JlcXVlc3RlZF9mZWF0dXJlcz1mZWF0dXJlczt0aGlzLl9fbWF0aGxpYj1uZXcgTWF0aExpYihmZWF0dXJlcyk7Ly8gQ2hlY2sgV2ViV29ya2VyIHN1cHBvcnQgaWYgcmVxdWVzdGVkXG5pZihmZWF0dXJlcy5pbmRleE9mKCd3dycpPj0wKXtpZih0eXBlb2Ygd2luZG93IT09J3VuZGVmaW5lZCcmJidXb3JrZXInaW4gd2luZG93KXsvLyBJRSA8PSAxMSBkb24ndCBhbGxvdyB0byBjcmVhdGUgd2Vid29ya2VycyBmcm9tIHN0cmluZy4gV2Ugc2hvdWxkIGNoZWNrIGl0LlxuLy8gaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy84MDE4MTAvd2ViLXdvcmtlcnMtZnJvbS1ibG9iLXVybHMtaW4taWUtMTAtYW5kLTExXG50cnl7dmFyIHdrcj1yZXF1aXJlKCd3ZWJ3b3JraWZ5JykoZnVuY3Rpb24oKXt9KTt3a3IudGVybWluYXRlKCk7dGhpcy5mZWF0dXJlcy53dz10cnVlOy8vIHBvb2wgdW5pcXVlbmVzcyBkZXBlbmRzIG9uIHBvb2wgY29uZmlnICsgd2Vid29ya2VyIGNvbmZpZ1xudmFyIHdwb29sX2tleT0nd3BfJytKU09OLnN0cmluZ2lmeSh0aGlzLm9wdGlvbnMpO2lmKHNpbmdsZXRvbmVzW3dwb29sX2tleV0pe3RoaXMuX193b3JrZXJzUG9vbD1zaW5nbGV0b25lc1t3cG9vbF9rZXldO31lbHNle3RoaXMuX193b3JrZXJzUG9vbD1uZXcgUG9vbCh3b3JrZXJGYWJyaWMsdGhpcy5vcHRpb25zLmlkbGUpO3NpbmdsZXRvbmVzW3dwb29sX2tleV09dGhpcy5fX3dvcmtlcnNQb29sO319Y2F0Y2goX18pe319fXZhciBpbml0TWF0aD10aGlzLl9fbWF0aGxpYi5pbml0KCkudGhlbihmdW5jdGlvbihtYXRobGliKXsvLyBDb3B5IGRldGVjdGVkIGZlYXR1cmVzXG5hc3NpZ24oX3RoaXMuZmVhdHVyZXMsbWF0aGxpYi5mZWF0dXJlcyk7fSk7dmFyIGNoZWNrQ2liUmVzaXplPXZvaWQgMDtpZighQ0FOX0NSRUFURV9JTUFHRV9CSVRNQVApe2NoZWNrQ2liUmVzaXplPVByb21pc2UucmVzb2x2ZShmYWxzZSk7fWVsc2V7Y2hlY2tDaWJSZXNpemU9dXRpbHMuY2liX3N1cHBvcnQoKS50aGVuKGZ1bmN0aW9uKHN0YXR1cyl7aWYoX3RoaXMuZmVhdHVyZXMuY2liJiZmZWF0dXJlcy5pbmRleE9mKCdjaWInKTwwKXtfdGhpcy5kZWJ1ZygnY3JlYXRlSW1hZ2VCaXRtYXAoKSByZXNpemUgc3VwcG9ydGVkLCBidXQgZGlzYWJsZWQgYnkgY29uZmlnJyk7cmV0dXJuO31pZihmZWF0dXJlcy5pbmRleE9mKCdjaWInKT49MClfdGhpcy5mZWF0dXJlcy5jaWI9c3RhdHVzO30pO30vLyBJbml0IG1hdGggbGliLiBUaGF0J3MgYXN5bmMgYmVjYXVzZSBjYW4gbG9hZCBzb21lXG50aGlzLl9faW5pdFByb21pc2U9UHJvbWlzZS5hbGwoW2luaXRNYXRoLGNoZWNrQ2liUmVzaXplXSkudGhlbihmdW5jdGlvbigpe3JldHVybiBfdGhpczt9KTtyZXR1cm4gdGhpcy5fX2luaXRQcm9taXNlO307UGljYS5wcm90b3R5cGUucmVzaXplPWZ1bmN0aW9uKGZyb20sdG8sb3B0aW9ucyl7dmFyIF90aGlzMj10aGlzO3RoaXMuZGVidWcoJ1N0YXJ0IHJlc2l6ZS4uLicpO3ZhciBvcHRzPWFzc2lnbih7fSxERUZBVUxUX1JFU0laRV9PUFRTKTtpZighaXNOYU4ob3B0aW9ucykpe29wdHM9YXNzaWduKG9wdHMse3F1YWxpdHk6b3B0aW9uc30pO31lbHNlIGlmKG9wdGlvbnMpe29wdHM9YXNzaWduKG9wdHMsb3B0aW9ucyk7fW9wdHMudG9XaWR0aD10by53aWR0aDtvcHRzLnRvSGVpZ2h0PXRvLmhlaWdodDtvcHRzLndpZHRoPWZyb20ubmF0dXJhbFdpZHRofHxmcm9tLndpZHRoO29wdHMuaGVpZ2h0PWZyb20ubmF0dXJhbEhlaWdodHx8ZnJvbS5oZWlnaHQ7Ly8gUHJldmVudCBzdGVwcGVyIGZyb20gaW5maW5pdGUgbG9vcFxuaWYodG8ud2lkdGg9PT0wfHx0by5oZWlnaHQ9PT0wKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdJbnZhbGlkIG91dHB1dCBzaXplOiAnK3RvLndpZHRoKyd4Jyt0by5oZWlnaHQpKTt9aWYob3B0cy51bnNoYXJwUmFkaXVzPjIpb3B0cy51bnNoYXJwUmFkaXVzPTI7dmFyIGNhbmNlbGVkPWZhbHNlO3ZhciBjYW5jZWxUb2tlbj1udWxsO2lmKG9wdHMuY2FuY2VsVG9rZW4pey8vIFdyYXAgY2FuY2VsVG9rZW4gdG8gYXZvaWQgc3VjY2Vzc2l2ZSByZXNvbHZlICYgc2V0IGZsYWdcbmNhbmNlbFRva2VuPW9wdHMuY2FuY2VsVG9rZW4udGhlbihmdW5jdGlvbihkYXRhKXtjYW5jZWxlZD10cnVlO3Rocm93IGRhdGE7fSxmdW5jdGlvbihlcnIpe2NhbmNlbGVkPXRydWU7dGhyb3cgZXJyO30pO312YXIgREVTVF9USUxFX0JPUkRFUj0zOy8vIE1heCBwb3NzaWJsZSBmaWx0ZXIgd2luZG93IHNpemVcbnZhciBkZXN0VGlsZUJvcmRlcj1NYXRoLmNlaWwoTWF0aC5tYXgoREVTVF9USUxFX0JPUkRFUiwyLjUqb3B0cy51bnNoYXJwUmFkaXVzfDApKTtyZXR1cm4gdGhpcy5pbml0KCkudGhlbihmdW5jdGlvbigpe2lmKGNhbmNlbGVkKXJldHVybiBjYW5jZWxUb2tlbjsvLyBpZiBjcmVhdGVJbWFnZUJpdG1hcCBzdXBwb3J0cyByZXNpemUsIGp1c3QgZG8gaXQgYW5kIHJldHVyblxuaWYoX3RoaXMyLmZlYXR1cmVzLmNpYil7dmFyIHRvQ3R4PXRvLmdldENvbnRleHQoJzJkJyx7YWxwaGE6Qm9vbGVhbihvcHRzLmFscGhhKX0pO190aGlzMi5kZWJ1ZygnUmVzaXplIHZpYSBjcmVhdGVJbWFnZUJpdG1hcCgpJyk7cmV0dXJuIGNyZWF0ZUltYWdlQml0bWFwKGZyb20se3Jlc2l6ZVdpZHRoOm9wdHMudG9XaWR0aCxyZXNpemVIZWlnaHQ6b3B0cy50b0hlaWdodCxyZXNpemVRdWFsaXR5OnV0aWxzLmNpYl9xdWFsaXR5X25hbWUob3B0cy5xdWFsaXR5KX0pLnRoZW4oZnVuY3Rpb24oaW1hZ2VCaXRtYXApe2lmKGNhbmNlbGVkKXJldHVybiBjYW5jZWxUb2tlbjsvLyBpZiBubyB1bnNoYXJwIC0gZHJhdyBkaXJlY3RseSB0byBvdXRwdXQgY2FudmFzXG5pZighb3B0cy51bnNoYXJwQW1vdW50KXt0b0N0eC5kcmF3SW1hZ2UoaW1hZ2VCaXRtYXAsMCwwKTtpbWFnZUJpdG1hcC5jbG9zZSgpO3RvQ3R4PW51bGw7X3RoaXMyLmRlYnVnKCdGaW5pc2hlZCEnKTtyZXR1cm4gdG87fV90aGlzMi5kZWJ1ZygnVW5zaGFycCByZXN1bHQnKTt2YXIgdG1wQ2FudmFzPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO3RtcENhbnZhcy53aWR0aD1vcHRzLnRvV2lkdGg7dG1wQ2FudmFzLmhlaWdodD1vcHRzLnRvSGVpZ2h0O3ZhciB0bXBDdHg9dG1wQ2FudmFzLmdldENvbnRleHQoJzJkJyx7YWxwaGE6Qm9vbGVhbihvcHRzLmFscGhhKX0pO3RtcEN0eC5kcmF3SW1hZ2UoaW1hZ2VCaXRtYXAsMCwwKTtpbWFnZUJpdG1hcC5jbG9zZSgpO3ZhciBpRGF0YT10bXBDdHguZ2V0SW1hZ2VEYXRhKDAsMCxvcHRzLnRvV2lkdGgsb3B0cy50b0hlaWdodCk7X3RoaXMyLl9fbWF0aGxpYi51bnNoYXJwKGlEYXRhLmRhdGEsb3B0cy50b1dpZHRoLG9wdHMudG9IZWlnaHQsb3B0cy51bnNoYXJwQW1vdW50LG9wdHMudW5zaGFycFJhZGl1cyxvcHRzLnVuc2hhcnBUaHJlc2hvbGQpO3RvQ3R4LnB1dEltYWdlRGF0YShpRGF0YSwwLDApO2lEYXRhPXRtcEN0eD10bXBDYW52YXM9dG9DdHg9bnVsbDtfdGhpczIuZGVidWcoJ0ZpbmlzaGVkIScpO3JldHVybiB0bzt9KTt9Ly9cbi8vIE5vIGVhc3kgd2F5LCBsZXQncyByZXNpemUgbWFudWFsbHkgdmlhIGFycmF5c1xuLy9cbi8vIFNoYXJlIGNhY2hlIGJldHdlZW4gY2FsbHM6XG4vL1xuLy8gLSB3YXNtIGluc3RhbmNlXG4vLyAtIHdhc20gbWVtb3J5IG9iamVjdFxuLy9cbnZhciBjYWNoZT17fTsvLyBDYWxsIHJlc2l6ZXIgaW4gd2Vid29ya2VyIG9yIGxvY2FsbHksIGRlcGVuZGluZyBvbiBjb25maWdcbnZhciBpbnZva2VSZXNpemU9ZnVuY3Rpb24gaW52b2tlUmVzaXplKG9wdHMpe3JldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCl7aWYoIV90aGlzMi5mZWF0dXJlcy53dylyZXR1cm4gX3RoaXMyLl9fbWF0aGxpYi5yZXNpemVBbmRVbnNoYXJwKG9wdHMsY2FjaGUpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7dmFyIHc9X3RoaXMyLl9fd29ya2Vyc1Bvb2wuYWNxdWlyZSgpO2lmKGNhbmNlbFRva2VuKWNhbmNlbFRva2VuW1wiY2F0Y2hcIl0oZnVuY3Rpb24oZXJyKXtyZXR1cm4gcmVqZWN0KGVycik7fSk7dy52YWx1ZS5vbm1lc3NhZ2U9ZnVuY3Rpb24oZXYpe3cucmVsZWFzZSgpO2lmKGV2LmRhdGEuZXJyKXJlamVjdChldi5kYXRhLmVycik7ZWxzZSByZXNvbHZlKGV2LmRhdGEucmVzdWx0KTt9O3cudmFsdWUucG9zdE1lc3NhZ2Uoe29wdHM6b3B0cyxmZWF0dXJlczpfdGhpczIuX19yZXF1ZXN0ZWRfZmVhdHVyZXMscHJlbG9hZDp7d2FzbV9ub2R1bGU6X3RoaXMyLl9fbWF0aGxpYi5fX319LFtvcHRzLnNyYy5idWZmZXJdKTt9KTt9KTt9O3ZhciB0aWxlQW5kUmVzaXplPWZ1bmN0aW9uIHRpbGVBbmRSZXNpemUoZnJvbSx0byxvcHRzKXt2YXIgc3JjQ3R4PXZvaWQgMDt2YXIgc3JjSW1hZ2VCaXRtYXA9dm9pZCAwO3ZhciB0b0N0eD12b2lkIDA7dmFyIHByb2Nlc3NUaWxlPWZ1bmN0aW9uIHByb2Nlc3NUaWxlKHRpbGUpe3JldHVybiBfdGhpczIuX19saW1pdChmdW5jdGlvbigpe2lmKGNhbmNlbGVkKXJldHVybiBjYW5jZWxUb2tlbjt2YXIgc3JjSW1hZ2VEYXRhPXZvaWQgMDsvLyBFeHRyYWN0IHRpbGUgUkdCQSBidWZmZXIsIGRlcGVuZGluZyBvbiBpbnB1dCB0eXBlXG5pZih1dGlscy5pc0NhbnZhcyhmcm9tKSl7X3RoaXMyLmRlYnVnKCdHZXQgdGlsZSBwaXhlbCBkYXRhJyk7Ly8gSWYgaW5wdXQgaXMgQ2FudmFzIC0gZXh0cmFjdCByZWdpb24gZGF0YSBkaXJlY3RseVxuc3JjSW1hZ2VEYXRhPXNyY0N0eC5nZXRJbWFnZURhdGEodGlsZS54LHRpbGUueSx0aWxlLndpZHRoLHRpbGUuaGVpZ2h0KTt9ZWxzZXsvLyBJZiBpbnB1dCBpcyBJbWFnZSBvciBkZWNvZGVkIHRvIEltYWdlQml0bWFwLFxuLy8gZHJhdyByZWdpb24gdG8gdGVtcG9yYXJ5IGNhbnZhcyBhbmQgZXh0cmFjdCBkYXRhIGZyb20gaXRcbi8vXG4vLyBOb3RlISBBdHRlbXB0IHRvIHJldXNlIHRoaXMgY2FudmFzIGNhdXNlcyBzaWduaWZpY2FudCBzbG93ZG93biBpbiBjaHJvbWVcbi8vXG5fdGhpczIuZGVidWcoJ0RyYXcgdGlsZSBpbWFnZUJpdG1hcC9pbWFnZSB0byB0ZW1wb3JhcnkgY2FudmFzJyk7dmFyIHRtcENhbnZhcz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTt0bXBDYW52YXMud2lkdGg9dGlsZS53aWR0aDt0bXBDYW52YXMuaGVpZ2h0PXRpbGUuaGVpZ2h0O3ZhciB0bXBDdHg9dG1wQ2FudmFzLmdldENvbnRleHQoJzJkJyx7YWxwaGE6Qm9vbGVhbihvcHRzLmFscGhhKX0pO3RtcEN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb249J2NvcHknO3RtcEN0eC5kcmF3SW1hZ2Uoc3JjSW1hZ2VCaXRtYXB8fGZyb20sdGlsZS54LHRpbGUueSx0aWxlLndpZHRoLHRpbGUuaGVpZ2h0LDAsMCx0aWxlLndpZHRoLHRpbGUuaGVpZ2h0KTtfdGhpczIuZGVidWcoJ0dldCB0aWxlIHBpeGVsIGRhdGEnKTtzcmNJbWFnZURhdGE9dG1wQ3R4LmdldEltYWdlRGF0YSgwLDAsdGlsZS53aWR0aCx0aWxlLmhlaWdodCk7dG1wQ3R4PXRtcENhbnZhcz1udWxsO312YXIgbz17c3JjOnNyY0ltYWdlRGF0YS5kYXRhLHdpZHRoOnRpbGUud2lkdGgsaGVpZ2h0OnRpbGUuaGVpZ2h0LHRvV2lkdGg6dGlsZS50b1dpZHRoLHRvSGVpZ2h0OnRpbGUudG9IZWlnaHQsc2NhbGVYOnRpbGUuc2NhbGVYLHNjYWxlWTp0aWxlLnNjYWxlWSxvZmZzZXRYOnRpbGUub2Zmc2V0WCxvZmZzZXRZOnRpbGUub2Zmc2V0WSxxdWFsaXR5Om9wdHMucXVhbGl0eSxhbHBoYTpvcHRzLmFscGhhLHVuc2hhcnBBbW91bnQ6b3B0cy51bnNoYXJwQW1vdW50LHVuc2hhcnBSYWRpdXM6b3B0cy51bnNoYXJwUmFkaXVzLHVuc2hhcnBUaHJlc2hvbGQ6b3B0cy51bnNoYXJwVGhyZXNob2xkfTtfdGhpczIuZGVidWcoJ0ludm9rZSByZXNpemUgbWF0aCcpO3JldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGludm9rZVJlc2l6ZShvKTt9KS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7aWYoY2FuY2VsZWQpcmV0dXJuIGNhbmNlbFRva2VuO3NyY0ltYWdlRGF0YT1udWxsO3ZhciB0b0ltYWdlRGF0YT12b2lkIDA7X3RoaXMyLmRlYnVnKCdDb252ZXJ0IHJhdyByZ2JhIHRpbGUgcmVzdWx0IHRvIEltYWdlRGF0YScpO2lmKENBTl9ORVdfSU1BR0VfREFUQSl7Ly8gdGhpcyBicmFuY2ggaXMgZm9yIG1vZGVybiBicm93c2Vyc1xuLy8gSWYgYG5ldyBJbWFnZURhdGEoKWAgJiBVaW50OENsYW1wZWRBcnJheSBzdXBvcnRlZFxudG9JbWFnZURhdGE9bmV3IEltYWdlRGF0YShuZXcgVWludDhDbGFtcGVkQXJyYXkocmVzdWx0KSx0aWxlLnRvV2lkdGgsdGlsZS50b0hlaWdodCk7fWVsc2V7Ly8gZmFsbGJhY2sgZm9yIGBub2RlLWNhbnZhc2AgYW5kIG9sZCBicm93c2Vyc1xuLy8gKElFMTEgaGFzIEltYWdlRGF0YSBidXQgZG9lcyBub3Qgc3VwcG9ydCBgbmV3IEltYWdlRGF0YSgpYClcbnRvSW1hZ2VEYXRhPXRvQ3R4LmNyZWF0ZUltYWdlRGF0YSh0aWxlLnRvV2lkdGgsdGlsZS50b0hlaWdodCk7aWYodG9JbWFnZURhdGEuZGF0YS5zZXQpe3RvSW1hZ2VEYXRhLmRhdGEuc2V0KHJlc3VsdCk7fWVsc2V7Ly8gSUU5IGRvbid0IGhhdmUgYC5zZXQoKWBcbmZvcih2YXIgaT10b0ltYWdlRGF0YS5kYXRhLmxlbmd0aC0xO2k+PTA7aS0tKXt0b0ltYWdlRGF0YS5kYXRhW2ldPXJlc3VsdFtpXTt9fX1fdGhpczIuZGVidWcoJ0RyYXcgdGlsZScpO2lmKE5FRURfU0FGQVJJX0ZJWCl7Ly8gU2FmYXJpIGRyYXdzIHRoaW4gd2hpdGUgc3RyaXBlcyBiZXR3ZWVuIHRpbGVzIHdpdGhvdXQgdGhpcyBmaXhcbnRvQ3R4LnB1dEltYWdlRGF0YSh0b0ltYWdlRGF0YSx0aWxlLnRvWCx0aWxlLnRvWSx0aWxlLnRvSW5uZXJYLXRpbGUudG9YLHRpbGUudG9Jbm5lclktdGlsZS50b1ksdGlsZS50b0lubmVyV2lkdGgrMWUtNSx0aWxlLnRvSW5uZXJIZWlnaHQrMWUtNSk7fWVsc2V7dG9DdHgucHV0SW1hZ2VEYXRhKHRvSW1hZ2VEYXRhLHRpbGUudG9YLHRpbGUudG9ZLHRpbGUudG9Jbm5lclgtdGlsZS50b1gsdGlsZS50b0lubmVyWS10aWxlLnRvWSx0aWxlLnRvSW5uZXJXaWR0aCx0aWxlLnRvSW5uZXJIZWlnaHQpO31yZXR1cm4gbnVsbDt9KTt9KTt9Oy8vIE5lZWQgdG8gbm9ybWFsaXplIGRhdGEgc291cmNlIGZpcnN0LiBJdCBjYW4gYmUgY2FudmFzIG9yIGltYWdlLlxuLy8gSWYgaW1hZ2UgLSB0cnkgdG8gZGVjb2RlIGluIGJhY2tncm91bmQgaWYgcG9zc2libGVcbnJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCl7dG9DdHg9dG8uZ2V0Q29udGV4dCgnMmQnLHthbHBoYTpCb29sZWFuKG9wdHMuYWxwaGEpfSk7aWYodXRpbHMuaXNDYW52YXMoZnJvbSkpe3NyY0N0eD1mcm9tLmdldENvbnRleHQoJzJkJyx7YWxwaGE6Qm9vbGVhbihvcHRzLmFscGhhKX0pO3JldHVybiBudWxsO31pZih1dGlscy5pc0ltYWdlKGZyb20pKXsvLyB0cnkgZG8gZGVjb2RlIGltYWdlIGluIGJhY2tncm91bmQgZm9yIGZhc3RlciBuZXh0IG9wZXJhdGlvbnNcbmlmKCFDQU5fQ1JFQVRFX0lNQUdFX0JJVE1BUClyZXR1cm4gbnVsbDtfdGhpczIuZGVidWcoJ0RlY29kZSBpbWFnZSB2aWEgY3JlYXRlSW1hZ2VCaXRtYXAnKTtyZXR1cm4gY3JlYXRlSW1hZ2VCaXRtYXAoZnJvbSkudGhlbihmdW5jdGlvbihpbWFnZUJpdG1hcCl7c3JjSW1hZ2VCaXRtYXA9aW1hZ2VCaXRtYXA7fSk7fXRocm93IG5ldyBFcnJvcignXCIuZnJvbVwiIHNob3VsZCBiZSBpbWFnZSBvciBjYW52YXMnKTt9KS50aGVuKGZ1bmN0aW9uKCl7aWYoY2FuY2VsZWQpcmV0dXJuIGNhbmNlbFRva2VuO190aGlzMi5kZWJ1ZygnQ2FsY3VsYXRlIHRpbGVzJyk7Ly9cbi8vIEhlcmUgd2UgYXJlIHdpdGggXCJub3JtYWxpemVkXCIgc291cmNlLFxuLy8gZm9sbG93IHRvIHRpbGluZ1xuLy9cbnZhciByZWdpb25zPWNyZWF0ZVJlZ2lvbnMoe3dpZHRoOm9wdHMud2lkdGgsaGVpZ2h0Om9wdHMuaGVpZ2h0LHNyY1RpbGVTaXplOl90aGlzMi5vcHRpb25zLnRpbGUsdG9XaWR0aDpvcHRzLnRvV2lkdGgsdG9IZWlnaHQ6b3B0cy50b0hlaWdodCxkZXN0VGlsZUJvcmRlcjpkZXN0VGlsZUJvcmRlcn0pO3ZhciBqb2JzPXJlZ2lvbnMubWFwKGZ1bmN0aW9uKHRpbGUpe3JldHVybiBwcm9jZXNzVGlsZSh0aWxlKTt9KTtmdW5jdGlvbiBjbGVhbnVwKCl7aWYoc3JjSW1hZ2VCaXRtYXApe3NyY0ltYWdlQml0bWFwLmNsb3NlKCk7c3JjSW1hZ2VCaXRtYXA9bnVsbDt9fV90aGlzMi5kZWJ1ZygnUHJvY2VzcyB0aWxlcycpO3JldHVybiBQcm9taXNlLmFsbChqb2JzKS50aGVuKGZ1bmN0aW9uKCl7X3RoaXMyLmRlYnVnKCdGaW5pc2hlZCEnKTtjbGVhbnVwKCk7cmV0dXJuIHRvO30sZnVuY3Rpb24oZXJyKXtjbGVhbnVwKCk7dGhyb3cgZXJyO30pO30pO307dmFyIHByb2Nlc3NTdGFnZXM9ZnVuY3Rpb24gcHJvY2Vzc1N0YWdlcyhzdGFnZXMsZnJvbSx0byxvcHRzKXtpZihjYW5jZWxlZClyZXR1cm4gY2FuY2VsVG9rZW47dmFyIF9zdGFnZXMkc2hpZnQ9c3RhZ2VzLnNoaWZ0KCksX3N0YWdlcyRzaGlmdDI9X3NsaWNlZFRvQXJyYXkoX3N0YWdlcyRzaGlmdCwyKSx0b1dpZHRoPV9zdGFnZXMkc2hpZnQyWzBdLHRvSGVpZ2h0PV9zdGFnZXMkc2hpZnQyWzFdO3ZhciBpc0xhc3RTdGFnZT1zdGFnZXMubGVuZ3RoPT09MDtvcHRzPWFzc2lnbih7fSxvcHRzLHt0b1dpZHRoOnRvV2lkdGgsdG9IZWlnaHQ6dG9IZWlnaHQsLy8gb25seSB1c2UgdXNlci1kZWZpbmVkIHF1YWxpdHkgZm9yIHRoZSBsYXN0IHN0YWdlLFxuLy8gdXNlIHNpbXBsZXIgKEhhbW1pbmcpIGZpbHRlciBmb3IgdGhlIGZpcnN0IHN0YWdlcyB3aGVyZVxuLy8gc2NhbGUgZmFjdG9yIGlzIGxhcmdlIGVub3VnaCAobW9yZSB0aGFuIDItMylcbnF1YWxpdHk6aXNMYXN0U3RhZ2U/b3B0cy5xdWFsaXR5Ok1hdGgubWluKDEsb3B0cy5xdWFsaXR5KX0pO3ZhciB0bXBDYW52YXM9dm9pZCAwO2lmKCFpc0xhc3RTdGFnZSl7Ly8gY3JlYXRlIHRlbXBvcmFyeSBjYW52YXNcbnRtcENhbnZhcz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTt0bXBDYW52YXMud2lkdGg9dG9XaWR0aDt0bXBDYW52YXMuaGVpZ2h0PXRvSGVpZ2h0O31yZXR1cm4gdGlsZUFuZFJlc2l6ZShmcm9tLGlzTGFzdFN0YWdlP3RvOnRtcENhbnZhcyxvcHRzKS50aGVuKGZ1bmN0aW9uKCl7aWYoaXNMYXN0U3RhZ2UpcmV0dXJuIHRvO29wdHMud2lkdGg9dG9XaWR0aDtvcHRzLmhlaWdodD10b0hlaWdodDtyZXR1cm4gcHJvY2Vzc1N0YWdlcyhzdGFnZXMsdG1wQ2FudmFzLHRvLG9wdHMpO30pO307dmFyIHN0YWdlcz1jcmVhdGVTdGFnZXMob3B0cy53aWR0aCxvcHRzLmhlaWdodCxvcHRzLnRvV2lkdGgsb3B0cy50b0hlaWdodCxfdGhpczIub3B0aW9ucy50aWxlLGRlc3RUaWxlQm9yZGVyKTtyZXR1cm4gcHJvY2Vzc1N0YWdlcyhzdGFnZXMsZnJvbSx0byxvcHRzKTt9KTt9Oy8vIFJHQkEgYnVmZmVyIHJlc2l6ZVxuLy9cblBpY2EucHJvdG90eXBlLnJlc2l6ZUJ1ZmZlcj1mdW5jdGlvbihvcHRpb25zKXt2YXIgX3RoaXMzPXRoaXM7dmFyIG9wdHM9YXNzaWduKHt9LERFRkFVTFRfUkVTSVpFX09QVFMsb3B0aW9ucyk7cmV0dXJuIHRoaXMuaW5pdCgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMzLl9fbWF0aGxpYi5yZXNpemVBbmRVbnNoYXJwKG9wdHMpO30pO307UGljYS5wcm90b3R5cGUudG9CbG9iPWZ1bmN0aW9uKGNhbnZhcyxtaW1lVHlwZSxxdWFsaXR5KXttaW1lVHlwZT1taW1lVHlwZXx8J2ltYWdlL3BuZyc7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpe2lmKGNhbnZhcy50b0Jsb2Ipe2NhbnZhcy50b0Jsb2IoZnVuY3Rpb24oYmxvYil7cmV0dXJuIHJlc29sdmUoYmxvYik7fSxtaW1lVHlwZSxxdWFsaXR5KTtyZXR1cm47fS8vIEZhbGxiYWNrIGZvciBvbGQgYnJvd3NlcnNcbnZhciBhc1N0cmluZz1hdG9iKGNhbnZhcy50b0RhdGFVUkwobWltZVR5cGUscXVhbGl0eSkuc3BsaXQoJywnKVsxXSk7dmFyIGxlbj1hc1N0cmluZy5sZW5ndGg7dmFyIGFzQnVmZmVyPW5ldyBVaW50OEFycmF5KGxlbik7Zm9yKHZhciBpPTA7aTxsZW47aSsrKXthc0J1ZmZlcltpXT1hc1N0cmluZy5jaGFyQ29kZUF0KGkpO31yZXNvbHZlKG5ldyBCbG9iKFthc0J1ZmZlcl0se3R5cGU6bWltZVR5cGV9KSk7fSk7fTtQaWNhLnByb3RvdHlwZS5kZWJ1Zz1mdW5jdGlvbigpe307bW9kdWxlLmV4cG9ydHM9UGljYTt9LHtcIi4vbGliL21hdGhsaWJcIjoxLFwiLi9saWIvcG9vbFwiOjksXCIuL2xpYi9zdGVwcGVyXCI6MTAsXCIuL2xpYi90aWxlclwiOjExLFwiLi9saWIvdXRpbHNcIjoxMixcIi4vbGliL3dvcmtlclwiOjEzLFwib2JqZWN0LWFzc2lnblwiOjI0LFwid2Vid29ya2lmeVwiOjI1fV19LHt9LFtdKShcIi9cIik7fSk7fSk7LyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlLCBuby1tdWx0aS1zcGFjZXMsIG5vLW1peGVkLW9wZXJhdG9ycywgZnVuYy1uYW1lcyAqL2Z1bmN0aW9uIGVycm9yKG1lc3NhZ2UsY29kZSl7dmFyIGVycj1uZXcgRXJyb3IobWVzc2FnZSk7ZXJyLmNvZGU9Y29kZTtyZXR1cm4gZXJyO30vKiBlc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovZnVuY3Rpb24gRXhpZihkYXRhKXt0aGlzLmRhdGE9ZGF0YTt2YXIgc2lnPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxkYXRhLnN1YmFycmF5KDAsNCkpO2lmKHNpZyE9PSdJSVxceDJBXFwwJyYmc2lnIT09J01NXFwwXFx4MkEnKXt0aHJvdyBlcnJvcignaW52YWxpZCBUSUZGIHNpZ25hdHVyZScsJ0VCQUREQVRBJyk7fXRoaXMuYmlnX2VuZGlhbj1zaWdbMF09PT0nTSc7fUV4aWYucHJvdG90eXBlLnJlYWRVSW50MTY9ZnVuY3Rpb24oYnVmZmVyLG9mZnNldCl7aWYob2Zmc2V0KzI+YnVmZmVyLmxlbmd0aCl0aHJvdyBlcnJvcigndW5leHBlY3RlZCBFT0YnLCdFQkFEREFUQScpO3JldHVybiB0aGlzLmJpZ19lbmRpYW4/YnVmZmVyW29mZnNldF0qMHgxMDArYnVmZmVyW29mZnNldCsxXTpidWZmZXJbb2Zmc2V0XStidWZmZXJbb2Zmc2V0KzFdKjB4MTAwO307RXhpZi5wcm90b3R5cGUucmVhZFVJbnQzMj1mdW5jdGlvbihidWZmZXIsb2Zmc2V0KXtpZihvZmZzZXQrND5idWZmZXIubGVuZ3RoKXRocm93IGVycm9yKCd1bmV4cGVjdGVkIEVPRicsJ0VCQUREQVRBJyk7cmV0dXJuIHRoaXMuYmlnX2VuZGlhbj9idWZmZXJbb2Zmc2V0XSoweDEwMDAwMDArYnVmZmVyW29mZnNldCsxXSoweDEwMDAwK2J1ZmZlcltvZmZzZXQrMl0qMHgxMDArYnVmZmVyW29mZnNldCszXTpidWZmZXJbb2Zmc2V0XStidWZmZXJbb2Zmc2V0KzFdKjB4MTAwK2J1ZmZlcltvZmZzZXQrMl0qMHgxMDAwMCtidWZmZXJbb2Zmc2V0KzNdKjB4MTAwMDAwMDt9O0V4aWYucHJvdG90eXBlLndyaXRlVUludDE2PWZ1bmN0aW9uKGJ1ZmZlcixkYXRhLG9mZnNldCl7Ly8gdGhpcyBjb3VsZCBoYXBwZW4gaWYgVElGRiBpcyBoYW5kLWNyYWZ0ZWQgdG8gYmUgc21hbGxlciB0aGFuIHN1bSBvZiBpdHMgZW50cmllcyxcbi8vIGFuZCB3ZSB3cm9uZ2x5IGFsbG9jYXRlIGEgc21hbGxlciBidWZmZXIgdGhhbiBuZWNlc3NhcnlcbmlmKG9mZnNldCsyPmJ1ZmZlci5sZW5ndGgpdGhyb3cgZXJyb3IoJ1RJRkYgZGF0YSBpcyB0b28gbGFyZ2UnLCdFQkFEREFUQScpO2lmKHRoaXMuYmlnX2VuZGlhbil7YnVmZmVyW29mZnNldF09ZGF0YT4+PjgmMHhGRjtidWZmZXJbb2Zmc2V0KzFdPWRhdGEmMHhGRjt9ZWxzZXtidWZmZXJbb2Zmc2V0XT1kYXRhJjB4RkY7YnVmZmVyW29mZnNldCsxXT1kYXRhPj4+OCYweEZGO319O0V4aWYucHJvdG90eXBlLndyaXRlVUludDMyPWZ1bmN0aW9uKGJ1ZmZlcixkYXRhLG9mZnNldCl7Ly8gdGhpcyBjb3VsZCBoYXBwZW4gaWYgVElGRiBpcyBoYW5kLWNyYWZ0ZWQgdG8gYmUgc21hbGxlciB0aGFuIHN1bSBvZiBpdHMgZW50cmllcyxcbi8vIGFuZCB3ZSB3cm9uZ2x5IGFsbG9jYXRlIGEgc21hbGxlciBidWZmZXIgdGhhbiBuZWNlc3NhcnlcbmlmKG9mZnNldCs0PmJ1ZmZlci5sZW5ndGgpdGhyb3cgZXJyb3IoJ1RJRkYgZGF0YSBpcyB0b28gbGFyZ2UnLCdFQkFEREFUQScpO2lmKHRoaXMuYmlnX2VuZGlhbil7YnVmZmVyW29mZnNldF09ZGF0YT4+PjI0JjB4RkY7YnVmZmVyW29mZnNldCsxXT1kYXRhPj4+MTYmMHhGRjtidWZmZXJbb2Zmc2V0KzJdPWRhdGE+Pj44JjB4RkY7YnVmZmVyW29mZnNldCszXT1kYXRhJjB4RkY7fWVsc2V7YnVmZmVyW29mZnNldF09ZGF0YSYweEZGO2J1ZmZlcltvZmZzZXQrMV09ZGF0YT4+PjgmMHhGRjtidWZmZXJbb2Zmc2V0KzJdPWRhdGE+Pj4xNiYweEZGO2J1ZmZlcltvZmZzZXQrM109ZGF0YT4+PjI0JjB4RkY7fX07Ly8gRmlsdGVyIGV4aWYgZGF0YSBhbmQgd3JpdGUgaXQgaW50byBhIGJ1ZmZlclxuLy9cbi8vIC0gb3B0aW9uczogT2JqZWN0XG4vLyAgIC0gbWF4RW50cnlTaXplOiBOdW1iZXJcbi8vICAgLSBvbklGREVudHJ5OiBGdW5jdGlvblxuLy8gLSBvdXQ6IFVpbnQ4QXJyYXkgLSBhIGJ1ZmZlciB0byB3cml0ZSBleGlmIHRvXG4vL1xuLy8gYG1heEVudHJ5U2l6ZWAgbWVhbmluZzogd2hlbiBmaWx0ZXJpbmcgRXhpZiwgcmVtb3ZlIGFsbCBmaWVsZHMgd2l0aCBzaXplXG4vLyBtb3JlIHRoYW4gYG1heEVudHJ5U2l6ZWAuIE5vdGUgdGhhdCBtb3N0IHVzZWZ1bCBkYXRhIGluIEV4aWYgaXMgc3RvcmVkIGFzXG4vLyBpbnRlZ2VycyAoPD0gMTIgYnl0ZXMpLCBzbyBzZXR0aW5nIGl0IGhpZ2hlciB3aWxsIG9ubHkgZmlsdGVyIG91dCBjb21tZW50c1xuLy8gYW5kIHZlbmRvciBjcmFwIChkZWZhdWx0OiAxMDAgYnl0ZXMpXG4vL1xuLy8gYG9uSUZERW50cnlgIGlzIGNhbGxlZCBvbiBlYWNoIGVudHJ5IGluc2lkZSBJRkQgKHRoaW5rIGFib3V0IEV4aWYgYmVpbmdcbi8vIGFuIGFycmF5IG9mIElGRHMsIGFuZCBJRkQgYmVpbmcgYW4gYXJyYXkgb2YgZW50cmllcykuIFlvdSBtYXkgcmV0dXJuIGBmYWxzZWBcbi8vIHRvIGZpbHRlciBvdXQgc2FpZCBlbGVtZW50IGZyb20gRXhpZi5cbi8vXG4vLyBgb25JRkRFbnRyeWAgZnVuY3Rpb24gc2lnbmF0dXJlOlxuLy9cbi8vICAtIGlmZDogTnVtYmVyXG4vLyAgICAtIDB4MDAwMCBmb3IgSUZEMFxuLy8gICAgLSAweDAwMDEgZm9yIElGRDEgKG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkKVxuLy8gICAgLSAweDg4MjUgZm9yIEdQU0lGRFxuLy8gICAgLSAweDg3NjkgZm9yIEV4aWZJRkRcbi8vICAgIC0gMHhBMDA1IGZvciBJbnRlcm9wSUZEXG4vL1xuLy8gIC0gZW50cnk6IE9iamVjdCAtIHRoZSBjb250ZW50cyBvZiB0aGUgSUZEIGVudHJ5XG4vLyAgICAtIHRhZzogICBOdW1iZXIgLSBkYXRhIHRhZ1xuLy8gICAgLSB0eXBlOiAgTnVtYmVyIC0gZGF0YSB0eXBlIChzaG9ydCwgZG91YmxlLCBhc2NpaSwgZXRjLiwgc2VlIGRldGFpbHMgaW4gVElGRiBzcGVjKVxuLy8gICAgLSBjb3VudDogTnVtYmVyIC0gYW4gYW1vdW50IG9mIGl0ZW1zIGluIGJ1ZmZlciAoc2VlIGRldGFpbHMgaW4gVElGRiBzcGVjKVxuLy8gICAgLSB2YWx1ZTogQnVmZmVyIC0gZGF0YSBidWZmZXIgKHVzZSB0aGlzLnJlYWRVaW50MTYgb3IgdGhpcy5yZWFkVWludDMyIHRvIHJlYWQgZnJvbSB0aGVyZSlcbi8vXG4vLyBFeGFtcGxlOlxuLy9cbi8vIGBgYGpzXG4vLyBvbklGREVudHJ5OiBmdW5jdGlvbiByZWFkT3JpZW50YXRpb24oaWZkLCBlbnRyeSkge1xuLy8gICBpZiAoaWZkID09PSAwICYmIGVudHJ5LnRhZyA9PT0gMHgxMTIgJiYgZW50cnkudHlwZSA9PT0gMykge1xuLy8gICAgIGNvbnNvbGUubG9nKCdPcmllbnRhdGlvbiA9JywgdGhpcy5yZWFkVUludDE2KGVudHJ5LnZhbHVlLCAwKSk7XG4vLyAgIH1cbi8vIH1cbi8vIGBgYFxuLy9cbkV4aWYucHJvdG90eXBlLmZpbHRlcj1mdW5jdGlvbihvcHRpb25zLG91dCl7dmFyIF90aGlzMjE9dGhpczt2YXIgbWF4U2l6ZT1vcHRpb25zJiZvcHRpb25zLm1heEVudHJ5U2l6ZT9vcHRpb25zLm1heEVudHJ5U2l6ZToxMDA7LyogZXNsaW50LWRpc2FibGUgZnVuYy1zdHlsZSAqL3ZhciBmaWx0ZXJfZW50cnk9ZnVuY3Rpb24gZmlsdGVyX2VudHJ5KHNlY3Rpb25OYW1lKXtyZXR1cm4gZnVuY3Rpb24oZW50cnkpe2lmKG9wdGlvbnMmJm9wdGlvbnMub25JRkRFbnRyeSl7aWYob3B0aW9ucy5vbklGREVudHJ5LmNhbGwoX3RoaXMyMSxzZWN0aW9uTmFtZSxlbnRyeSk9PT1mYWxzZSl7cmV0dXJuIGZhbHNlO319cmV0dXJuIGVudHJ5LnZhbHVlLmxlbmd0aDw9bWF4U2l6ZTt9O307dGhpcy5vdXRwdXQ9e2J1ZjpvdXQsbGVuZ3RoOjB9O3ZhciBvZmZzZXQ9MDsvLyBjb3B5IHNpZ25hdHVyZSAoaXQncyBhbHJlYWR5IGNoZWNrZWQgb24gaW5pdClcbnRoaXMub3V0cHV0LmJ1ZlswXT10aGlzLmRhdGFbMF07dGhpcy5vdXRwdXQuYnVmWzFdPXRoaXMuZGF0YVsxXTt0aGlzLm91dHB1dC5idWZbMl09dGhpcy5kYXRhWzJdO3RoaXMub3V0cHV0LmJ1ZlszXT10aGlzLmRhdGFbM107dGhpcy5vdXRwdXQubGVuZ3RoKz00O3RoaXMud3JpdGVVSW50MzIodGhpcy5vdXRwdXQuYnVmLDgsdGhpcy5vdXRwdXQubGVuZ3RoKTt0aGlzLm91dHB1dC5sZW5ndGgrPTQ7b2Zmc2V0PXRoaXMucmVhZFVJbnQzMih0aGlzLmRhdGEsNCk7Ly8gV2Ugb25seSBkbyByZWFkIElGRDAgaGVyZSwgSUZEMSBpcyBpZ25vcmVkXG4vLyBiZWNhdXNlIHdlIGRvbid0IG5lZWQgdG8gcHJlc2VydmUgdGh1bWJuYWlsc1xuLy9cbnZhciB0PXRoaXMucHJvY2Vzc0lGRFNlY3Rpb24ob2Zmc2V0LGZpbHRlcl9lbnRyeSgwKSk7dC5lbnRyaWVzLmZvckVhY2goZnVuY3Rpb24oZW50cnkpey8vICAgICAgICAgICAgICAgIEV4aWZJRkQgICAgICAgICAgICAgICAgIEdQU0lGRCAgICAgICAgICAgICAgICBpbnRlcm9wSUZEXG5pZihlbnRyeS50YWc9PT0weDg3Njl8fGVudHJ5LnRhZz09PTB4ODgyNXx8ZW50cnkudGFnPT09MHhBMDA1KXtpZihlbnRyeS50eXBlPT09NCl7X3RoaXMyMS53cml0ZVVJbnQzMihfdGhpczIxLm91dHB1dC5idWYsX3RoaXMyMS5vdXRwdXQubGVuZ3RoLGVudHJ5LndyaXR0ZW5fb2Zmc2V0KzgpO3ZhciBvZmY9X3RoaXMyMS5yZWFkVUludDMyKGVudHJ5LnZhbHVlLDApO190aGlzMjEucHJvY2Vzc0lGRFNlY3Rpb24ob2ZmLGZpbHRlcl9lbnRyeShlbnRyeS50YWcpKTt9fX0pOy8vIHdlIHdyb3RlIG1vcmUgZGF0YSB0aGFuIHdlIGFsbG9jYXRlZCBidWZmZXIgZm9yLFxuLy8gdGhpcyBjb3VsZCBoYXBwZW4gaWYgVElGRiBpcyBoYW5kLWNyYWZ0ZWQgdG8gYmUgc21hbGxlciB0aGFuIHN1bSBvZiBpdHMgZW50cmllc1xuLy9cbmlmKHRoaXMub3V0cHV0Lmxlbmd0aD50aGlzLm91dHB1dC5idWYubGVuZ3RoKXt0aHJvdyBlcnJvcignVElGRiBkYXRhIGlzIHRvbyBsYXJnZScsJ0VCQUREQVRBJyk7fXJldHVybiB0aGlzLm91dHB1dC5sZW5ndGg7fTtFeGlmLnByb3RvdHlwZS5yZWFkSUZERW50cnk9ZnVuY3Rpb24ob2Zmc2V0KXt2YXIgdGFnPXRoaXMucmVhZFVJbnQxNih0aGlzLmRhdGEsb2Zmc2V0KTt2YXIgdHlwZT10aGlzLnJlYWRVSW50MTYodGhpcy5kYXRhLG9mZnNldCsyKTt2YXIgY291bnQ9dGhpcy5yZWFkVUludDMyKHRoaXMuZGF0YSxvZmZzZXQrNCk7dmFyIHVuaXRfbGVuZ3RoO3N3aXRjaCh0eXBlKXtjYXNlIDE6Ly8gYnl0ZVxuY2FzZSAyOi8vIGFzY2lpXG5jYXNlIDY6Ly8gc2J5dGVcbmNhc2UgNzovLyB1bmRlZmluZWRcbnVuaXRfbGVuZ3RoPTE7YnJlYWs7Y2FzZSAzOi8vIHNob3J0XG5jYXNlIDg6Ly8gc3Nob3J0XG51bml0X2xlbmd0aD0yO2JyZWFrO2Nhc2UgNDovLyBsb25nXG5jYXNlIDk6Ly8gc2xvbmdcbmNhc2UgMTE6Ly8gZmxvYXRcbnVuaXRfbGVuZ3RoPTQ7YnJlYWs7Y2FzZSA1Oi8vIHJhdGlvbmFsXG5jYXNlIDEwOi8vIHNyYXRpb25hbFxuY2FzZSAxMjovLyBkb3VibGVcbnVuaXRfbGVuZ3RoPTg7YnJlYWs7ZGVmYXVsdDovLyB1bmtub3duIHR5cGUsIHNraXBwaW5nXG5yZXR1cm47fXZhciB2YWx1ZTt2YXIgbGVuZ3RoPXVuaXRfbGVuZ3RoKmNvdW50O2lmKGxlbmd0aDw9NCl7dmFsdWU9dGhpcy5kYXRhLnN1YmFycmF5KG9mZnNldCs4LG9mZnNldCsxMik7aWYodmFsdWUubGVuZ3RoPDQpdGhyb3cgZXJyb3IoJ3VuZXhwZWN0ZWQgRU9GJywnRUJBRERBVEEnKTt9ZWxzZXt2YXIgb2Zmdj10aGlzLnJlYWRVSW50MzIodGhpcy5kYXRhLG9mZnNldCs4KTt2YWx1ZT10aGlzLmRhdGEuc3ViYXJyYXkob2ZmdixvZmZ2K2xlbmd0aCk7aWYodmFsdWUubGVuZ3RoPGxlbmd0aCl0aHJvdyBlcnJvcigndW5leHBlY3RlZCBFT0YnLCdFQkFEREFUQScpO31yZXR1cm57dGFnOnRhZyx0eXBlOnR5cGUsY291bnQ6Y291bnQsdmFsdWU6dmFsdWV9Oy8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbn07RXhpZi5wcm90b3R5cGUucHJvY2Vzc0lGRFNlY3Rpb249ZnVuY3Rpb24ob2Zmc2V0LGZpbHRlcil7dmFyIF90aGlzMjI9dGhpczt2YXIgZW50cmllc190b193cml0ZT1bXTt2YXIgZW50cmllc19jb3VudD10aGlzLnJlYWRVSW50MTYodGhpcy5kYXRhLG9mZnNldCk7b2Zmc2V0Kz0yO2Zvcih2YXIgaT0wO2k8ZW50cmllc19jb3VudDtpKz0xKXt2YXIgZW50cnk9dGhpcy5yZWFkSUZERW50cnkob2Zmc2V0K2kqMTIpOy8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnRpbnVlICovaWYoIWVudHJ5KWNvbnRpbnVlO2lmKCFmaWx0ZXIoZW50cnkpKWNvbnRpbnVlO2VudHJpZXNfdG9fd3JpdGUucHVzaChlbnRyeSk7fXRoaXMud3JpdGVVSW50MTYodGhpcy5vdXRwdXQuYnVmLGVudHJpZXNfdG9fd3JpdGUubGVuZ3RoLHRoaXMub3V0cHV0Lmxlbmd0aCk7dGhpcy5vdXRwdXQubGVuZ3RoKz0yO3ZhciB3cml0dGVuX2lmYl9vZmZzZXQ9dGhpcy5vdXRwdXQubGVuZ3RoO2VudHJpZXNfdG9fd3JpdGUuZm9yRWFjaChmdW5jdGlvbihlbnRyeSl7ZW50cnkud3JpdHRlbl9vZmZzZXQ9X3RoaXMyMi5vdXRwdXQubGVuZ3RoO190aGlzMjIud3JpdGVVSW50MTYoX3RoaXMyMi5vdXRwdXQuYnVmLGVudHJ5LnRhZyxfdGhpczIyLm91dHB1dC5sZW5ndGgpO190aGlzMjIud3JpdGVVSW50MTYoX3RoaXMyMi5vdXRwdXQuYnVmLGVudHJ5LnR5cGUsX3RoaXMyMi5vdXRwdXQubGVuZ3RoKzIpO190aGlzMjIud3JpdGVVSW50MzIoX3RoaXMyMi5vdXRwdXQuYnVmLGVudHJ5LmNvdW50LF90aGlzMjIub3V0cHV0Lmxlbmd0aCs0KTtpZihlbnRyeS52YWx1ZS5sZW5ndGg8PTQpe2lmKGVudHJ5LnZhbHVlLmxlbmd0aCtfdGhpczIyLm91dHB1dC5sZW5ndGgrOD5fdGhpczIyLm91dHB1dC5idWYubGVuZ3RoKXt0aHJvdyBlcnJvcignVElGRiBkYXRhIGlzIHRvbyBsYXJnZScsJ0VCQUREQVRBJyk7fV90aGlzMjIub3V0cHV0LmJ1Zi5zZXQoZW50cnkudmFsdWUsX3RoaXMyMi5vdXRwdXQubGVuZ3RoKzgpO31fdGhpczIyLm91dHB1dC5sZW5ndGgrPTEyO30pO3RoaXMud3JpdGVVSW50MzIodGhpcy5vdXRwdXQuYnVmLDAsdGhpcy5vdXRwdXQubGVuZ3RoKTt0aGlzLm91dHB1dC5sZW5ndGgrPTQ7ZW50cmllc190b193cml0ZS5mb3JFYWNoKGZ1bmN0aW9uKGVudHJ5LGkpe2lmKGVudHJ5LnZhbHVlLmxlbmd0aD40KXtfdGhpczIyLndyaXRlVUludDMyKF90aGlzMjIub3V0cHV0LmJ1ZixfdGhpczIyLm91dHB1dC5sZW5ndGgsd3JpdHRlbl9pZmJfb2Zmc2V0K2kqMTIrOCk7aWYoZW50cnkudmFsdWUubGVuZ3RoK190aGlzMjIub3V0cHV0Lmxlbmd0aD5fdGhpczIyLm91dHB1dC5idWYubGVuZ3RoKXt0aHJvdyBlcnJvcignVElGRiBkYXRhIGlzIHRvbyBsYXJnZScsJ0VCQUREQVRBJyk7fV90aGlzMjIub3V0cHV0LmJ1Zi5zZXQoZW50cnkudmFsdWUsX3RoaXMyMi5vdXRwdXQubGVuZ3RoKTtfdGhpczIyLm91dHB1dC5sZW5ndGgrPWVudHJ5LnZhbHVlLmxlbmd0aDtpZihfdGhpczIyLm91dHB1dC5sZW5ndGglMil7Ly8gZW5zdXJlIHRoYXQgZXZlcnl0aGluZyBpcyBhdCB3b3JkIGJvdW5kYXJ5XG5fdGhpczIyLm91dHB1dC5idWZbX3RoaXMyMi5vdXRwdXQubGVuZ3RoXT0weEZGO190aGlzMjIub3V0cHV0Lmxlbmd0aCs9MTt9fX0pO3JldHVybntlbnRyaWVzOmVudHJpZXNfdG9fd3JpdGUsbmV4dF9pZmI6dGhpcy5yZWFkVUludDMyKHRoaXMuZGF0YSxvZmZzZXQrZW50cmllc19jb3VudCoxMil9O307dmFyIGZpbHRlckV4aWY9ZnVuY3Rpb24gZmlsdGVyRXhpZihkYXRhLG9wdGlvbnMpe2lmKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxkYXRhLnN1YmFycmF5KDAsNikpIT09J0V4aWZcXDBcXDAnKXt0aHJvdyBlcnJvcignaW52YWxpZCBFeGlmIHNpZ25hdHVyZScsJ0VOT1RFWElGJyk7fS8vIENyZWF0ZSBidWZmZXIgb2YgdGhlIHNhbWUgbGVuZ3RoIGFzIGlucHV0LlxuLy9cbi8vIFRoaXMgaXMgZ29vZCBlbm91Z2ggZm9yIG1vc3Qgb2YgdGhlIGNhc2VzLCBidXQgd2lsbCB0aHJvd1xuLy8gaWYgZXhpZiBpcyBwYWNrZWQgKHJlZmVyZW5jaW5nIHRoZSBzYW1lIGRhdGEgbXVsdGlwbGUgdGltZXMpXG4vL1xudmFyIG91dHB1dD1uZXcgZGF0YS5jb25zdHJ1Y3RvcihkYXRhLmxlbmd0aCk7dmFyIGV4aWY9bmV3IEV4aWYoZGF0YS5zdWJhcnJheSg2KSk7J0V4aWZcXDBcXDAnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uKGMscG9zKXtvdXRwdXRbcG9zXT1jLmNoYXJDb2RlQXQoMCk7fSk7Ly8gV3JpdGUgZmlsdGVyZWQgZXhpZiBpbnRvIG91dHB1dCBhdCBwb3NpdGlvbiA2LFxuLy8gaXQncyBidWlsdCBhcm91bmQgdGhlIGZhY3QgdGhhdCBzdWJhcnJheSBjb3B5IGlzIHNoYWxsb3dcbi8vXG52YXIgbGVuZ3RoPWV4aWYuZmlsdGVyKG9wdGlvbnMsb3V0cHV0LnN1YmFycmF5KDYpKTtyZXR1cm4gbmV3IGRhdGEuY29uc3RydWN0b3Iob3V0cHV0LnN1YmFycmF5KDAsbGVuZ3RoKzYpKTt9Oy8qIGVzbGludC1kaXNhYmxlICovIC8vIFBhcnNlciBzdGF0ZXNcbnZhciBGSUxFX1NUQVJUPTA7Ly8gc3RhcnQgb2YgdGhlIGZpbGUsIHJlYWQgc2lnbmF0dXJlIChGRilcbnZhciBGSUxFX1NUQVJUX0ZGPTE7Ly8gc3RhcnQgb2YgdGhlIGZpbGUsIHJlYWQgc2lnbmF0dXJlIChEOClcbnZhciBTRUdNRU5UX1NUQVJUPTI7Ly8gc3RhcnQgb2YgYSBzZWdtZW50LCBleHBlY3QgdG8gcmVhZCBGRlxudmFyIFNFR01FTlRfTUFSS0VSPTM7Ly8gcmVhZCBtYXJrZXIgSURcbnZhciBTRUdNRU5UX0xFTkdUSD00Oy8vIHJlYWQgc2VnbWVudCBsZW5ndGggKDIgYnl0ZXMgdG90YWwpXG52YXIgU0VHTUVOVF9JR05PUkU9NTsvLyByZWFkIHNlZ21lbnQgYW5kIGlnbm9yZSBpdFxudmFyIFNFR01FTlRfUElQRT02Oy8vIHJlYWQgc2VnbWVudCBhbmQgcGFzcyBpdCBpbnRvIG91dHB1dFxudmFyIFNFR01FTlRfUElQRV9EQVRBPTc7Ly8gcmVhZCBzZWdtZW50IGFuZCBwYXNzIGl0IGludG8gb3V0cHV0IChkYXRhKVxudmFyIFNFR01FTlRfQlVGRkVSPTg7Ly8gYnVmZmVyIHNlZ21lbnQsIHByb2Nlc3MgYXMgZXhpZlxudmFyIFNFR01FTlRfQlVGRkVSX0RBVEE9OTsvLyBidWZmZXIgc2VnbWVudCwgcHJvY2VzcyBhcyBleGlmXG52YXIgSU1BR0U9MTA7Ly8gc3RhcnQgcmVhZGluZyBpbWFnZVxudmFyIElNQUdFX0ZGPTExOy8vIHByb2Nlc3MgcG9zc2libGUgc2VnbWVudCBpbnNpZGUgaW1hZ2VcbnZhciBGSU5BTD0xMjsvLyBpZ25vcmUgdGhlIHJlc3Qgb2YgdGhlIGRhdGFcbi8qIGVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9mdW5jdGlvbiBKcGVnRmlsdGVyKG9wdGlvbnMpe2lmKCEodGhpcyBpbnN0YW5jZW9mIEpwZWdGaWx0ZXIpKXJldHVybiBuZXcgSnBlZ0ZpbHRlcihvcHRpb25zKTtvcHRpb25zPW9wdGlvbnN8fHt9O3RoaXMub3V0cHV0PVtdO3RoaXMuX3N0YXRlPUZJTEVfU1RBUlQ7Ly9cbi8vIFBhcnNlciBvcHRpb25zXG4vL1xuLy8gcmVtb3ZlIElDQyBwcm9maWxlICgyLTEwIGtCKVxudGhpcy5fcmVtb3ZlSUNDYW5kQVBQPW9wdGlvbnMucmVtb3ZlSUNDYW5kQVBQOy8vIGB0cnVlYCAtIHJlbW92ZSBFeGlmIGNvbXBsZXRlbHksIGBmYWxzZWAgLSBmaWx0ZXIgaXQgYW5kIHJlbW92ZSB0aHVtYm5haWxcbnRoaXMuX3JlbW92ZUV4aWY9b3B0aW9ucy5yZW1vdmVFeGlmOy8vIHJlbW92ZSBvdGhlciBtZXRhIGRhdGEgKFhNUCwgUGhvdG9zaG9wLCBldGMuKVxudGhpcy5fZmlsdGVyPW9wdGlvbnMuZmlsdGVyOy8vIHJlbW92ZSBKUEVHIENPTSBzZWdtZW50c1xudGhpcy5fcmVtb3ZlQ29tbWVudHM9b3B0aW9ucy5yZW1vdmVDb21tZW50czsvLyByZW1vdmUgdGhlIHJlc3Qgb2YgdGhlIGltYWdlIChldmVyeXRoaW5nIGV4Y2VwdCBtZXRhZGF0YSk7XG4vLyBpZiBpdCdzIGB0cnVlYCwgb3V0cHV0IHdpbGwgYmUgYSBzZXJpZXMgb2Ygc2VnbWVudHMsIGFuZCBOT1QgYSB2YWxpZCBqcGVnXG50aGlzLl9yZW1vdmVJbWFnZT1vcHRpb25zLnJlbW92ZUltYWdlOy8vIGFkZCBhIGNvbW1lbnQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgSlBFR1xuLy8gKGl0J3MgYWRkZWQgYWZ0ZXIgSkZJRiwgYnV0IGJlZm9yZSBhbnl0aGluZyBlbHNlKVxudGhpcy5fY29tbWVudD1vcHRpb25zLmNvbW1lbnQ7Ly8gZXhpZiBvcHRpb25zIChwYXNzZWQgZm9yIGV4aWYgcGFyc2VyIGFzIGlzKVxudGhpcy5fbWF4RW50cnlTaXplPW9wdGlvbnMubWF4RW50cnlTaXplO3RoaXMuX29uSUZERW50cnk9b3B0aW9ucy5vbklGREVudHJ5Oy8vIGludGVybmFsIGRhdGFcbnRoaXMuX21hcmtlckNvZGU9MDt0aGlzLl9ieXRlc0xlZnQ9MDt0aGlzLl9zZWdtZW50TGVuZ3RoPTA7dGhpcy5fYXBwMWJ1ZmZlcj1udWxsO3RoaXMuX2FwcDFwb3M9MDt0aGlzLl9ieXRlc1JlYWQ9MDsvL1xudGhpcy5fQnVmZmVyQ29uc3RydWN0b3I9bnVsbDt0aGlzLl9idWZmZXJVc2VBbGxvYz1mYWxzZTt0aGlzLl9idWZmZXJVc2VGcm9tPWZhbHNlO31mdW5jdGlvbiB0b0hleChudW1iZXIpe3ZhciBuPW51bWJlci50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtmb3IodmFyIGk9Mi1uLmxlbmd0aDtpPjA7aS09MSl7bj1cIjBcIi5jb25jYXQobik7fXJldHVyblwiMHhcIi5jb25jYXQobik7fS8vIFBlcmZvcm0gYSBzaGFsbG93IGNvcHkgb2YgYSBidWZmZXIgb3IgdHlwZWQgYXJyYXlcbi8vXG5mdW5jdGlvbiBzbGljZShidWYsc3RhcnQsZW5kKXtpZihidWYuc2xpY2UmJmJ1Zi5jb3B5JiZidWYud3JpdGVEb3VibGVCRSl7Ly9cbi8vIExvb2tzIGxpa2Ugbm9kZS5qcyBidWZmZXJcbi8vXG4vLyAtIHdlIHVzZSBidWYuc2xpY2UoKSBpbiBub2RlLmpzIGJ1ZmZlcnMgYmVjYXVzZVxuLy8gICBidWYuc3ViYXJyYXkoKSBpcyBub3QgYSBidWZmZXJcbi8vXG4vLyAtIHdlIHVzZSBidWYuc3ViYXJyYXkoKSBpbiB1aW50OGFycmF5cyBiZWNhdXNlXG4vLyAgIGJ1Zi5zbGljZSgpIGlzIG5vdCBhIHNoYWxsb3cgY29weVxuLy9cbnJldHVybiBidWYuc2xpY2Uoc3RhcnQsZW5kKTt9cmV0dXJuIGJ1Zi5zdWJhcnJheShzdGFydCxlbmQpO30vLyBDb3B5IG9uZSBidWZmZXIgdG8gYW5vdGhlclxuLy9cbmZ1bmN0aW9uIGNvcHkoc3JjLGRzdCxkc3Rfb2Zmc2V0KXtpZihzcmMubGVuZ3RoK2RzdF9vZmZzZXQ+ZHN0Lmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoJ2J1ZmZlciBpcyB0b28gc21hbGwnKTtpZihzcmMuY29weSl7c3JjLmNvcHkoZHN0LGRzdF9vZmZzZXQpO31lbHNle2RzdC5zZXQoc3JjLGRzdF9vZmZzZXQpO319SnBlZ0ZpbHRlci5wcm90b3R5cGUuX2Vycm9yPWZ1bmN0aW9uKG1lc3NhZ2UsY29kZSl7Ly8gZG91YmxlIGVycm9yP1xuaWYodGhpcy5fc3RhdGU9PT1GSU5BTClyZXR1cm47dmFyIGVycj1uZXcgRXJyb3IobWVzc2FnZSk7ZXJyLmNvZGU9Y29kZTt0aGlzLl9zdGF0ZT1GSU5BTDt0aGlzLm9uRXJyb3IoZXJyKTt9Oy8vIERldGVjdCByZXF1aXJlZCBvdXRwdXQgdHlwZSBieSBmaXJzdCBpbnB1dCBjaHVua1xuSnBlZ0ZpbHRlci5wcm90b3R5cGUuX2RldGVjdEJ1ZmZlcj1mdW5jdGlvbihkYXRhKXtpZih0aGlzLl9CdWZmZXJDb25zdHJ1Y3RvcilyZXR1cm47dGhpcy5fQnVmZmVyQ29uc3RydWN0b3I9ZGF0YS5jb25zdHJ1Y3Rvcjt0aGlzLl9idWZmZXJVc2VBbGxvYz10eXBlb2YgZGF0YS5jb25zdHJ1Y3Rvci5hbGxvYz09PSdmdW5jdGlvbic7dGhpcy5fYnVmZmVyVXNlRnJvbT10eXBlb2YgZGF0YS5jb25zdHJ1Y3Rvci5mcm9tPT09J2Z1bmN0aW9uJzt9Oy8vIEhlbHBlciB0byBhbGxvY2F0ZSBvdXRwdXQgd2l0aCBwcm9wZXIgY2xhc3MgdHlwZSAoVWludDhBcnJheXxCdWZmZXIpXG4vLyBBbGwgdGhpcyBtYWdpYyBpcyByZXF1aXJlZCBvbmx5IHRvIG1ha2UgY29kZSB3b3JrIGluIGJyb3dzZXIgdG9vLlxuSnBlZ0ZpbHRlci5wcm90b3R5cGUuX2J1ZmZlcj1mdW5jdGlvbihhcmcpe3ZhciBjbHM9dGhpcy5fQnVmZmVyQ29uc3RydWN0b3I7LyogZXNsaW50LWRpc2FibGUgbmV3LWNhcCAqL2lmKHR5cGVvZiBhcmc9PT0nbnVtYmVyJyl7cmV0dXJuIHRoaXMuX2J1ZmZlclVzZUFsbG9jP2Nscy5hbGxvYyhhcmcpOm5ldyBjbHMoYXJnKTt9cmV0dXJuIHRoaXMuX2J1ZmZlclVzZUZyb20/Y2xzLmZyb20oYXJnKTpuZXcgY2xzKGFyZyk7fTsvKiBlc2xpbnQtZGlzYWJsZSBtYXgtZGVwdGggKi9KcGVnRmlsdGVyLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKGRhdGEpe3ZhciBidWY7dmFyIGRpO3ZhciBpPTA7Ly8gZ3Vlc3Mgb3V0cHV0IGRhdGQgdHlwZSBieSBmaXJzdCBpbnB1dCBjaHVua1xudGhpcy5fZGV0ZWN0QnVmZmVyKGRhdGEpO3doaWxlKGk8ZGF0YS5sZW5ndGgpe3ZhciBiPWRhdGFbaV07c3dpdGNoKHRoaXMuX3N0YXRlKXsvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4vLyBzdGFydCBvZiB0aGUgZmlsZSwgcmVhZCBzaWduYXR1cmUgKEZGKVxuY2FzZSBGSUxFX1NUQVJUOmlmKGIhPT0weEZGKXt0aGlzLl9lcnJvcigndW5rbm93biBmaWxlIGZvcm1hdCcsJ0VOT1RKUEVHJyxpKTtyZXR1cm47fXRoaXMuX3N0YXRlPUZJTEVfU1RBUlRfRkY7aSs9MTticmVhazsvLyBzdGFydCBvZiB0aGUgZmlsZSwgcmVhZCBzaWduYXR1cmUgKEQ4KVxuY2FzZSBGSUxFX1NUQVJUX0ZGOmlmKGIhPT0weEQ4KXt0aGlzLl9lcnJvcigndW5rbm93biBmaWxlIGZvcm1hdCcsJ0VOT1RKUEVHJyxpKTtyZXR1cm47fXRoaXMub25EYXRhKHRoaXMuX2J1ZmZlcihbMHhGRiwweEQ4XSkpO3RoaXMuX3N0YXRlPVNFR01FTlRfU1RBUlQ7aSs9MTticmVhazsvLyBzdGFydCBvZiBhIHNlZ21lbnQsIGV4cGVjdCB0byByZWFkIEZGXG5jYXNlIFNFR01FTlRfU1RBUlQ6aWYodGhpcy5fbWFya2VyQ29kZT09PTB4REEpey8vIHByZXZpb3VzIHNlZ21lbnQgd2FzIFNPUywgc28gd2Ugc2hvdWxkIHJlYWQgaW1hZ2UgZGF0YSBpbnN0ZWFkXG50aGlzLl9zdGF0ZT1JTUFHRTticmVhazt9aWYoYiE9PTB4RkYpe3RoaXMuX2Vycm9yKFwidW5leHBlY3RlZCBieXRlIGF0IHNlZ21lbnQgc3RhcnQ6IFwiLmNvbmNhdCh0b0hleChiKSxcIlxcbiAgICAgICAgICAob2Zmc2V0IFwiKS5jb25jYXQodG9IZXgodGhpcy5fYnl0ZXNSZWFkK2kpLFwiIClcIiksJ0VCQUREQVRBJyk7cmV0dXJuO310aGlzLl9zdGF0ZT1TRUdNRU5UX01BUktFUjtpKz0xO2JyZWFrOy8vIHJlYWQgbWFya2VyIElEXG4vKiBlc2xpbnQtZGlzYWJsZSB5b2RhICovY2FzZSBTRUdNRU5UX01BUktFUjovLyBzdGFuZGFsb25lIG1hcmtlcnMsIGFjY29yZGluZyB0byBKUEVHIDE5OTIsXG4vLyBodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9KUEVHL2l0dS10ODEucGRmLCBzZWUgVGFibGUgQi4xXG5pZigweEQwPD1iJiZiPD0weEQ5fHxiPT09MHgwMSl7dGhpcy5fbWFya2VyQ29kZT1iO3RoaXMuX2J5dGVzTGVmdD0wO3RoaXMuX3NlZ21lbnRMZW5ndGg9MDtpZih0aGlzLl9tYXJrZXJDb2RlPT09MHhEOS8qIEVPSSAqLyl7dGhpcy5vbkRhdGEodGhpcy5fYnVmZmVyKFsweEZGLDB4RDldKSk7dGhpcy5fc3RhdGU9RklOQUw7dGhpcy5vbkVuZCgpO31lbHNle3RoaXMuX3N0YXRlPVNFR01FTlRfTEVOR1RIO31pKz0xO2JyZWFrO30vLyB0aGUgcmVzdCBvZiB0aGUgdW5yZXNlcnZlZCBtYXJrZXJzXG5pZigweEMwPD1iJiZiPD0weEZFKXt0aGlzLl9tYXJrZXJDb2RlPWI7dGhpcy5fYnl0ZXNMZWZ0PTI7dGhpcy5fc2VnbWVudExlbmd0aD0wO3RoaXMuX3N0YXRlPVNFR01FTlRfTEVOR1RIO2krPTE7YnJlYWs7fWlmKGI9PT0weEZGKXsvLyBwYWRkaW5nIGJ5dGUsIHNraXAgaXRcbmkrPTE7YnJlYWs7fS8vIHVua25vd24gbWFya2Vyc1xudGhpcy5fZXJyb3IoXCJ1bmtub3duIG1hcmtlcjogXCIuY29uY2F0KHRvSGV4KGIpLFwiXFxuICAgICAgICAgIChvZmZzZXQgXCIpLmNvbmNhdCh0b0hleCh0aGlzLl9ieXRlc1JlYWQraSksXCIgKVwiKSwnRUJBRERBVEEnKTtyZXR1cm47Ly8gcmV0dXJuIGFmdGVyIGVycm9yLCBub3QgYnJlYWtcbi8vIHJlYWQgc2VnbWVudCBsZW5ndGggKDIgYnl0ZXMgdG90YWwpXG5jYXNlIFNFR01FTlRfTEVOR1RIOndoaWxlKHRoaXMuX2J5dGVzTGVmdD4wJiZpPGRhdGEubGVuZ3RoKXt0aGlzLl9zZWdtZW50TGVuZ3RoPXRoaXMuX3NlZ21lbnRMZW5ndGgqMHgxMDArZGF0YVtpXTt0aGlzLl9ieXRlc0xlZnQtPTE7aSs9MTt9aWYodGhpcy5fYnl0ZXNMZWZ0PD0wKXtpZih0aGlzLl9jb21tZW50IT09bnVsbCYmdHlwZW9mIHRoaXMuX2NvbW1lbnQhPT0ndW5kZWZpbmVkJyYmdGhpcy5fbWFya2VyQ29kZSE9PTB4RTApey8vIGluc2VydCBjb21tZW50IGZpZWxkIGJlZm9yZSBhbnkgb3RoZXIgbWFya2VycyAoZXhjZXB0IEFQUDApXG4vL1xuLy8gKHdlIGNhbiBpbnNlcnQgaXQgYW55d2hlcmUsIGJ1dCBKRklGIHNlZ21lbnQgYmVpbmcgZmlyc3Rcbi8vIGxvb2tzIG5pY2VyIGluIGhleGR1bXApXG4vL1xudmFyIGVuYz12b2lkIDA7dHJ5ey8vIHBvb3IgbWFuJ3MgdXRmOCBlbmNvZGluZ1xuZW5jPXVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLl9jb21tZW50KSk7fWNhdGNoKGVycil7ZW5jPXRoaXMuX2NvbW1lbnQ7fWJ1Zj10aGlzLl9idWZmZXIoNStlbmMubGVuZ3RoKTtidWZbMF09MHhGRjtidWZbMV09MHhGRTtidWZbMl09ZW5jLmxlbmd0aCszPj4+OCYweEZGO2J1ZlszXT1lbmMubGVuZ3RoKzMmMHhGRjsvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9lbmMuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24oYyxwb3Mpe2J1Zltwb3MrNF09Yy5jaGFyQ29kZUF0KDApJjB4RkY7fSk7YnVmW2J1Zi5sZW5ndGgtMV09MDt0aGlzLl9jb21tZW50PW51bGw7dGhpcy5vbkRhdGEoYnVmKTt9aWYodGhpcy5fbWFya2VyQ29kZT09PTB4RTApey8vIEFQUDAsIDE0LWJ5dGUgSkZJRiBoZWFkZXJcbnRoaXMuX3N0YXRlPVNFR01FTlRfUElQRTt9ZWxzZSBpZih0aGlzLl9tYXJrZXJDb2RlPT09MHhFMSl7Ly8gQVBQMSwgRXhpZiBjYW5kaWRhdGVcbnRoaXMuX3N0YXRlPXRoaXMuX2ZpbHRlciYmdGhpcy5fcmVtb3ZlRXhpZj9TRUdNRU5UX0lHTk9SRTovLyBpZ25vcmUgaWYgd2UgcmVtb3ZlIGJvdGhcblNFR01FTlRfQlVGRkVSO31lbHNlIGlmKHRoaXMuX21hcmtlckNvZGU9PT0weEUyfHx0aGlzLl9tYXJrZXJDb2RlPT09MHhFRSl7Ly8gQVBQMiwgSUNDX3Byb2ZpbGUsIEFQUDE0XG50aGlzLl9zdGF0ZT10aGlzLl9yZW1vdmVJQ0NhbmRBUFA/U0VHTUVOVF9JR05PUkU6U0VHTUVOVF9QSVBFO31lbHNlIGlmKHRoaXMuX21hcmtlckNvZGU+MHhFMiYmdGhpcy5fbWFya2VyQ29kZTwweEYwKXsvLyBQaG90b3Nob3AgbWV0YWRhdGEsIGV0Yy5cbnRoaXMuX3N0YXRlPXRoaXMuX2ZpbHRlcj9TRUdNRU5UX0lHTk9SRTpTRUdNRU5UX1BJUEU7fWVsc2UgaWYodGhpcy5fbWFya2VyQ29kZT09PTB4RkUpey8vIENvbW1lbnRzXG50aGlzLl9zdGF0ZT10aGlzLl9yZW1vdmVDb21tZW50cz9TRUdNRU5UX0lHTk9SRTpTRUdNRU5UX1BJUEU7fWVsc2V7Ly8gb3RoZXIgdmFsaWQgaGVhZGVyc1xudGhpcy5fc3RhdGU9dGhpcy5fcmVtb3ZlSW1hZ2U/U0VHTUVOVF9JR05PUkU6U0VHTUVOVF9QSVBFO310aGlzLl9ieXRlc0xlZnQ9TWF0aC5tYXgodGhpcy5fc2VnbWVudExlbmd0aC0yLDApO31icmVhazsvLyByZWFkIHNlZ21lbnQgYW5kIGlnbm9yZSBpdFxuY2FzZSBTRUdNRU5UX0lHTk9SRTpkaT1NYXRoLm1pbih0aGlzLl9ieXRlc0xlZnQsZGF0YS5sZW5ndGgtaSk7aSs9ZGk7dGhpcy5fYnl0ZXNMZWZ0LT1kaTtpZih0aGlzLl9ieXRlc0xlZnQ8PTApdGhpcy5fc3RhdGU9U0VHTUVOVF9TVEFSVDticmVhazsvLyByZWFkIHNlZ21lbnQgYW5kIHBhc3MgaXQgaW50byBvdXRwdXRcbmNhc2UgU0VHTUVOVF9QSVBFOmlmKHRoaXMuX2J5dGVzTGVmdDw9MCl7dGhpcy5fc3RhdGU9U0VHTUVOVF9TVEFSVDt9ZWxzZXt0aGlzLl9zdGF0ZT1TRUdNRU5UX1BJUEVfREFUQTt9YnVmPXRoaXMuX2J1ZmZlcig0KTtidWZbMF09MHhGRjtidWZbMV09dGhpcy5fbWFya2VyQ29kZTtidWZbMl09dGhpcy5fYnl0ZXNMZWZ0KzI+Pj44JjB4RkY7YnVmWzNdPXRoaXMuX2J5dGVzTGVmdCsyJjB4RkY7dGhpcy5vbkRhdGEoYnVmKTticmVhazsvLyByZWFkIHNlZ21lbnQgYW5kIHBhc3MgaXQgaW50byBvdXRwdXRcbmNhc2UgU0VHTUVOVF9QSVBFX0RBVEE6ZGk9TWF0aC5taW4odGhpcy5fYnl0ZXNMZWZ0LGRhdGEubGVuZ3RoLWkpO3RoaXMub25EYXRhKHNsaWNlKGRhdGEsaSxpK2RpKSk7aSs9ZGk7dGhpcy5fYnl0ZXNMZWZ0LT1kaTtpZih0aGlzLl9ieXRlc0xlZnQ8PTApdGhpcy5fc3RhdGU9U0VHTUVOVF9TVEFSVDticmVhazsvLyByZWFkIHNlZ21lbnQgYW5kIGJ1ZmZlciBpdCwgcHJvY2VzcyBhcyBleGlmXG5jYXNlIFNFR01FTlRfQlVGRkVSOnRoaXMuX2FwcDFidWZmZXI9dGhpcy5fYnVmZmVyKHRoaXMuX2J5dGVzTGVmdCk7dGhpcy5fYXBwMXBvcz0wO3RoaXMuX3N0YXRlPVNFR01FTlRfQlVGRkVSX0RBVEE7YnJlYWs7Ly8gcmVhZCBzZWdtZW50IGFuZCBidWZmZXIgaXQsIHByb2Nlc3MgYXMgZXhpZlxuY2FzZSBTRUdNRU5UX0JVRkZFUl9EQVRBOmRpPU1hdGgubWluKHRoaXMuX2J5dGVzTGVmdCxkYXRhLmxlbmd0aC1pKTt2YXIgYnVmX3NsaWNlPXNsaWNlKGRhdGEsaSxpK2RpKTtjb3B5KGJ1Zl9zbGljZSx0aGlzLl9hcHAxYnVmZmVyLHRoaXMuX2FwcDFwb3MpO3RoaXMuX2FwcDFwb3MrPWJ1Zl9zbGljZS5sZW5ndGg7aSs9ZGk7dGhpcy5fYnl0ZXNMZWZ0LT1kaTtpZih0aGlzLl9ieXRlc0xlZnQ8PTApe3ZhciBfYnVmPXRoaXMuX2FwcDFidWZmZXI7Ly8gZXNsaW50LWRpc2FibGUtbGluZVxudGhpcy5fYXBwMWJ1ZmZlcj1udWxsO2lmKHRoaXMuX21hcmtlckNvZGU9PT0weEUxLyogQVBQMSAqLyYmLy8gY29tcGFyZSB3aXRoICdFeGlmXFwwXFwwJ1xuX2J1ZlswXT09PTB4NDUmJl9idWZbMV09PT0weDc4JiZfYnVmWzJdPT09MHg2OSYmX2J1ZlszXT09PTB4NjYmJl9idWZbNF09PT0weDAwJiZfYnVmWzVdPT09MHgwMCl7Ly8gRVhJRlxuaWYodGhpcy5fcmVtb3ZlRXhpZil7X2J1Zj1udWxsO31lbHNle3RyeXtfYnVmPWZpbHRlckV4aWYoX2J1Zix7bWF4RW50cnlTaXplOnRoaXMuX21heEVudHJ5U2l6ZSxvbklGREVudHJ5OnRoaXMuX29uSUZERW50cnl9KTt9Y2F0Y2goZXJyKXtfYnVmPW51bGw7Ly8gdW5leHBlY3RlZCBlcnJvcnMgaW5zaWRlIEVYSUYgcGFyc2VyXG5pZihlcnIuY29kZSYmZXJyLmNvZGUhPT0nRUJBRERBVEEnKXt0aGlzLm9uRXJyb3IoZXJyKTtyZXR1cm47fX19fWVsc2V7Ly8gbm90IEVYSUYsIG1heWJlIFhNUFxuLyogZXNsaW50LWRpc2FibGUgbm8tbG9uZWx5LWlmICovaWYodGhpcy5fZmlsdGVyPT09dHJ1ZSlfYnVmPW51bGw7fWlmKF9idWYpe3ZhciBidWYyPXRoaXMuX2J1ZmZlcig0KTtidWYyWzBdPTB4RkY7YnVmMlsxXT10aGlzLl9tYXJrZXJDb2RlO2J1ZjJbMl09X2J1Zi5sZW5ndGgrMj4+PjgmMHhGRjtidWYyWzNdPV9idWYubGVuZ3RoKzImMHhGRjt0aGlzLm9uRGF0YShidWYyKTt0aGlzLm9uRGF0YShfYnVmKTt9dGhpcy5fc3RhdGU9U0VHTUVOVF9TVEFSVDt9YnJlYWs7Ly8gcmVhZCBpbWFnZSB1bnRpbCB3ZSBnZXQgRkZcbmNhc2UgSU1BR0U6dmFyIHN0YXJ0PWk7d2hpbGUoaTxkYXRhLmxlbmd0aCl7aWYoZGF0YVtpXT09PTB4RkYpe2lmKGkrMTxkYXRhLmxlbmd0aCl7Yj1kYXRhW2krMV07Ly8gc2tpcCBGRiBhbmQgcmVzdGFydCBtYXJrZXJzXG5pZihiPT09MHgwMHx8Yj49MHhEMCYmYjwweEQ4KXtpKz0yO2NvbnRpbnVlO319YnJlYWs7fWkrPTE7fWlmKCF0aGlzLl9yZW1vdmVJbWFnZSl7dGhpcy5vbkRhdGEoc2xpY2UoZGF0YSxzdGFydCxpKSk7fWlmKGk8ZGF0YS5sZW5ndGgpe3RoaXMuX3N0YXRlPUlNQUdFX0ZGO2krPTE7fWJyZWFrOy8vIHByb2Nlc3MgcG9zc2libGUgc2VnbWVudCBpbnNpZGUgaW1hZ2VcbmNhc2UgSU1BR0VfRkY6Ly8gMDAgLSBlc2NhcGVkIEZGLCBEMC1ENyAtIHJlc3RhcnQgbWFya2VycywgRkYgLSBqdXN0IHBhZGRpbmdcbmlmKGI9PT0weDAwfHxiPj0weEQwJiZiPDB4RDh8fGI9PT0weEZGKXtpZighdGhpcy5fcmVtb3ZlSW1hZ2Upe3RoaXMub25EYXRhKHRoaXMuX2J1ZmZlcihbMjU1LGJdKSk7fXRoaXMuX3N0YXRlPWI9PT0weEZGP0lNQUdFX0ZGOklNQUdFO2krPTE7YnJlYWs7fXRoaXMuX3N0YXRlPVNFR01FTlRfTUFSS0VSO2JyZWFrOy8vIGlnbm9yZSB0aGUgcmVzdCBvZiB0aGUgZGF0YVxuY2FzZSBGSU5BTDppKz0xO2JyZWFrO319dGhpcy5fYnl0ZXNSZWFkKz1kYXRhLmxlbmd0aDt9O0pwZWdGaWx0ZXIucHJvdG90eXBlLmVuZD1mdW5jdGlvbigpe3N3aXRjaCh0aGlzLl9zdGF0ZSl7Y2FzZSBGSUxFX1NUQVJUOmNhc2UgRklMRV9TVEFSVF9GRjpjYXNlIFNFR01FTlRfSUdOT1JFOmNhc2UgU0VHTUVOVF9QSVBFOmNhc2UgU0VHTUVOVF9QSVBFX0RBVEE6Y2FzZSBTRUdNRU5UX0JVRkZFUjpjYXNlIFNFR01FTlRfQlVGRkVSX0RBVEE6Ly8gaW4gdGhvc2UgNiBzdGF0ZXMgYXJiaXRyYXJ5IGRhdGEgb2YgYSBmaXhlZCBsZW5ndGhcbi8vIGlzIGV4cGVjdGVkLCBhbmQgd2UgZGlkbid0IGdldCBhbnlcbi8vXG50aGlzLl9lcnJvcihcInVuZXhwZWN0ZWQgZW5kIG9mIGZpbGUgKG9mZnNldCBcIi5jb25jYXQodG9IZXgodGhpcy5fYnl0ZXNSZWFkKSxcIilcIiksJ0VCQUREQVRBJyk7YnJlYWs7Y2FzZSBGSU5BTDpicmVhaztkZWZhdWx0Oi8vIG90aGVyd2lzZSBqdXN0IHNpbXVsYXRlIEVPSSBzZWdtZW50XG4vL1xudGhpcy5wdXNoKHRoaXMuX2J1ZmZlcihbMHhGRiwweEQ5XSkpO319O0pwZWdGaWx0ZXIucHJvdG90eXBlLm9uRGF0YT1mdW5jdGlvbihjaHVuayl7dGhpcy5vdXRwdXQucHVzaChjaHVuayk7fTtKcGVnRmlsdGVyLnByb3RvdHlwZS5vbkVuZD1mdW5jdGlvbigpe307SnBlZ0ZpbHRlci5wcm90b3R5cGUub25FcnJvcj1mdW5jdGlvbihlcnIpe3Rocm93IGVycjt9Oy8vIENvbmNhdGVuYXRlIG11bHRpcGxlIFVpbnQ4QXJyYXlzXG52YXIgYXJyYXlDb25jYXQ9ZnVuY3Rpb24gYXJyYXlDb25jYXQobGlzdCl7dmFyIHNpemU9MDt2YXIgcG9zPTA7Zm9yKHZhciBpPTA7aTxsaXN0Lmxlbmd0aDtpKz0xKXtzaXplKz1saXN0W2ldLmxlbmd0aDt9dmFyIHJlc3VsdD1uZXcgVWludDhBcnJheShzaXplKTtmb3IodmFyIF9pMj0wO19pMjxsaXN0Lmxlbmd0aDtfaTIrPTEpe3Jlc3VsdC5zZXQobGlzdFtfaTJdLHBvcyk7cG9zKz1saXN0W19pMl0ubGVuZ3RoO31yZXR1cm4gcmVzdWx0O307dmFyIGdldEpwZWdIZWFkZXI9ZnVuY3Rpb24gZ2V0SnBlZ0hlYWRlcihmaWxlKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe2lmKCFmaWxlKXtyZXNvbHZlKCk7cmV0dXJuO312YXIgcmVhZGVyPW5ldyBGaWxlUmVhZGVyKCk7cmVhZGVyLm9ubG9hZGVuZD1mdW5jdGlvbigpe3ZhciBmaWxlRGF0YT1uZXcgVWludDhBcnJheShyZWFkZXIucmVzdWx0KTtpZihmaWxlRGF0YVswXT09PTB4RkYmJmZpbGVEYXRhWzFdPT09MHhEOCl7Ly8gb25seSBrZWVwIGNvbW1lbnRzIGFuZCBleGlmIGluIGhlYWRlclxudmFyIGZpbHRlcj1KcGVnRmlsdGVyKHtyZW1vdmVJbWFnZTp0cnVlLGZpbHRlcjp0cnVlLHJlbW92ZUlDQzp0cnVlfSk7dHJ5e2ZpbHRlci5wdXNoKGZpbGVEYXRhKTtmaWx0ZXIuZW5kKCk7fWNhdGNoKGVycil7cmVqZWN0KG5ldyBFcnJvcignQmFkIGltYWdlLicpKTtyZXR1cm47fXZhciB0bXA9YXJyYXlDb25jYXQoZmlsdGVyLm91dHB1dCk7Ly8gY3V0IG9mZiBsYXN0IDIgYnl0ZXMgKEVPSSwgMHhGRkQ5KSxcbi8vIHRoZXkgYXJlIGFsd2F5cyBhZGRlZCBieSBmaWx0ZXJfanBlZyBvbiBlbmRcbnJlc29sdmUodG1wLnN1YmFycmF5KDAsdG1wLmxlbmd0aC0yKSk7fXJlc29sdmUoKTt9O3JlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihmaWxlKTt9KTt9O3ZhciBwaWNhJDE9cGljYSh7dGlsZToyMDB9KTt2YXIgX3Jlc2l6ZUltYWdlPWZ1bmN0aW9uIHJlc2l6ZUltYWdlKGZpbGUsY29uZmlnKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe3ZhciBzbGljZT1maWxlLnNsaWNlfHxmaWxlLndlYmtpdFNsaWNlfHxmaWxlLm1velNsaWNlO3ZhciBleHQ9ZmlsZS5uYW1lLnNwbGl0KCcuJykucG9wKCkudG9Mb3dlckNhc2UoKTtpZihbJ2JtcCcsJ2pwZycsJ2pwZWcnLCdwbmcnXS5pbmRleE9mKGV4dCk9PT0tMSl7cmVzb2x2ZShmaWxlKTsvLyBTa2lwIHJlc2l6ZVxucmV0dXJuO312YXIganBlZ0hlYWRlcjt2YXIgaW1nPW5ldyBJbWFnZSgpO2ltZy5vbmxvYWQ9ZnVuY3Rpb24oKXt3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTChpbWcuc3JjKTt2YXIgcXVhbGl0eT1leHQ9PT0nanBlZyd8fGV4dD09PSdqcGcnPzM6dW5kZWZpbmVkO3ZhciB3aWR0aD1NYXRoLm1pbihpbWcuaGVpZ2h0KmNvbmZpZy53aWR0aC9jb25maWcuaGVpZ2h0LGltZy53aWR0aCk7dmFyIGFscGhhPWV4dD09PSdwbmcnfHxmaWxlLnR5cGU9PT0naW1hZ2UvcG5nJzt2YXIgc291cmNlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO3ZhciBkZXN0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO3ZhciB1bnNoYXJwQW1vdW50PTgwO3ZhciB1bnNoYXJwUmFkaXVzPTAuNjt2YXIgdW5zaGFycFRocmVzaG9sZD0yO3NvdXJjZS53aWR0aD13aWR0aDtzb3VyY2UuaGVpZ2h0PWltZy5oZWlnaHQ7ZGVzdC53aWR0aD1jb25maWcud2lkdGg7ZGVzdC5oZWlnaHQ9Y29uZmlnLmhlaWdodDtzb3VyY2UuZ2V0Q29udGV4dCgnMmQnKS5kcmF3SW1hZ2UoaW1nLDAsMCx3aWR0aCxpbWcuaGVpZ2h0KTtwaWNhJDEucmVzaXplKHNvdXJjZSxkZXN0LHthbHBoYTphbHBoYSx1bnNoYXJwQW1vdW50OnVuc2hhcnBBbW91bnQsdW5zaGFycFJhZGl1czp1bnNoYXJwUmFkaXVzLHVuc2hhcnBUaHJlc2hvbGQ6dW5zaGFycFRocmVzaG9sZH0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gcGljYSQxLnRvQmxvYihkZXN0LGZpbGUudHlwZSxxdWFsaXR5KTt9KS50aGVuKGZ1bmN0aW9uKGJsb2Ipe3ZhciBqcGVnQmxvYjt2YXIganBlZ0JvZHk7aWYoanBlZ0hlYWRlcil7Ly8gcmVtb3ZlIEpQRUcgaGVhZGVyICgyIGJ5dGVzKSBhbmQgSkZJRiBzZWdtZW50ICgxOCBieXRlcyksXG4vLyBhc3N1bWluZyBKRklGIGlzIGFsd2F5cyBwcmVzZW50IGFuZCBhbHdheXMgdGhlIHNhbWUgaW4gYWxsXG4vLyBpbWFnZXMgZnJvbSBjYW52YXNcbmpwZWdCb2R5PXNsaWNlLmNhbGwoYmxvYiwyMCk7anBlZ0Jsb2I9bmV3IEJsb2IoW2pwZWdIZWFkZXIsanBlZ0JvZHldLHt0eXBlOmZpbGUudHlwZX0pO312YXIgbmFtZT1maWxlLm5hbWU7ZmlsZT1qcGVnQmxvYnx8YmxvYjtmaWxlLm5hbWU9bmFtZTtyZXNvbHZlKGZpbGUpO30pO307aW1nLm9uZXJyb3I9ZnVuY3Rpb24oKXt3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTChpbWcuc3JjKTtyZWplY3QobmV3IEVycm9yKCdCYWQgaW1hZ2UuJykpO307Z2V0SnBlZ0hlYWRlcihmaWxlKS50aGVuKGZ1bmN0aW9uKGhlYWRlcil7anBlZ0hlYWRlcj1oZWFkZXI7aW1nLnNyYz13aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKTt9KTt9KTt9Oy8vIENvbmNhdGVuYXRlIG11bHRpcGxlIFVpbnQ4QXJyYXlzXG52YXIgYXJyYXlDb25jYXQkMT1mdW5jdGlvbiBhcnJheUNvbmNhdCQxKGxpc3Qpe3ZhciBzaXplPTA7dmFyIHBvcz0wO2Zvcih2YXIgaT0wO2k8bGlzdC5sZW5ndGg7aSs9MSl7c2l6ZSs9bGlzdFtpXS5sZW5ndGg7fXZhciByZXN1bHQ9bmV3IFVpbnQ4QXJyYXkoc2l6ZSk7Zm9yKHZhciBfaTM9MDtfaTM8bGlzdC5sZW5ndGg7X2kzKz0xKXtyZXN1bHQuc2V0KGxpc3RbX2kzXSxwb3MpO3Bvcys9bGlzdFtfaTNdLmxlbmd0aDt9cmV0dXJuIHJlc3VsdDt9O3ZhciBjbGVhbnVwSnBlZ0V4aWY9ZnVuY3Rpb24gY2xlYW51cEpwZWdFeGlmKGZpbGUpe3ZhciBrZWVwT3JpZW50YXRpb249YXJndW1lbnRzLmxlbmd0aD4xJiZhcmd1bWVudHNbMV0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzFdOmZhbHNlO3ZhciBrZWVwSUNDYW5kQVBQPWFyZ3VtZW50cy5sZW5ndGg+MiYmYXJndW1lbnRzWzJdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1syXTpmYWxzZTtyZXR1cm4gYmxvYlRvQXJyYXlCdWZmZXIoZmlsZSkudGhlbihmdW5jdGlvbihmaWxlQXJyYXkpe3ZhciBmaWxlRGF0YT1uZXcgVWludDhBcnJheShmaWxlQXJyYXkpO3ZhciBkZWZhdWx0T3JpZW50YXRpb249ZXhpZi5nZXRPcmllbnRhdGlvbihmaWxlQXJyYXkpO2lmKGZpbGVEYXRhWzBdPT09MHhGRiYmZmlsZURhdGFbMV09PT0weEQ4KXsvLyBvbmx5IGtlZXAgY29tbWVudHMgYW5kIGV4aWYgaW4gaGVhZGVyXG52YXIgZmlsdGVyPUpwZWdGaWx0ZXIoe3JlbW92ZUV4aWY6dHJ1ZSxyZW1vdmVDb21tZW50czp0cnVlLGZpbHRlcjp0cnVlLHJlbW92ZUlDQ2FuZEFQUDoha2VlcElDQ2FuZEFQUH0pO3RyeXtmaWx0ZXIucHVzaChmaWxlRGF0YSk7ZmlsdGVyLmVuZCgpO31jYXRjaChlcnIpe2NvbnNvbGUuZXJyb3IoZXJyKTtyZXR1cm4gZmlsZTt9dmFyIHRtcD1hcnJheUNvbmNhdCQxKGZpbHRlci5vdXRwdXQpOy8vIGN1dCBvZmYgbGFzdCAyIGJ5dGVzIChFT0ksIDB4RkZEOSksXG4vLyB0aGV5IGFyZSBhbHdheXMgYWRkZWQgYnkgZmlsdGVyX2pwZWcgb24gZW5kXG52YXIgbmV3RmlsZUJ1ZmZBcnJheT10bXAuc3ViYXJyYXkoMCx0bXAubGVuZ3RoLTIpO2lmKGtlZXBPcmllbnRhdGlvbiYmZGVmYXVsdE9yaWVudGF0aW9uKXt2YXIgbmV3RXhpZj1leGlmLmdlbmVyYXRlRXhpZk9yaWVudGF0aW9uKGRlZmF1bHRPcmllbnRhdGlvbik7bmV3RmlsZUJ1ZmZBcnJheT1leGlmLm92ZXJ3cml0ZUluRmlsZShuZXdGaWxlQnVmZkFycmF5LmJ1ZmZlcixuZXdFeGlmKTt9cmV0dXJuIG5ldyBCbG9iKFtuZXdGaWxlQnVmZkFycmF5XSk7fXJldHVybiBmaWxlO30pO307Ly8gR2VuZXJhdGVzIGd1aWQtbGlrZSByYW5kb20gc3RyaW5nXG52YXIgZ3VpZD1mdW5jdGlvbiBndWlkKGxlbil7Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5yZXR1cm4gbmV3IEFycmF5KGxlbikuam9pbigpLnJlcGxhY2UoLygufCQpL2csZnVuY3Rpb24oKXtyZXR1cm4oTWF0aC5yYW5kb20oKSozNnwwKS50b1N0cmluZygzNilbTWF0aC5yYW5kb20oKTwwLjU/J3RvU3RyaW5nJzondG9VcHBlckNhc2UnXSgpO30pO307LyoqXG4gICAqIFJldHVybiBhIG5vcm1hbGl6ZWQgZmlsZSBzaXplIGFzIG51bWJlciBvciBudWxsIGlmIGNvbmRpdGlvbnMgYXJlIG5vdCBmdWxsZmlsbGVkXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaWxlXG4gICAqIEByZXR1cm5zIHtudW1iZXJ8bnVsbH1cbiAgICovdmFyIG5vcm1hbGl6ZUZpbGVTaXplPWZ1bmN0aW9uIG5vcm1hbGl6ZUZpbGVTaXplKGZpbGUpe3ZhciBub3JtYWxpemVkRmlsZVNpemU9bnVsbDtpZihmaWxlLnNpemUpe2lmKHR5cGVvZiBmaWxlLnNpemU9PT0nbnVtYmVyJyl7bm9ybWFsaXplZEZpbGVTaXplPWZpbGUuc2l6ZTt9ZWxzZSBpZih0eXBlb2YgZmlsZS5zaXplPT09J3N0cmluZycmJmZpbGUuc2l6ZT09PXBhcnNlSW50KGZpbGUuc2l6ZSwxMCkudG9TdHJpbmcoKSl7Ly8gY29udmVydCB3aGVuIGl0J3MgXCIyMDBcIiwgYnV0IG5vdCB3aGVuIGl0J3MgXCIyMDB4MjUwXCIgKGVnLiBmYWNlYm9vaywgaW5zdGFncmFtKVxubm9ybWFsaXplZEZpbGVTaXplPXBhcnNlSW50KGZpbGUuc2l6ZSwxMCk7fX1yZXR1cm4gbm9ybWFsaXplZEZpbGVTaXplO307LyoqXG4gICAqIFJldHVybiBhIG5vcm1hbGl6ZWQgZmlsZSBvYmplY3QgZnJvbSBkaWZmZXJlbnQgc291cmNlc1xuICAgKiBAcGFyYW0ge29iamVjdH0gZmlsZSAtIGZpbGUgb2JqZWN0IHRvIGJlIG5vcm1hbGl6ZWRcbiAgICogQHBhcmFtIHtvYmplY3R9IGNsb3VkUGFyYW1zXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjbG91ZFBhcmFtcy5jdXJyZW50Q2xvdWQgLSBzZXR0aW5ncyBvZiBjdXJyZW50bHkgc2VsZWN0ZWQgY2xvdWQgcHJvdmlkZXJcbiAgICogQHBhcmFtIHtvYmplY3R9IGNsb3VkUGFyYW1zLmNsb3VkRm9sZGVycyAtIGxpc3Qgb2YgYWxsIGZvbGRlcnMgb2YgdGhlIHNlbGVjdGVkIGNsb3VkXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjbG91ZFBhcmFtcy5zZWxlY3RlZENsb3VkUGF0aCAtIHBhdGggdG8gdGhlIHNlbGVjdGVkIGZvbGRlclxuICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgKi92YXIgbm9ybWFsaXplRmlsZT1mdW5jdGlvbiBub3JtYWxpemVGaWxlKGZpbGUsX3JlZjMpe3ZhciBjdXJyZW50Q2xvdWQ9X3JlZjMuY3VycmVudENsb3VkLGNsb3VkRm9sZGVycz1fcmVmMy5jbG91ZEZvbGRlcnMsc2VsZWN0ZWRDbG91ZFBhdGg9X3JlZjMuc2VsZWN0ZWRDbG91ZFBhdGg7aWYoZmlsZSBpbnN0YW5jZW9mIEZpbGV8fGZpbGUgaW5zdGFuY2VvZiBCbG9iKXtmaWxlPXtzb3VyY2U6J2xvY2FsX2ZpbGVfc3lzdGVtJyxtaW1ldHlwZTpmaWxlLnR5cGUsbmFtZTpmaWxlLm5hbWUscGF0aDpmaWxlLnBhdGh8fGZpbGUubmFtZSxzaXplOmZpbGUuc2l6ZSxvcmlnaW5hbEZpbGU6ZmlsZX07fWlmKGZpbGUuc291cmNlPT09J2RyYWdnZWQtZnJvbS13ZWInKXtmaWxlLm5hbWU9ZmlsZS51cmwuc3BsaXQoJy8nKS5wb3AoKTtmaWxlLnBhdGg9ZmlsZS51cmw7ZmlsZS5taW1ldHlwZT0ndGV4dC9odG1sJzt2YXIgZXh0PWZpbGUudXJsLnNwbGl0KCcuJykucG9wKCk7dmFyIGFsbG93ZWQ9WydqcGcnLCdqcGVnJywncG5nJywndGlmZicsJ2dpZicsJ2JtcCddO2lmKGV4dCYmYWxsb3dlZC5pbmRleE9mKGV4dC50b0xvd2VyQ2FzZSgpKSE9PS0xKXtmaWxlLnRodW1ibmFpbD1maWxlLnVybDtmaWxlLm1pbWV0eXBlPVwiaW1hZ2UvXCIuY29uY2F0KGV4dCk7fX0vLyBsaW5rX3BhdGggZXhpc3RzIG9uIHJlc3BvbnNlcyBmcm9tIGNsb3VkKCkubWV0YWRhdGEoLi4uKVxuaWYoZmlsZS5saW5rX3BhdGgpe2ZpbGUuc291cmNlPSd1cmwnO2ZpbGUucGF0aD1maWxlLmxpbmtfcGF0aDtmaWxlLm5hbWU9ZmlsZS5kaXNwbGF5X25hbWU7ZmlsZS5taW1ldHlwZT1maWxlLnR5cGU7fS8vIFJlY29uc3RydWN0IFwib3JpZ2luYWwgcGF0aFwiIGZvciBjbG91ZCBmaWxlcyBmcm9tIGN1cnJlbnQgcGF0aHNcbi8vIGJlY2F1c2UgZmlsZSBwYXRocyBmcm9tIHRoZSBBUEkgYXJlIG5vdCBodW1hbiByZWFkYWJsZSBhbmQgZG8gbm90XG4vLyByZXByZXNlbnQgdGhlIGVudGlyZSBmb2xkZXIgdHJlZVxuaWYoZmlsZS5zb3VyY2VLaW5kPT09J2Nsb3VkJyYmY3VycmVudENsb3VkJiZjdXJyZW50Q2xvdWQucGF0aCl7dmFyIG9yaWdpbmFsUGF0aD1jdXJyZW50Q2xvdWQucGF0aC5tYXAoZnVuY3Rpb24ocCl7cmV0dXJuIGNsb3VkRm9sZGVyc1twXSYmY2xvdWRGb2xkZXJzW3BdLm5hbWU7fSkuZmlsdGVyKGZ1bmN0aW9uKHApe3JldHVybiBwO30pLmpvaW4oJy8nKTsvLyBGb2xkZXIgc2VsZWN0aW9uIHNldHMgYSBcInNlbGVjdGVkXCIgcGF0aCBzbyB3ZSBjYW4gZGV0ZXJtaW5lIHRoZSBwYXJlbnQgZm9sZGVyIG9mIHRoZSBzZWxlY3RlZCBmaWxlc1xudmFyIGZvbGRlck5hbWU9Y2xvdWRGb2xkZXJzW3NlbGVjdGVkQ2xvdWRQYXRoXSYmY2xvdWRGb2xkZXJzW3NlbGVjdGVkQ2xvdWRQYXRoXS5uYW1lO2lmKGZvbGRlck5hbWUpe29yaWdpbmFsUGF0aD1vcmlnaW5hbFBhdGg/XCJcIi5jb25jYXQob3JpZ2luYWxQYXRoLFwiL1wiKS5jb25jYXQoZm9sZGVyTmFtZSk6Zm9sZGVyTmFtZTt9ZmlsZS5vcmlnaW5hbFBhdGg9b3JpZ2luYWxQYXRoP1wiL1wiLmNvbmNhdChvcmlnaW5hbFBhdGgsXCIvXCIpLmNvbmNhdChmaWxlLm5hbWUpOlwiL1wiLmNvbmNhdChmaWxlLm5hbWUpO31maWxlLnV1aWQ9Z3VpZCgxNik7ZmlsZS51cGxvYWRJZD1maWxlLnV1aWQ7ZmlsZS5wcm9ncmVzcz0wO2ZpbGUucHJvZ3Jlc3NTaXplPScnO2ZpbGUuc2l6ZT1ub3JtYWxpemVGaWxlU2l6ZShmaWxlKTtyZXR1cm4gZmlsZTt9Oy8vIEFsbCBmaWxlcyBpbiB1cGxvYWQgcXVldWUgbmVlZCB0byBiZSBzaW1wbGUgb2JqZWN0cyB3aXRoIHJlcXVpcmVkIFwic291cmNlXCIgYW5kIFwibmFtZVwiIGtleXMuXG52YXIgbG9nPWxvZ2dlci5jb250ZXh0KCdwaWNrZXInKTt2YXIgaXNOdW1iZXI9ZnVuY3Rpb24gaXNOdW1iZXIobil7cmV0dXJuIWlzTmFOKHBhcnNlRmxvYXQobikpJiYhaXNOYU4obi0wKTt9O3ZhciBTVEFURVM9e3dhaXRpbmc6J3dhaXRpbmcnLHVwbG9hZGluZzondXBsb2FkaW5nJyxkb25lOidkb25lJyxmYWlsZWQ6J2ZhaWxlZCcscGF1c2VkOidwYXVzZWQnfTt2YXIgdXBsb2FkUXVldWU9ZnVuY3Rpb24gdXBsb2FkUXVldWUoYXBpQ2xpZW50KXt2YXIgaW5pdGlhbFN0YXRlPWFyZ3VtZW50cy5sZW5ndGg+MSYmYXJndW1lbnRzWzFdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1sxXTp7fTt2YXIgYWRkRmlsZT1mdW5jdGlvbiBhZGRGaWxlKGNvbnRleHQsZmlsZSl7dmFyIG1heEZpbGVzUmVhY2hlZD1mdW5jdGlvbiBtYXhGaWxlc1JlYWNoZWQoKXtpZighY29udGV4dC5nZXR0ZXJzLm1heEZpbGVzfHwoY29udGV4dC5nZXR0ZXJzLmZpbGVDb3VudHx8MCk8Y29udGV4dC5nZXR0ZXJzLm1heEZpbGVzKXtyZXR1cm4gZmFsc2U7fXZhciBmaWxlc1RleHQ9Y29udGV4dC5nZXR0ZXJzLm1heEZpbGVzPT09MT8nZmlsZSc6J2ZpbGVzJzt2YXIgZXJyb3JNc2c9ZXJyb3JzKGNvbnRleHQuZ2V0dGVycy5sYW5nLGNvbnRleHQuZ2V0dGVycy5jdXN0b21UZXh0KS5FUlJPUl9NQVhfRklMRVNfUkVBQ0hFRC5yZXBsYWNlKCd7bWF4RmlsZXN9Jyxjb250ZXh0LmdldHRlcnMubWF4RmlsZXMpLnJlcGxhY2UoJ3tmaWxlc1RleHR9JyxmaWxlc1RleHQpO2NvbnRleHQuZGlzcGF0Y2goJ3Nob3dOb3RpZmljYXRpb24nLGVycm9yTXNnKTtyZXR1cm4gdHJ1ZTt9Oy8qKlxuICAgICAgICogQ2hlY2sgaWYgZmlsZSBzaXplIGlzIHNtYWxsZXIgdGhhbiBwcm92aWRlZCBpbiBtYXhTaXplIG9wdGlvblxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG5vcm1hbGl6ZWRGaWxlXG4gICAgICAgKi92YXIgZmlsZUlzU21hbGxFbm91Z2g9ZnVuY3Rpb24gZmlsZUlzU21hbGxFbm91Z2gobm9ybWFsaXplZEZpbGUpe2lmKGNvbnRleHQuZ2V0dGVycy5tYXhTaXplPT09dW5kZWZpbmVkfHwhbm9ybWFsaXplZEZpbGUuc2l6ZSl7cmV0dXJuIHRydWU7fWlmKG5vcm1hbGl6ZWRGaWxlLnNpemU8Y29udGV4dC5nZXR0ZXJzLm1heFNpemUpe3JldHVybiB0cnVlO312YXIgZXJyb3JNc2c9ZXJyb3JzKGNvbnRleHQuZ2V0dGVycy5sYW5nLGNvbnRleHQuZ2V0dGVycy5jdXN0b21UZXh0KS5FUlJPUl9GSUxFX1RPT19CSUcucmVwbGFjZSgne2Rpc3BsYXlOYW1lfScsZGlzcGxheU5hbWUobm9ybWFsaXplZEZpbGUpKS5yZXBsYWNlKCd7cm91bmRGaWxlU2l6ZX0nLHJlYWRhYmxlU2l6ZShjb250ZXh0LmdldHRlcnMubWF4U2l6ZSkpO2NvbnRleHQuZGlzcGF0Y2goJ3Nob3dOb3RpZmljYXRpb24nLGVycm9yTXNnKTtyZXR1cm4gZmFsc2U7fTt2YXIgY2hlY2tGaWxlU2l6ZT1mdW5jdGlvbiBjaGVja0ZpbGVTaXplKHJhd0ZpbGUsb3B0cyl7aWYoIW9wdHMuc2hvdWxkQmxvY2spe3JldHVybiBQcm9taXNlLnJlc29sdmUoKTt9aWYoZmlsZS50eXBlLmluZGV4T2YoJ2ltYWdlJykhPT0wKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7fXJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7dmFyIGZyPW5ldyBGaWxlUmVhZGVyKCk7ZnIub25sb2FkPWZ1bmN0aW9uKCl7dmFyIGltZz1uZXcgSW1hZ2UoKTtpbWcub25sb2FkPWZ1bmN0aW9uKCl7aWYob3B0cy5pbWFnZU1pbiYmb3B0cy5pbWFnZU1pblswXT5pbWcud2lkdGgpe3JldHVybiByZWplY3QobmV3IEVycm9yKFwiSW5jb3JyZWN0IGltYWdlIHNpemUuIE1pbmltdW0gd2lkdGggaXMgXCIuY29uY2F0KG9wdHMuaW1hZ2VNaW5bMF0sXCJweCBidXQgaW1hZ2UgaGF2ZSBcIikuY29uY2F0KGltZy53aWR0aCxcInB4XCIpKSk7fWlmKG9wdHMuaW1hZ2VNaW4mJm9wdHMuaW1hZ2VNaW5bMV0+aW1nLmhlaWdodCl7cmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJJbmNvcnJlY3QgaW1hZ2Ugc2l6ZS4gTWluaW11bSBoZWlnaHQgaXMgXCIuY29uY2F0KG9wdHMuaW1hZ2VNaW5bMV0sXCJweCBidXQgaW1hZ2UgaGF2ZSBcIikuY29uY2F0KGltZy5oZWlnaHQsXCJweFwiKSkpO31pZihvcHRzLmltYWdlTWF4JiZvcHRzLmltYWdlTWF4WzBdPGltZy53aWR0aCl7cmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJJbmNvcnJlY3QgaW1hZ2Ugc2l6ZS4gTWF4aW11bSB3aWR0aCBpcyBcIi5jb25jYXQob3B0cy5pbWFnZU1heFswXSxcInB4IGJ1dCBpbWFnZSBoYXZlIFwiKS5jb25jYXQoaW1nLndpZHRoLFwicHhcIikpKTt9aWYob3B0cy5pbWFnZU1heCYmb3B0cy5pbWFnZU1heFsxXTxpbWcuaGVpZ2h0KXtyZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihcIkluY29ycmVjdCBpbWFnZSBzaXplLiBNYXhpbXVtIGhlaWdodCBpcyBcIi5jb25jYXQob3B0cy5pbWFnZU1heFsxXSxcInB4IGJ1dCBpbWFnZSBoYXZlIFwiKS5jb25jYXQoaW1nLmhlaWdodCxcInB4XCIpKSk7fXJldHVybiByZXNvbHZlKCk7fTtpbWcuc3JjPWZyLnJlc3VsdDt9O2ZyLnJlYWRBc0RhdGFVUkwocmF3RmlsZSk7fSk7fTt2YXIgZmlsZUlzQWNjZXB0YWJsZT1mdW5jdGlvbiBmaWxlSXNBY2NlcHRhYmxlKG5vcm1hbGl6ZWRGaWxlKXtpZihjYW5BY2NlcHRUaGlzRmlsZShub3JtYWxpemVkRmlsZSxjb250ZXh0LmdldHRlcnMuYWNjZXB0KSl7cmV0dXJuIHRydWU7fXZhciBlcnJvck1zZz1lcnJvcnMoY29udGV4dC5nZXR0ZXJzLmxhbmcsY29udGV4dC5nZXR0ZXJzLmN1c3RvbVRleHQpLkVSUk9SX0ZJTEVfTk9UX0FDQ0VQVEFCTEUucmVwbGFjZSgne2Rpc3BsYXlOYW1lfScsZGlzcGxheU5hbWUobm9ybWFsaXplZEZpbGUpKS5yZXBsYWNlKCd7dHlwZXN9Jyxjb250ZXh0LmdldHRlcnMuYWNjZXB0KTtjb250ZXh0LmRpc3BhdGNoKCdzaG93Tm90aWZpY2F0aW9uJyxlcnJvck1zZyk7cmV0dXJuIGZhbHNlO307dmFyIGZpcmVPbkZpbGVTZWxlY3RlZD1mdW5jdGlvbiBmaXJlT25GaWxlU2VsZWN0ZWQobm9ybWFsaXplZEZpbGUpe2lmKCFjb250ZXh0LmdldHRlcnMub25GaWxlU2VsZWN0ZWQpe3JldHVybiBQcm9taXNlLnJlc29sdmUoKTt9cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXt0cnl7dmFyIHJlc3VsdD1jb250ZXh0LmdldHRlcnMub25GaWxlU2VsZWN0ZWQoY29udmVydEZpbGVGb3JPdXRzaWRlV29ybGQobm9ybWFsaXplZEZpbGUsY29udGV4dC5nZXR0ZXJzKSk7aWYocmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSl7cmVzdWx0LnRoZW4ocmVzb2x2ZSlbXCJjYXRjaFwiXShyZWplY3QpO31lbHNle3Jlc29sdmUocmVzdWx0KTt9fWNhdGNoKGVycil7cmVqZWN0KGVycik7fX0pO307dmFyIHN0YXJ0VXBsb2FkSW1tZWRpYXRlbHlNYXliZT1mdW5jdGlvbiBzdGFydFVwbG9hZEltbWVkaWF0ZWx5TWF5YmUoKXtpZihjb250ZXh0LmdldHRlcnMuc3RhcnRVcGxvYWRpbmdXaGVuTWF4RmlsZXNSZWFjaGVkPT09dHJ1ZSYmY29udGV4dC5nZXR0ZXJzLm9ubHlGaWxlc1dhaXRpbmcubGVuZ3RoPT09Y29udGV4dC5nZXR0ZXJzLm1heEZpbGVzKXtjb250ZXh0LmRpc3BhdGNoKCdzdGFydFVwbG9hZGluZycpO319O3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKXsvLyBJZiBmaWxlIGlzIGFscmVhZHkgaW5pdGlhbGl6ZWQgd2Ugc2hvdWxkIHJlbW92ZSBpdCBpbnN0ZWFkXG4vLyBUT0RPOiBSZW5hbWUgdGhpcyB0byBzb21ldGhpbmcgbGlrZSB0b2dnbGVGaWxlIG9yIHNwbGl0IHRoaXMgb3V0XG5pZihmaWxlJiZmaWxlLnN0YXRlIT09dW5kZWZpbmVkKXtjb250ZXh0LmRpc3BhdGNoKCdjYW5jZWxVcGxvYWQnLGZpbGUudXVpZCk7Y29udGV4dC5jb21taXQoJ0RFU0VMRUNUX0ZJTEUnLGZpbGUudXVpZCk7cmVzb2x2ZSgpO3JldHVybjt9Ly8gYWRkQ2xvdWRGb2xkZXIgZGlzcGF0Y2hlcyBhZGRGaWxlIGZvciBldmVyeSBmaWxlIGluIHRoZSBmb2xkZXJcbi8vIFRoaXMgcmV0dXJucyBpbW1lZGlhdGVseSBiZWNhdXNlIHdlIGRvbid0IG1hcmsgZm9sZGVycyBmb3IgdGhlIHF1ZXVlXG4vLyBUT0RPIENvbnNpZGVyIGFuIGFwcHJvYWNoIHdoZXJlIGZvbGRlcnMgYXJlIGFkZGVkIChtaWdodCBiZSBsZXNzIGNvbXBsaWNhdGVkPylcbmlmKGZpbGUmJmZpbGUuZm9sZGVyKXtjb250ZXh0LmRpc3BhdGNoKCdhZGRDbG91ZEZvbGRlcicse25hbWU6ZmlsZS5zb3VyY2UscGF0aDpmaWxlLnBhdGh9KTtyZXNvbHZlKCk7cmV0dXJuO312YXIgbm9ybWFsaXplZEZpbGU9bm9ybWFsaXplRmlsZShmaWxlLGNvbnRleHQpO2ZpcmVPbkZpbGVTZWxlY3RlZChub3JtYWxpemVkRmlsZSkudGhlbihmdW5jdGlvbihuZXdGaWxlKXtpZihuZXdGaWxlKXtub3JtYWxpemVkRmlsZT1fb2JqZWN0U3ByZWFkKHt9LG5vcm1hbGl6ZWRGaWxlLHtuYW1lOm5ld0ZpbGUubmFtZXx8bmV3RmlsZS5maWxlbmFtZXx8bm9ybWFsaXplZEZpbGUubmFtZX0pO31jaGVja0ZpbGVTaXplKGZpbGUse2ltYWdlTWF4OmNvbnRleHQuZ2V0dGVycy5pbWFnZU1heCxpbWFnZU1pbjpjb250ZXh0LmdldHRlcnMuaW1hZ2VNaW4sc2hvdWxkQmxvY2s6Y29udGV4dC5nZXR0ZXJzLmltYWdlTWluTWF4QmxvY2t9KS50aGVuKGZ1bmN0aW9uKCl7aWYobWF4RmlsZXNSZWFjaGVkKCkpe3JldHVybiByZXNvbHZlKCk7fWlmKGZpbGVJc0FjY2VwdGFibGUobm9ybWFsaXplZEZpbGUpJiZmaWxlSXNTbWFsbEVub3VnaChub3JtYWxpemVkRmlsZSkpe2xvZygnU2VsZWN0ZWQgZmlsZTonLGZpbGUpO2NvbnRleHQuY29tbWl0KCdJTklUSUFMSVpFX0ZJTEUnLG5vcm1hbGl6ZWRGaWxlKTtjb250ZXh0LmNvbW1pdCgnTUFSS19GSUxFX0FTX1dBSVRJTkcnLG5vcm1hbGl6ZWRGaWxlLnV1aWQpOy8vIElmIHdlIHJlYWNoIG1heEZpbGVzIHdlIG1pZ2h0IGJlIHN0YXJ0aW5nIGFsbCB1cGxvYWRzXG5zdGFydFVwbG9hZEltbWVkaWF0ZWx5TWF5YmUoKTsvLyBTdGFydCB1cGxvYWRpbmcgdGhpcyBmaWxlIGltbWVkaWF0ZWx5IGlmIGJhY2tncm91bmQgdXBsb2FkcyBhcmUgb25cbmlmKCFjb250ZXh0LmdldHRlcnMudXBsb2FkU3RhcnRlZCYmY29udGV4dC5nZXR0ZXJzLnVwbG9hZEluQmFja2dyb3VuZCl7Y29udGV4dC5kaXNwYXRjaCgndXBsb2FkTW9yZU1heWJlJyk7fS8vIFNpbmdsZSBpbWFnZSBmbG93XG5pZihfaXNJbWFnZShub3JtYWxpemVkRmlsZSkmJmlzRWRpdGFibGVJbWFnZShub3JtYWxpemVkRmlsZSkmJmNvbnRleHQuZ2V0dGVycy5tYXhGaWxlcz09PTEmJiFjb250ZXh0LmdldHRlcnMuZGlzYWJsZVRyYW5zZm9ybWVyJiYhY29udGV4dC5nZXR0ZXJzLnVwbG9hZFN0YXJ0ZWQpe2NvbnRleHQuY29tbWl0KCdDSEFOR0VfUk9VVEUnLFsndHJhbnNmb3JtJyxub3JtYWxpemVkRmlsZS51dWlkXSk7fWVsc2UgaWYoY29udGV4dC5nZXR0ZXJzLm1heEZpbGVzPT09MSl7Ly8gR28gdG8gc3VtbWFyeSBzY3JlZW4gZm9yIGEgc2luZ2xlIHNlbGVjdGVkIGZpbGUgKG5vbi1pbWFnZSlcbmNvbnRleHQuY29tbWl0KCdDSEFOR0VfUk9VVEUnLFsnc3VtbWFyeSddKTt9ZWxzZSBpZihjb250ZXh0LmdldHRlcnMubWF4RmlsZXM+MSYmY29udGV4dC5nZXR0ZXJzLmZpbGVDb3VudD09PWNvbnRleHQuZ2V0dGVycy5tYXhGaWxlcyYmY29udGV4dC5nZXR0ZXJzLnJvdXRlWzBdIT09J3N1bW1hcnknKXsvLyBHbyB0byBzdW1tYXJ5IHNjcmVlbiBpZiBtYXhGaWxlcyBpcyByZWFjaGVkXG5jb250ZXh0LmNvbW1pdCgnQ0hBTkdFX1JPVVRFJyxbJ3N1bW1hcnknXSk7fWVsc2UgaWYoY29udGV4dC5nZXR0ZXJzLm1heEZpbGVzPjEmJm5vcm1hbGl6ZWRGaWxlLnNvdXJjZT09PSdsb2NhbF9maWxlX3N5c3RlbScmJmNvbnRleHQuZ2V0dGVycy5yb3V0ZVswXSE9PSdzdW1tYXJ5Jyl7Ly8gR28gdG8gc3VtbWFyeSBzY3JlZW4gYWZ0ZXIgc2VsZWN0aW5nIG11bHRpcGxlIGxvY2FsIGZpbGVzXG5jb250ZXh0LmNvbW1pdCgnQ0hBTkdFX1JPVVRFJyxbJ3N1bW1hcnknXSk7fX1yZXR1cm4gcmVzb2x2ZSgpO30pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oZXJyKXtpZihmaWxlLnV1aWQpe2NvbnRleHQuZGlzcGF0Y2goJ2NhbmNlbFVwbG9hZCcsZmlsZS51dWlkKTtjb250ZXh0LmNvbW1pdCgnREVTRUxFQ1RfRklMRScsZmlsZS51dWlkKTt9Y29udGV4dC5kaXNwYXRjaCgnc2hvd05vdGlmaWNhdGlvbicsZXJyLm1lc3NhZ2U/ZXJyLm1lc3NhZ2U6ZXJyKTtyZXR1cm4gcmVzb2x2ZSgpO30pO30pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oZXJyKXtpZihmaWxlLnV1aWQpe2NvbnRleHQuZGlzcGF0Y2goJ2NhbmNlbFVwbG9hZCcsZmlsZS51dWlkKTtjb250ZXh0LmNvbW1pdCgnREVTRUxFQ1RfRklMRScsZmlsZS51dWlkKTt9Y29udGV4dC5kaXNwYXRjaCgnc2hvd05vdGlmaWNhdGlvbicsZXJyLm1lc3NhZ2U/ZXJyLm1lc3NhZ2U6ZXJyKTtyZXNvbHZlKCk7fSk7fSk7fTt2YXIgc3RhcnRGYWtlUHJvZ3Jlc3M9ZnVuY3Rpb24gc3RhcnRGYWtlUHJvZ3Jlc3MoY29udGV4dCxmaWxlKXt2YXIgY2xhbXA9ZnVuY3Rpb24gY2xhbXAobixtaW4sbWF4KXtpZihuPG1pbilyZXR1cm4gbWluO2lmKG4+bWF4KXJldHVybiBtYXg7cmV0dXJuIG47fTt2YXIgaW5jPWZ1bmN0aW9uIGluYygpe3ZhciBuPWZpbGUucHJvZ3Jlc3MvMTAwO3ZhciBhbW91bnQ7aWYobj4xKXtyZXR1cm47fWlmKG4+PTAmJm48MC4yKWFtb3VudD0wLjE7ZWxzZSBpZihuPj0wLjImJm48MC41KWFtb3VudD0wLjA0O2Vsc2UgaWYobj49MC41JiZuPDAuOClhbW91bnQ9MC4wMjtlbHNlIGlmKG4+PTAuOCYmbjwwLjk5KWFtb3VudD0wLjAwNTtlbHNle2Ftb3VudD0wO31uPWNsYW1wKG4rYW1vdW50LDAsMC45OTQpO2NvbnRleHQuY29tbWl0KCdTRVRfRklMRV9VUExPQURfUFJPR1JFU1MnLHt1dWlkOmZpbGUudXVpZCxwcm9ncmVzczpNYXRoLnJvdW5kKG4qMTAwKX0pO3ZhciBwcm9ncmVzc0V2ZW50PXt0b3RhbEJ5dGVzOk1hdGgubWluKGZpbGUuc2l6ZSxNYXRoLnJvdW5kKGZpbGUuc2l6ZSpNYXRoLm1heChuLDAuMDEpKSksdG90YWxQZXJjZW50Ok1hdGgucm91bmQobioxMDApfTtpZihjb250ZXh0LmdldHRlcnMub25GaWxlVXBsb2FkUHJvZ3Jlc3Mpe2NvbnRleHQuZ2V0dGVycy5vbkZpbGVVcGxvYWRQcm9ncmVzcyhjb252ZXJ0RmlsZUZvck91dHNpZGVXb3JsZChmaWxlLGNvbnRleHQuZ2V0dGVycykscHJvZ3Jlc3NFdmVudCk7fX07dmFyIHdvcms9ZnVuY3Rpb24gd29yaygpe2luYygpO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtpZighZmlsZSlyZXR1cm47aWYoZmlsZS5zdGF0ZSE9PVNUQVRFUy51cGxvYWRpbmcpe2NvbnRleHQuY29tbWl0KCdTRVRfRklMRV9VUExPQURfUFJPR1JFU1MnLHt1dWlkOmZpbGUudXVpZCxwcm9ncmVzczoxMDB9KTtpZihjb250ZXh0LmdldHRlcnMub25GaWxlVXBsb2FkUHJvZ3Jlc3Mpe2NvbnRleHQuZ2V0dGVycy5vbkZpbGVVcGxvYWRQcm9ncmVzcyhjb252ZXJ0RmlsZUZvck91dHNpZGVXb3JsZChmaWxlLGNvbnRleHQuZ2V0dGVycykse3RvdGFsQnl0ZXM6ZmlsZS5zaXplLHRvdGFsUGVyY2VudDoxMDB9KTt9cmV0dXJuO313b3JrKCk7fSwxNTApO307d29yaygpO307Ly8gQSBmaWxlIGNhbiBiZSBtYW51YWxseSBwYXNzZWQgaW4gb3IgcHVsbGVkIGZyb20gc3RhdGVcbnZhciB1cGxvYWRPbmU9ZnVuY3Rpb24gdXBsb2FkT25lKGNvbnRleHQsbWFudWFsRmlsZSl7dmFyIHBlbmRpbmdSZXF1ZXN0O3ZhciBmaWxlPW1hbnVhbEZpbGV8fGNvbnRleHQuZ2V0dGVycy5vbmx5RmlsZXNXYWl0aW5nWzBdO3ZhciB1cGxvYWRDb25maWc9X29iamVjdFNwcmVhZCh7cHJvZ3Jlc3NJbnRlcnZhbDoxMH0sY29udGV4dC5nZXR0ZXJzLnVwbG9hZENvbmZpZyx7b25SZXRyeTpmdW5jdGlvbiBvblJldHJ5KHBheWxvYWQpe2NvbnRleHQuZGlzcGF0Y2goJ2NoZWNrTmV0d29ya1hIUicpO2lmKGNvbnRleHQuZ2V0dGVycy51cGxvYWRDb25maWcmJmNvbnRleHQuZ2V0dGVycy51cGxvYWRDb25maWcub25SZXRyeSl7Y29udGV4dC5nZXR0ZXJzLnVwbG9hZENvbmZpZy5vblJldHJ5KHBheWxvYWQpO319LG9uUHJvZ3Jlc3M6ZnVuY3Rpb24gb25Qcm9ncmVzcyhwcm9ncmVzc0V2ZW50KXtjb250ZXh0LmNvbW1pdCgnU0VUX0ZJTEVfVVBMT0FEX1BST0dSRVNTJyx7dXVpZDpmaWxlLnV1aWQscHJvZ3Jlc3M6cHJvZ3Jlc3NFdmVudC50b3RhbFBlcmNlbnQscHJvZ3Jlc3NTaXplOnJlYWRhYmxlU2l6ZShwcm9ncmVzc0V2ZW50LnRvdGFsQnl0ZXMpfSk7aWYoY29udGV4dC5nZXR0ZXJzLm9uRmlsZVVwbG9hZFByb2dyZXNzKXtjb250ZXh0LmdldHRlcnMub25GaWxlVXBsb2FkUHJvZ3Jlc3MoY29udmVydEZpbGVGb3JPdXRzaWRlV29ybGQoZmlsZSxjb250ZXh0LmdldHRlcnMpLHByb2dyZXNzRXZlbnQpO319fSk7dmFyIHRva2VuPXt9O3ZhciBzdG9yZVRvPV9vYmplY3RTcHJlYWQoe30sY29udGV4dC5nZXR0ZXJzLnN0b3JlVG8pO2lmKGNvbnRleHQuZ2V0dGVycy5kaXNhYmxlU3RvcmFnZUtleSl7aWYoY29udGV4dC5nZXR0ZXJzLnN0b3JlVG8mJmNvbnRleHQuZ2V0dGVycy5zdG9yZVRvLnBhdGgpe3N0b3JlVG8ucGF0aD1cIlwiLmNvbmNhdChjb250ZXh0LmdldHRlcnMuc3RvcmVUby5wYXRoKS5jb25jYXQoZmlsZS5uYW1lKTt9ZWxzZXtzdG9yZVRvLnBhdGg9ZmlsZS5uYW1lO319Ly8gVE9ETyBIb3cgdG8gcmVuYW1lIGZpbGVzIGluIGNsb3Vkcm91dGVyP1xuaWYoZmlsZS5zb3VyY2VLaW5kIT09J2Nsb3VkJyl7c3RvcmVUby5maWxlbmFtZT1maWxlLm5hbWU7fWNvbnRleHQuY29tbWl0KCdNQVJLX0ZJTEVfQVNfVVBMT0FESU5HJyx7dXVpZDpmaWxlLnV1aWQsdG9rZW46dG9rZW59KTtsb2coJ1VwbG9hZCBzdGFydGVkOicsZmlsZSk7LyoqXG4gICAgICAgKiBEaWZmZXJlbnQgc291cmNlcyBhcmUgbWFwcGVkIHRvIHRoZWlyIG93biB1cGxvYWQgbWV0aG9kczpcbiAgICAgICAqIGxvY2FsIGFuZCB0cmFuc2Zvcm1lZCBmaWxlcyAtPiBjbGllbnQudXBsb2FkXG4gICAgICAgKiBjbG91ZCBmaWxlcyAtPiBjbGllbnQuY2xvdWQoKS5zdG9yZS9saW5rXG4gICAgICAgKiBhbnkgdXJscyAtPiBjbGllbnQuc3RvcmVVUkxcbiAgICAgICAqL2lmKGZpbGUudHJhbnNmb3JtZWQpey8vIFN0YXJ0IG11bHRpLXBhcnQgdXBsb2FkXG5wZW5kaW5nUmVxdWVzdD1jb250ZXh0LmRpc3BhdGNoKCdyZXNpemVJbWFnZU1heWJlJyxmaWxlLnRyYW5zZm9ybWVkKS50aGVuKGZ1bmN0aW9uKGJsb2Ipe2NvbnRleHQuZGlzcGF0Y2goJ3J1bkNhbGxiYWNrVXBsb2FkU3RhcnRlZCcsZmlsZS51dWlkKTtyZXR1cm4gYmxvYjt9KS50aGVuKGZ1bmN0aW9uKGJsb2Ipe3ZhciByZW1vdmVFeGlmPWNvbnRleHQuZ2V0dGVycy5yZW1vdmVFeGlmO2lmKHJlbW92ZUV4aWYpe3JldHVybiBjbGVhbnVwSnBlZ0V4aWYoYmxvYixyZW1vdmVFeGlmLmtlZXBPcmllbnRhdGlvbixyZW1vdmVFeGlmLmtlZXBJQ0NhbmRBUFApO31yZXR1cm4gYmxvYjt9KS50aGVuKGZ1bmN0aW9uKGJsb2Ipey8vIEB0b2RvIGZpeCB0ZXN0cyBtb2NrcyBhbmQgdW5jb21tZW50IHRoaXNcbi8vIGlmICghYmxvYikge1xuLy8gICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdNaXNzaW5nIGZpbGUgZWxlbWVudCBmb3IgdXBsb2FkJykpO1xuLy8gfVxuaWYoIWNvbnRleHQuZ2V0dGVycy5maWxlc1tmaWxlLnV1aWRdKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7fS8vIGNvbnZlcnQgc29tZSBzdHJhbmdlIGJsb2IgdG8gY29ycmVjdCBmaWxlIG9iamVjdCB3aXRoIG5hbWVcbmlmKGJsb2ImJmJsb2IudG9TdHJpbmcoKT09PSdbb2JqZWN0IEJsb2JdJyl7Ly8gY3VzdG9tIGJsb2Igd2l0aCBuYW1lIE9vXG5ibG9iPW5ldyBGaWxlKFtibG9iXSxibG9iLm5hbWUpO31yZXR1cm4gYXBpQ2xpZW50LnVwbG9hZChibG9iLHVwbG9hZENvbmZpZyxzdG9yZVRvLHRva2VuLy8gQ2FuY2VsbGF0aW9uL3BhdXNlL3Jlc3VtZSB0b2tlblxuKTt9KTt9ZWxzZSBpZihmaWxlLm9yaWdpbmFsRmlsZSl7Ly8gU3RhcnQgbXVsdGktcGFydCB1cGxvYWRcbnBlbmRpbmdSZXF1ZXN0PWNvbnRleHQuZGlzcGF0Y2goJ3Jlc2l6ZUltYWdlTWF5YmUnLGZpbGUub3JpZ2luYWxGaWxlKS50aGVuKGZ1bmN0aW9uKG5ld0Jsb2Ipey8vIHVwZGF0ZSBpbWFnZSBkYXRhIGlmIGl0IHdhcyByZXNpemVkXG5jb250ZXh0LmNvbW1pdCgnVVBEQVRFX0ZJTEVfQUZURVJfUkVTSVpFJyx7dXVpZDpmaWxlLnV1aWQsYmxvYjpuZXdCbG9ifSk7Y29udGV4dC5kaXNwYXRjaCgncnVuQ2FsbGJhY2tVcGxvYWRTdGFydGVkJyxmaWxlLnV1aWQpO3JldHVybiBuZXdCbG9iO30pLnRoZW4oZnVuY3Rpb24oYmxvYil7dmFyIHJlbW92ZUV4aWY9Y29udGV4dC5nZXR0ZXJzLnJlbW92ZUV4aWY7aWYocmVtb3ZlRXhpZil7YmxvYj1jbGVhbnVwSnBlZ0V4aWYoYmxvYixyZW1vdmVFeGlmLmtlZXBPcmllbnRhdGlvbixyZW1vdmVFeGlmLmtlZXBJQ0NhbmRBUFApO30vLyBAdG9kbyBmaXggdGVzdHMgbW9ja3MgYW5kIHVuY29tbWVudCB0aGlzXG4vLyBpZiAoIWJsb2IpIHtcbi8vICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignTWlzc2luZyBmaWxlIGVsZW1lbnQgZm9yIHVwbG9hZCcpKTtcbi8vIH1cbi8vIEEgZmlsZSBjb3VsZCBiZSBkZXNlbGVjdGVkIGFmdGVyIHJlc2l6ZSBidXQgYmVmb3JlIHVwbG9hZFxuaWYoIWNvbnRleHQuZ2V0dGVycy5maWxlc1tmaWxlLnV1aWRdKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7fS8vIGNvbnZlcnQgc29tZSBzdHJhbmdlIGJsb2IgdG8gY29ycmVjdCBmaWxlIG9iamVjdCB3aXRoIG5hbWVcbmlmKGJsb2ImJmJsb2IudG9TdHJpbmcoKT09PSdbb2JqZWN0IEJsb2JdJyl7Ly8gY3VzdG9tIGJsb2Igd2l0aCBuYW1lIE9vXG5ibG9iPWJsb2JUb0ZpbGUoYmxvYixibG9iLm5hbWUpO31yZXR1cm4gYXBpQ2xpZW50LnVwbG9hZChibG9iLHVwbG9hZENvbmZpZyxzdG9yZVRvLHRva2VuLy8gQ2FuY2VsbGF0aW9uL3BhdXNlL3Jlc3VtZSB0b2tlblxuKTt9KTt9ZWxzZSBpZihmaWxlLnNvdXJjZT09PSd1cmwnfHxmaWxlLnNvdXJjZT09PSdkcmFnZ2VkLWZyb20td2ViJyl7Y29udGV4dC5kaXNwYXRjaCgncnVuQ2FsbGJhY2tVcGxvYWRTdGFydGVkJyxmaWxlLnV1aWQpOy8vIFN0b3JlIGN1c3RvbSBVUkxcbnBlbmRpbmdSZXF1ZXN0PWFwaUNsaWVudC5zdG9yZVVSTChmaWxlLnBhdGgsc3RvcmVUbyx0b2tlbik7fWVsc2UgaWYoZmlsZS5zb3VyY2VLaW5kPT09J2Nsb3VkJyl7dmFyIGN1c3RvbVNvdXJjZT17fTtpZihjb250ZXh0LmdldHRlcnMuY3VzdG9tU291cmNlUGF0aCl7Y3VzdG9tU291cmNlLmN1c3RvbVNvdXJjZVBhdGg9Y29udGV4dC5nZXR0ZXJzLmN1c3RvbVNvdXJjZVBhdGg7fWlmKGNvbnRleHQuZ2V0dGVycy5jdXN0b21Tb3VyY2VDb250YWluZXIpe2N1c3RvbVNvdXJjZS5jdXN0b21Tb3VyY2VDb250YWluZXI9Y29udGV4dC5nZXR0ZXJzLmN1c3RvbVNvdXJjZUNvbnRhaW5lcjt9Y29udGV4dC5kaXNwYXRjaCgncnVuQ2FsbGJhY2tVcGxvYWRTdGFydGVkJyxmaWxlLnV1aWQpOy8vIEhpdCBDbG91ZFJvdXRlciB0byBsaW5rIG9yIHN0b3JlIGZpbGVzXG52YXIgY2xvdWRDbGllbnQ9Y29udGV4dC5nZXR0ZXJzLmNsb3VkQ2xpZW50O3BlbmRpbmdSZXF1ZXN0PWNsb3VkQ2xpZW50LnN0b3JlKGZpbGUuc291cmNlLGZpbGUucGF0aCxzdG9yZVRvLGN1c3RvbVNvdXJjZSx0b2tlbik7fS8vIEZha2UgZmlsZSBwcm9ncmVzcyBmb3Igbm9uLWxvY2FsIGZpbGVzIChub3QgYmFja2dyb3VuZCB1cGxvYWRzKVxuaWYoIWZpbGUudHJhbnNmb3JtZWQmJmZpbGUuc291cmNlIT09J2xvY2FsX2ZpbGVfc3lzdGVtJyYmY29udGV4dC5nZXR0ZXJzLnVwbG9hZFN0YXJ0ZWQpe3N0YXJ0RmFrZVByb2dyZXNzKGNvbnRleHQsZmlsZSk7fXBlbmRpbmdSZXF1ZXN0LnRoZW4oZnVuY3Rpb24odXBsb2FkZWRGaWxlTWV0YWRhdGEpey8vIFNob3J0IGNpcmN1aXRcbmlmKCF1cGxvYWRlZEZpbGVNZXRhZGF0YSl7Y29udGV4dC5jb21taXQoJ01BUktfRklMRV9BU19ET05FJyx7dXVpZDpmaWxlLnV1aWR9KTtyZXR1cm4gdW5kZWZpbmVkO30vLyBTZXQgZmFrZSBwcm9ncmVzcyB0byAxMDAlIG9uIHN1Y2Nlc3NmdWwgdXBsb2FkIChub3QgYmFja2dyb3VuZCB1cGxvYWRzKVxuaWYoIWZpbGUudHJhbnNmb3JtZWQmJmZpbGUuc291cmNlIT09J2xvY2FsX2ZpbGVfc3lzdGVtJyl7Y29udGV4dC5jb21taXQoJ1NFVF9GSUxFX1VQTE9BRF9QUk9HUkVTUycse3V1aWQ6ZmlsZS51dWlkLHByb2dyZXNzOjEwMCxwcm9ncmVzc1NpemU6dXBsb2FkZWRGaWxlTWV0YWRhdGEuc2l6ZX0pO30vLyBDbG91ZHJvdXRlciB3aWxsIG5vdCByZXR1cm4gSFRUUCBlcnJvcnMuIEVycm9ycyBhcmUgaW4gMjAwIHJlc3BvbnNlIGJvZHkuXG4vLyBUaGlzIGNvdW50cyBhcyBhIGZhaWxlZCB1cGxvYWQuIFRocm93biBlcnJvciBpcyBjYXVnaHQgaW4gY2F0Y2ggaGFuZGxlciBiZWxvdy5cbi8vIFRPRE8gTW92ZSB0aGlzIGludG8gYXBpLWNsaWVudFxuaWYodXBsb2FkZWRGaWxlTWV0YWRhdGEuZXJyb3ImJnVwbG9hZGVkRmlsZU1ldGFkYXRhLmVycm9yLnRleHQpe3Rocm93IG5ldyBFcnJvcih1cGxvYWRlZEZpbGVNZXRhZGF0YS5lcnJvci50ZXh0KTt9dmFyIHVwbG9hZGVkRmlsZT1fb2JqZWN0U3ByZWFkKHt9LGZpbGUse30sdXBsb2FkZWRGaWxlTWV0YWRhdGEpOy8vIFRPRE8gV2h5IGlzIHRoaXMgYmVpbmcgZGVsZXRlZD9cbmRlbGV0ZSB1cGxvYWRlZEZpbGUudXVpZDtjb250ZXh0LmNvbW1pdCgnTUFSS19GSUxFX0FTX0RPTkUnLHt1dWlkOmZpbGUudXVpZCx1cGxvYWRNZXRhZGF0YTp1cGxvYWRlZEZpbGV9KTtpZihjb250ZXh0LmdldHRlcnMub25GaWxlVXBsb2FkRmluaXNoZWQhPT11bmRlZmluZWQpe2NvbnRleHQuZ2V0dGVycy5vbkZpbGVVcGxvYWRGaW5pc2hlZChjb252ZXJ0RmlsZUZvck91dHNpZGVXb3JsZCh1cGxvYWRlZEZpbGUsY29udGV4dC5nZXR0ZXJzKSk7fWxvZygnVXBsb2FkIGRvbmU6JyxmaWxlKTtyZXR1cm4gdXBsb2FkZWRGaWxlTWV0YWRhdGE7fSlbXCJjYXRjaFwiXShmdW5jdGlvbihlcnJvcil7aWYoIW5hdmlnYXRvci5vbkxpbmUpe2NvbnRleHQuZGlzcGF0Y2goJ29uTmV0d29ya0Vycm9yJyx0cnVlKTt9Ly8gU2V0IHByb2dyZXNzIHRvIDEwMCBzaW5jZSBpdCdzIGFjdHVhbGx5IFwiZG9uZVwiXG5jb250ZXh0LmNvbW1pdCgnU0VUX0ZJTEVfVVBMT0FEX1BST0dSRVNTJyx7dXVpZDpmaWxlLnV1aWQscHJvZ3Jlc3M6MTAwfSk7Y29udGV4dC5jb21taXQoJ01BUktfRklMRV9BU19GQUlMRUQnLGZpbGUudXVpZCk7aWYoY29udGV4dC5nZXR0ZXJzLm9uRmlsZVVwbG9hZEZhaWxlZCE9PXVuZGVmaW5lZCl7Y29udGV4dC5nZXR0ZXJzLm9uRmlsZVVwbG9hZEZhaWxlZChjb252ZXJ0RmlsZUZvck91dHNpZGVXb3JsZChmaWxlLGNvbnRleHQuZ2V0dGVycyksZXJyb3IpO31sb2coJ1VwbG9hZCBmYWlsZWQ6JyxmaWxlLGVycm9yLm1lc3NhZ2UpO30pO3JldHVybiBwZW5kaW5nUmVxdWVzdDt9Oy8vIEFjdGlvbnNcbnZhciBmaW5pc2hVcGxvYWRzTWF5YmU9ZnVuY3Rpb24gZmluaXNoVXBsb2Fkc01heWJlKF9yZWY0KXt2YXIgZGlzcGF0Y2g9X3JlZjQuZGlzcGF0Y2gsX3JlZjQkZ2V0dGVycz1fcmVmNC5nZXR0ZXJzLGFsbG93TWFudWFsUmV0cnk9X3JlZjQkZ2V0dGVycy5hbGxvd01hbnVhbFJldHJ5LGZpbGVzRG9uZT1fcmVmNCRnZXR0ZXJzLmZpbGVzRG9uZSxmaWxlc0xpc3Q9X3JlZjQkZ2V0dGVycy5maWxlc0xpc3QsZmlsZXNGYWlsZWQ9X3JlZjQkZ2V0dGVycy5maWxlc0ZhaWxlZCx1cGxvYWRTdGFydGVkPV9yZWY0JGdldHRlcnMudXBsb2FkU3RhcnRlZDtpZih1cGxvYWRTdGFydGVkJiZmaWxlc0xpc3QubGVuZ3RoPT09ZmlsZXNEb25lLmxlbmd0aCtmaWxlc0ZhaWxlZC5sZW5ndGgpe2lmKCEoYWxsb3dNYW51YWxSZXRyeSYmZmlsZXNGYWlsZWQubGVuZ3RoKSl7ZGlzcGF0Y2goJ2FsbFVwbG9hZHNEb25lJyk7fX19O3ZhciB1cGxvYWRNb3JlTWF5YmU9ZnVuY3Rpb24gdXBsb2FkTW9yZU1heWJlKGNvbnRleHQpe2lmKGNvbnRleHQuZ2V0dGVycy5maWxlc1VwbG9hZGluZy5sZW5ndGg8Y29udGV4dC5nZXR0ZXJzLmNvbmN1cnJlbmN5JiZjb250ZXh0LmdldHRlcnMub25seUZpbGVzV2FpdGluZy5sZW5ndGg+MCl7Y29udGV4dC5kaXNwYXRjaCgndXBsb2FkT25lJykudGhlbihmdW5jdGlvbigpe3JldHVybiBjb250ZXh0LmRpc3BhdGNoKCd1cGxvYWRNb3JlTWF5YmUnKTt9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7cmV0dXJuIGNvbnRleHQuZGlzcGF0Y2goJ3VwbG9hZE1vcmVNYXliZScpO30pO2NvbnRleHQuZGlzcGF0Y2goJ3VwbG9hZE1vcmVNYXliZScpO31lbHNle2NvbnRleHQuZGlzcGF0Y2goJ2ZpbmlzaFVwbG9hZHNNYXliZScpO319O3ZhciBzdGFydFVwbG9hZGluZz1mdW5jdGlvbiBzdGFydFVwbG9hZGluZyhjb250ZXh0KXsvLyBBbHJlYWR5IHVwbG9hZGluZyAtIHRlcm1pbmF0ZSB0aGlzIGF0dGVtcHQuXG5pZihjb250ZXh0LmdldHRlcnMudXBsb2FkU3RhcnRlZCl7cmV0dXJuO31jb250ZXh0LmRpc3BhdGNoKCdjaGVja05ldHdvcmtOYXZpZ2F0b3InKTtpZihjb250ZXh0LmdldHRlcnMub25VcGxvYWRTdGFydGVkKXtjb250ZXh0LmdldHRlcnMub25VcGxvYWRTdGFydGVkKGNvbnZlcnRGaWxlTGlzdEZvck91dHNpZGVXb3JsZChjb250ZXh0LmdldHRlcnMuZmlsZXNMaXN0LGNvbnRleHQuZ2V0dGVycykpO31jb250ZXh0LmNvbW1pdCgnU0VUX1VQTE9BRF9TVEFSVEVEJyx0cnVlKTtjb250ZXh0LmNvbW1pdCgnVVBEQVRFX01PQklMRV9OQVZfQUNUSVZFJyxmYWxzZSk7Ly8gR28gdG8gc3VtbWFyeSBzY3JlZW4gZGlyZWN0bHkgb25jZSB1cGxvYWRpbmcgc3RhcnRzXG52YXIgYmFzZVJvdXRlPWNvbnRleHQuZ2V0dGVycy5yb3V0ZVswXTtpZihiYXNlUm91dGUhPT0ndHJhbnNmb3JtJyYmYmFzZVJvdXRlIT09J3N1bW1hcnknKXtjb250ZXh0LmNvbW1pdCgnQ0hBTkdFX1JPVVRFJyxbJ3N1bW1hcnknXSk7fS8vIEtlZXAgdXBsb2FkaW5nIHVudGlsIHdlIGhhdmUgbm90aGluZyBsZWZ0XG5jb250ZXh0LmRpc3BhdGNoKCd1cGxvYWRNb3JlTWF5YmUnKTt9O2luaXRpYWxTdGF0ZT1fb2JqZWN0U3ByZWFkKHtmaWxlczp7fSx1cGxvYWRTdGFydGVkOmZhbHNlfSxpbml0aWFsU3RhdGUpO3ZhciBtdXRhdGlvbnM9e0NMRUFSX0ZJTEVTOmZ1bmN0aW9uIENMRUFSX0ZJTEVTKHN0YXRlKXsvLyBiZWNhdXNlIG9mIHJlZmVyZW5jZSB3ZSBuZWVkIHRvIHJlc2V0IHN0YXRlIG9mIGFsbCBmaWxlc1xuT2JqZWN0LmtleXMoc3RhdGUuZmlsZXMpLmZvckVhY2goZnVuY3Rpb24odXVpZCl7dmFyIGZpbGU9c3RhdGUuZmlsZXNbdXVpZF07VnVlLnNldChmaWxlLCdzdGF0ZScsdW5kZWZpbmVkKTtWdWUuc2V0KGZpbGUsJ3V1aWQnLHVuZGVmaW5lZCk7VnVlW1wiZGVsZXRlXCJdKHN0YXRlLmZpbGVzLHV1aWQpO30pO30sU0VUX1VQTE9BRF9TVEFSVEVEOmZ1bmN0aW9uIFNFVF9VUExPQURfU1RBUlRFRChzdGF0ZSx2YWx1ZSl7c3RhdGUudXBsb2FkU3RhcnRlZD12YWx1ZTt9LElOSVRJQUxJWkVfRklMRTpmdW5jdGlvbiBJTklUSUFMSVpFX0ZJTEUoc3RhdGUsZmlsZSl7Ly8gSW5pdGlhbCBzdGF0ZVxuVnVlLnNldChzdGF0ZS5maWxlcyxmaWxlLnV1aWQsZmlsZSk7fSxNQVJLX0ZJTEVfQVNfV0FJVElORzpmdW5jdGlvbiBNQVJLX0ZJTEVfQVNfV0FJVElORyhzdGF0ZSx1dWlkKXt2YXIgZmlsZT1zdGF0ZS5maWxlc1t1dWlkXTtWdWUuc2V0KGZpbGUsJ3N0YXRlJyxTVEFURVMud2FpdGluZyk7VnVlLnNldChmaWxlLCdwcm9ncmVzcycsMCk7VnVlLnNldChmaWxlLCdwcm9ncmVzc1NpemUnLDApO30sREVTRUxFQ1RfRklMRTpmdW5jdGlvbiBERVNFTEVDVF9GSUxFKHN0YXRlLHV1aWQpe3ZhciBmaWxlPXN0YXRlLmZpbGVzW3V1aWRdO1Z1ZS5zZXQoZmlsZSwnc3RhdGUnLHVuZGVmaW5lZCk7VnVlLnNldChmaWxlLCd1dWlkJyx1bmRlZmluZWQpO1Z1ZVtcImRlbGV0ZVwiXShzdGF0ZS5maWxlcyx1dWlkKTt9LERFU0VMRUNUX0ZPTERFUjpmdW5jdGlvbiBERVNFTEVDVF9GT0xERVIoc3RhdGUsZm9sZGVyKXtPYmplY3Qua2V5cyhzdGF0ZS5maWxlcykuZm9yRWFjaChmdW5jdGlvbih1dWlkKXt2YXIgZmlsZT1zdGF0ZS5maWxlc1t1dWlkXTtpZihpc0ZpbGVJbkZvbGRlcihmaWxlLGZvbGRlcikpe1Z1ZS5zZXQoZmlsZSwnc3RhdGUnLHVuZGVmaW5lZCk7VnVlLnNldChmaWxlLCd1dWlkJyx1bmRlZmluZWQpO1Z1ZVtcImRlbGV0ZVwiXShzdGF0ZS5maWxlcyx1dWlkKTt9fSk7fSxNQVJLX0ZJTEVfQVNfVVBMT0FESU5HOmZ1bmN0aW9uIE1BUktfRklMRV9BU19VUExPQURJTkcoc3RhdGUsX3JlZjUpe3ZhciB1dWlkPV9yZWY1LnV1aWQsdG9rZW49X3JlZjUudG9rZW47dmFyIGZpbGU9c3RhdGUuZmlsZXNbdXVpZF07VnVlLnNldChmaWxlLCdzdGF0ZScsU1RBVEVTLnVwbG9hZGluZyk7aWYodG9rZW4pe2ZpbGUudG9rZW49dG9rZW47fX0sTUFSS19GSUxFX0FTX1BBVVNFRDpmdW5jdGlvbiBNQVJLX0ZJTEVfQVNfUEFVU0VEKHN0YXRlLHV1aWQpe3ZhciBmaWxlPXN0YXRlLmZpbGVzW3V1aWRdO1Z1ZS5zZXQoZmlsZSwnc3RhdGUnLFNUQVRFUy5wYXVzZWQpO30sTUFSS19GSUxFX0FTX0RPTkU6ZnVuY3Rpb24gTUFSS19GSUxFX0FTX0RPTkUoc3RhdGUsX3JlZjYpe3ZhciB1dWlkPV9yZWY2LnV1aWQsdXBsb2FkTWV0YWRhdGE9X3JlZjYudXBsb2FkTWV0YWRhdGE7dmFyIGZpbGU9c3RhdGUuZmlsZXNbdXVpZF07aWYodXBsb2FkTWV0YWRhdGEpe09iamVjdC5rZXlzKHVwbG9hZE1ldGFkYXRhKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7VnVlLnNldChmaWxlLGtleSx1cGxvYWRNZXRhZGF0YVtrZXldKTt9KTt9VnVlLnNldChmaWxlLCdzdGF0ZScsU1RBVEVTLmRvbmUpO30sTUFSS19GSUxFX0FTX0ZBSUxFRDpmdW5jdGlvbiBNQVJLX0ZJTEVfQVNfRkFJTEVEKHN0YXRlLHV1aWQpe3ZhciBmaWxlPXN0YXRlLmZpbGVzW3V1aWRdO2lmKGZpbGUpe1Z1ZS5zZXQoZmlsZSwnc3RhdGUnLFNUQVRFUy5mYWlsZWQpO319LFNFVF9GSUxFX1VQTE9BRF9QUk9HUkVTUzpmdW5jdGlvbiBTRVRfRklMRV9VUExPQURfUFJPR1JFU1Moc3RhdGUsX3JlZjcpe3ZhciB1dWlkPV9yZWY3LnV1aWQscHJvZ3Jlc3M9X3JlZjcucHJvZ3Jlc3MscHJvZ3Jlc3NTaXplPV9yZWY3LnByb2dyZXNzU2l6ZTt2YXIgZmlsZT1zdGF0ZS5maWxlc1t1dWlkXTtpZihmaWxlKXtWdWVbXCJkZWxldGVcIl0oZmlsZSwncHJvZ3Jlc3MnKTtWdWVbXCJkZWxldGVcIl0oZmlsZSwncHJvZ3Jlc3NTaXplJyk7VnVlLnNldChmaWxlLCdwcm9ncmVzcycscHJvZ3Jlc3MpO1Z1ZS5zZXQoZmlsZSwncHJvZ3Jlc3NTaXplJyxwcm9ncmVzc1NpemUpO319LFNFVF9GSUxFX0NST1BfREFUQTpmdW5jdGlvbiBTRVRfRklMRV9DUk9QX0RBVEEoc3RhdGUsX3JlZjgpe3ZhciB1dWlkPV9yZWY4LnV1aWQsY3JvcERhdGE9X3JlZjguY3JvcERhdGEsaW1hZ2VEYXRhPV9yZWY4LmltYWdlRGF0YTt2YXIgZmlsZT1zdGF0ZS5maWxlc1t1dWlkXTtWdWUuc2V0KGZpbGUsJ2Nyb3BEYXRhJyx7b3JpZ2luYWxJbWFnZVNpemU6W2ltYWdlRGF0YS5uYXR1cmFsV2lkdGgsaW1hZ2VEYXRhLm5hdHVyYWxIZWlnaHRdLGNyb3BBcmVhOntwb3NpdGlvbjpbY3JvcERhdGEueCxjcm9wRGF0YS55XSxzaXplOltjcm9wRGF0YS53aWR0aCxjcm9wRGF0YS5oZWlnaHRdfX0pO30sU0VUX0ZJTEVfUk9UQVRJT046ZnVuY3Rpb24gU0VUX0ZJTEVfUk9UQVRJT04oc3RhdGUsX3JlZjkpe3ZhciB1dWlkPV9yZWY5LnV1aWQscm90YXRpb249X3JlZjkucm90YXRpb247dmFyIGZpbGU9c3RhdGUuZmlsZXNbdXVpZF07aWYocm90YXRpb249PT0wKXtyZXR1cm4gZmFsc2U7fVZ1ZS5zZXQoZmlsZSwncm90YXRlZCcse3ZhbHVlOk1hdGguYWJzKHJvdGF0aW9uKSxkaXJlY3Rpb246cm90YXRpb24+MD8nQ1cnOidDQ1cnfSk7cmV0dXJuIHRydWU7fSxTRVRfRklMRV9UUkFOU0ZPUk1BVElPTjpmdW5jdGlvbiBTRVRfRklMRV9UUkFOU0ZPUk1BVElPTihzdGF0ZSxfcmVmMTApe3ZhciB1dWlkPV9yZWYxMC51dWlkLGJsb2I9X3JlZjEwLmJsb2IsdHJhbnNmb3JtPV9yZWYxMC50cmFuc2Zvcm07dmFyIGZpbGU9c3RhdGUuZmlsZXNbdXVpZF07ZmlsZS5zdGF0ZT1TVEFURVMud2FpdGluZztpZighZmlsZS5vcmlnaW5hbFNpemUpe1Z1ZS5zZXQoZmlsZSwnb3JpZ2luYWxTaXplJyxmaWxlLnNpemUpO31pZighZmlsZS5vcmlnaW5hbE5hbWUpe1Z1ZS5zZXQoZmlsZSwnb3JpZ2luYWxOYW1lJyxmaWxlLm5hbWUpO31pZih0cmFuc2Zvcm09PT0nY2lyY2xlJ3x8dHJhbnNmb3JtPT09J2Nyb3AnKXtWdWUuc2V0KGZpbGUsJ2Nyb3BwZWQnLHRydWUpO31WdWUuc2V0KGZpbGUsJ3RyYW5zZm9ybWVkJyxibG9iKTtWdWUuc2V0KGZpbGUsJ3NpemUnLGJsb2Iuc2l6ZSk7VnVlLnNldChmaWxlLCduYW1lJyxibG9iLm5hbWUpO1Z1ZS5zZXQoZmlsZSwncHJvZ3Jlc3MnLDApO1Z1ZS5zZXQoZmlsZSwncHJvZ3Jlc3NTaXplJywnJyk7fSxSRU1PVkVfRklMRV9UUkFOU0ZPUk1BVElPTjpmdW5jdGlvbiBSRU1PVkVfRklMRV9UUkFOU0ZPUk1BVElPTihzdGF0ZSx1dWlkKXt2YXIgZmlsZT1zdGF0ZS5maWxlc1t1dWlkXTtWdWVbXCJkZWxldGVcIl0oZmlsZSwndHJhbnNmb3JtZWQnKTtWdWVbXCJkZWxldGVcIl0oZmlsZSwnY3JvcHBlZCcpO1Z1ZVtcImRlbGV0ZVwiXShmaWxlLCdjcm9wRGF0YScpO1Z1ZVtcImRlbGV0ZVwiXShmaWxlLCdyb3RhdGVkJyk7aWYoZmlsZS5vcmlnaW5hbFNpemUpe1Z1ZS5zZXQoZmlsZSwnc2l6ZScsZmlsZS5vcmlnaW5hbFNpemUpO1Z1ZVtcImRlbGV0ZVwiXShmaWxlLCdvcmlnaW5hbFNpemUnKTt9aWYoZmlsZS5vcmlnaW5hbE5hbWUpe1Z1ZS5zZXQoZmlsZSwnbmFtZScsZmlsZS5vcmlnaW5hbE5hbWUpO1Z1ZVtcImRlbGV0ZVwiXShmaWxlLCdvcmlnaW5hbE5hbWUnKTt9fSxSRU1PVkVfU09VUkNFX0ZST01fV0FJVElORzpmdW5jdGlvbiBSRU1PVkVfU09VUkNFX0ZST01fV0FJVElORyhzdGF0ZSxzb3VyY2Upe09iamVjdC5rZXlzKHN0YXRlLmZpbGVzKS5mb3JFYWNoKGZ1bmN0aW9uKHV1aWQpe3ZhciBmaWxlPXN0YXRlLmZpbGVzW3V1aWRdO2lmKGZpbGUuc291cmNlPT09c291cmNlKXtWdWUuc2V0KGZpbGUsJ3N0YXRlJyx1bmRlZmluZWQpO1Z1ZS5zZXQoZmlsZSwndXVpZCcsdW5kZWZpbmVkKTtWdWVbXCJkZWxldGVcIl0oc3RhdGUuZmlsZXMsdXVpZCk7fX0pO30sUkVNT1ZFX0NMT1VEU19GUk9NX1dBSVRJTkc6ZnVuY3Rpb24gUkVNT1ZFX0NMT1VEU19GUk9NX1dBSVRJTkcoc3RhdGUpe09iamVjdC5rZXlzKHN0YXRlLmZpbGVzKS5mb3JFYWNoKGZ1bmN0aW9uKHV1aWQpe3ZhciBmaWxlPXN0YXRlLmZpbGVzW3V1aWRdO2lmKGZpbGUuc291cmNlS2luZD09PSdjbG91ZCcpe1Z1ZS5zZXQoZmlsZSwnc3RhdGUnLHVuZGVmaW5lZCk7VnVlLnNldChmaWxlLCd1dWlkJyx1bmRlZmluZWQpO1Z1ZVtcImRlbGV0ZVwiXShzdGF0ZS5maWxlcyx1dWlkKTt9fSk7fSxVUERBVEVfRklMRV9BRlRFUl9SRVNJWkU6ZnVuY3Rpb24gVVBEQVRFX0ZJTEVfQUZURVJfUkVTSVpFKHN0YXRlLF9yZWYxMSl7dmFyIHV1aWQ9X3JlZjExLnV1aWQsYmxvYj1fcmVmMTEuYmxvYjt2YXIgZmlsZT1zdGF0ZS5maWxlc1t1dWlkXTtWdWUuc2V0KGZpbGUsJ3NpemUnLGJsb2Iuc2l6ZSk7VnVlLnNldChmaWxlLCdwcm9ncmVzcycsMCk7VnVlLnNldChmaWxlLCdwcm9ncmVzc1NpemUnLCcnKTt9fTt2YXIgYWN0aW9ucz17YWRkRmlsZTphZGRGaWxlLGZpbmlzaFVwbG9hZHNNYXliZTpmaW5pc2hVcGxvYWRzTWF5YmUsc3RhcnRVcGxvYWRpbmc6c3RhcnRVcGxvYWRpbmcsdXBsb2FkTW9yZU1heWJlOnVwbG9hZE1vcmVNYXliZSx1cGxvYWRPbmU6dXBsb2FkT25lLHJ1bkNhbGxiYWNrVXBsb2FkU3RhcnRlZDpmdW5jdGlvbiBydW5DYWxsYmFja1VwbG9hZFN0YXJ0ZWQoX3JlZjEyLHV1aWQpe3ZhciBzdGF0ZT1fcmVmMTIuc3RhdGUsZ2V0dGVycz1fcmVmMTIuZ2V0dGVycztpZighZ2V0dGVycy5vbkZpbGVVcGxvYWRTdGFydGVkKXtyZXR1cm47fXZhciBmaWxlPXN0YXRlLmZpbGVzW3V1aWRdO2dldHRlcnMub25GaWxlVXBsb2FkU3RhcnRlZChjb252ZXJ0RmlsZUZvck91dHNpZGVXb3JsZChmaWxlLGdldHRlcnMpKTt9LGNhbmNlbFVwbG9hZDpmdW5jdGlvbiBjYW5jZWxVcGxvYWQoX3JlZjEzLHV1aWQpe3ZhciBzdGF0ZT1fcmVmMTMuc3RhdGU7aWYoIXV1aWQpe3JldHVybjt9dmFyIGZpbGU9c3RhdGUuZmlsZXNbdXVpZF07aWYoZmlsZSYmZmlsZS50b2tlbiYmZmlsZS50b2tlbi5jYW5jZWwpe2ZpbGUudG9rZW4uY2FuY2VsKCk7fX0sY2FuY2VsRm9sZGVyVXBsb2FkOmZ1bmN0aW9uIGNhbmNlbEZvbGRlclVwbG9hZChfcmVmMTQsZm9sZGVyKXt2YXIgZGlzcGF0Y2g9X3JlZjE0LmRpc3BhdGNoLHN0YXRlPV9yZWYxNC5zdGF0ZTtsb2Rhc2hfdmFsdWVzKHN0YXRlLmZpbGVzKS5maWx0ZXIoZnVuY3Rpb24oZmlsZSl7Ly8gSWdub3JlIG5vbi1jbG91ZCBmaWxlc1xuaWYoZmlsZS5zb3VyY2VLaW5kIT09J2Nsb3VkJyl7cmV0dXJuIHRydWU7fS8vIFRoaXMgbWF0Y2hlcyBmaWxlcyB1bmRlciBhIHBhdGggcmVjdXJzaXZlbHksIGJlY2F1c2Ugb2YgaW5kZXhPZlxucmV0dXJuIGZpbGUucGF0aC5pbmRleE9mKGZvbGRlci5wYXRoKT49MDt9KS5tYXAoZnVuY3Rpb24oZmlsZSl7cmV0dXJuIGZpbGUudXVpZDt9KS5mb3JFYWNoKGZ1bmN0aW9uKHV1aWQpe2Rpc3BhdGNoKCdjYW5jZWxVcGxvYWQnLHV1aWQpO30pO30sY2FuY2VsQWxsVXBsb2FkczpmdW5jdGlvbiBjYW5jZWxBbGxVcGxvYWRzKF9yZWYxNSl7dmFyIGRpc3BhdGNoPV9yZWYxNS5kaXNwYXRjaCxzdGF0ZT1fcmVmMTUuc3RhdGU7dmFyIHV1aWRzPU9iamVjdC5rZXlzKHN0YXRlLmZpbGVzKTt1dWlkcy5mb3JFYWNoKGZ1bmN0aW9uKHV1aWQpe2Rpc3BhdGNoKCdjYW5jZWxVcGxvYWQnLHV1aWQpO30pO30sZGVzZWxlY3RBbGxGaWxlczpmdW5jdGlvbiBkZXNlbGVjdEFsbEZpbGVzKGNvbnRleHQpe2NvbnRleHQuZGlzcGF0Y2goJ2NhbmNlbEFsbFVwbG9hZHMnKTtjb250ZXh0LmdldHRlcnMuZmlsZXNMaXN0LmZvckVhY2goZnVuY3Rpb24oZmlsZSl7aWYoZmlsZSYmZmlsZS51dWlkKXtjb250ZXh0LmNvbW1pdCgnREVTRUxFQ1RfRklMRScsZmlsZS51dWlkKTt9fSk7fSxkZXNlbGVjdEZvbGRlcjpmdW5jdGlvbiBkZXNlbGVjdEZvbGRlcihjb250ZXh0LGZvbGRlcil7Y29udGV4dC5kaXNwYXRjaCgnY2FuY2VsRm9sZGVyVXBsb2FkJyxmb2xkZXIpO2NvbnRleHQuY29tbWl0KCdERVNFTEVDVF9GT0xERVInLGZvbGRlcik7fSxyZXNpemVJbWFnZU1heWJlOmZ1bmN0aW9uIHJlc2l6ZUltYWdlTWF5YmUoX3JlZjE2LGJsb2Ipe3ZhciBkaXNwYXRjaD1fcmVmMTYuZGlzcGF0Y2gsX3JlZjE2JGdldHRlcnM9X3JlZjE2LmdldHRlcnMsaW1hZ2VEaW09X3JlZjE2JGdldHRlcnMuaW1hZ2VEaW0saW1hZ2VNaW49X3JlZjE2JGdldHRlcnMuaW1hZ2VNaW4saW1hZ2VNYXg9X3JlZjE2JGdldHRlcnMuaW1hZ2VNYXgsaW1hZ2VNaW5NYXhCbG9jaz1fcmVmMTYkZ2V0dGVycy5pbWFnZU1pbk1heEJsb2NrOy8vIFNraXAgZmlsZXMgdGhhdCBhcmVuJ3QgaW1hZ2VzIG9yIGlmIHdlIGhhdmUgbm8gcmVzaXplIG9wdGlvbnNcbmlmKCFibG9ifHwhaXNFZGl0YWJsZUltYWdlKGJsb2IpfHwhKGltYWdlRGltfHxpbWFnZU1pbnx8aW1hZ2VNYXgpKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGJsb2IpO31yZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSl7dmFyIGltZz1uZXcgSW1hZ2UoKTt2YXIgdXJsPXdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO2ltZy5zcmM9dXJsO2ltZy5vbmxvYWQ9ZnVuY3Rpb24oKXt3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO3ZhciBjb25maWc9e3dpZHRoOmltZy53aWR0aCxoZWlnaHQ6aW1nLmhlaWdodH07dmFyIHJhdGlvPWNvbmZpZy53aWR0aC9jb25maWcuaGVpZ2h0O2lmKGltYWdlTWluTWF4QmxvY2spe3JldHVybiBQcm9taXNlLnJlc29sdmUoYmxvYik7fWlmKGltYWdlRGltKXtpZihpbWFnZURpbVswXSl7Y29uZmlnLndpZHRoPWltYWdlRGltWzBdO2NvbmZpZy5oZWlnaHQ9Y29uZmlnLndpZHRoL3JhdGlvO31lbHNlIGlmKGltYWdlRGltWzFdKXtjb25maWcuaGVpZ2h0PWltYWdlRGltWzFdO2NvbmZpZy53aWR0aD1jb25maWcuaGVpZ2h0KnJhdGlvO319ZWxzZXtpZihpbWFnZU1pbil7aWYoY29uZmlnLndpZHRoPGltYWdlTWluWzBdKXtjb25maWcud2lkdGg9aW1hZ2VNaW5bMF07Y29uZmlnLmhlaWdodD1jb25maWcud2lkdGgvcmF0aW87fWlmKGNvbmZpZy5oZWlnaHQ8aW1hZ2VNaW5bMV0pe2NvbmZpZy5oZWlnaHQ9aW1hZ2VNaW5bMV07Y29uZmlnLndpZHRoPWNvbmZpZy5oZWlnaHQqcmF0aW87fX1pZihpbWFnZU1heCl7aWYoY29uZmlnLndpZHRoPmltYWdlTWF4WzBdKXtjb25maWcud2lkdGg9aW1hZ2VNYXhbMF07Y29uZmlnLmhlaWdodD1jb25maWcud2lkdGgvcmF0aW87fWlmKGNvbmZpZy5oZWlnaHQ+aW1hZ2VNYXhbMV0pe2NvbmZpZy5oZWlnaHQ9aW1hZ2VNYXhbMV07Y29uZmlnLndpZHRoPWNvbmZpZy5oZWlnaHQqcmF0aW87fX19Y29uZmlnLndpZHRoPXBhcnNlSW50KGNvbmZpZy53aWR0aCwxMCk7Y29uZmlnLmhlaWdodD1wYXJzZUludChjb25maWcuaGVpZ2h0LDEwKTsvLyBSZXNpemUgd2l0aCBQaWNhIC0tIG1haW50YWluIHdpZHRoL2hlaWdodCByYXRpb1xuaWYoaW1nLndpZHRoIT09Y29uZmlnLndpZHRoJiZpbWcuaGVpZ2h0IT09Y29uZmlnLmhlaWdodCl7cmV0dXJuIGRpc3BhdGNoKCdyZXNpemVJbWFnZScse2Jsb2I6YmxvYixjb25maWc6Y29uZmlnfSkudGhlbihmdW5jdGlvbihuZXdCbG9iKXtyZXR1cm4gcmVzb2x2ZShuZXdCbG9iKTt9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7cmV0dXJuIHJlc29sdmUoYmxvYik7fSk7fXJldHVybiByZXNvbHZlKGJsb2IpO307fSk7fSxyZXNpemVJbWFnZTpmdW5jdGlvbiByZXNpemVJbWFnZShjb250ZXh0LF9yZWYxNyl7dmFyIGJsb2I9X3JlZjE3LmJsb2IsY29uZmlnPV9yZWYxNy5jb25maWc7cmV0dXJuIF9yZXNpemVJbWFnZShibG9iLGNvbmZpZyk7fSxzZXRGaWxlQ3JvcERhdGE6ZnVuY3Rpb24gc2V0RmlsZUNyb3BEYXRhKF9yZWYxOCxfcmVmMTkpe3ZhciBnZXR0ZXJzPV9yZWYxOC5nZXR0ZXJzLGNvbW1pdD1fcmVmMTguY29tbWl0O3ZhciB1dWlkPV9yZWYxOS51dWlkLGNyb3BEYXRhPV9yZWYxOS5jcm9wRGF0YSxpbWFnZURhdGE9X3JlZjE5LmltYWdlRGF0YSxyb3RhdGlvbj1fcmVmMTkucm90YXRpb247dmFyIGZpbGU9Z2V0dGVycy5maWxlc1t1dWlkXTtmdW5jdGlvbiBpc0Nyb3BwZWQoKXtpZihpc051bWJlcihjcm9wRGF0YS54KSYmaXNOdW1iZXIoY3JvcERhdGEueSkhPT11bmRlZmluZWQmJmNyb3BEYXRhLndpZHRoJiZjcm9wRGF0YS5oZWlnaHQpe2lmKHJvdGF0aW9uPT09MTgwKXtyZXR1cm4gaW1hZ2VEYXRhLm5hdHVyYWxXaWR0aCE9PWNyb3BEYXRhLndpZHRofHxpbWFnZURhdGEubmF0dXJhbEhlaWdodCE9PWNyb3BEYXRhLmhlaWdodDt9cmV0dXJuIGltYWdlRGF0YS5uYXR1cmFsSGVpZ2h0IT09Y3JvcERhdGEud2lkdGh8fGltYWdlRGF0YS5uYXR1cmFsV2lkdGghPT1jcm9wRGF0YS5oZWlnaHQ7fXJldHVybiBmYWxzZTt9Y29tbWl0KCdTRVRfRklMRV9ST1RBVElPTicse3V1aWQ6dXVpZCxyb3RhdGlvbjpyb3RhdGlvbn0pO2lmKCFpc0Nyb3BwZWQoKSl7cmV0dXJuIGZhbHNlO31jb21taXQoJ1NFVF9GSUxFX0NST1BfREFUQScse3V1aWQ6dXVpZCxjcm9wRGF0YTpjcm9wRGF0YSxpbWFnZURhdGE6aW1hZ2VEYXRhfSk7aWYodHlwZW9mIGdldHRlcnMub25GaWxlQ3JvcHBlZD09PSdmdW5jdGlvbicpe2dldHRlcnMub25GaWxlQ3JvcHBlZChjb252ZXJ0RmlsZUZvck91dHNpZGVXb3JsZChmaWxlLGdldHRlcnMpKTt9cmV0dXJuIGZhbHNlO30sdHJhbnNmb3JtSW1hZ2U6ZnVuY3Rpb24gdHJhbnNmb3JtSW1hZ2UoY29udGV4dCx1dWlkKXtyZXR1cm4gY29udGV4dC5jb21taXQoJ0NIQU5HRV9ST1VURScsWyd0cmFuc2Zvcm0nLHV1aWRdKTt9LHBhdXNlQWxsVXBsb2FkczpmdW5jdGlvbiBwYXVzZUFsbFVwbG9hZHMoX3JlZjIwKXt2YXIgY29tbWl0PV9yZWYyMC5jb21taXQsZmlsZXNVcGxvYWRpbmc9X3JlZjIwLmdldHRlcnMuZmlsZXNVcGxvYWRpbmc7aWYoZmlsZXNVcGxvYWRpbmcubGVuZ3RoKXtmaWxlc1VwbG9hZGluZy5mb3JFYWNoKGZ1bmN0aW9uKGZpbGUpe2lmKGZpbGUudG9rZW4mJmZpbGUudG9rZW4ucGF1c2Upe2ZpbGUudG9rZW4ucGF1c2UoKTtjb21taXQoJ01BUktfRklMRV9BU19QQVVTRUQnLGZpbGUudXVpZCk7fX0pO319LHJldHJ5QWxsRmFpbGVkRmlsZXM6ZnVuY3Rpb24gcmV0cnlBbGxGYWlsZWRGaWxlcyhfcmVmMjEpe3ZhciBjb21taXQ9X3JlZjIxLmNvbW1pdCxkaXNwYXRjaD1fcmVmMjEuZGlzcGF0Y2gsX3JlZjIxJGdldHRlcnM9X3JlZjIxLmdldHRlcnMsZmlsZXNGYWlsZWQ9X3JlZjIxJGdldHRlcnMuZmlsZXNGYWlsZWQsZmlsZXNQYXVzZWQ9X3JlZjIxJGdldHRlcnMuZmlsZXNQYXVzZWQ7aWYoZmlsZXNQYXVzZWQubGVuZ3RoKXtmaWxlc1BhdXNlZC5mb3JFYWNoKGZ1bmN0aW9uKGZpbGUpe2lmKGZpbGUudG9rZW4mJmZpbGUudG9rZW4ucmVzdW1lKXtmaWxlLnRva2VuLnJlc3VtZSgpO2NvbW1pdCgnTUFSS19GSUxFX0FTX1VQTE9BRElORycse3V1aWQ6ZmlsZS51dWlkfSk7fX0pO31pZihmaWxlc0ZhaWxlZC5sZW5ndGgpe2ZpbGVzRmFpbGVkLmZvckVhY2goZnVuY3Rpb24oZmlsZSl7Y29tbWl0KCdNQVJLX0ZJTEVfQVNfV0FJVElORycsZmlsZS51dWlkKTtkaXNwYXRjaCgndXBsb2FkTW9yZU1heWJlJyk7fSk7fX19O3ZhciBnZXR0ZXJzPXtmaWxlczpmdW5jdGlvbiBmaWxlcyhzdCl7cmV0dXJuIHN0LmZpbGVzO30sZmlsZXNMaXN0OmZ1bmN0aW9uIGZpbGVzTGlzdChzdCl7cmV0dXJuIGxvZGFzaF92YWx1ZXMoc3QuZmlsZXMpO30sZmlsZXNVcGxvYWRpbmc6ZnVuY3Rpb24gZmlsZXNVcGxvYWRpbmcoc3QsX3JlZjIyKXt2YXIgZmlsZXNMaXN0PV9yZWYyMi5maWxlc0xpc3Q7cmV0dXJuIGZpbGVzTGlzdC5maWx0ZXIoZnVuY3Rpb24oZil7cmV0dXJuIGYuc3RhdGU9PT1TVEFURVMudXBsb2FkaW5nO30pO30sZmlsZXNEb25lOmZ1bmN0aW9uIGZpbGVzRG9uZShzdCxfcmVmMjMpe3ZhciBmaWxlc0xpc3Q9X3JlZjIzLmZpbGVzTGlzdDtyZXR1cm4gZmlsZXNMaXN0LmZpbHRlcihmdW5jdGlvbihmKXtyZXR1cm4gZi5zdGF0ZT09PVNUQVRFUy5kb25lO30pO30sZmlsZXNGYWlsZWQ6ZnVuY3Rpb24gZmlsZXNGYWlsZWQoc3QsX3JlZjI0KXt2YXIgZmlsZXNMaXN0PV9yZWYyNC5maWxlc0xpc3Q7cmV0dXJuIGZpbGVzTGlzdC5maWx0ZXIoZnVuY3Rpb24oZil7cmV0dXJuIGYuc3RhdGU9PT1TVEFURVMuZmFpbGVkO30pO30sZmlsZXNQYXVzZWQ6ZnVuY3Rpb24gZmlsZXNQYXVzZWQoc3QsX3JlZjI1KXt2YXIgZmlsZXNMaXN0PV9yZWYyNS5maWxlc0xpc3Q7cmV0dXJuIGZpbGVzTGlzdC5maWx0ZXIoZnVuY3Rpb24oZil7cmV0dXJuIGYuc3RhdGU9PT1TVEFURVMucGF1c2VkO30pO30sZmlsZUNvdW50OmZ1bmN0aW9uIGZpbGVDb3VudChzdCxfcmVmMjYpe3ZhciBmaWxlc0xpc3Q9X3JlZjI2LmZpbGVzTGlzdDtyZXR1cm4gZmlsZXNMaXN0Lmxlbmd0aDt9LG9ubHlGaWxlc1dhaXRpbmc6ZnVuY3Rpb24gb25seUZpbGVzV2FpdGluZyhzdGF0ZSxfcmVmMjcpe3ZhciBmaWxlc0xpc3Q9X3JlZjI3LmZpbGVzTGlzdDtyZXR1cm4gZmlsZXNMaXN0LmZpbHRlcihmdW5jdGlvbihmKXtyZXR1cm4gZi5zdGF0ZT09PVNUQVRFUy53YWl0aW5nO30pO30sdXBsb2FkU3RhcnRlZDpmdW5jdGlvbiB1cGxvYWRTdGFydGVkKHN0KXtyZXR1cm4gc3QudXBsb2FkU3RhcnRlZDt9LGZpbGVzV2FpdGluZzpmdW5jdGlvbiBmaWxlc1dhaXRpbmcoc3RhdGUsX3JlZjI4KXt2YXIgZmlsZXNMaXN0PV9yZWYyOC5maWxlc0xpc3Q7aWYoc3RhdGUudXBsb2FkU3RhcnRlZCl7cmV0dXJuIGZpbGVzTGlzdC5maWx0ZXIoZnVuY3Rpb24oZil7cmV0dXJuIGYuc3RhdGU9PT1TVEFURVMud2FpdGluZzt9KTt9cmV0dXJuIGZpbGVzTGlzdDt9LGZpbGVzTmVlZGVkQ291bnQ6ZnVuY3Rpb24gZmlsZXNOZWVkZWRDb3VudChzdGF0ZSxfcmVmMjkpe3ZhciBtaW5GaWxlcz1fcmVmMjkubWluRmlsZXMsZmlsZXNXYWl0aW5nPV9yZWYyOS5maWxlc1dhaXRpbmc7cmV0dXJuIG1pbkZpbGVzLWZpbGVzV2FpdGluZy5sZW5ndGg7fSxjYW5TdGFydFVwbG9hZDpmdW5jdGlvbiBjYW5TdGFydFVwbG9hZChzdGF0ZSxfcmVmMzApe3ZhciBmaWxlc1dhaXRpbmc9X3JlZjMwLmZpbGVzV2FpdGluZyxtaW5GaWxlcz1fcmVmMzAubWluRmlsZXM7cmV0dXJuIGZpbGVzV2FpdGluZy5sZW5ndGg+PW1pbkZpbGVzO30sY2FuQWRkTW9yZUZpbGVzOmZ1bmN0aW9uIGNhbkFkZE1vcmVGaWxlcyhzdGF0ZSxfcmVmMzEpe3ZhciBmaWxlc1dhaXRpbmc9X3JlZjMxLmZpbGVzV2FpdGluZyxtYXhGaWxlcz1fcmVmMzEubWF4RmlsZXM7cmV0dXJuIGZpbGVzV2FpdGluZy5sZW5ndGg8bWF4RmlsZXM7fX07cmV0dXJue3N0YXRlOmluaXRpYWxTdGF0ZSxtdXRhdGlvbnM6bXV0YXRpb25zLGFjdGlvbnM6YWN0aW9ucyxnZXR0ZXJzOmdldHRlcnN9O307Ly9cbnZhciBsb2ckMT1sb2dnZXIuY29udGV4dCgncGlja2VyJyk7dmFyIHNjcmlwdCRwPXtjb21wb25lbnRzOntDb250ZW50SGVhZGVyOkNvbnRlbnRIZWFkZXIsRm9vdGVyTmF2OkZvb3Rlck5hdixMb2FkaW5nOkxvYWRpbmcsTW9kYWw6TW9kYWwsUHJvZ3Jlc3NCYXI6UHJvZ3Jlc3NCYXJ9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24gYmVmb3JlRGVzdHJveSgpe2lmKHRoaXMuY3JvcHBlcil7dGhpcy5jcm9wcGVyLmRlc3Ryb3koKTt0aGlzLmNyb3BwZXI9bnVsbDt9fSxtb3VudGVkOmZ1bmN0aW9uIG1vdW50ZWQoKXt2YXIgX3RoaXMyMz10aGlzO2xvZyQxKCdUcmFuc2Zvcm0gY29tcG9uZW50IG1vdW50ZWQnKTt0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe190aGlzMjMuaW5pdGlhbGl6ZSgpO30pO30sY29tcHV0ZWQ6X29iamVjdFNwcmVhZCh7fSxpbmRleF9lc20ubWFwR2V0dGVycyhbJ2dldE1vZHVsZVVybCcsJ2FwaUNsaWVudCcsJ2Nyb3BBc3BlY3RSYXRpbycsJ2Nyb3BGaWxlcycsJ2Nyb3BGb3JjZScsJ2ZpbGVzJywnbWF4RmlsZXMnLCdyb3V0ZScsJ3RyYW5zZm9ybWF0aW9ucycsJ3VwbG9hZFN0YXJ0ZWQnLCdmaWxlc0xpc3QnXSkse2ZpbGVzTm90Q3JvcHBlZDpmdW5jdGlvbiBmaWxlc05vdENyb3BwZWQoKXtyZXR1cm4gdGhpcy5maWxlc0xpc3QuZmlsdGVyKGZ1bmN0aW9uKGZpbGUpe3JldHVybiBpc0VkaXRhYmxlSW1hZ2UoZmlsZSkmJiFmaWxlLmNyb3BwZWQ7fSk7fSxvcHRpb25zOmZ1bmN0aW9uIG9wdGlvbnMoKXt2YXIgb3B0cz1bXTtpZih0aGlzLnRyYW5zZm9ybWF0aW9ucy5jcm9wKXtvcHRzLnB1c2goJ2Nyb3AnKTt9aWYodGhpcy50cmFuc2Zvcm1hdGlvbnMubWFzayl7b3B0cy5wdXNoKCdtYXNrJyk7fWlmKHRoaXMudHJhbnNmb3JtYXRpb25zLmNpcmNsZSl7b3B0cy5wdXNoKCdjaXJjbGUnKTtpZih0eXBlb2YgdGhpcy5jcm9wQXNwZWN0UmF0aW89PT0nbnVtYmVyJyYmIWlzTmFOKHRoaXMuY3JvcEFzcGVjdFJhdGlvKSYmdGhpcy5jcm9wQXNwZWN0UmF0aW8hPT0xKXtvcHRzLnBvcCgpO319aWYodGhpcy50cmFuc2Zvcm1hdGlvbnMucm90YXRlKXtvcHRzLnB1c2goJ3JvdGF0ZScpO31yZXR1cm4gb3B0czt9LHNob3VsZEdvQmFjazpmdW5jdGlvbiBzaG91bGRHb0JhY2soKXtpZih0aGlzLnVwbG9hZFN0YXJ0ZWQpe3JldHVybiBmYWxzZTt9aWYodGhpcy5jcm9wRmlsZXMpe3JldHVybiB0aGlzLm1heEZpbGVzPjE7fXJldHVybiB0cnVlO319KSxkYXRhOmZ1bmN0aW9uIGRhdGEoKXtyZXR1cm57Y2FjaGVkVVJMOm51bGwsY3JvcHBlcjpudWxsLGN0eDpudWxsLGZhYnJpYzpudWxsLGZpbGU6e30saGFzQ2lyY2xlOmZhbHNlLG1hc2tDb250YWluZXI6bnVsbCxvSW1nOm51bGwscGVuZGluZ0FwcGx5OmZhbHNlLHJvdGF0aW9uOjAsc3RhdGU6J2xvYWRpbmcnfTt9LG1ldGhvZHM6X29iamVjdFNwcmVhZCh7fSxpbmRleF9lc20ubWFwQWN0aW9ucyhbJ2Rlc2VsZWN0QWxsRmlsZXMnLCdyZXNpemVJbWFnZU1heWJlJywnc3RhcnRVcGxvYWRpbmcnLCd1cGxvYWRPbmUnXSkse2FwcGx5OmZ1bmN0aW9uIGFwcGx5KGRvbmUpe3ZhciBfdGhpczI0PXRoaXM7dmFyIHR5cGU9dGhpcy5maWxlLm1pbWV0eXBlO3ZhciBuYW1lPXRoaXMuZmlsZS5uYW1lO3RoaXMucGVuZGluZ0FwcGx5PWZhbHNlO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKXt2YXIgY2FudmFzPV90aGlzMjQuY3JvcHBlci5nZXRDcm9wcGVkQ2FudmFzKCk7aWYoX3RoaXMyNC5zdGF0ZT09PSdjaXJjbGUnKXtjYW52YXM9X3RoaXMyNC5nZXRSb3VuZGVkQ2FudmFzKGNhbnZhcyk7X3RoaXMyNC5oYXNDaXJjbGU9dHJ1ZTt9aWYoX3RoaXMyNC5zdGF0ZT09PSdtYXNrJyl7Y2FudmFzPV90aGlzMjQuZ2V0TWFza2VkQ2FudmFzKGNhbnZhcyk7X3RoaXMyNC5oYXNDaXJjbGU9dHJ1ZTt9aWYoX3RoaXMyNC5oYXNDaXJjbGV8fGlzU1ZHJDEoX3RoaXMyNC5maWxlKSl7dmFyIGV4dD1fdGhpczI0LmZpbGUubmFtZSYmX3RoaXMyNC5maWxlLm5hbWUuc3BsaXQoJy4nKS5wb3AoKS50b0xvd2VyQ2FzZSgpO3R5cGU9J2ltYWdlL3BuZyc7bmFtZT1leHQ9PT0ncG5nJz9uYW1lOlwiXCIuY29uY2F0KG5hbWUsXCIucG5nXCIpO312YXIgdHJhbnNmb3JtPV90aGlzMjQuc3RhdGU7X3RoaXMyNC5zdGF0ZT0nbG9hZGluZyc7Y2FudmFzLnRvQmxvYihmdW5jdGlvbihibG9iKXsvLyBjYW52YXMgb2JqZWN0IGRvZXNudCBoYXZlIGFueSBleGlmIGRhdGEsIHNob3VsZCB3ZSByZW1vdmUgbWV0aG9kIG9yIHJlc3RvcmUgZXhpZiBmcm9tIG9yaWdpbmFsIGZpbGU/XG5fdGhpczI0LnJlc2V0RVhJRk9yaWVudGF0aW9uKGJsb2IpLnRoZW4oZnVuY3Rpb24oZmluYWxCbG9iKXtpZihfdGhpczI0LmNyb3BwZXIpe2ZpbmFsQmxvYi5uYW1lPW5hbWU7X3RoaXMyNC4kc3RvcmUuZGlzcGF0Y2goJ3NldEZpbGVDcm9wRGF0YScse3V1aWQ6X3RoaXMyNC5maWxlLnV1aWQsY3JvcERhdGE6X3RoaXMyNC5jcm9wcGVyLmdldERhdGEodHJ1ZSksaW1hZ2VEYXRhOl90aGlzMjQuY3JvcHBlci5nZXRJbWFnZURhdGEoKSxyb3RhdGlvbjpfdGhpczI0LnJvdGF0aW9ufSk7X3RoaXMyNC4kc3RvcmUuY29tbWl0KCdTRVRfRklMRV9UUkFOU0ZPUk1BVElPTicse3V1aWQ6X3RoaXMyNC5maWxlLnV1aWQsYmxvYjpmaW5hbEJsb2IsdHJhbnNmb3JtOnRyYW5zZm9ybX0pO2lmKCFkb25lKXtfdGhpczI0LmNyb3BwZXIucmVwbGFjZSh3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChmaW5hbEJsb2IpKTt9fXJlc29sdmUoKTt9KTt9LHR5cGUpO30pO30sY2FwaXRhbGl6ZTpmdW5jdGlvbiBjYXBpdGFsaXplKHMpe3JldHVybiBzJiZzWzBdLnRvVXBwZXJDYXNlKCkrcy5zbGljZSgxKTt9LGdldE1hc2tlZENhbnZhczpmdW5jdGlvbiBnZXRNYXNrZWRDYW52YXMoc3JjKXt2YXIgY2FudmFzPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO3ZhciBjb250ZXh0PWNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO2NhbnZhcy53aWR0aD1zcmMud2lkdGg7Y2FudmFzLmhlaWdodD1zcmMuaGVpZ2h0O2NvbnRleHQuaW1hZ2VTbW9vdGhpbmdFbmFibGVkPXRydWU7Y29udGV4dC5kcmF3SW1hZ2UodGhpcy5zdmdNYXNrLDAsMCxjYW52YXMud2lkdGgsY2FudmFzLmhlaWdodCk7Y29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb249J3NvdXJjZS1vdXQnO2NvbnRleHQuZHJhd0ltYWdlKHNyYywwLDAsY2FudmFzLndpZHRoLGNhbnZhcy5oZWlnaHQpO3JldHVybiBjYW52YXM7fSxnZXRSb3VuZGVkQ2FudmFzOmZ1bmN0aW9uIGdldFJvdW5kZWRDYW52YXMoc3JjKXt2YXIgY2FudmFzPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO3ZhciBjb250ZXh0PWNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO3ZhciB3aWR0aD1zcmMud2lkdGg7dmFyIGhlaWdodD1zcmMuaGVpZ2h0O2NhbnZhcy53aWR0aD13aWR0aDtjYW52YXMuaGVpZ2h0PWhlaWdodDtjb250ZXh0LmltYWdlU21vb3RoaW5nRW5hYmxlZD10cnVlO2NvbnRleHQuZHJhd0ltYWdlKHNyYywwLDAsd2lkdGgsaGVpZ2h0KTtjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbj0nZGVzdGluYXRpb24taW4nO2NvbnRleHQuYmVnaW5QYXRoKCk7Y29udGV4dC5hcmMod2lkdGgvMixoZWlnaHQvMixNYXRoLm1pbih3aWR0aCxoZWlnaHQpLzIsMCwyKk1hdGguUEksdHJ1ZSk7Y29udGV4dC5maWxsKCk7cmV0dXJuIGNhbnZhczt9LGdldEltYWdlVVJMOmZ1bmN0aW9uIGdldEltYWdlVVJMKGZpbGUpe3ZhciBfdGhpczI1PXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpe2lmKF90aGlzMjUuY2FjaGVkVVJMKXtyZXR1cm4gcmVzb2x2ZShfdGhpczI1LmNhY2hlZFVSTCk7fS8vIExvY2FsIGltYWdlcyBnZXQgcmVzaXplZCBmaXJzdFxuaWYoZmlsZS5vcmlnaW5hbEZpbGUpe3JldHVybiBfdGhpczI1LnJlc2l6ZUltYWdlTWF5YmUoZmlsZS5vcmlnaW5hbEZpbGUpLnRoZW4oZnVuY3Rpb24oYmxvYil7X3RoaXMyNS5jYWNoZWRVUkw9d2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7cmVzb2x2ZShfdGhpczI1LmNhY2hlZFVSTCk7fSk7fS8vIElmIGZpbGUgaXMgYmFja2dyb3VuZCB1cGxvYWRpbmcgd2FpdCB1bnRpbCBpdCBpcyBkb25lXG5pZihmaWxlLnN0YXRlPT09U1RBVEVTLnVwbG9hZGluZyl7dmFyIGNoZWNrPWZ1bmN0aW9uIGNoZWNrKCl7aWYoZmlsZS5zdGF0ZT09PVNUQVRFUy51cGxvYWRpbmcpe3NldFRpbWVvdXQoY2hlY2ssMTAwKTt9ZWxzZXtfdGhpczI1LmNhY2hlZFVSTD1fdGhpczI1LnNpZ25VcmwoZmlsZS51cmwpO3Jlc29sdmUoX3RoaXMyNS5jYWNoZWRVUkwpO319O3JldHVybiBjaGVjaygpO30vLyBOb24tbG9jYWwgZmlsZXMgd2lsbCBiZSB1cGxvYWRlZCB0byBvYnRhaW4gYSBGaWxlc3RhY2sgQ0ROIGxpbmtcbnJldHVybiBfdGhpczI1LnVwbG9hZE9uZShmaWxlKS50aGVuKGZ1bmN0aW9uKGRhdGEpe190aGlzMjUuY2FjaGVkVVJMPV90aGlzMjUuc2lnblVybChkYXRhLnVybCk7cmVzb2x2ZShfdGhpczI1LmNhY2hlZFVSTCk7fSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe190aGlzMjUuc3RhdGU9J2Vycm9yZWQnO3Jlc29sdmUoKTt9KTt9KTt9LGdlbkljb25DbGFzczpmdW5jdGlvbiBnZW5JY29uQ2xhc3Mob3B0aW9uKXtpZih0aGlzLnN0YXRlPT09b3B0aW9uJiYhdGhpcy51cGxvYWRTdGFydGVkJiZ0aGlzLnN0YXRlIT09J2xvYWRpbmcnJiZ0aGlzLnN0YXRlIT09J2Vycm9yZWQnKXtyZXR1cm5cImZzdC1pY29uLS1cIi5jb25jYXQob3B0aW9uLFwiLWJsdWVcIik7fXJldHVyblwiZnN0LWljb24tLVwiLmNvbmNhdChvcHRpb24sXCItYmxhY2tcIik7fSxnZXRTaWRlYmFyQ2xhc3NlczpmdW5jdGlvbiBnZXRTaWRlYmFyQ2xhc3NlcyhvcHRpb24pe3JldHVybnsnZnN0LXNpZGViYXJfX29wdGlvbi0tYWN0aXZlJzpvcHRpb249PT10aGlzLnN0YXRlLCdmc3Qtc2lkZWJhcl9fb3B0aW9uLS1kaXNhYmxlZCc6dGhpcy5zdGF0ZT09PSdsb2FkaW5nJ3x8dGhpcy5zdGF0ZT09PSdlcnJvcmVkJ3x8dGhpcy51cGxvYWRTdGFydGVkfTt9LGdvQmFjazpmdW5jdGlvbiBnb0JhY2soKXtpZih0aGlzLm1heEZpbGVzPT09MSl7aWYodGhpcy5maWxlKXt0aGlzLiRzdG9yZS5jb21taXQoJ1JFTU9WRV9GSUxFX1RSQU5TRk9STUFUSU9OJyx0aGlzLmZpbGUudXVpZCk7fXRoaXMuJHN0b3JlLmRpc3BhdGNoKCdkZXNlbGVjdEFsbEZpbGVzJyk7fXRoaXMuJHN0b3JlLmNvbW1pdCgnR09fQkFDS19XSVRIX1JPVVRFJyk7fSxoYW5kbGVBcHBseTpmdW5jdGlvbiBoYW5kbGVBcHBseSgpe2lmKHRoaXMuc3RhdGU9PT0nY3JvcCd8fHRoaXMuc3RhdGU9PT0nY2lyY2xlJyl7dmFyIGJveD10aGlzLmNyb3BwZXIuZ2V0Q3JvcEJveERhdGEoKTtpZighYm94LndpZHRofHwhYm94LmhlaWdodCl7cmV0dXJuO319aWYodGhpcy5zdGF0ZSE9PSdyZWFkeScmJnRoaXMuc3RhdGUhPT0nbG9hZGluZycmJnRoaXMuc3RhdGUhPT0nZXJyb3JlZCcpe3RoaXMuYXBwbHkoKTt9fSxoYW5kbGVSZXNldDpmdW5jdGlvbiBoYW5kbGVSZXNldCgpe2lmKHRoaXMuc3RhdGUhPT0nbG9hZGluZycpe2lmKHRoaXMuZmlsZSl7dGhpcy4kc3RvcmUuY29tbWl0KCdSRU1PVkVfRklMRV9UUkFOU0ZPUk1BVElPTicsdGhpcy5maWxlLnV1aWQpO310aGlzLnN0YXRlPSdsb2FkaW5nJzt0aGlzLmhhc0NpcmNsZT1mYWxzZTt0aGlzLnJvdGF0aW9uPTA7dGhpcy5jcm9wcGVyLmRlc3Ryb3koKTt0aGlzLiRyZWZzLmltYWdlLnNyYz0nJzt0aGlzLmluaXRpYWxpemUoKTt9fSxoYW5kbGVDbGljazpmdW5jdGlvbiBoYW5kbGVDbGljayh0cmFuc2Zvcm0pe3RoaXMuc3RhdGU9dHJhbnNmb3JtO30saGFuZGxlTmV4dDpmdW5jdGlvbiBoYW5kbGVOZXh0KCl7aWYodGhpcy5zdGF0ZSE9PSdsb2FkaW5nJyl7dmFyIGZpbGU9dGhpcy5maWxlc05vdENyb3BwZWRbMF07dGhpcy5jYWNoZWRVUkw9bnVsbDt0aGlzLnN0YXRlPSdsb2FkaW5nJzt0aGlzLmhhc0NpcmNsZT1mYWxzZTt0aGlzLnJvdGF0aW9uPTA7dGhpcy4kcmVmcy5pbWFnZS5zcmM9Jyc7dGhpcy5jcm9wcGVyLmRlc3Ryb3koKTt0aGlzLmluaXRpYWxpemUoZmlsZS51dWlkKTt9fSxoYW5kbGVEb25lOmZ1bmN0aW9uIGhhbmRsZURvbmUoKXt2YXIgX3RoaXMyNj10aGlzO2lmKHRoaXMuc3RhdGUhPT0ncmVhZHknJiZ0aGlzLnN0YXRlIT09J2xvYWRpbmcnJiZ0aGlzLnN0YXRlIT09J2Vycm9yZWQnKXt0aGlzLmFwcGx5KHRydWUpLnRoZW4oZnVuY3Rpb24oKXtjb25zb2xlLmxvZygnY3JvcCBkb25lISEhIScpO190aGlzMjYuZ29CYWNrKCk7fSk7fWVsc2UgaWYodGhpcy5zdGF0ZSE9PSdsb2FkaW5nJyl7dGhpcy5nb0JhY2soKTt9fSxoYW5kbGVVcGxvYWQ6ZnVuY3Rpb24gaGFuZGxlVXBsb2FkKCl7dmFyIF90aGlzMjc9dGhpcztpZih0aGlzLnN0YXRlIT09J3JlYWR5JyYmdGhpcy5zdGF0ZSE9PSdsb2FkaW5nJyYmdGhpcy5zdGF0ZSE9PSdlcnJvcmVkJyl7dGhpcy5hcHBseSh0cnVlKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIF90aGlzMjcuc3RhcnRVcGxvYWRpbmcoKTt9KTt9ZWxzZSBpZih0aGlzLnN0YXRlIT09J2xvYWRpbmcnKXt0aGlzLnN0YXJ0VXBsb2FkaW5nKCk7fX0saW5pdGlhbGl6ZTpmdW5jdGlvbiBpbml0aWFsaXplKHV1aWQpe3ZhciBfdGhpczI4PXRoaXM7dmFyIG9wdHM9e2FzcGVjdFJhdGlvOnRoaXMuY3JvcEFzcGVjdFJhdGlvLGF1dG9Dcm9wOmZhbHNlLGF1dG9Dcm9wQXJlYToxLGJhY2tncm91bmQ6ZmFsc2UsY2VudGVyOmZhbHNlLGRyYWdNb2RlOidub25lJyxndWlkZXM6ZmFsc2UsdG9nZ2xlRHJhZ01vZGVPbkRibGNsaWNrOmZhbHNlLHZpZXdNb2RlOjEsem9vbWFibGU6dHJ1ZX07dXVpZD11dWlkfHx0aGlzLnJvdXRlWzFdO3RoaXMuZmlsZT10aGlzLmZpbGVzW3V1aWRdO2xvYWRNb2R1bGUodGhpcy5nZXRNb2R1bGVVcmwoJ2ZzLWNyb3BwZXInKSwnZnMtY3JvcHBlcicpLnRoZW4oZnVuY3Rpb24oQ3JvcHBlcil7X3RoaXMyOC5nZXRJbWFnZVVSTChfdGhpczI4LmZpbGUpLnRoZW4oZnVuY3Rpb24odXJsKXtsb2ckMShcIkltYWdlIHRyYW5zZm9ybSBVUkwgXCIuY29uY2F0KHVybCkpO3ZhciBpbWc9X3RoaXMyOC4kcmVmcy5pbWFnZTtpZihpbWcpe2ltZy5zcmM9dXJsO2ltZy5hZGRFdmVudExpc3RlbmVyKCdyZWFkeScsZnVuY3Rpb24oKXtsb2ckMSgnSW1hZ2UgZm9yIHRyYW5zZm9ybWF0aW9uIGxvYWRlZCcpO190aGlzMjguc3RhdGU9J3JlYWR5Jzt9KTtpbWcuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLGZ1bmN0aW9uKGUpe2xvZyQxKFwiQ2Fubm90IGxvYWQgaW1hZ2UgdG8gY3JvcCBcIi5jb25jYXQoZSxcIiBpbWdUYWdcIikpO190aGlzMjguc3RhdGU9J2Vycm9yZWQnO30pOy8vIEluaXRpYWxpemUgY3JvcHBlcmpzIG9uIGltZ1xuX3RoaXMyOC5jcm9wcGVyPW5ldyBDcm9wcGVyKGltZyxvcHRzKTt9fSlbXCJjYXRjaFwiXShmdW5jdGlvbihlKXtsb2ckMShcIkNhbm5vdCBsb2FkIGltYWdlIHRvIGNyb3AgXCIuY29uY2F0KGUpKTtfdGhpczI4LnN0YXRlPSdlcnJvcmVkJzt9KTt9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGUpe2xvZyQxKFwiQ2Fubm90IGxvYWQgY3JvcHBlciBtb2R1bGUgXCIuY29uY2F0KGUpKTtfdGhpczI4LnN0YXRlPSdlcnJvcmVkJzt9KTt9LHJlc2V0RVhJRk9yaWVudGF0aW9uOmZ1bmN0aW9uIHJlc2V0RVhJRk9yaWVudGF0aW9uKGJsb2Ipe2lmKGJsb2IudHlwZSE9PSdpbWFnZS9qcGVnJyl7cmV0dXJuIFByb21pc2UucmVzb2x2ZShibG9iKTt9Ly8gY2FudmFzIGRvZXNudCBjb250YWluIGV4aWYgZGF0YSBzbyByZXNldCBvcmllbnRhdGlvbiB0byAxXG5yZXR1cm4gYmxvYlRvQXJyYXlCdWZmZXIoYmxvYikudGhlbihmdW5jdGlvbihidWZmKXt2YXIgZXhpZkRhdGE9ZXhpZi5nZW5lcmF0ZUV4aWZPcmllbnRhdGlvbigxKTt2YXIgbmV3QnVmPWV4aWYub3ZlcndyaXRlSW5GaWxlKGJ1ZmYsZXhpZkRhdGEpO3JldHVybiBuZXcgQmxvYihbbmV3QnVmXSx7dHlwZTpibG9iLnR5cGV9KTt9KTt9LHJvdGF0ZTpmdW5jdGlvbiByb3RhdGUoZGVnKXt0aGlzLnJvdGF0aW9uKz1kZWc7Ly8gUHJldmVudCB2ZXJ5IGxhcmdlIGRlZ3JlZSB2YWx1ZXMgd2hlbiByb3RhdGluZyBtdWx0aXBsZSB0aW1lcyBvdmVyLlxuaWYodGhpcy5yb3RhdGlvbj09PTI3MCl7dGhpcy5yb3RhdGlvbj0tOTA7fWVsc2UgaWYodGhpcy5yb3RhdGlvbj09PS0xODApe3RoaXMucm90YXRpb249MTgwO310aGlzLmNyb3BwZXIucm90YXRlKGRlZyk7fSxzaG93U1ZHTWFzazpmdW5jdGlvbiBzaG93U1ZHTWFzayhmYWJyaWMpe3ZhciBfdGhpczI5PXRoaXM7ZmFicmljLmxvYWRTVkdGcm9tVVJMKHRoaXMudHJhbnNmb3JtYXRpb25zLm1hc2sudXJsLGZ1bmN0aW9uKG9iamVjdHMpe3ZhciBwYXRoPW9iamVjdHNbMF07aWYoIXBhdGh8fCFwYXRoLmQpe3JldHVybjt9dmFyIGNhbnZhcz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTt2YXIgd2lkdGg9TWF0aC5jZWlsKHBhdGgud2lkdGgpO3ZhciBoZWlnaHQ9TWF0aC5jZWlsKHBhdGguaGVpZ2h0KTt2YXIgZj1uZXcgZmFicmljLkNhbnZhcyhjYW52YXMpO2Yuc2V0RGltZW5zaW9ucyh7d2lkdGg6d2lkdGgsaGVpZ2h0OmhlaWdodH0pO3ZhciBjbGlwUGF0aD1uZXcgZmFicmljLlBhdGgocGF0aC5kLHt3aWR0aDp3aWR0aCxoZWlnaHQ6aGVpZ2h0LHRvcDowLGxlZnQ6MCxmaWxsOicjMDAwMDAwJyxnbG9iYWxDb21wb3NpdGVPcGVyYXRpb246J2Rlc3RpbmF0aW9uLW91dCd9KTt2YXIgcmVjdD1uZXcgZmFicmljLlJlY3Qoe3dpZHRoOndpZHRoKzEwMCxoZWlnaHQ6aGVpZ2h0KzEwMCxsZWZ0OjAsdG9wOjAsZmlsbDpfdGhpczI5LnRyYW5zZm9ybWF0aW9ucy5tYXNrLmNvbG9yLHN0cm9rZTpfdGhpczI5LnRyYW5zZm9ybWF0aW9ucy5tYXNrLmNvbG9yLHN0cm9rZVdpZHRoOjEwfSk7Ly8gQWRkIFNWRyBwYXRoIHRvIGNhbnZhcywgcmVuZGVyIGl0IGZvciBjcm9wcGVyanMgY3JvcHBlci1mYWNlIG92ZXJsYXlcbmYuYWRkKHJlY3QpO2YuYWRkKGNsaXBQYXRoKTtmLnJlbmRlckFsbCgpOy8vIEFkZCBmaWxsIHRvIFNWRyBwYXRoLCByZW5kZXIgaXQgdG8gYW4gaW1hZ2Ugd2l0aCBmaWxsIGZvciBjYW52YXMgaW1hZ2UgY29tcG9zaXRpbmdcbnZhciBvdmVybGF5PWYudG9EYXRhVVJMKCk7dmFyIGltZz1uZXcgSW1hZ2UoKTtpbWcuc3JjPW92ZXJsYXk7X3RoaXMyOS5zdmdNYXNrPWltZztpbWcub25lcnJvcj1mdW5jdGlvbigpe190aGlzMjkuc3RhdGU9J2Vycm9yZWQnO307aW1nLm9ubG9hZD1mdW5jdGlvbigpey8vIEVuYWJsZSBjcm9wcGVyIGFuZCBhZGQgcmVuZGVyZWQgb3ZlcmxheSBhcyBiYWNrZ3JvdW5kLWltYWdlIG9uIGNyb3BwZXItZmFjZVxudmFyIGJveD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZnNwLXBpY2tlciAuY3JvcHBlci1mYWNlJyk7X3RoaXMyOS5jcm9wcGVyLnNldEFzcGVjdFJhdGlvKHdpZHRoL2hlaWdodCk7X3RoaXMyOS5jcm9wcGVyLmNyb3AoKTtib3guc3R5bGUuYmFja2dyb3VuZD1cInVybChcIi5jb25jYXQob3ZlcmxheSxcIikgbm8tcmVwZWF0XCIpO2JveC5zdHlsZS5iYWNrZ3JvdW5kU2l6ZT0nMTAwJSc7Ym94LnN0eWxlLm9wYWNpdHk9JzAuNSc7fTt9LG51bGwse2Nyb3NzT3JpZ2luOidhbm9ueW1vdXMnfSk7fSxzaWduVXJsOmZ1bmN0aW9uIHNpZ25VcmwodXJsKXt2YXIgX3RoaXMkYXBpQ2xpZW50JHNlc3NpPXRoaXMuYXBpQ2xpZW50LnNlc3Npb24scG9saWN5PV90aGlzJGFwaUNsaWVudCRzZXNzaS5wb2xpY3ksc2lnbmF0dXJlPV90aGlzJGFwaUNsaWVudCRzZXNzaS5zaWduYXR1cmU7aWYocG9saWN5JiZzaWduYXR1cmUpe3JldHVyblwiXCIuY29uY2F0KHVybCxcIj9wb2xpY3k9XCIpLmNvbmNhdChwb2xpY3ksXCImc2lnbmF0dXJlPVwiKS5jb25jYXQoc2lnbmF0dXJlKTt9cmV0dXJuIHVybDt9fSksd2F0Y2g6e3N0YXRlOmZ1bmN0aW9uIHN0YXRlKHZhbCl7dmFyIF90aGlzMzA9dGhpczt2YXIgY3JvcFZpZXc9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZzcC1waWNrZXIgLmNyb3BwZXItdmlldy1ib3gnKTt2YXIgY3JvcEZhY2U9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZzcC1waWNrZXIgLmNyb3BwZXItZmFjZScpO3N3aXRjaCh2YWwpe2Nhc2UncmVhZHknOnRoaXMuY3JvcHBlci5yZXNldCgpO3RoaXMuY3JvcHBlci5jbGVhcigpO2lmKHRoaXMuY3JvcEZvcmNlJiYhdGhpcy5maWxlLmNyb3BwZWQmJiEhdGhpcy50cmFuc2Zvcm1hdGlvbnMuY3JvcCl7dGhpcy5zdGF0ZT0nY3JvcCc7fWlmKHRoaXMuY3JvcEZvcmNlJiYhdGhpcy5maWxlLmNyb3BwZWQmJiF0aGlzLnRyYW5zZm9ybWF0aW9ucy5jcm9wKXt0aGlzLnN0YXRlPSdjaXJjbGUnO31pZighdGhpcy5maWxlKXt0aGlzLnN0YXRlPSdlcnJvcmVkJzticmVhazt9aWYoIXRoaXMuZmlsZS50cmFuc2Zvcm1lZCYmdGhpcy5vcHRpb25zLmxlbmd0aD09PTEmJnRoaXMub3B0aW9uc1swXT09PSdtYXNrJyl7dGhpcy5zdGF0ZT0nbWFzayc7fWJyZWFrO2Nhc2UnY2lyY2xlJzpjcm9wVmlldy5zdHlsZS5ib3JkZXJSYWRpdXM9JzUwJSc7Y3JvcEZhY2Uuc3R5bGUuYm9yZGVyUmFkaXVzPSc1MCUnO2Nyb3BGYWNlLnN0eWxlLmJhY2tncm91bmQ9J25vbmUnO3RoaXMuY3JvcHBlci5zZXRBc3BlY3RSYXRpbygxKTt0aGlzLmNyb3BwZXIuY3JvcCgpO2JyZWFrO2Nhc2UnY3JvcCc6Y3JvcFZpZXcuc3R5bGUuYm9yZGVyUmFkaXVzPScwcHgnO2Nyb3BGYWNlLnN0eWxlLmJvcmRlclJhZGl1cz0nMHB4Jztjcm9wRmFjZS5zdHlsZS5iYWNrZ3JvdW5kPSdub25lJzt0aGlzLmNyb3BwZXIuc2V0QXNwZWN0UmF0aW8odGhpcy5jcm9wQXNwZWN0UmF0aW8pO3RoaXMuY3JvcHBlci5jcm9wKCk7YnJlYWs7Y2FzZSdyb3RhdGUnOnRoaXMuY3JvcHBlci5yZXNldCgpO3RoaXMuY3JvcHBlci5jbGVhcigpO2JyZWFrO2Nhc2UnbWFzayc6e2Nyb3BWaWV3LnN0eWxlLmJvcmRlclJhZGl1cz0nMHB4Jztjcm9wRmFjZS5zdHlsZS5ib3JkZXJSYWRpdXM9JzBweCc7bG9hZE1vZHVsZSh0aGlzLmdldE1vZHVsZVVybCgnZnMtZmFicmljJyksJ2ZzLWZhYnJpYycpLnRoZW4oZnVuY3Rpb24oZmFicmljKXtfdGhpczMwLnNob3dTVkdNYXNrKGZhYnJpYyk7fSk7YnJlYWs7fX19fX07Lyogc2NyaXB0ICovdmFyIF9fdnVlX3NjcmlwdF9fJHA9c2NyaXB0JHA7LyogdGVtcGxhdGUgKi92YXIgX192dWVfcmVuZGVyX18kcD1mdW5jdGlvbiBfX3Z1ZV9yZW5kZXJfXyRwKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKFwibW9kYWxcIixbX2MoXCJkaXZcIix7YXR0cnM6e3Nsb3Q6XCJoZWFkZXJcIn0sc2xvdDpcImhlYWRlclwifSxbX3ZtLnNob3VsZEdvQmFjaz9fYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC10cmFuc2Zvcm1lcl9fZ28tYmFja1wiLGF0dHJzOnt0aXRsZTpfdm0udChcIkdvIGJhY2tcIil9LG9uOntjbGljazpfdm0uZ29CYWNrfX0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX2MoXCJjb250ZW50LWhlYWRlclwiLHthdHRyczp7XCJoaWRlLW1lbnVcIjp0cnVlfX0sW19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1oZWFkZXItdGV4dC0tdmlzaWJsZVwifSxbX3ZtLl92KF92bS5fcyhfdm0udChcIkVkaXQgSW1hZ2VcIikpKV0pXSldLDEpLF92bS5fdihcIiBcIiksX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3Qtc2lkZWJhclwiLGF0dHJzOntzbG90Olwic2lkZWJhclwifSxzbG90Olwic2lkZWJhclwifSxfdm0uX2woX3ZtLm9wdGlvbnMsZnVuY3Rpb24ob3B0aW9uKXtyZXR1cm4gX2MoXCJkaXZcIix7a2V5Om9wdGlvbixzdGF0aWNDbGFzczpcImZzdC1zaWRlYmFyX19vcHRpb25cIixcImNsYXNzXCI6X3ZtLmdldFNpZGViYXJDbGFzc2VzKG9wdGlvbiksYXR0cnM6e3RpdGxlOl92bS50KF92bS5jYXBpdGFsaXplKG9wdGlvbikpLHRhYmluZGV4OlwiMFwifSxvbjp7Y2xpY2s6ZnVuY3Rpb24gY2xpY2soJGV2ZW50KXtyZXR1cm4gX3ZtLmhhbmRsZUNsaWNrKG9wdGlvbik7fSxrZXl1cDpmdW5jdGlvbiBrZXl1cCgkZXZlbnQpe2lmKCEkZXZlbnQudHlwZS5pbmRleE9mKFwia2V5XCIpJiZfdm0uX2soJGV2ZW50LmtleUNvZGUsXCJlbnRlclwiLDEzLCRldmVudC5rZXksXCJFbnRlclwiKSl7cmV0dXJuIG51bGw7fXJldHVybiBfdm0uaGFuZGxlQ2xpY2sob3B0aW9uKTt9fX0sW19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzdC1pY29uXCIsXCJjbGFzc1wiOl92bS5nZW5JY29uQ2xhc3Mob3B0aW9uKX0pLF92bS5fdihcIlxcbiAgICAgIFwiK192bS5fcyhfdm0udChfdm0uY2FwaXRhbGl6ZShvcHRpb24pKSkrXCJcXG4gICAgXCIpXSk7fSksMCksX3ZtLl92KFwiIFwiKSxfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC10cmFuc2Zvcm1lclwiLGF0dHJzOntzbG90OlwiYm9keVwifSxzbG90OlwiYm9keVwifSxbX3ZtLnN0YXRlPT09XCJsb2FkaW5nXCI/X2MoXCJsb2FkaW5nXCIpOl92bS5fZSgpLF92bS5fdihcIiBcIiksX3ZtLnN0YXRlPT09XCJlcnJvcmVkXCI/X2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3AtdHJhbnNmb3JtZXJfX2Vycm9yXCJ9LFtfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzdC1pY29uLS1icm9rZW4taW1hZ2VcIn0pLF92bS5fdihcIlxcbiAgICAgIFwiK192bS5fcyhfdm0udChcIlRoaXMgaW1hZ2UgY2Fubm90IGJlIGVkaXRlZFwiKSkrXCJcXG4gICAgXCIpXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYyhcImltZ1wiLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6X3ZtLnN0YXRlIT09XCJsb2FkaW5nXCImJl92bS5zdGF0ZSE9PVwiZXJyb3JlZFwiLGV4cHJlc3Npb246XCJzdGF0ZSAhPT0gJ2xvYWRpbmcnICYmIHN0YXRlICE9PSAnZXJyb3JlZCdcIn1dLHJlZjpcImltYWdlXCIsc3RhdGljU3R5bGU6e1wibWF4LXdpZHRoXCI6XCIxMDAlXCJ9fSksX3ZtLl92KFwiIFwiKSxfYyhcImRpdlwiLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6X3ZtLnN0YXRlPT09XCJyb3RhdGVcIixleHByZXNzaW9uOlwic3RhdGUgPT09ICdyb3RhdGUnXCJ9XSxzdGF0aWNDbGFzczpcImZzcC10cmFuc2Zvcm1lcl9fcm90YXRlXCJ9LFtfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC10cmFuc2Zvcm1lcl9fcm90YXRlLWxlZnRcIixhdHRyczp7dGl0bGU6XCJSb3RhdGUgLTkwwrBcIn0sb246e2NsaWNrOmZ1bmN0aW9uIGNsaWNrKCRldmVudCl7cmV0dXJuIF92bS5yb3RhdGUoLTkwKTt9fX0pLF92bS5fdihcIiBcIiksX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3AtdHJhbnNmb3JtZXJfX3JvdGF0ZS1yaWdodFwiLGF0dHJzOnt0aXRsZTpcIlJvdGF0ZSA5MMKwXCJ9LG9uOntjbGljazpmdW5jdGlvbiBjbGljaygkZXZlbnQpe3JldHVybiBfdm0ucm90YXRlKDkwKTt9fX0pXSksX3ZtLl92KFwiIFwiKSxfYyhcImZvb3Rlci1uYXZcIix7YXR0cnM6e3Nsb3Q6XCJmb290ZXJcIixcImlzLXZpc2libGVcIjohX3ZtLnVwbG9hZFN0YXJ0ZWR9LHNsb3Q6XCJmb290ZXJcIn0sW19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1idXR0b24gZnNwLWJ1dHRvbi0tY2FuY2VsXCIsXCJjbGFzc1wiOntcImZzcC1idXR0b24tLWNhbmNlbC1kaXNhYmxlZFwiOiFfdm0uZmlsZS50cmFuc2Zvcm1lZHx8X3ZtLnN0YXRlPT09XCJsb2FkaW5nXCJ9LGF0dHJzOntzbG90OlwibmF2LWxlZnRcIn0sb246e2NsaWNrOl92bS5oYW5kbGVSZXNldH0sc2xvdDpcIm5hdi1sZWZ0XCJ9LFtfdm0uX3YoXCJcXG4gICAgICAgIFwiK192bS5fcyhfdm0udChcIlJlc2V0XCIpKStcIlxcbiAgICAgIFwiKV0pLF92bS5fdihcIiBcIiksX2MoXCJkaXZcIix7YXR0cnM6e3Nsb3Q6XCJuYXYtcmlnaHRcIn0sc2xvdDpcIm5hdi1yaWdodFwifSxbX3ZtLnN0YXRlIT09XCJyZWFkeVwiJiZfdm0uc3RhdGUhPT1cImxvYWRpbmdcIiYmX3ZtLnN0YXRlIT09XCJlcnJvcmVkXCI/X2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLWJ1dHRvbiBmc3AtYnV0dG9uLS1vdXRsaW5lXCIsYXR0cnM6e3RpdGxlOlwiU2F2ZVwiLHRhYmluZGV4OlwiMFwifSxvbjp7Y2xpY2s6X3ZtLmhhbmRsZUFwcGx5LGtleXVwOmZ1bmN0aW9uIGtleXVwKCRldmVudCl7aWYoISRldmVudC50eXBlLmluZGV4T2YoXCJrZXlcIikmJl92bS5faygkZXZlbnQua2V5Q29kZSxcImVudGVyXCIsMTMsJGV2ZW50LmtleSxcIkVudGVyXCIpKXtyZXR1cm4gbnVsbDt9cmV0dXJuIF92bS5oYW5kbGVBcHBseSgkZXZlbnQpO319fSxbX3ZtLl92KFwiXFxuICAgICAgICAgIFwiK192bS5fcyhfdm0udChcIlNhdmVcIikpK1wiXFxuICAgICAgICBcIildKTpfdm0ubWF4RmlsZXM9PT0xP19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1idXR0b24gZnNwLWJ1dHRvbi0tcHJpbWFyeVwiLFwiY2xhc3NcIjp7XCJmc3AtYnV0dG9uLS1kaXNhYmxlZFwiOl92bS5zdGF0ZT09PVwibG9hZGluZ1wifSxhdHRyczp7dGl0bGU6X3ZtLnQoXCJVcGxvYWRcIiksdGFiaW5kZXg6XCIwXCJ9LG9uOntjbGljazpfdm0uaGFuZGxlVXBsb2FkLGtleXVwOmZ1bmN0aW9uIGtleXVwKCRldmVudCl7aWYoISRldmVudC50eXBlLmluZGV4T2YoXCJrZXlcIikmJl92bS5faygkZXZlbnQua2V5Q29kZSxcImVudGVyXCIsMTMsJGV2ZW50LmtleSxcIkVudGVyXCIpKXtyZXR1cm4gbnVsbDt9cmV0dXJuIF92bS5oYW5kbGVVcGxvYWQoJGV2ZW50KTt9fX0sW192bS5fdihcIlxcbiAgICAgICAgICBcIitfdm0uX3MoX3ZtLnQoXCJVcGxvYWRcIikpK1wiXFxuICAgICAgICBcIildKTpfdm0uY3JvcEZvcmNlJiZfdm0uZmlsZXNOb3RDcm9wcGVkLmxlbmd0aCYmX3ZtLnN0YXRlIT09XCJsb2FkaW5nXCI/X2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLWJ1dHRvbiBmc3AtYnV0dG9uLS1wcmltYXJ5XCIsYXR0cnM6e3RpdGxlOlwiTmV4dFwiLHRhYmluZGV4OlwiMFwifSxvbjp7Y2xpY2s6X3ZtLmhhbmRsZU5leHQsa2V5dXA6ZnVuY3Rpb24ga2V5dXAoJGV2ZW50KXtpZighJGV2ZW50LnR5cGUuaW5kZXhPZihcImtleVwiKSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwiZW50ZXJcIiwxMywkZXZlbnQua2V5LFwiRW50ZXJcIikpe3JldHVybiBudWxsO31yZXR1cm4gX3ZtLmhhbmRsZU5leHQoJGV2ZW50KTt9fX0sW192bS5fdihcIlxcbiAgICAgICAgICBcIitfdm0uX3MoX3ZtLnQoXCJOZXh0XCIpKStcIlxcbiAgICAgICAgXCIpXSk6X2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLWJ1dHRvbiBmc3AtYnV0dG9uLS1wcmltYXJ5XCIsXCJjbGFzc1wiOntcImZzcC1idXR0b24tLWRpc2FibGVkXCI6X3ZtLnN0YXRlPT09XCJsb2FkaW5nXCJ9LGF0dHJzOnt0aXRsZTpcIkRvbmVcIix0YWJpbmRleDpcIjBcIn0sb246e2NsaWNrOl92bS5oYW5kbGVEb25lLGtleXVwOmZ1bmN0aW9uIGtleXVwKCRldmVudCl7aWYoISRldmVudC50eXBlLmluZGV4T2YoXCJrZXlcIikmJl92bS5faygkZXZlbnQua2V5Q29kZSxcImVudGVyXCIsMTMsJGV2ZW50LmtleSxcIkVudGVyXCIpKXtyZXR1cm4gbnVsbDt9cmV0dXJuIF92bS5oYW5kbGVEb25lKCRldmVudCk7fX19LFtfdm0uX3YoXCJcXG4gICAgICAgICAgXCIrX3ZtLl9zKF92bS50KFwiRG9uZVwiKSkrXCJcXG4gICAgICAgIFwiKV0pXSldKSxfdm0uX3YoXCIgXCIpLF9jKFwiZm9vdGVyLW5hdlwiLHthdHRyczp7c2xvdDpcImZvb3RlclwiLFwiaXMtdmlzaWJsZVwiOl92bS51cGxvYWRTdGFydGVkLFwiZnVsbC13aWR0aFwiOnRydWV9LHNsb3Q6XCJmb290ZXJcIn0sW19jKFwic3BhblwiLHthdHRyczp7c2xvdDpcIm5hdi1jZW50ZXJcIn0sc2xvdDpcIm5hdi1jZW50ZXJcIn0sW19jKFwicHJvZ3Jlc3MtYmFyXCIse2F0dHJzOntwcm9ncmVzczpfdm0uZmlsZS5wcm9ncmVzc319KV0sMSldKV0sMSldKTt9O3ZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyRwPVtdO19fdnVlX3JlbmRlcl9fJHAuX3dpdGhTdHJpcHBlZD10cnVlOy8qIHN0eWxlICovdmFyIF9fdnVlX2luamVjdF9zdHlsZXNfXyRwPXVuZGVmaW5lZDsvKiBzY29wZWQgKi92YXIgX192dWVfc2NvcGVfaWRfXyRwPXVuZGVmaW5lZDsvKiBtb2R1bGUgaWRlbnRpZmllciAqL3ZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJHA9dW5kZWZpbmVkOy8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi92YXIgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJHA9ZmFsc2U7Lyogc3R5bGUgaW5qZWN0ICovIC8qIHN0eWxlIGluamVjdCBTU1IgKi8gLyogc3R5bGUgaW5qZWN0IHNoYWRvdyBkb20gKi92YXIgVHJhbnNmb3JtPW5vcm1hbGl6ZUNvbXBvbmVudCh7cmVuZGVyOl9fdnVlX3JlbmRlcl9fJHAsc3RhdGljUmVuZGVyRm5zOl9fdnVlX3N0YXRpY1JlbmRlckZuc19fJHB9LF9fdnVlX2luamVjdF9zdHlsZXNfXyRwLF9fdnVlX3NjcmlwdF9fJHAsX192dWVfc2NvcGVfaWRfXyRwLF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyRwLF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kcCxmYWxzZSx1bmRlZmluZWQsdW5kZWZpbmVkLHVuZGVmaW5lZCk7dmFyIHByb3BNYXA9eydyJzoncm90YXRlJywncnknOidyb3RhdGVZJywndCc6J3RyYW5zbGF0ZVgnLCd0eSc6J3RyYW5zbGF0ZVknfTt2YXIgdHJhbnNmb3Jtc01hcD17JzInOnsncnknOjE4MH0sJzMnOnsncic6MTgwfSwnNCc6eydyJzoxODAsJ3J5JzoxODB9LCc1Jzp7J3InOjI3MCwncnknOjE4MH0sJzYnOnsndHknOi0xLCdyJzo5MH0sJzcnOnsndHknOi0xLCd0JzotMSwncic6OTAsJ3J5JzoxODB9LCc4Jzp7J3QnOi0xLCdyJzoyNzB9fTt2YXIgdHJhbnNmb3JtT3JpZ2luTWFwPXsnNSc6J3RvcCBsZWZ0JywnNic6J2JvdHRvbSBsZWZ0JywnNyc6J2JvdHRvbSByaWdodCcsJzgnOid0b3AgcmlnaHQnfTtmdW5jdGlvbiBleHBhbmRUcmFuc2Zvcm1zKHRyYW5zZm9ybXMpe3ZhciBvPXt9O3ZhciBleHBhbmRlZD1mYWxzZTtmb3IodmFyIHByb3AgaW4gdHJhbnNmb3Jtcyl7aWYoIWV4cGFuZGVkKWV4cGFuZGVkPXRydWU7dmFyIGVwPXByb3BNYXBbcHJvcF07b1tlcF09dHJhbnNmb3Jtc1twcm9wXTt9cmV0dXJuIGV4cGFuZGVkP286bnVsbDt9ZnVuY3Rpb24gZ2V0VmFsdWUkMShwcm9wLHZhbHVlKXtpZihwcm9wPT09J3InfHxwcm9wPT09J3J5Jyl7cmV0dXJuXCJcIi5jb25jYXQodmFsdWUsXCJkZWdcIik7fWlmKHByb3A9PT0ndCd8fHByb3A9PT0ndHknKXtyZXR1cm5cIlwiLmNvbmNhdCh2YWx1ZSoxMDAsXCIlXCIpO319ZnVuY3Rpb24gZXhwYW5kVHJhbnNmb3JtKHRyYW5zZm9ybXMpe3ZhciBhPVtdO2Zvcih2YXIgcHJvcCBpbiB0cmFuc2Zvcm1zKXt2YXIgZXA9cHJvcE1hcFtwcm9wXTthLnB1c2goZXArJygnK2dldFZhbHVlJDEocHJvcCx0cmFuc2Zvcm1zW3Byb3BdKSsnKScpO31yZXR1cm4gYS5sZW5ndGg/YS5qb2luKCcgJyk6bnVsbDt9ZnVuY3Rpb24gZXhwYW5kVHJhbnNmb3JtU3RyaW5ncyh0cmFuc2Zvcm1zKXt2YXIgbz17fTt2YXIgZXhwYW5kZWQ9ZmFsc2U7Zm9yKHZhciBwcm9wIGluIHRyYW5zZm9ybXMpe2lmKCFleHBhbmRlZClleHBhbmRlZD10cnVlO3ZhciBlcD1wcm9wTWFwW3Byb3BdO29bZXBdPWVwKycoJytnZXRWYWx1ZSQxKHByb3AsdHJhbnNmb3Jtc1twcm9wXSkrJyknO31yZXR1cm4gZXhwYW5kZWQ/bzpudWxsO30vKipcbiAgICogVGFrZXMgdGhlIGlucHV0IEVYSUYgb3JpZW50YXRpb24gYW5kIHJldHVybnMgdGhlIENTUyBydWxlcyBuZWVkZWQgdG8gZGlzcGxheSB0aGUgaW1hZ2UgY29ycmVjdGx5IGluIHRoZSBicm93c2VyLlxuICAgKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKX0gb3JpZW50YXRpb24gVGhlIEVYSUYgb3JpZW50YXRpb24uXG4gICAqIEByZXR1cm5zIHtFeGlmMkNzc1JldHVybn0gQW4gb2JqZWN0IHdpdGggYHRyYW5zZm9ybWAsIGB0cmFuc2Zvcm0tb3JpZ2luYCAobm90IHNob3duIGluIEpTRG9jIGJlY2F1c2Ugb2YgaHlwaGVuKSwgYHRyYW5zZm9ybXNgIGFuZCBgdHJhbnNmb3JtU3RyaW5nc2AgcHJvcGVydGllcy5cbiAgICovZnVuY3Rpb24gZXhpZjJjc3Mob3JpZW50YXRpb24pe3ZhciBzPVwiXCIuY29uY2F0KG9yaWVudGF0aW9uKTt2YXIgdHJhbnNmb3Jtcz10cmFuc2Zvcm1zTWFwW3NdO3ZhciB0cmFuc2Zvcm09ZXhwYW5kVHJhbnNmb3JtKHRyYW5zZm9ybXMpO3ZhciB0cmFuc2Zvcm1PcmlnaW49dHJhbnNmb3JtT3JpZ2luTWFwW3NdO3ZhciBhbGxUcmFuc2Zvcm1zPWV4cGFuZFRyYW5zZm9ybXModHJhbnNmb3Jtcyk7dmFyIGFsbFRyYW5zZm9ybVN0cmluZ3M9ZXhwYW5kVHJhbnNmb3JtU3RyaW5ncyh0cmFuc2Zvcm1zKTt2YXIgY3NzPXt9O2lmKHRyYW5zZm9ybSl7Y3NzWyd0cmFuc2Zvcm0nXT10cmFuc2Zvcm07fWlmKHRyYW5zZm9ybU9yaWdpbil7Y3NzWyd0cmFuc2Zvcm0tb3JpZ2luJ109dHJhbnNmb3JtT3JpZ2luO31pZihhbGxUcmFuc2Zvcm1zKXtjc3NbJ3RyYW5zZm9ybXMnXT1hbGxUcmFuc2Zvcm1zO31pZihhbGxUcmFuc2Zvcm1TdHJpbmdzKXtjc3NbJ3RyYW5zZm9ybVN0cmluZ3MnXT1hbGxUcmFuc2Zvcm1TdHJpbmdzO31yZXR1cm4gY3NzO312YXIgcm91bmRGaWxlU2l6ZT1mdW5jdGlvbiByb3VuZEZpbGVTaXplKG51bWIpe2lmKG51bWI+PTEwNDg1NzYpe3JldHVyblwiXCIuY29uY2F0KE1hdGgucm91bmQobnVtYi8xMDQ4NTc2KSxcIk1CXCIpO31pZihudW1iPj0xMDI0KXtyZXR1cm5cIlwiLmNvbmNhdChNYXRoLnJvdW5kKG51bWIvMTAyNCksXCJLQlwiKTt9cmV0dXJuXCJcIi5jb25jYXQobnVtYixcIkJcIik7fTsvL1xudmFyIHNjcmlwdCRxPXtwcm9wczp7ZmlsZTpPYmplY3R9LGNvbXB1dGVkOl9vYmplY3RTcHJlYWQoe30saW5kZXhfZXNtLm1hcEdldHRlcnMoWydibG9iVVJMcycsJ2Nyb3BGb3JjZScsJ2Rpc2FibGVUcmFuc2Zvcm1lcicsJ2Rpc2FibGVUaHVtYm5haWxzJywndXBsb2FkU3RhcnRlZCddKSksbWV0aG9kczpfb2JqZWN0U3ByZWFkKHt9LGluZGV4X2VzbS5tYXBBY3Rpb25zKFsnYWRkRmlsZScsJ3RyYW5zZm9ybUltYWdlJ10pLHtpc0VkaXRhYmxlOmZ1bmN0aW9uIGlzRWRpdGFibGUoZmlsZSl7cmV0dXJuIGlzRWRpdGFibGVJbWFnZShmaWxlKTt9LGlzRG9uZTpmdW5jdGlvbiBpc0RvbmUoZmlsZSl7cmV0dXJuIGZpbGUuc3RhdGU9PT1TVEFURVMuZG9uZTt9LGlzRmFpbGVkOmZ1bmN0aW9uIGlzRmFpbGVkKGZpbGUpe3JldHVybiBmaWxlLnN0YXRlPT09U1RBVEVTLmZhaWxlZDt9LGlzVHJhbnNmb3JtZWQ6ZnVuY3Rpb24gaXNUcmFuc2Zvcm1lZChmaWxlKXtyZXR1cm4gZmlsZS50cmFuc2Zvcm1lZDt9LGdlbmVyYXRlQ2xhc3M6ZnVuY3Rpb24gZ2VuZXJhdGVDbGFzcyhmaWxlKXtpZihpc0VkaXRhYmxlSW1hZ2UoZmlsZSkpe3JldHVybidmc3AtZ3JpZF9faWNvbi1pbWFnZSc7fWlmKF9pc0F1ZGlvKGZpbGUpKXtyZXR1cm4nZnNwLWdyaWRfX2ljb24tYXVkaW8nO31pZihmaWxlLm1pbWV0eXBlPT09J2FwcGxpY2F0aW9uL3BkZicpe3JldHVybidmc3AtZ3JpZF9faWNvbi1wZGYnO31yZXR1cm4nZnNwLWdyaWRfX2ljb24tZmlsZSc7fSxnZW5lcmF0ZVRodW1ibmFpbDpmdW5jdGlvbiBnZW5lcmF0ZVRodW1ibmFpbChmaWxlKXtpZih0aGlzLmJsb2JVUkxzW2ZpbGUudXVpZF0pe3JldHVybiB0aGlzLmJsb2JVUkxzW2ZpbGUudXVpZF07fXZhciBpbWFnZUJsb2I9ZmlsZS50cmFuc2Zvcm1lZHx8ZmlsZS5vcmlnaW5hbEZpbGU7dmFyIHVybD13aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChpbWFnZUJsb2IpO3RoaXMuJHN0b3JlLmNvbW1pdCgnU0VUX0JMT0JfVVJMJyx7dXVpZDpmaWxlLnV1aWQsdXJsOnVybH0pOy8vIHJvdGF0ZSBhY2NvcmRpbmcgdG8gZXhpZlxudGhpcy5maXhUbXBUaHVtYm5haWwoZmlsZSk7cmV0dXJuIHVybDt9LGZpeFRtcFRodW1ibmFpbDpmdW5jdGlvbiBmaXhUbXBUaHVtYm5haWwoZmlsZSl7dmFyIF90aGlzMzE9dGhpcztibG9iVG9BcnJheUJ1ZmZlcihmaWxlLnRyYW5zZm9ybWVkfHxmaWxlLm9yaWdpbmFsRmlsZSkudGhlbihmdW5jdGlvbihmaWxlQXJyYXkpe3ZhciBjc3NPcmllbnRhdGlvbj1leGlmMmNzcyhleGlmLmdldE9yaWVudGF0aW9uKGZpbGVBcnJheSkpO3ZhciByZWY9X3RoaXMzMS4kcmVmc1tcInRodW1iLVwiLmNvbmNhdChmaWxlLnV1aWQpXTtpZighcmVmfHwhY3NzT3JpZW50YXRpb258fCFjc3NPcmllbnRhdGlvbi50cmFuc2Zvcm0pe3JldHVybjt9cmVmLnN0eWxlLnRyYW5zZm9ybT1jc3NPcmllbnRhdGlvbi50cmFuc2Zvcm07aWYoIWNzc09yaWVudGF0aW9uWyd0cmFuc2Zvcm0tb3JpZ2luJ10pe3JldHVybjt9cmVmLnN0eWxlWyd0cmFuc2Zvcm0tb3JpZ2luJ109Y3NzT3JpZW50YXRpb25bJ3RyYW5zZm9ybS1vcmlnaW4nXTt9KTt9LHJldmVydDpmdW5jdGlvbiByZXZlcnQoZmlsZSl7dGhpcy4kc3RvcmUuY29tbWl0KCdSRU1PVkVfRklMRV9UUkFOU0ZPUk1BVElPTicsZmlsZS51dWlkKTt0aGlzLiRzdG9yZS5jb21taXQoJ1JFTU9WRV9CTE9CX1VSTCcsZmlsZS51dWlkKTt9LHRyYW5zZm9ybTpmdW5jdGlvbiB0cmFuc2Zvcm0odXVpZCl7dGhpcy4kc3RvcmUuY29tbWl0KCdSRU1PVkVfQkxPQl9VUkwnLHV1aWQpO3RoaXMudHJhbnNmb3JtSW1hZ2UodXVpZCk7fSx0cmFuc2xhdGVkRmlsZVNpemU6ZnVuY3Rpb24gdHJhbnNsYXRlZEZpbGVTaXplKGZpbGUpe2lmKGZpbGUuc291cmNlS2luZD09PSdjbG91ZCcmJiFmaWxlLnRyYW5zZm9ybWVkKXtyZXR1cm4nJzt9cmV0dXJuIHJvdW5kRmlsZVNpemUoZmlsZS5zaXplKTt9fSl9Oy8qIHNjcmlwdCAqL3ZhciBfX3Z1ZV9zY3JpcHRfXyRxPXNjcmlwdCRxOy8qIHRlbXBsYXRlICovdmFyIF9fdnVlX3JlbmRlcl9fJHE9ZnVuY3Rpb24gX192dWVfcmVuZGVyX18kcSgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1zdW1tYXJ5X19pdGVtXCIsc3R5bGU6e29wYWNpdHk6X3ZtLnVwbG9hZFN0YXJ0ZWQmJl92bS5pc0RvbmUoX3ZtLmZpbGUpP1wiMC43XCI6XCIxXCJ9fSxbKF92bS5maWxlLnNvdXJjZT09PVwibG9jYWxfZmlsZV9zeXN0ZW1cInx8X3ZtLmlzVHJhbnNmb3JtZWQoX3ZtLmZpbGUpKSYmIV92bS5kaXNhYmxlVGh1bWJuYWlscyYmX3ZtLmlzRWRpdGFibGUoX3ZtLmZpbGUpP19jKFwiaW1nXCIse2tleTpfdm0uZmlsZS51dWlkLHJlZjpcInRodW1iLVwiK192bS5maWxlLnV1aWQsc3RhdGljQ2xhc3M6XCJmc3Atc3VtbWFyeV9fdGh1bWJuYWlsXCIsYXR0cnM6e3NyYzpfdm0uZ2VuZXJhdGVUaHVtYm5haWwoX3ZtLmZpbGUpfX0pOl92bS5pc0VkaXRhYmxlKF92bS5maWxlKSYmX3ZtLmZpbGUuc291cmNlIT09XCJsb2NhbF9maWxlX3N5c3RlbVwiJiYhX3ZtLmRpc2FibGVUaHVtYm5haWxzP19jKFwiZGl2XCIsW19jKFwiaW1nXCIse3N0YXRpY0NsYXNzOlwiZnNwLXN1bW1hcnlfX3RodW1ibmFpbFwiLGF0dHJzOntzcmM6X3ZtLmZpbGUudGh1bWJuYWlsfX0pXSk6X2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3Atc3VtbWFyeV9fdGh1bWJuYWlsLWNvbnRhaW5lclwifSxbX2MoXCJzcGFuXCIse1wiY2xhc3NcIjpfdm0uZ2VuZXJhdGVDbGFzcyhfdm0uZmlsZSl9KV0pLF92bS5fdihcIiBcIiksX2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLXN1bW1hcnlfX2l0ZW0tbmFtZVwiLGF0dHJzOnt0aXRsZTpfdm0uZmlsZS5uYW1lfX0sW19jKFwic3BhblwiLFtfdm0uX3YoX3ZtLl9zKF92bS5maWxlLm5hbWUpKV0pLF92bS5fdihcIiBcIiksX2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLXN1bW1hcnlfX3NpemVcIn0sWyFfdm0uaXNGYWlsZWQoX3ZtLmZpbGUpJiYoX3ZtLmZpbGUuc291cmNlPT09XCJsb2NhbF9maWxlX3N5c3RlbVwifHxfdm0uaXNUcmFuc2Zvcm1lZChfdm0uZmlsZSkpJiZfdm0udXBsb2FkU3RhcnRlZD9fYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3Atc3VtbWFyeV9fc2l6ZS1wcm9ncmVzc1wifSxbX3ZtLl92KFwiXFxuICAgICAgICBcIitfdm0uX3MoX3ZtLmZpbGUucHJvZ3Jlc3NTaXplKStcIiAvXFxuICAgICAgXCIpXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYyhcInNwYW5cIixbX3ZtLl92KFwiIFwiK192bS5fcyhfdm0udHJhbnNsYXRlZEZpbGVTaXplKF92bS5maWxlKSkpXSldKV0pLF92bS5fdihcIiBcIiksX3ZtLnVwbG9hZFN0YXJ0ZWQmJiFfdm0uaXNGYWlsZWQoX3ZtLmZpbGUpP19jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLXN1bW1hcnlfX2l0ZW0tcHJvZ3Jlc3NcIixzdHlsZTp7d2lkdGg6X3ZtLmZpbGUucHJvZ3Jlc3MrXCIlXCJ9fSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1zdW1tYXJ5X19hY3Rpb25zLWNvbnRhaW5lclwifSxbIV92bS51cGxvYWRTdGFydGVkJiYhX3ZtLmRpc2FibGVUcmFuc2Zvcm1lciYmIV92bS5pc1RyYW5zZm9ybWVkKF92bS5maWxlKSYmX3ZtLmlzRWRpdGFibGUoX3ZtLmZpbGUpP19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1zdW1tYXJ5X19hY3Rpb24gZnNwLXN1bW1hcnlfX2FjdGlvbi0tYnV0dG9uXCIsXCJjbGFzc1wiOntcImZzcC1zdW1tYXJ5X19hY3Rpb24tLWJ1dHRvbi1ibHVlXCI6X3ZtLmNyb3BGb3JjZX0sYXR0cnM6e3RhYmluZGV4OlwiMFwifSxvbjp7Y2xpY2s6ZnVuY3Rpb24gY2xpY2soJGV2ZW50KXtyZXR1cm4gX3ZtLnRyYW5zZm9ybShfdm0uZmlsZS51dWlkKTt9LGtleXVwOmZ1bmN0aW9uIGtleXVwKCRldmVudCl7aWYoISRldmVudC50eXBlLmluZGV4T2YoXCJrZXlcIikmJl92bS5faygkZXZlbnQua2V5Q29kZSxcImVudGVyXCIsMTMsJGV2ZW50LmtleSxcIkVudGVyXCIpKXtyZXR1cm4gbnVsbDt9cmV0dXJuIF92bS50cmFuc2Zvcm0oX3ZtLmZpbGUudXVpZCk7fX19LFtfdm0uX3YoXCJcXG4gICAgICBcIitfdm0uX3MoX3ZtLmNyb3BGb3JjZT9fdm0udChcIkNyb3BcIik6X3ZtLnQoXCJFZGl0XCIpKStcIlxcbiAgICBcIildKTohX3ZtLnVwbG9hZFN0YXJ0ZWQmJl92bS5pc1RyYW5zZm9ybWVkKF92bS5maWxlKT9fYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3Atc3VtbWFyeV9fYWN0aW9uIGZzcC1zdW1tYXJ5X19hY3Rpb24tLWJ1dHRvblwiLG9uOntjbGljazpmdW5jdGlvbiBjbGljaygkZXZlbnQpe3JldHVybiBfdm0ucmV2ZXJ0KF92bS5maWxlKTt9fX0sW192bS5fdihcIlxcbiAgICAgIFwiK192bS5fcyhfdm0udChcIlJldmVydFwiKSkrXCJcXG4gICAgXCIpXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwhX3ZtLnVwbG9hZFN0YXJ0ZWQmJl92bS5pc0VkaXRhYmxlKF92bS5maWxlKT9fYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3Atc3VtbWFyeV9fYWN0aW9uLXNlcGFyYXRvclwifSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwhX3ZtLnVwbG9hZFN0YXJ0ZWR8fCFfdm0uaXNEb25lKF92bS5maWxlKT9fYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3Atc3VtbWFyeV9fYWN0aW9uIGZzcC1zdW1tYXJ5X19hY3Rpb24tLXJlbW92ZVwiLGF0dHJzOnt0YWJpbmRleDpcIjBcIn0sb246e2NsaWNrOmZ1bmN0aW9uIGNsaWNrKCRldmVudCl7cmV0dXJuIF92bS5hZGRGaWxlKF92bS5maWxlKTt9fX0pOl92bS5fZSgpXSldKTt9O3ZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyRxPVtdO19fdnVlX3JlbmRlcl9fJHEuX3dpdGhTdHJpcHBlZD10cnVlOy8qIHN0eWxlICovdmFyIF9fdnVlX2luamVjdF9zdHlsZXNfXyRxPXVuZGVmaW5lZDsvKiBzY29wZWQgKi92YXIgX192dWVfc2NvcGVfaWRfXyRxPXVuZGVmaW5lZDsvKiBtb2R1bGUgaWRlbnRpZmllciAqL3ZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJHE9dW5kZWZpbmVkOy8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi92YXIgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJHE9ZmFsc2U7Lyogc3R5bGUgaW5qZWN0ICovIC8qIHN0eWxlIGluamVjdCBTU1IgKi8gLyogc3R5bGUgaW5qZWN0IHNoYWRvdyBkb20gKi92YXIgU3VtbWFyeVJvdz1ub3JtYWxpemVDb21wb25lbnQoe3JlbmRlcjpfX3Z1ZV9yZW5kZXJfXyRxLHN0YXRpY1JlbmRlckZuczpfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyRxfSxfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kcSxfX3Z1ZV9zY3JpcHRfXyRxLF9fdnVlX3Njb3BlX2lkX18kcSxfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kcSxfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJHEsZmFsc2UsdW5kZWZpbmVkLHVuZGVmaW5lZCx1bmRlZmluZWQpOy8vXG52YXIgc2NyaXB0JHI9e2NvbXBvbmVudHM6e0NvbnRlbnRIZWFkZXI6Q29udGVudEhlYWRlcixGb290ZXJOYXY6Rm9vdGVyTmF2LE1vZGFsOk1vZGFsLFNpZGViYXI6U2lkZWJhcixTdW1tYXJ5Um93OlN1bW1hcnlSb3d9LGNvbXB1dGVkOl9vYmplY3RTcHJlYWQoe30saW5kZXhfZXNtLm1hcEdldHRlcnMoWydhbGxvd01hbnVhbFJldHJ5JywnY2FuU3RhcnRVcGxvYWQnLCdjcm9wRmlsZXMnLCdjcm9wRm9yY2UnLCdkaXNhYmxlVHJhbnNmb3JtZXInLCdmaWxlQ291bnQnLCdtYXhGaWxlcycsJ2ZpbGVzRG9uZScsJ2ZpbGVzRmFpbGVkJywnZmlsZXNVcGxvYWRpbmcnLCdmaWxlc0xpc3QnLCdmaWxlc1BhdXNlZCcsJ2ZpbGVzV2FpdGluZycsJ2ZpbGVzTmVlZGVkQ291bnQnLCdpc0Nvbm5lY3RlZCcsJ2lzQ29ubmVjdGVkT2JqJywnbGFuZycsJ21pbkZpbGVzJywnbW9iaWxlTmF2QWN0aXZlJywncm91dGUnLCdyb3V0ZXNIaXN0b3J5JywndXBsb2FkU3RhcnRlZCddKSx7ZmlsZUJ1Y2tldHM6ZnVuY3Rpb24gZmlsZUJ1Y2tldHMoKXtpZih0aGlzLnVwbG9hZFN0YXJ0ZWQpe2lmKCF0aGlzLmlzQ29ubmVjdGVkJiZ0aGlzLmFsbG93TWFudWFsUmV0cnkpe3JldHVyblt7aWQ6J2ZhaWxlZCcsbmFtZTonQ29ubmVjdGlvbiBMb3N0JyxmaWxlczp0aGlzLmZpbGVzUGF1c2VkLmNvbmNhdCh0aGlzLmZpbGVzRmFpbGVkKX0se2lkOidkb25lJyxuYW1lOidDb21wbGV0ZWQnLGZpbGVzOnRoaXMuZmlsZXNEb25lfSx7aWQ6J3VwbG9hZGluZycsbmFtZTonVXBsb2FkaW5nJyxmaWxlczp0aGlzLmZpbGVzVXBsb2FkaW5nLmNvbmNhdCh0aGlzLmZpbGVzV2FpdGluZyl9XTt9cmV0dXJuW3tpZDonZmFpbGVkJyxuYW1lOidGYWlsZWQgV2hpbGUgVXBsb2FkaW5nJyxmaWxlczp0aGlzLmZpbGVzRmFpbGVkfSx7aWQ6J2RvbmUnLG5hbWU6J0NvbXBsZXRlZCcsZmlsZXM6dGhpcy5maWxlc0RvbmV9LHtpZDondXBsb2FkaW5nJyxuYW1lOidVcGxvYWRpbmcnLGZpbGVzOnRoaXMuZmlsZXNVcGxvYWRpbmcuY29uY2F0KHRoaXMuZmlsZXNXYWl0aW5nKX1dO31yZXR1cm5be2lkOidlZGl0ZWQnLG5hbWU6J0VkaXRlZCBJbWFnZXMnLGZpbGVzOnRoaXMub25seVRyYW5zZm9ybWVkSW1hZ2VzfSx7aWQ6J2Nyb3BwZWQnLG5hbWU6J0Nyb3BwZWQgSW1hZ2VzJyxmaWxlczp0aGlzLm9ubHlDcm9wcGVkSW1hZ2VzfSx7aWQ6J2ltYWdlcycsbmFtZTonSW1hZ2VzJyxmaWxlczp0aGlzLm9ubHlJbWFnZXN9LHtpZDonZmlsZXMnLG5hbWU6J0ZpbGVzJyxmaWxlczp0aGlzLm9ubHlGaWxlc31dO30sbWluRmlsZXNNZXNzYWdlOmZ1bmN0aW9uIG1pbkZpbGVzTWVzc2FnZSgpe2lmKHRoaXMuZmlsZXNOZWVkZWRDb3VudD09PTEpe3JldHVyblwiXCIuY29uY2F0KHRoaXMudCgnQWRkJyksXCIgMSBcIikuY29uY2F0KHRoaXMudCgnbW9yZSBmaWxlJykpO31pZih0aGlzLmZpbGVzTmVlZGVkQ291bnQ+MSl7cmV0dXJuXCJcIi5jb25jYXQodGhpcy50KCdBZGQnKSxcIiBcIikuY29uY2F0KHRoaXMuZmlsZXNOZWVkZWRDb3VudCxcIiBcIikuY29uY2F0KHRoaXMudCgnbW9yZSBmaWxlcycpKTt9cmV0dXJuIG51bGw7fSxvbmx5RmlsZXM6ZnVuY3Rpb24gb25seUZpbGVzKCl7cmV0dXJuIHRoaXMuZmlsZXNMaXN0LmZpbHRlcihmdW5jdGlvbihmKXtyZXR1cm4hX2lzSW1hZ2UoZik7fSk7fSxvbmx5SW1hZ2VzOmZ1bmN0aW9uIG9ubHlJbWFnZXMoKXtyZXR1cm4gdGhpcy5maWxlc0xpc3QuZmlsdGVyKGZ1bmN0aW9uKGYpe3JldHVybiBfaXNJbWFnZShmKTt9KS5maWx0ZXIoZnVuY3Rpb24oZil7cmV0dXJuIWYudHJhbnNmb3JtZWQ7fSk7fSxvbmx5VHJhbnNmb3JtZWRJbWFnZXM6ZnVuY3Rpb24gb25seVRyYW5zZm9ybWVkSW1hZ2VzKCl7aWYodGhpcy5jcm9wRm9yY2Upe3JldHVybiB0aGlzLmZpbGVzTGlzdC5maWx0ZXIoZnVuY3Rpb24oZil7cmV0dXJuIF9pc0ltYWdlKGYpO30pLmZpbHRlcihmdW5jdGlvbihmKXtyZXR1cm4gZi50cmFuc2Zvcm1lZDt9KS5maWx0ZXIoZnVuY3Rpb24oZil7cmV0dXJuIWYuY3JvcHBlZDt9KTt9cmV0dXJuIHRoaXMuZmlsZXNMaXN0LmZpbHRlcihmdW5jdGlvbihmKXtyZXR1cm4gX2lzSW1hZ2UoZik7fSkuZmlsdGVyKGZ1bmN0aW9uKGYpe3JldHVybiBmLnRyYW5zZm9ybWVkO30pO30sb25seUNyb3BwZWRJbWFnZXM6ZnVuY3Rpb24gb25seUNyb3BwZWRJbWFnZXMoKXtpZih0aGlzLmNyb3BGb3JjZSl7cmV0dXJuIHRoaXMuZmlsZXNMaXN0LmZpbHRlcihmdW5jdGlvbihmKXtyZXR1cm4gX2lzSW1hZ2UoZik7fSkuZmlsdGVyKGZ1bmN0aW9uKGYpe3JldHVybiBmLnRyYW5zZm9ybWVkO30pLmZpbHRlcihmdW5jdGlvbihmKXtyZXR1cm4gZi5jcm9wcGVkO30pO31yZXR1cm5bXTt9LGNyb3BGb3JjZUNvbXBsZXRlOmZ1bmN0aW9uIGNyb3BGb3JjZUNvbXBsZXRlKCl7aWYodGhpcy5jcm9wRm9yY2Upe3JldHVybiF0aGlzLm9ubHlJbWFnZXMubGVuZ3RoJiYhdGhpcy5vbmx5VHJhbnNmb3JtZWRJbWFnZXMubGVuZ3RoO31yZXR1cm4gdHJ1ZTt9LGhlYWRlclRleHQ6ZnVuY3Rpb24gaGVhZGVyVGV4dCgpe2lmKHRoaXMudXBsb2FkU3RhcnRlZCl7cmV0dXJuXCJcIi5jb25jYXQodGhpcy50KCdVcGxvYWRlZCcpLFwiIFwiKS5jb25jYXQodGhpcy5maWxlc0RvbmUubGVuZ3RoLFwiIC8gXCIpLmNvbmNhdCh0aGlzLmZpbGVDb3VudCk7fWlmKHRoaXMuY3JvcEZvcmNlJiYhdGhpcy5jcm9wRm9yY2VDb21wbGV0ZSl7cmV0dXJuIHRoaXMudCgnQ3JvcCBpcyByZXF1aXJlZCBvbiBpbWFnZXMnKTt9cmV0dXJuIHRoaXMudCgnU2VsZWN0ZWQgRmlsZXMnKTt9LHBsYWNlaG9sZGVyVGV4dDpmdW5jdGlvbiBwbGFjZWhvbGRlclRleHQoKXtyZXR1cm4gdGhpcy50KCdGaWx0ZXInKTt9LHJlY29ubmVjdFRpbWVyOmZ1bmN0aW9uIHJlY29ubmVjdFRpbWVyKCl7cmV0dXJuXCItIFJldHJ5aW5nIGluIFwiLmNvbmNhdCh0aGlzLnRpbWVyLnRvTG9jYWxlU3RyaW5nKHRoaXMubGFuZyksXCIuLi5cIik7fX0pLGRhdGE6ZnVuY3Rpb24gZGF0YSgpe3JldHVybnt0aW1lcjoyMCxmaWx0ZXI6Jyd9O30sbWV0aG9kczpfb2JqZWN0U3ByZWFkKHt9LGluZGV4X2VzbS5tYXBBY3Rpb25zKFsnYWRkRmlsZScsJ2Rlc2VsZWN0QWxsRmlsZXMnLCdyZXRyeUFsbEZhaWxlZEZpbGVzJywnc3RhcnRVcGxvYWRpbmcnLCd0cmFuc2Zvcm1JbWFnZSddKSx7ZmlsdGVyRmlsZXM6ZnVuY3Rpb24gZmlsdGVyRmlsZXMoZmlsZXNMaXN0KXt2YXIgcGF0dGVybj1uZXcgUmVnRXhwKHRoaXMuZmlsdGVyLCdpJyk7cmV0dXJuIGZpbGVzTGlzdC5maWx0ZXIoZnVuY3Rpb24oZil7cmV0dXJuIHBhdHRlcm4udGVzdChmLm5hbWUpO30pO30scmV0cnlBbGw6ZnVuY3Rpb24gcmV0cnlBbGwoKXt0aGlzLnJlc2V0Q291bnRkb3duKCk7dGhpcy5yZXRyeUFsbEZhaWxlZEZpbGVzKCk7dGhpcy4kc3RvcmUuY29tbWl0KCdTRVRfQ09OTkVDVElPTl9TVEFUVVMnLHRydWUpO3RoaXMuJHN0b3JlLmNvbW1pdCgnUkVTRVRfQVRURU1QVFMnKTt9LHN0YXJ0Q291bnRkb3duOmZ1bmN0aW9uIHN0YXJ0Q291bnRkb3duKCl7dmFyIF90aGlzMzI9dGhpcztpZighdGhpcy50aW1lckludGVydmFsKXt0aGlzLnRpbWVySW50ZXJ2YWw9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtfdGhpczMyLnRpbWVyLT0xO30sMTAwMCk7fX0scmVzZXRDb3VudGRvd246ZnVuY3Rpb24gcmVzZXRDb3VudGRvd24oKXtjbGVhckludGVydmFsKHRoaXMudGltZXJJbnRlcnZhbCk7dGhpcy50aW1lckludGVydmFsPW51bGw7dGhpcy50aW1lcj0yMDt9LHN0YXJ0VXBsb2FkTWF5YmU6ZnVuY3Rpb24gc3RhcnRVcGxvYWRNYXliZSgpe2lmKHRoaXMuY2FuU3RhcnRVcGxvYWQmJnRoaXMuY3JvcEZvcmNlQ29tcGxldGUpe3RoaXMuc3RhcnRVcGxvYWRpbmcoKTt9aWYoIXRoaXMuY3JvcEZvcmNlQ29tcGxldGUpe3ZhciBpbWFnZT10aGlzLm9ubHlJbWFnZXNbMF18fHRoaXMub25seVRyYW5zZm9ybWVkSW1hZ2VzWzBdO3RoaXMudHJhbnNmb3JtSW1hZ2UoaW1hZ2UudXVpZCk7fX0sdXBkYXRlRmlsdGVyOmZ1bmN0aW9uIHVwZGF0ZUZpbHRlcihldmVudCl7dGhpcy5maWx0ZXI9ZXZlbnQudGFyZ2V0LnZhbHVlO30saGlzdG9yeUJhY2s6ZnVuY3Rpb24gaGlzdG9yeUJhY2soKXt0aGlzLiRzdG9yZS5jb21taXQoJ0dPX0JBQ0tfV0lUSF9ST1VURV9DVVJSRU5UX1RZUEUnKTt9fSksd2F0Y2g6e2lzQ29ubmVjdGVkT2JqOntoYW5kbGVyOmZ1bmN0aW9uIGhhbmRsZXIoY29ubmVjdGVkKXtpZihjb25uZWN0ZWQudmFsdWU9PT1mYWxzZSl7dGhpcy5zdGFydENvdW50ZG93bigpO31pZihjb25uZWN0ZWQudmFsdWU9PT10cnVlKXt0aGlzLnJlc2V0Q291bnRkb3duKCk7fX19LHRpbWVyOntoYW5kbGVyOmZ1bmN0aW9uIGhhbmRsZXIodmFsdWUpe2lmKHZhbHVlPT09MCl7dGhpcy5yZXRyeUFsbCgpO319fSxmaWxlc0xpc3Q6e2ltbWVkaWF0ZTpmYWxzZSxoYW5kbGVyOmZ1bmN0aW9uIGhhbmRsZXIoZmlsZXMpey8vIEdvIGJhY2sgd2hlbiB0aGVyZSBpcyBub3RoaW5nIGxlZnQgaW4gdGhlIGN1cnJlbnQgdmlld1xuaWYoZmlsZXMubGVuZ3RoPT09MCl7aWYodGhpcy5jcm9wRmlsZXMpe3RoaXMuJHN0b3JlLmRpc3BhdGNoKCdjYW5jZWxQaWNrJyk7dGhpcy4kcm9vdC4kZGVzdHJveSgpO31lbHNle3RoaXMuJHN0b3JlLmNvbW1pdCgnR09fQkFDS19XSVRIX1JPVVRFX0NVUlJFTlRfVFlQRScpO3RoaXMuJHN0b3JlLmNvbW1pdCgnU0VUX1VQTE9BRF9TVEFSVEVEJyxmYWxzZSk7fX19fX19Oy8qIHNjcmlwdCAqL3ZhciBfX3Z1ZV9zY3JpcHRfXyRyPXNjcmlwdCRyOy8qIHRlbXBsYXRlICovdmFyIF9fdnVlX3JlbmRlcl9fJHI9ZnVuY3Rpb24gX192dWVfcmVuZGVyX18kcigpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYyhcIm1vZGFsXCIsW19jKFwiZGl2XCIse2F0dHJzOntzbG90OlwiaGVhZGVyXCJ9LHNsb3Q6XCJoZWFkZXJcIn0sW19jKFwiY29udGVudC1oZWFkZXJcIixbIV92bS5tb2JpbGVOYXZBY3RpdmU/X2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLWhlYWRlci10ZXh0LS12aXNpYmxlXCJ9LFtfdm0uX3YoXCJcXG4gICAgICAgIFwiK192bS5fcyhfdm0uaGVhZGVyVGV4dCkrXCJcXG4gICAgICBcIildKTpfdm0uX2UoKV0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKFwic2lkZWJhclwiLHthdHRyczp7c2xvdDpcInNpZGViYXJcIn0sc2xvdDpcInNpZGViYXJcIn0pLF92bS5fdihcIiBcIiksX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3Atc3VtbWFyeVwiLGF0dHJzOntzbG90OlwiYm9keVwifSxzbG90OlwiYm9keVwifSxbX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3Atc3VtbWFyeV9faGVhZGVyXCJ9LFtfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1zdW1tYXJ5X19maWx0ZXJcIn0sW19jKFwiaW5wdXRcIix7YXR0cnM6e3BsYWNlaG9sZGVyOl92bS5wbGFjZWhvbGRlclRleHR9LG9uOntpbnB1dDpfdm0udXBkYXRlRmlsdGVyfX0pLF92bS5fdihcIiBcIiksX2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLXN1bW1hcnlfX2ZpbHRlci1pY29uXCJ9KV0pXSksX3ZtLl92KFwiIFwiKSxfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1zdW1tYXJ5X19ib2R5XCJ9LF92bS5fbChfdm0uZmlsZUJ1Y2tldHMsZnVuY3Rpb24oYnVja2V0KXtyZXR1cm4gX3ZtLmZpbHRlckZpbGVzKGJ1Y2tldC5maWxlcykubGVuZ3RoP19jKFwiZGl2XCIse2tleTpidWNrZXQuaWR9LFtfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1ncmlkX19sYWJlbFwiLFwiY2xhc3NcIjp7XCJmc3AtY29sb3ItLWVycm9yXCI6YnVja2V0LmlkPT09XCJmYWlsZWRcIn19LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICBcIitfdm0uX3MoX3ZtLnQoYnVja2V0Lm5hbWUpKStcIlxcbiAgICAgICAgICAgIFwiKSxfdm0uaXNDb25uZWN0ZWQmJl92bS5hbGxvd01hbnVhbFJldHJ5JiZidWNrZXQuaWQ9PT1cImZhaWxlZFwiP19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1jb2xvci0tZXJyb3IgZnNwLXN1bW1hcnlfX3RyeS1hZ2FpblwiLG9uOntjbGljazpfdm0ucmV0cnlBbGx9fSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgXCIrX3ZtLl9zKF92bS50KFwiVHJ5IGFnYWluXCIpKStcIlxcbiAgICAgICAgICAgIFwiKV0pOiFfdm0uaXNDb25uZWN0ZWQmJl92bS5hbGxvd01hbnVhbFJldHJ5JiZidWNrZXQuaWQ9PT1cImZhaWxlZFwiP19jKFwic3BhblwiLHtzdGF0aWNDbGFzczpcImZzcC1jb2xvci0tZXJyb3JcIixvbjp7Y2xpY2s6X3ZtLnJldHJ5QWxsfX0sW192bS5fdihcIlxcbiAgICAgICAgICAgICAgXCIrX3ZtLl9zKF92bS5yZWNvbm5lY3RUaW1lcikrXCJcXG4gICAgICAgICAgICAgIFwiKSxfYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3Atc3VtbWFyeV9fdHJ5LWFnYWluXCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS50KFwiVHJ5IG5vd1wiKSkpXSldKTpfdm0uX2UoKV0pLF92bS5fdihcIiBcIiksX3ZtLl9sKF92bS5maWx0ZXJGaWxlcyhidWNrZXQuZmlsZXMpLGZ1bmN0aW9uKGZpbGUpe3JldHVybiBfYyhcIlN1bW1hcnlSb3dcIix7a2V5OmZpbGUudXVpZCxhdHRyczp7ZmlsZTpmaWxlfX0pO30pXSwyKTpfdm0uX2UoKTt9KSwwKV0pLF92bS5fdihcIiBcIiksX2MoXCJmb290ZXItbmF2XCIse2F0dHJzOntzbG90OlwiZm9vdGVyXCIsXCJpcy12aXNpYmxlXCI6IV92bS51cGxvYWRTdGFydGVkfSxzbG90OlwiZm9vdGVyXCJ9LFtfYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3AtYnV0dG9uIGZzcC1idXR0b24tLWNhbmNlbFwiLGF0dHJzOntzbG90OlwibmF2LWxlZnRcIix0YWJpbmRleDpcIjBcIn0sb246e2NsaWNrOl92bS5kZXNlbGVjdEFsbEZpbGVzLGtleXVwOmZ1bmN0aW9uIGtleXVwKCRldmVudCl7aWYoISRldmVudC50eXBlLmluZGV4T2YoXCJrZXlcIikmJl92bS5faygkZXZlbnQua2V5Q29kZSxcImVudGVyXCIsMTMsJGV2ZW50LmtleSxcIkVudGVyXCIpKXtyZXR1cm4gbnVsbDt9cmV0dXJuIF92bS5kZXNlbGVjdEFsbEZpbGVzKCRldmVudCk7fX0sc2xvdDpcIm5hdi1sZWZ0XCJ9LFtfdm0uX3YoXCJcXG4gICAgICBcIitfdm0uX3MoX3ZtLnQoXCJEZXNlbGVjdCBBbGxcIikpK1wiXFxuICAgIFwiKV0pLF92bS5fdihcIiBcIiksX2MoXCJkaXZcIix7YXR0cnM6e3Nsb3Q6XCJuYXYtcmlnaHRcIn0sc2xvdDpcIm5hdi1yaWdodFwifSxbX3ZtLmZpbGVDb3VudDxfdm0ubWF4RmlsZXM/X2MoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwiZnNwLWJ1dHRvbiBmc3AtYnV0dG9uLS1jYW5jZWxcIixhdHRyczp7XCJkYXRhLWUyZVwiOlwidXBsb2FkLW1vcmVcIix0YWJpbmRleDpcIjBcIn0sb246e2NsaWNrOl92bS5oaXN0b3J5QmFjayxrZXl1cDpmdW5jdGlvbiBrZXl1cCgkZXZlbnQpe2lmKCEkZXZlbnQudHlwZS5pbmRleE9mKFwia2V5XCIpJiZfdm0uX2soJGV2ZW50LmtleUNvZGUsXCJlbnRlclwiLDEzLCRldmVudC5rZXksXCJFbnRlclwiKSl7cmV0dXJuIG51bGw7fXJldHVybiBfdm0uaGlzdG9yeUJhY2soJGV2ZW50KTt9fX0sW192bS5fdihcIlxcbiAgICAgICAgXCIrX3ZtLl9zKF92bS50KFwiVXBsb2FkIG1vcmVcIikpK1wiXFxuICAgICAgXCIpXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYyhcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJmc3AtYnV0dG9uIGZzcC1idXR0b24tLXByaW1hcnkgZnNwLWJ1dHRvbi11cGxvYWRcIixcImNsYXNzXCI6e1wiZnNwLWJ1dHRvbi0tZGlzYWJsZWRcIjohX3ZtLmNhblN0YXJ0VXBsb2FkfSxhdHRyczp7XCJkYXRhLWUyZVwiOlwidXBsb2FkXCIsdGl0bGU6X3ZtLnQoXCJVcGxvYWRcIiksdGFiaW5kZXg6XCIwXCJ9LG9uOntjbGljazpfdm0uc3RhcnRVcGxvYWRNYXliZSxrZXl1cDpmdW5jdGlvbiBrZXl1cCgkZXZlbnQpe2lmKCEkZXZlbnQudHlwZS5pbmRleE9mKFwia2V5XCIpJiZfdm0uX2soJGV2ZW50LmtleUNvZGUsXCJlbnRlclwiLDEzLCRldmVudC5rZXksXCJFbnRlclwiKSl7cmV0dXJuIG51bGw7fXJldHVybiBfdm0uc3RhcnRVcGxvYWRNYXliZSgkZXZlbnQpO319fSxbIV92bS51cGxvYWRTdGFydGVkJiYhX3ZtLmNhblN0YXJ0VXBsb2FkP19jKFwic3BhblwiLFtfdm0uX3YoXCJcXG4gICAgICAgICAgXCIrX3ZtLl9zKF92bS5taW5GaWxlc01lc3NhZ2UpK1wiXFxuICAgICAgICBcIildKTpfYyhcInNwYW5cIixbX3ZtLl92KFwiXFxuICAgICAgICAgIFwiK192bS5fcyhfdm0udChcIlVwbG9hZFwiKSkrXCJcXG4gICAgICAgICAgXCIpLF9jKFwic3BhblwiLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6X3ZtLmZpbGVzV2FpdGluZy5sZW5ndGg+MSxleHByZXNzaW9uOlwiZmlsZXNXYWl0aW5nLmxlbmd0aCA+IDFcIn1dLHN0YXRpY0NsYXNzOlwiZnNwLWJhZGdlIGZzcC1iYWRnZS0tYnJpZ2h0XCJ9LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICBcIitfdm0uX3MoX3ZtLmZpbGVzV2FpdGluZy5sZW5ndGgpK1wiXFxuICAgICAgICAgIFwiKV0pXSldKV0pXSldLDEpO307dmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJHI9W107X192dWVfcmVuZGVyX18kci5fd2l0aFN0cmlwcGVkPXRydWU7Lyogc3R5bGUgKi92YXIgX192dWVfaW5qZWN0X3N0eWxlc19fJHI9dW5kZWZpbmVkOy8qIHNjb3BlZCAqL3ZhciBfX3Z1ZV9zY29wZV9pZF9fJHI9dW5kZWZpbmVkOy8qIG1vZHVsZSBpZGVudGlmaWVyICovdmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kcj11bmRlZmluZWQ7LyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL3ZhciBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kcj1mYWxzZTsvKiBzdHlsZSBpbmplY3QgKi8gLyogc3R5bGUgaW5qZWN0IFNTUiAqLyAvKiBzdHlsZSBpbmplY3Qgc2hhZG93IGRvbSAqL3ZhciBVcGxvYWRTdW1tYXJ5PW5vcm1hbGl6ZUNvbXBvbmVudCh7cmVuZGVyOl9fdnVlX3JlbmRlcl9fJHIsc3RhdGljUmVuZGVyRm5zOl9fdnVlX3N0YXRpY1JlbmRlckZuc19fJHJ9LF9fdnVlX2luamVjdF9zdHlsZXNfXyRyLF9fdnVlX3NjcmlwdF9fJHIsX192dWVfc2NvcGVfaWRfXyRyLF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyRyLF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kcixmYWxzZSx1bmRlZmluZWQsdW5kZWZpbmVkLHVuZGVmaW5lZCk7LyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbiAgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuICBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuICBUSElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbiAgS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG4gIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbiAgTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcbiAgU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbiAgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovIC8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovdmFyIF9leHRlbmRTdGF0aWNzPWZ1bmN0aW9uIGV4dGVuZFN0YXRpY3MoZCxiKXtfZXh0ZW5kU3RhdGljcz1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZCxiKXtkLl9fcHJvdG9fXz1iO318fGZ1bmN0aW9uKGQsYil7Zm9yKHZhciBwIGluIGIpe2lmKGIuaGFzT3duUHJvcGVydHkocCkpZFtwXT1iW3BdO319O3JldHVybiBfZXh0ZW5kU3RhdGljcyhkLGIpO307ZnVuY3Rpb24gX19leHRlbmRzKGQsYil7X2V4dGVuZFN0YXRpY3MoZCxiKTtmdW5jdGlvbiBfXygpe3RoaXMuY29uc3RydWN0b3I9ZDt9ZC5wcm90b3R5cGU9Yj09PW51bGw/T2JqZWN0LmNyZWF0ZShiKTooX18ucHJvdG90eXBlPWIucHJvdG90eXBlLG5ldyBfXygpKTt9dmFyIF9hc3NpZ249ZnVuY3Rpb24gX19hc3NpZ24oKXtfYXNzaWduPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uIF9fYXNzaWduKHQpe2Zvcih2YXIgcyxpPTEsbj1hcmd1bWVudHMubGVuZ3RoO2k8bjtpKyspe3M9YXJndW1lbnRzW2ldO2Zvcih2YXIgcCBpbiBzKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocyxwKSl0W3BdPXNbcF07fX1yZXR1cm4gdDt9O3JldHVybiBfYXNzaWduLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9O2Z1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLF9hcmd1bWVudHMsUCxnZW5lcmF0b3Ipe3JldHVybiBuZXcoUHx8KFA9UHJvbWlzZSkpKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7fWNhdGNoKGUpe3JlamVjdChlKTt9fWZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpO31jYXRjaChlKXtyZWplY3QoZSk7fX1mdW5jdGlvbiBzdGVwKHJlc3VsdCl7cmVzdWx0LmRvbmU/cmVzb2x2ZShyZXN1bHQudmFsdWUpOm5ldyBQKGZ1bmN0aW9uKHJlc29sdmUpe3Jlc29sdmUocmVzdWx0LnZhbHVlKTt9KS50aGVuKGZ1bGZpbGxlZCxyZWplY3RlZCk7fXN0ZXAoKGdlbmVyYXRvcj1nZW5lcmF0b3IuYXBwbHkodGhpc0FyZyxfYXJndW1lbnRzfHxbXSkpLm5leHQoKSk7fSk7fWZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsYm9keSl7dmFyIF89e2xhYmVsOjAsc2VudDpmdW5jdGlvbiBzZW50KCl7aWYodFswXSYxKXRocm93IHRbMV07cmV0dXJuIHRbMV07fSx0cnlzOltdLG9wczpbXX0sZix5LHQsZztyZXR1cm4gZz17bmV4dDp2ZXJiKDApLFwidGhyb3dcIjp2ZXJiKDEpLFwicmV0dXJuXCI6dmVyYigyKX0sdHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmKGdbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzO30pLGc7ZnVuY3Rpb24gdmVyYihuKXtyZXR1cm4gZnVuY3Rpb24odil7cmV0dXJuIHN0ZXAoW24sdl0pO307fWZ1bmN0aW9uIHN0ZXAob3Ape2lmKGYpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7d2hpbGUoXyl7dHJ5e2lmKGY9MSx5JiYodD1vcFswXSYyP3lbXCJyZXR1cm5cIl06b3BbMF0/eVtcInRocm93XCJdfHwoKHQ9eVtcInJldHVyblwiXSkmJnQuY2FsbCh5KSwwKTp5Lm5leHQpJiYhKHQ9dC5jYWxsKHksb3BbMV0pKS5kb25lKXJldHVybiB0O2lmKHk9MCx0KW9wPVtvcFswXSYyLHQudmFsdWVdO3N3aXRjaChvcFswXSl7Y2FzZSAwOmNhc2UgMTp0PW9wO2JyZWFrO2Nhc2UgNDpfLmxhYmVsKys7cmV0dXJue3ZhbHVlOm9wWzFdLGRvbmU6ZmFsc2V9O2Nhc2UgNTpfLmxhYmVsKys7eT1vcFsxXTtvcD1bMF07Y29udGludWU7Y2FzZSA3Om9wPV8ub3BzLnBvcCgpO18udHJ5cy5wb3AoKTtjb250aW51ZTtkZWZhdWx0OmlmKCEodD1fLnRyeXMsdD10Lmxlbmd0aD4wJiZ0W3QubGVuZ3RoLTFdKSYmKG9wWzBdPT09Nnx8b3BbMF09PT0yKSl7Xz0wO2NvbnRpbnVlO31pZihvcFswXT09PTMmJighdHx8b3BbMV0+dFswXSYmb3BbMV08dFszXSkpe18ubGFiZWw9b3BbMV07YnJlYWs7fWlmKG9wWzBdPT09NiYmXy5sYWJlbDx0WzFdKXtfLmxhYmVsPXRbMV07dD1vcDticmVhazt9aWYodCYmXy5sYWJlbDx0WzJdKXtfLmxhYmVsPXRbMl07Xy5vcHMucHVzaChvcCk7YnJlYWs7fWlmKHRbMl0pXy5vcHMucG9wKCk7Xy50cnlzLnBvcCgpO2NvbnRpbnVlO31vcD1ib2R5LmNhbGwodGhpc0FyZyxfKTt9Y2F0Y2goZSl7b3A9WzYsZV07eT0wO31maW5hbGx5e2Y9dD0wO319aWYob3BbMF0mNSl0aHJvdyBvcFsxXTtyZXR1cm57dmFsdWU6b3BbMF0/b3BbMV06dm9pZCAwLGRvbmU6dHJ1ZX07fX1mdW5jdGlvbiBfX3JlYWQobyxuKXt2YXIgbT10eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZvW1N5bWJvbC5pdGVyYXRvcl07aWYoIW0pcmV0dXJuIG87dmFyIGk9bS5jYWxsKG8pLHIsYXI9W10sZTt0cnl7d2hpbGUoKG49PT12b2lkIDB8fG4tLT4wKSYmIShyPWkubmV4dCgpKS5kb25lKXthci5wdXNoKHIudmFsdWUpO319Y2F0Y2goZXJyb3Ipe2U9e2Vycm9yOmVycm9yfTt9ZmluYWxseXt0cnl7aWYociYmIXIuZG9uZSYmKG09aVtcInJldHVyblwiXSkpbS5jYWxsKGkpO31maW5hbGx5e2lmKGUpdGhyb3cgZS5lcnJvcjt9fXJldHVybiBhcjt9ZnVuY3Rpb24gX19zcHJlYWQoKXtmb3IodmFyIGFyPVtdLGk9MDtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXthcj1hci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO31yZXR1cm4gYXI7fS8qKiBKU0RvYyAqL3ZhciBTZXZlcml0eTsoZnVuY3Rpb24oU2V2ZXJpdHkpey8qKiBKU0RvYyAqL1NldmVyaXR5W1wiRmF0YWxcIl09XCJmYXRhbFwiOy8qKiBKU0RvYyAqL1NldmVyaXR5W1wiRXJyb3JcIl09XCJlcnJvclwiOy8qKiBKU0RvYyAqL1NldmVyaXR5W1wiV2FybmluZ1wiXT1cIndhcm5pbmdcIjsvKiogSlNEb2MgKi9TZXZlcml0eVtcIkxvZ1wiXT1cImxvZ1wiOy8qKiBKU0RvYyAqL1NldmVyaXR5W1wiSW5mb1wiXT1cImluZm9cIjsvKiogSlNEb2MgKi9TZXZlcml0eVtcIkRlYnVnXCJdPVwiZGVidWdcIjsvKiogSlNEb2MgKi9TZXZlcml0eVtcIkNyaXRpY2FsXCJdPVwiY3JpdGljYWxcIjt9KShTZXZlcml0eXx8KFNldmVyaXR5PXt9KSk7Ly8gdHNsaW50OmRpc2FibGU6Y29tcGxldGVkLWRvY3Ncbi8vIHRzbGludDpkaXNhYmxlOm5vLXVubmVjZXNzYXJ5LXF1YWxpZmllciBuby1uYW1lc3BhY2VcbihmdW5jdGlvbihTZXZlcml0eSl7LyoqXG4gICAgICAgKiBDb252ZXJ0cyBhIHN0cmluZy1iYXNlZCBsZXZlbCBpbnRvIGEge0BsaW5rIFNldmVyaXR5fS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gbGV2ZWwgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIFNldmVyaXR5XG4gICAgICAgKiBAcmV0dXJucyBTZXZlcml0eVxuICAgICAgICovZnVuY3Rpb24gZnJvbVN0cmluZyhsZXZlbCl7c3dpdGNoKGxldmVsKXtjYXNlJ2RlYnVnJzpyZXR1cm4gU2V2ZXJpdHkuRGVidWc7Y2FzZSdpbmZvJzpyZXR1cm4gU2V2ZXJpdHkuSW5mbztjYXNlJ3dhcm4nOmNhc2Und2FybmluZyc6cmV0dXJuIFNldmVyaXR5Lldhcm5pbmc7Y2FzZSdlcnJvcic6cmV0dXJuIFNldmVyaXR5LkVycm9yO2Nhc2UnZmF0YWwnOnJldHVybiBTZXZlcml0eS5GYXRhbDtjYXNlJ2NyaXRpY2FsJzpyZXR1cm4gU2V2ZXJpdHkuQ3JpdGljYWw7Y2FzZSdsb2cnOmRlZmF1bHQ6cmV0dXJuIFNldmVyaXR5LkxvZzt9fVNldmVyaXR5LmZyb21TdHJpbmc9ZnJvbVN0cmluZzt9KShTZXZlcml0eXx8KFNldmVyaXR5PXt9KSk7LyoqIFRoZSBzdGF0dXMgb2YgYW4gZXZlbnQuICovdmFyIFN0YXR1czsoZnVuY3Rpb24oU3RhdHVzKXsvKiogVGhlIHN0YXR1cyBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZC4gKi9TdGF0dXNbXCJVbmtub3duXCJdPVwidW5rbm93blwiOy8qKiBUaGUgZXZlbnQgd2FzIHNraXBwZWQgZHVlIHRvIGNvbmZpZ3VyYXRpb24gb3IgY2FsbGJhY2tzLiAqL1N0YXR1c1tcIlNraXBwZWRcIl09XCJza2lwcGVkXCI7LyoqIFRoZSBldmVudCB3YXMgc2VudCB0byBTZW50cnkgc3VjY2Vzc2Z1bGx5LiAqL1N0YXR1c1tcIlN1Y2Nlc3NcIl09XCJzdWNjZXNzXCI7LyoqIFRoZSBjbGllbnQgaXMgY3VycmVudGx5IHJhdGUgbGltaXRlZCBhbmQgd2lsbCB0cnkgYWdhaW4gbGF0ZXIuICovU3RhdHVzW1wiUmF0ZUxpbWl0XCJdPVwicmF0ZV9saW1pdFwiOy8qKiBUaGUgZXZlbnQgY291bGQgbm90IGJlIHByb2Nlc3NlZC4gKi9TdGF0dXNbXCJJbnZhbGlkXCJdPVwiaW52YWxpZFwiOy8qKiBBIHNlcnZlci1zaWRlIGVycm9yIG9jdXJyZWQgZHVyaW5nIHN1Ym1pc3Npb24uICovU3RhdHVzW1wiRmFpbGVkXCJdPVwiZmFpbGVkXCI7fSkoU3RhdHVzfHwoU3RhdHVzPXt9KSk7Ly8gdHNsaW50OmRpc2FibGU6Y29tcGxldGVkLWRvY3Ncbi8vIHRzbGludDpkaXNhYmxlOm5vLXVubmVjZXNzYXJ5LXF1YWxpZmllciBuby1uYW1lc3BhY2VcbihmdW5jdGlvbihTdGF0dXMpey8qKlxuICAgICAgICogQ29udmVydHMgYSBIVFRQIHN0YXR1cyBjb2RlIGludG8gYSB7QGxpbmsgU3RhdHVzfS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gY29kZSBUaGUgSFRUUCByZXNwb25zZSBzdGF0dXMgY29kZS5cbiAgICAgICAqIEByZXR1cm5zIFRoZSBzZW5kIHN0YXR1cyBvciB7QGxpbmsgU3RhdHVzLlVua25vd259LlxuICAgICAgICovZnVuY3Rpb24gZnJvbUh0dHBDb2RlKGNvZGUpe2lmKGNvZGU+PTIwMCYmY29kZTwzMDApe3JldHVybiBTdGF0dXMuU3VjY2Vzczt9aWYoY29kZT09PTQyOSl7cmV0dXJuIFN0YXR1cy5SYXRlTGltaXQ7fWlmKGNvZGU+PTQwMCYmY29kZTw1MDApe3JldHVybiBTdGF0dXMuSW52YWxpZDt9aWYoY29kZT49NTAwKXtyZXR1cm4gU3RhdHVzLkZhaWxlZDt9cmV0dXJuIFN0YXR1cy5Vbmtub3duO31TdGF0dXMuZnJvbUh0dHBDb2RlPWZyb21IdHRwQ29kZTt9KShTdGF0dXN8fChTdGF0dXM9e30pKTt2YXIgc2V0UHJvdG90eXBlT2Y9T2JqZWN0LnNldFByb3RvdHlwZU9mfHwoe19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5P3NldFByb3RvT2Y6bWl4aW5Qcm9wZXJ0aWVzKTsvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLXVuYm91bmQtbWV0aG9kXG4vKipcbiAgICogc2V0UHJvdG90eXBlT2YgcG9seWZpbGwgdXNpbmcgX19wcm90b19fXG4gICAqL2Z1bmN0aW9uIHNldFByb3RvT2Yob2JqLHByb3RvKXsvLyBAdHMtaWdub3JlXG5vYmouX19wcm90b19fPXByb3RvO3JldHVybiBvYmo7fS8qKlxuICAgKiBzZXRQcm90b3R5cGVPZiBwb2x5ZmlsbCB1c2luZyBtaXhpblxuICAgKi9mdW5jdGlvbiBtaXhpblByb3BlcnRpZXMob2JqLHByb3RvKXtmb3IodmFyIHByb3AgaW4gcHJvdG8pe2lmKCFvYmouaGFzT3duUHJvcGVydHkocHJvcCkpey8vIEB0cy1pZ25vcmVcbm9ialtwcm9wXT1wcm90b1twcm9wXTt9fXJldHVybiBvYmo7fS8qKiBBbiBlcnJvciBlbWl0dGVkIGJ5IFNlbnRyeSBTREtzIGFuZCByZWxhdGVkIHV0aWxpdGllcy4gKi92YXIgU2VudHJ5RXJyb3I9LyoqIEBjbGFzcyAqL2Z1bmN0aW9uKF9zdXBlcil7X19leHRlbmRzKFNlbnRyeUVycm9yLF9zdXBlcik7ZnVuY3Rpb24gU2VudHJ5RXJyb3IobWVzc2FnZSl7dmFyIF9uZXdUYXJnZXQ9dGhpcy5jb25zdHJ1Y3Rvcjt2YXIgX3RoaXM9X3N1cGVyLmNhbGwodGhpcyxtZXNzYWdlKXx8dGhpcztfdGhpcy5tZXNzYWdlPW1lc3NhZ2U7Ly8gdHNsaW50OmRpc2FibGU6bm8tdW5zYWZlLWFueVxuX3RoaXMubmFtZT1fbmV3VGFyZ2V0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lO3NldFByb3RvdHlwZU9mKF90aGlzLF9uZXdUYXJnZXQucHJvdG90eXBlKTtyZXR1cm4gX3RoaXM7fXJldHVybiBTZW50cnlFcnJvcjt9KEVycm9yKTsvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIG9uZSBvZiBhIGZldyBFcnJvciBvciBFcnJvci1saWtlXG4gICAqIHtAbGluayBpc0Vycm9yfS5cbiAgICpcbiAgICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gICAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAgICovZnVuY3Rpb24gaXNFcnJvcih3YXQpe3N3aXRjaChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2F0KSl7Y2FzZSdbb2JqZWN0IEVycm9yXSc6cmV0dXJuIHRydWU7Y2FzZSdbb2JqZWN0IEV4Y2VwdGlvbl0nOnJldHVybiB0cnVlO2Nhc2UnW29iamVjdCBET01FeGNlcHRpb25dJzpyZXR1cm4gdHJ1ZTtkZWZhdWx0OnJldHVybiB3YXQgaW5zdGFuY2VvZiBFcnJvcjt9fS8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgRXJyb3JFdmVudFxuICAgKiB7QGxpbmsgaXNFcnJvckV2ZW50fS5cbiAgICpcbiAgICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gICAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAgICovZnVuY3Rpb24gaXNFcnJvckV2ZW50KHdhdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3YXQpPT09J1tvYmplY3QgRXJyb3JFdmVudF0nO30vKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIERPTUVycm9yXG4gICAqIHtAbGluayBpc0RPTUVycm9yfS5cbiAgICpcbiAgICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gICAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAgICovZnVuY3Rpb24gaXNET01FcnJvcih3YXQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2F0KT09PSdbb2JqZWN0IERPTUVycm9yXSc7fS8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgRE9NRXhjZXB0aW9uXG4gICAqIHtAbGluayBpc0RPTUV4Y2VwdGlvbn0uXG4gICAqXG4gICAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICAgKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gICAqL2Z1bmN0aW9uIGlzRE9NRXhjZXB0aW9uKHdhdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3YXQpPT09J1tvYmplY3QgRE9NRXhjZXB0aW9uXSc7fS8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYSBzdHJpbmdcbiAgICoge0BsaW5rIGlzU3RyaW5nfS5cbiAgICpcbiAgICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gICAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAgICovZnVuY3Rpb24gaXNTdHJpbmcod2F0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdhdCk9PT0nW29iamVjdCBTdHJpbmddJzt9LyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgaXMgYSBwcmltaXRpdmUgKHVuZGVmaW5lZCwgbnVsbCwgbnVtYmVyLCBib29sZWFuLCBzdHJpbmcpXG4gICAqIHtAbGluayBpc1ByaW1pdGl2ZX0uXG4gICAqXG4gICAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICAgKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gICAqL2Z1bmN0aW9uIGlzUHJpbWl0aXZlJDEod2F0KXtyZXR1cm4gd2F0PT09bnVsbHx8X3R5cGVvZjIod2F0KSE9PSdvYmplY3QnJiZ0eXBlb2Ygd2F0IT09J2Z1bmN0aW9uJzt9LyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBhbiBvYmplY3QgbGl0ZXJhbFxuICAgKiB7QGxpbmsgaXNQbGFpbk9iamVjdH0uXG4gICAqXG4gICAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICAgKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gICAqL2Z1bmN0aW9uIGlzUGxhaW5PYmplY3QkMSh3YXQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2F0KT09PSdbb2JqZWN0IE9iamVjdF0nO30vKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIGFuIEV2ZW50IGluc3RhbmNlXG4gICAqIHtAbGluayBpc0V2ZW50fS5cbiAgICpcbiAgICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gICAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAgICovZnVuY3Rpb24gaXNFdmVudCh3YXQpey8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzdHJpY3QtdHlwZS1wcmVkaWNhdGVzXG5yZXR1cm4gdHlwZW9mIEV2ZW50IT09J3VuZGVmaW5lZCcmJndhdCBpbnN0YW5jZW9mIEV2ZW50O30vKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIGFuIEVsZW1lbnQgaW5zdGFuY2VcbiAgICoge0BsaW5rIGlzRWxlbWVudH0uXG4gICAqXG4gICAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICAgKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gICAqL2Z1bmN0aW9uIGlzRWxlbWVudCh3YXQpey8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzdHJpY3QtdHlwZS1wcmVkaWNhdGVzXG5yZXR1cm4gdHlwZW9mIEVsZW1lbnQhPT0ndW5kZWZpbmVkJyYmd2F0IGluc3RhbmNlb2YgRWxlbWVudDt9LyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBhbiByZWdleHBcbiAgICoge0BsaW5rIGlzUmVnRXhwfS5cbiAgICpcbiAgICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gICAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAgICovZnVuY3Rpb24gaXNSZWdFeHAkMSh3YXQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2F0KT09PSdbb2JqZWN0IFJlZ0V4cF0nO30vKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUgaGFzIGEgdGhlbiBmdW5jdGlvbi5cbiAgICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gICAqL2Z1bmN0aW9uIGlzVGhlbmFibGUod2F0KXsvLyB0c2xpbnQ6ZGlzYWJsZTpuby11bnNhZmUtYW55XG5yZXR1cm4gQm9vbGVhbih3YXQmJndhdC50aGVuJiZ0eXBlb2Ygd2F0LnRoZW49PT0nZnVuY3Rpb24nKTsvLyB0c2xpbnQ6ZW5hYmxlOm5vLXVuc2FmZS1hbnlcbn0vKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIGEgU3ludGhldGljRXZlbnRcbiAgICoge0BsaW5rIGlzU3ludGhldGljRXZlbnR9LlxuICAgKlxuICAgKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAgICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICAgKi9mdW5jdGlvbiBpc1N5bnRoZXRpY0V2ZW50KHdhdCl7Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVuc2FmZS1hbnlcbnJldHVybiBpc1BsYWluT2JqZWN0JDEod2F0KSYmJ25hdGl2ZUV2ZW50J2luIHdhdCYmJ3ByZXZlbnREZWZhdWx0J2luIHdhdCYmJ3N0b3BQcm9wYWdhdGlvbidpbiB3YXQ7fS8qKlxuICAgKiBSZXF1aXJlcyBhIG1vZHVsZSB3aGljaCBpcyBwcm90ZWN0ZWQgX2FnYWluc3QgYnVuZGxlciBtaW5pZmljYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSByZXF1ZXN0IFRoZSBtb2R1bGUgcGF0aCB0byByZXNvbHZlXG4gICAqL2Z1bmN0aW9uIGR5bmFtaWNSZXF1aXJlKG1vZCxyZXF1ZXN0KXsvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLXVuc2FmZS1hbnlcbnJldHVybiBtb2QucmVxdWlyZShyZXF1ZXN0KTt9LyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIHdlJ3JlIGluIHRoZSBOb2RlLmpzIG9yIEJyb3dzZXIgZW52aXJvbm1lbnRcbiAgICpcbiAgICogQHJldHVybnMgQW5zd2VyIHRvIGdpdmVuIHF1ZXN0aW9uXG4gICAqL2Z1bmN0aW9uIGlzTm9kZUVudigpey8vIHRzbGludDpkaXNhYmxlOnN0cmljdC10eXBlLXByZWRpY2F0ZXNcbnJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodHlwZW9mIHByb2Nlc3MhPT0ndW5kZWZpbmVkJz9wcm9jZXNzOjApPT09J1tvYmplY3QgcHJvY2Vzc10nO312YXIgZmFsbGJhY2tHbG9iYWxPYmplY3Q9e307LyoqXG4gICAqIFNhZmVseSBnZXQgZ2xvYmFsIHNjb3BlIG9iamVjdFxuICAgKlxuICAgKiBAcmV0dXJucyBHbG9iYWwgc2NvcGUgb2JqZWN0XG4gICAqL2Z1bmN0aW9uIGdldEdsb2JhbE9iamVjdCgpe3JldHVybiBpc05vZGVFbnYoKT9nbG9iYWw6dHlwZW9mIHdpbmRvdyE9PSd1bmRlZmluZWQnP3dpbmRvdzp0eXBlb2Ygc2VsZiE9PSd1bmRlZmluZWQnP3NlbGY6ZmFsbGJhY2tHbG9iYWxPYmplY3Q7fS8qKlxuICAgKiBVVUlENCBnZW5lcmF0b3JcbiAgICpcbiAgICogQHJldHVybnMgc3RyaW5nIEdlbmVyYXRlZCBVVUlENC5cbiAgICovZnVuY3Rpb24gdXVpZDQoKXt2YXIgZ2xvYmFsPWdldEdsb2JhbE9iamVjdCgpO3ZhciBjcnlwdG89Z2xvYmFsLmNyeXB0b3x8Z2xvYmFsLm1zQ3J5cHRvO2lmKCEoY3J5cHRvPT09dm9pZCAwKSYmY3J5cHRvLmdldFJhbmRvbVZhbHVlcyl7Ly8gVXNlIHdpbmRvdy5jcnlwdG8gQVBJIGlmIGF2YWlsYWJsZVxudmFyIGFycj1uZXcgVWludDE2QXJyYXkoOCk7Y3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpOy8vIHNldCA0IGluIGJ5dGUgN1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2VcbmFyclszXT1hcnJbM10mMHhmZmZ8MHg0MDAwOy8vIHNldCAyIG1vc3Qgc2lnbmlmaWNhbnQgYml0cyBvZiBieXRlIDkgdG8gJzEwJ1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2VcbmFycls0XT1hcnJbNF0mMHgzZmZmfDB4ODAwMDt2YXIgcGFkPWZ1bmN0aW9uIHBhZChudW0pe3ZhciB2PW51bS50b1N0cmluZygxNik7d2hpbGUodi5sZW5ndGg8NCl7dj1cIjBcIit2O31yZXR1cm4gdjt9O3JldHVybiBwYWQoYXJyWzBdKStwYWQoYXJyWzFdKStwYWQoYXJyWzJdKStwYWQoYXJyWzNdKStwYWQoYXJyWzRdKStwYWQoYXJyWzVdKStwYWQoYXJyWzZdKStwYWQoYXJyWzddKTt9Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvaG93LXRvLWNyZWF0ZS1hLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0LzIxMTc1MjMjMjExNzUyM1xucmV0dXJuJ3h4eHh4eHh4eHh4eDR4eHh5eHh4eHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csZnVuY3Rpb24oYyl7Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2VcbnZhciByPU1hdGgucmFuZG9tKCkqMTZ8MDsvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYml0d2lzZVxudmFyIHY9Yz09PSd4Jz9yOnImMHgzfDB4ODtyZXR1cm4gdi50b1N0cmluZygxNik7fSk7fS8qKlxuICAgKiBQYXJzZXMgc3RyaW5nIGZvcm0gb2YgVVJMIGludG8gYW4gb2JqZWN0XG4gICAqIC8vIGJvcnJvd2VkIGZyb20gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjYXBwZW5kaXgtQlxuICAgKiAvLyBpbnRlbnRpb25hbGx5IHVzaW5nIHJlZ2V4IGFuZCBub3QgPGEvPiBocmVmIHBhcnNpbmcgdHJpY2sgYmVjYXVzZSBSZWFjdCBOYXRpdmUgYW5kIG90aGVyXG4gICAqIC8vIGVudmlyb25tZW50cyB3aGVyZSBET00gbWlnaHQgbm90IGJlIGF2YWlsYWJsZVxuICAgKiBAcmV0dXJucyBwYXJzZWQgVVJMIG9iamVjdFxuICAgKi9mdW5jdGlvbiBwYXJzZVVybCh1cmwpe2lmKCF1cmwpe3JldHVybnt9O312YXIgbWF0Y2g9dXJsLm1hdGNoKC9eKChbXjpcXC8/I10rKTopPyhcXC9cXC8oW15cXC8/I10qKSk/KFtePyNdKikoXFw/KFteI10qKSk/KCMoLiopKT8kLyk7aWYoIW1hdGNoKXtyZXR1cm57fTt9Ly8gY29lcmNlIHRvIHVuZGVmaW5lZCB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5nIHNvIHdlIGRvbid0IGdldCAndW5kZWZpbmVkJ1xudmFyIHF1ZXJ5PW1hdGNoWzZdfHwnJzt2YXIgZnJhZ21lbnQ9bWF0Y2hbOF18fCcnO3JldHVybntob3N0Om1hdGNoWzRdLHBhdGg6bWF0Y2hbNV0scHJvdG9jb2w6bWF0Y2hbMl0scmVsYXRpdmU6bWF0Y2hbNV0rcXVlcnkrZnJhZ21lbnR9O30vKipcbiAgICogRXh0cmFjdHMgZWl0aGVyIG1lc3NhZ2Ugb3IgdHlwZSt2YWx1ZSBmcm9tIGFuIGV2ZW50IHRoYXQgY2FuIGJlIHVzZWQgZm9yIHVzZXItZmFjaW5nIGxvZ3NcbiAgICogQHJldHVybnMgZXZlbnQncyBkZXNjcmlwdGlvblxuICAgKi9mdW5jdGlvbiBnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50KXtpZihldmVudC5tZXNzYWdlKXtyZXR1cm4gZXZlbnQubWVzc2FnZTt9aWYoZXZlbnQuZXhjZXB0aW9uJiZldmVudC5leGNlcHRpb24udmFsdWVzJiZldmVudC5leGNlcHRpb24udmFsdWVzWzBdKXt2YXIgZXhjZXB0aW9uPWV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF07aWYoZXhjZXB0aW9uLnR5cGUmJmV4Y2VwdGlvbi52YWx1ZSl7cmV0dXJuIGV4Y2VwdGlvbi50eXBlK1wiOiBcIitleGNlcHRpb24udmFsdWU7fXJldHVybiBleGNlcHRpb24udHlwZXx8ZXhjZXB0aW9uLnZhbHVlfHxldmVudC5ldmVudF9pZHx8Jzx1bmtub3duPic7fXJldHVybiBldmVudC5ldmVudF9pZHx8Jzx1bmtub3duPic7fS8qKiBKU0RvYyAqL2Z1bmN0aW9uIGNvbnNvbGVTYW5kYm94KGNhbGxiYWNrKXt2YXIgZ2xvYmFsPWdldEdsb2JhbE9iamVjdCgpO3ZhciBsZXZlbHM9WydkZWJ1ZycsJ2luZm8nLCd3YXJuJywnZXJyb3InLCdsb2cnLCdhc3NlcnQnXTtpZighKCdjb25zb2xlJ2luIGdsb2JhbCkpe3JldHVybiBjYWxsYmFjaygpO312YXIgb3JpZ2luYWxDb25zb2xlPWdsb2JhbC5jb25zb2xlO3ZhciB3cmFwcGVkTGV2ZWxzPXt9Oy8vIFJlc3RvcmUgYWxsIHdyYXBwZWQgY29uc29sZSBtZXRob2RzXG5sZXZlbHMuZm9yRWFjaChmdW5jdGlvbihsZXZlbCl7aWYobGV2ZWwgaW4gZ2xvYmFsLmNvbnNvbGUmJm9yaWdpbmFsQ29uc29sZVtsZXZlbF0uX19zZW50cnlfXyl7d3JhcHBlZExldmVsc1tsZXZlbF09b3JpZ2luYWxDb25zb2xlW2xldmVsXS5fX3NlbnRyeV93cmFwcGVkX187b3JpZ2luYWxDb25zb2xlW2xldmVsXT1vcmlnaW5hbENvbnNvbGVbbGV2ZWxdLl9fc2VudHJ5X29yaWdpbmFsX187fX0pOy8vIFBlcmZvcm0gY2FsbGJhY2sgbWFuaXB1bGF0aW9uc1xudmFyIHJlc3VsdD1jYWxsYmFjaygpOy8vIFJldmVydCByZXN0b3JhdGlvbiB0byB3cmFwcGVkIHN0YXRlXG5PYmplY3Qua2V5cyh3cmFwcGVkTGV2ZWxzKS5mb3JFYWNoKGZ1bmN0aW9uKGxldmVsKXtvcmlnaW5hbENvbnNvbGVbbGV2ZWxdPXdyYXBwZWRMZXZlbHNbbGV2ZWxdO30pO3JldHVybiByZXN1bHQ7fS8qKlxuICAgKiBBZGRzIGV4Y2VwdGlvbiB2YWx1ZXMsIHR5cGUgYW5kIHZhbHVlIHRvIGFuIHN5bnRoZXRpYyBFeGNlcHRpb24uXG4gICAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgb2YgdGhlIGV4Y2VwdGlvbi5cbiAgICogQHBhcmFtIHR5cGUgVHlwZSBvZiB0aGUgZXhjZXB0aW9uLlxuICAgKiBAaGlkZGVuXG4gICAqL2Z1bmN0aW9uIGFkZEV4Y2VwdGlvblR5cGVWYWx1ZShldmVudCx2YWx1ZSx0eXBlKXtldmVudC5leGNlcHRpb249ZXZlbnQuZXhjZXB0aW9ufHx7fTtldmVudC5leGNlcHRpb24udmFsdWVzPWV2ZW50LmV4Y2VwdGlvbi52YWx1ZXN8fFtdO2V2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF09ZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXXx8e307ZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS52YWx1ZT1ldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnZhbHVlfHx2YWx1ZXx8Jyc7ZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS50eXBlPWV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0udHlwZXx8dHlwZXx8J0Vycm9yJzt9LyoqXG4gICAqIEFkZHMgZXhjZXB0aW9uIG1lY2hhbmlzbSB0byBhIGdpdmVuIGV2ZW50LlxuICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIG1lY2hhbmlzbSBNZWNoYW5pc20gb2YgdGhlIG1lY2hhbmlzbS5cbiAgICogQGhpZGRlblxuICAgKi9mdW5jdGlvbiBhZGRFeGNlcHRpb25NZWNoYW5pc20oZXZlbnQsbWVjaGFuaXNtKXtpZihtZWNoYW5pc209PT12b2lkIDApe21lY2hhbmlzbT17fTt9Ly8gVE9ETzogVXNlIHJlYWwgdHlwZSB3aXRoIGBrZXlvZiBNZWNoYW5pc21gIHRoaW5neSBhbmQgbWF5YmUgbWFrZSBpdCBiZXR0ZXI/XG50cnl7Ly8gQHRzLWlnbm9yZVxuLy8gdHNsaW50OmRpc2FibGU6bm8tbm9uLW51bGwtYXNzZXJ0aW9uXG5ldmVudC5leGNlcHRpb24udmFsdWVzWzBdLm1lY2hhbmlzbT1ldmVudC5leGNlcHRpb24udmFsdWVzWzBdLm1lY2hhbmlzbXx8e307T2JqZWN0LmtleXMobWVjaGFuaXNtKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7Ly8gQHRzLWlnbm9yZVxuZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5tZWNoYW5pc21ba2V5XT1tZWNoYW5pc21ba2V5XTt9KTt9Y2F0Y2goX29PKXsvLyBuby1lbXB0eVxufX0vKipcbiAgICogQSBzYWZlIGZvcm0gb2YgbG9jYXRpb24uaHJlZlxuICAgKi9mdW5jdGlvbiBnZXRMb2NhdGlvbkhyZWYoKXt0cnl7cmV0dXJuIGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7fWNhdGNoKG9PKXtyZXR1cm4nJzt9fS8qKlxuICAgKiBHaXZlbiBhIGNoaWxkIERPTSBlbGVtZW50LCByZXR1cm5zIGEgcXVlcnktc2VsZWN0b3Igc3RhdGVtZW50IGRlc2NyaWJpbmcgdGhhdFxuICAgKiBhbmQgaXRzIGFuY2VzdG9yc1xuICAgKiBlLmcuIFtIVE1MRWxlbWVudF0gPT4gYm9keSA+IGRpdiA+IGlucHV0I2Zvby5idG5bbmFtZT1iYXpdXG4gICAqIEByZXR1cm5zIGdlbmVyYXRlZCBET00gcGF0aFxuICAgKi9mdW5jdGlvbiBodG1sVHJlZUFzU3RyaW5nKGVsZW0pey8vIHRyeS9jYXRjaCBib3RoOlxuLy8gLSBhY2Nlc3NpbmcgZXZlbnQudGFyZ2V0IChzZWUgZ2V0c2VudHJ5L3JhdmVuLWpzIzgzOCwgIzc2OClcbi8vIC0gYGh0bWxUcmVlQXNTdHJpbmdgIGJlY2F1c2UgaXQncyBjb21wbGV4LCBhbmQganVzdCBhY2Nlc3NpbmcgdGhlIERPTSBpbmNvcnJlY3RseVxuLy8gLSBjYW4gdGhyb3cgYW4gZXhjZXB0aW9uIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy5cbnRyeXt2YXIgY3VycmVudEVsZW09ZWxlbTt2YXIgTUFYX1RSQVZFUlNFX0hFSUdIVD01O3ZhciBNQVhfT1VUUFVUX0xFTj04MDt2YXIgb3V0PVtdO3ZhciBoZWlnaHQ9MDt2YXIgbGVuPTA7dmFyIHNlcGFyYXRvcj0nID4gJzt2YXIgc2VwTGVuZ3RoPXNlcGFyYXRvci5sZW5ndGg7dmFyIG5leHRTdHI9dm9pZCAwO3doaWxlKGN1cnJlbnRFbGVtJiZoZWlnaHQrKzxNQVhfVFJBVkVSU0VfSEVJR0hUKXtuZXh0U3RyPV9odG1sRWxlbWVudEFzU3RyaW5nKGN1cnJlbnRFbGVtKTsvLyBiYWlsIG91dCBpZlxuLy8gLSBuZXh0U3RyIGlzIHRoZSAnaHRtbCcgZWxlbWVudFxuLy8gLSB0aGUgbGVuZ3RoIG9mIHRoZSBzdHJpbmcgdGhhdCB3b3VsZCBiZSBjcmVhdGVkIGV4Y2VlZHMgTUFYX09VVFBVVF9MRU5cbi8vICAgKGlnbm9yZSB0aGlzIGxpbWl0IGlmIHdlIGFyZSBvbiB0aGUgZmlyc3QgaXRlcmF0aW9uKVxuaWYobmV4dFN0cj09PSdodG1sJ3x8aGVpZ2h0PjEmJmxlbitvdXQubGVuZ3RoKnNlcExlbmd0aCtuZXh0U3RyLmxlbmd0aD49TUFYX09VVFBVVF9MRU4pe2JyZWFrO31vdXQucHVzaChuZXh0U3RyKTtsZW4rPW5leHRTdHIubGVuZ3RoO2N1cnJlbnRFbGVtPWN1cnJlbnRFbGVtLnBhcmVudE5vZGU7fXJldHVybiBvdXQucmV2ZXJzZSgpLmpvaW4oc2VwYXJhdG9yKTt9Y2F0Y2goX29PKXtyZXR1cm4nPHVua25vd24+Jzt9fS8qKlxuICAgKiBSZXR1cm5zIGEgc2ltcGxlLCBxdWVyeS1zZWxlY3RvciByZXByZXNlbnRhdGlvbiBvZiBhIERPTSBlbGVtZW50XG4gICAqIGUuZy4gW0hUTUxFbGVtZW50XSA9PiBpbnB1dCNmb28uYnRuW25hbWU9YmF6XVxuICAgKiBAcmV0dXJucyBnZW5lcmF0ZWQgRE9NIHBhdGhcbiAgICovZnVuY3Rpb24gX2h0bWxFbGVtZW50QXNTdHJpbmcoZWwpe3ZhciBlbGVtPWVsO3ZhciBvdXQ9W107dmFyIGNsYXNzTmFtZTt2YXIgY2xhc3Nlczt2YXIga2V5O3ZhciBhdHRyO3ZhciBpO2lmKCFlbGVtfHwhZWxlbS50YWdOYW1lKXtyZXR1cm4nJzt9b3V0LnB1c2goZWxlbS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpO2lmKGVsZW0uaWQpe291dC5wdXNoKFwiI1wiK2VsZW0uaWQpO31jbGFzc05hbWU9ZWxlbS5jbGFzc05hbWU7aWYoY2xhc3NOYW1lJiZpc1N0cmluZyhjbGFzc05hbWUpKXtjbGFzc2VzPWNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pO2ZvcihpPTA7aTxjbGFzc2VzLmxlbmd0aDtpKyspe291dC5wdXNoKFwiLlwiK2NsYXNzZXNbaV0pO319dmFyIGF0dHJXaGl0ZWxpc3Q9Wyd0eXBlJywnbmFtZScsJ3RpdGxlJywnYWx0J107Zm9yKGk9MDtpPGF0dHJXaGl0ZWxpc3QubGVuZ3RoO2krKyl7a2V5PWF0dHJXaGl0ZWxpc3RbaV07YXR0cj1lbGVtLmdldEF0dHJpYnV0ZShrZXkpO2lmKGF0dHIpe291dC5wdXNoKFwiW1wiK2tleStcIj1cXFwiXCIrYXR0citcIlxcXCJdXCIpO319cmV0dXJuIG91dC5qb2luKCcnKTt9dmFyIGRlZmF1bHRSZXRyeUFmdGVyPTYwKjEwMDA7Ly8gNjAgc2Vjb25kc1xuLyoqXG4gICAqIEV4dHJhY3RzIFJldHJ5LUFmdGVyIHZhbHVlIGZyb20gdGhlIHJlcXVlc3QgaGVhZGVyIG9yIHJldHVybnMgZGVmYXVsdCB2YWx1ZVxuICAgKiBAcGFyYW0gbm93IGN1cnJlbnQgdW5peCB0aW1lc3RhbXBcbiAgICogQHBhcmFtIGhlYWRlciBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgJ1JldHJ5LUFmdGVyJyBoZWFkZXJcbiAgICovZnVuY3Rpb24gcGFyc2VSZXRyeUFmdGVySGVhZGVyKG5vdyxoZWFkZXIpe2lmKCFoZWFkZXIpe3JldHVybiBkZWZhdWx0UmV0cnlBZnRlcjt9dmFyIGhlYWRlckRlbGF5PXBhcnNlSW50KFwiXCIraGVhZGVyLDEwKTtpZighaXNOYU4oaGVhZGVyRGVsYXkpKXtyZXR1cm4gaGVhZGVyRGVsYXkqMTAwMDt9dmFyIGhlYWRlckRhdGU9RGF0ZS5wYXJzZShcIlwiK2hlYWRlcik7aWYoIWlzTmFOKGhlYWRlckRhdGUpKXtyZXR1cm4gaGVhZGVyRGF0ZS1ub3c7fXJldHVybiBkZWZhdWx0UmV0cnlBZnRlcjt9Ly8gVE9ETzogSW1wbGVtZW50IGRpZmZlcmVudCBsb2dnZXJzIGZvciBkaWZmZXJlbnQgZW52aXJvbm1lbnRzXG52YXIgZ2xvYmFsJDE9Z2V0R2xvYmFsT2JqZWN0KCk7LyoqIFByZWZpeCBmb3IgbG9nZ2luZyBzdHJpbmdzICovdmFyIFBSRUZJWD0nU2VudHJ5IExvZ2dlciAnOy8qKiBKU0RvYyAqL3ZhciBMb2dnZXI9LyoqIEBjbGFzcyAqL2Z1bmN0aW9uKCl7LyoqIEpTRG9jICovZnVuY3Rpb24gTG9nZ2VyKCl7dGhpcy5fZW5hYmxlZD1mYWxzZTt9LyoqIEpTRG9jICovTG9nZ2VyLnByb3RvdHlwZS5kaXNhYmxlPWZ1bmN0aW9uKCl7dGhpcy5fZW5hYmxlZD1mYWxzZTt9Oy8qKiBKU0RvYyAqL0xvZ2dlci5wcm90b3R5cGUuZW5hYmxlPWZ1bmN0aW9uKCl7dGhpcy5fZW5hYmxlZD10cnVlO307LyoqIEpTRG9jICovTG9nZ2VyLnByb3RvdHlwZS5sb2c9ZnVuY3Rpb24oKXt2YXIgYXJncz1bXTtmb3IodmFyIF9pPTA7X2k8YXJndW1lbnRzLmxlbmd0aDtfaSsrKXthcmdzW19pXT1hcmd1bWVudHNbX2ldO31pZighdGhpcy5fZW5hYmxlZCl7cmV0dXJuO31jb25zb2xlU2FuZGJveChmdW5jdGlvbigpe2dsb2JhbCQxLmNvbnNvbGUubG9nKFBSRUZJWCtcIltMb2ddOiBcIithcmdzLmpvaW4oJyAnKSk7Ly8gdHNsaW50OmRpc2FibGUtbGluZTpuby1jb25zb2xlXG59KTt9Oy8qKiBKU0RvYyAqL0xvZ2dlci5wcm90b3R5cGUud2Fybj1mdW5jdGlvbigpe3ZhciBhcmdzPVtdO2Zvcih2YXIgX2k9MDtfaTxhcmd1bWVudHMubGVuZ3RoO19pKyspe2FyZ3NbX2ldPWFyZ3VtZW50c1tfaV07fWlmKCF0aGlzLl9lbmFibGVkKXtyZXR1cm47fWNvbnNvbGVTYW5kYm94KGZ1bmN0aW9uKCl7Z2xvYmFsJDEuY29uc29sZS53YXJuKFBSRUZJWCtcIltXYXJuXTogXCIrYXJncy5qb2luKCcgJykpOy8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tY29uc29sZVxufSk7fTsvKiogSlNEb2MgKi9Mb2dnZXIucHJvdG90eXBlLmVycm9yPWZ1bmN0aW9uKCl7dmFyIGFyZ3M9W107Zm9yKHZhciBfaT0wO19pPGFyZ3VtZW50cy5sZW5ndGg7X2krKyl7YXJnc1tfaV09YXJndW1lbnRzW19pXTt9aWYoIXRoaXMuX2VuYWJsZWQpe3JldHVybjt9Y29uc29sZVNhbmRib3goZnVuY3Rpb24oKXtnbG9iYWwkMS5jb25zb2xlLmVycm9yKFBSRUZJWCtcIltFcnJvcl06IFwiK2FyZ3Muam9pbignICcpKTsvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLWNvbnNvbGVcbn0pO307cmV0dXJuIExvZ2dlcjt9KCk7Ly8gRW5zdXJlIHdlIG9ubHkgaGF2ZSBhIHNpbmdsZSBsb2dnZXIgaW5zdGFuY2UsIGV2ZW4gaWYgbXVsdGlwbGUgdmVyc2lvbnMgb2YgQHNlbnRyeS91dGlscyBhcmUgYmVpbmcgdXNlZFxuZ2xvYmFsJDEuX19TRU5UUllfXz1nbG9iYWwkMS5fX1NFTlRSWV9ffHx7fTt2YXIgbG9nZ2VyJDE9Z2xvYmFsJDEuX19TRU5UUllfXy5sb2dnZXJ8fChnbG9iYWwkMS5fX1NFTlRSWV9fLmxvZ2dlcj1uZXcgTG9nZ2VyKCkpOy8vIHRzbGludDpkaXNhYmxlOm5vLXVuc2FmZS1hbnlcbi8qKlxuICAgKiBNZW1vIGNsYXNzIHVzZWQgZm9yIGRlY3ljbGUganNvbiBvYmplY3RzLiBVc2VzIFdlYWtTZXQgaWYgYXZhaWxhYmxlIG90aGVyd2lzZSBhcnJheS5cbiAgICovdmFyIE1lbW89LyoqIEBjbGFzcyAqL2Z1bmN0aW9uKCl7ZnVuY3Rpb24gTWVtbygpey8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxudGhpcy5faGFzV2Vha1NldD10eXBlb2YgV2Vha1NldD09PSdmdW5jdGlvbic7dGhpcy5faW5uZXI9dGhpcy5faGFzV2Vha1NldD9uZXcgV2Vha1NldCgpOltdO30vKipcbiAgICAgICAqIFNldHMgb2JqIHRvIHJlbWVtYmVyLlxuICAgICAgICogQHBhcmFtIG9iaiBPYmplY3QgdG8gcmVtZW1iZXJcbiAgICAgICAqL01lbW8ucHJvdG90eXBlLm1lbW9pemU9ZnVuY3Rpb24ob2JqKXtpZih0aGlzLl9oYXNXZWFrU2V0KXtpZih0aGlzLl9pbm5lci5oYXMob2JqKSl7cmV0dXJuIHRydWU7fXRoaXMuX2lubmVyLmFkZChvYmopO3JldHVybiBmYWxzZTt9Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnByZWZlci1mb3Itb2ZcbmZvcih2YXIgaT0wO2k8dGhpcy5faW5uZXIubGVuZ3RoO2krKyl7dmFyIHZhbHVlPXRoaXMuX2lubmVyW2ldO2lmKHZhbHVlPT09b2JqKXtyZXR1cm4gdHJ1ZTt9fXRoaXMuX2lubmVyLnB1c2gob2JqKTtyZXR1cm4gZmFsc2U7fTsvKipcbiAgICAgICAqIFJlbW92ZXMgb2JqZWN0IGZyb20gaW50ZXJuYWwgc3RvcmFnZS5cbiAgICAgICAqIEBwYXJhbSBvYmogT2JqZWN0IHRvIGZvcmdldFxuICAgICAgICovTWVtby5wcm90b3R5cGUudW5tZW1vaXplPWZ1bmN0aW9uKG9iail7aWYodGhpcy5faGFzV2Vha1NldCl7dGhpcy5faW5uZXJbXCJkZWxldGVcIl0ob2JqKTt9ZWxzZXtmb3IodmFyIGk9MDtpPHRoaXMuX2lubmVyLmxlbmd0aDtpKyspe2lmKHRoaXMuX2lubmVyW2ldPT09b2JqKXt0aGlzLl9pbm5lci5zcGxpY2UoaSwxKTticmVhazt9fX19O3JldHVybiBNZW1vO30oKTsvKipcbiAgICogVHJ1bmNhdGVzIGdpdmVuIHN0cmluZyB0byB0aGUgbWF4aW11bSBjaGFyYWN0ZXJzIGNvdW50XG4gICAqXG4gICAqIEBwYXJhbSBzdHIgQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgc2VyaWFsaXphYmxlIHZhbHVlc1xuICAgKiBAcGFyYW0gbWF4IE1heGltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgaW4gdHJ1bmNhdGVkIHN0cmluZ1xuICAgKiBAcmV0dXJucyBzdHJpbmcgRW5jb2RlZFxuICAgKi9mdW5jdGlvbiB0cnVuY2F0ZShzdHIsbWF4KXtpZihtYXg9PT12b2lkIDApe21heD0wO30vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c3RyaWN0LXR5cGUtcHJlZGljYXRlc1xuaWYodHlwZW9mIHN0ciE9PSdzdHJpbmcnfHxtYXg9PT0wKXtyZXR1cm4gc3RyO31yZXR1cm4gc3RyLmxlbmd0aDw9bWF4P3N0cjpzdHIuc3Vic3RyKDAsbWF4KStcIi4uLlwiO30vKipcbiAgICogSm9pbiB2YWx1ZXMgaW4gYXJyYXlcbiAgICogQHBhcmFtIGlucHV0IGFycmF5IG9mIHZhbHVlcyB0byBiZSBqb2luZWQgdG9nZXRoZXJcbiAgICogQHBhcmFtIGRlbGltaXRlciBzdHJpbmcgdG8gYmUgcGxhY2VkIGluLWJldHdlZW4gdmFsdWVzXG4gICAqIEByZXR1cm5zIEpvaW5lZCB2YWx1ZXNcbiAgICovZnVuY3Rpb24gc2FmZUpvaW4oaW5wdXQsZGVsaW1pdGVyKXtpZighQXJyYXkuaXNBcnJheShpbnB1dCkpe3JldHVybicnO312YXIgb3V0cHV0PVtdOy8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpwcmVmZXItZm9yLW9mXG5mb3IodmFyIGk9MDtpPGlucHV0Lmxlbmd0aDtpKyspe3ZhciB2YWx1ZT1pbnB1dFtpXTt0cnl7b3V0cHV0LnB1c2goU3RyaW5nKHZhbHVlKSk7fWNhdGNoKGUpe291dHB1dC5wdXNoKCdbdmFsdWUgY2Fubm90IGJlIHNlcmlhbGl6ZWRdJyk7fX1yZXR1cm4gb3V0cHV0LmpvaW4oZGVsaW1pdGVyKTt9LyoqXG4gICAqIENoZWNrcyBpZiB0aGUgdmFsdWUgbWF0Y2hlcyBhIHJlZ2V4IG9yIGluY2x1ZGVzIHRoZSBzdHJpbmdcbiAgICogQHBhcmFtIHZhbHVlIFRoZSBzdHJpbmcgdmFsdWUgdG8gYmUgY2hlY2tlZCBhZ2FpbnN0XG4gICAqIEBwYXJhbSBwYXR0ZXJuIEVpdGhlciBhIHJlZ2V4IG9yIGEgc3RyaW5nIHRoYXQgbXVzdCBiZSBjb250YWluZWQgaW4gdmFsdWVcbiAgICovZnVuY3Rpb24gaXNNYXRjaGluZ1BhdHRlcm4odmFsdWUscGF0dGVybil7aWYoaXNSZWdFeHAkMShwYXR0ZXJuKSl7cmV0dXJuIHBhdHRlcm4udGVzdCh2YWx1ZSk7fWlmKHR5cGVvZiBwYXR0ZXJuPT09J3N0cmluZycpe3JldHVybiB2YWx1ZS5pbmRleE9mKHBhdHRlcm4pIT09LTE7fXJldHVybiBmYWxzZTt9LyoqXG4gICAqIFdyYXAgYSBnaXZlbiBvYmplY3QgbWV0aG9kIHdpdGggYSBoaWdoZXItb3JkZXIgZnVuY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHNvdXJjZSBBbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG1ldGhvZCB0byBiZSB3cmFwcGVkLlxuICAgKiBAcGFyYW0gbmFtZSBBIG5hbWUgb2YgbWV0aG9kIHRvIGJlIHdyYXBwZWQuXG4gICAqIEBwYXJhbSByZXBsYWNlbWVudCBBIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gd3JhcCBhIGdpdmVuIG1ldGhvZC5cbiAgICogQHJldHVybnMgdm9pZFxuICAgKi9mdW5jdGlvbiBmaWxsKHNvdXJjZSxuYW1lLHJlcGxhY2VtZW50KXtpZighKG5hbWUgaW4gc291cmNlKSl7cmV0dXJuO312YXIgb3JpZ2luYWw9c291cmNlW25hbWVdO3ZhciB3cmFwcGVkPXJlcGxhY2VtZW50KG9yaWdpbmFsKTsvLyBNYWtlIHN1cmUgaXQncyBhIGZ1bmN0aW9uIGZpcnN0LCBhcyB3ZSBuZWVkIHRvIGF0dGFjaCBhbiBlbXB0eSBwcm90b3R5cGUgZm9yIGBkZWZpbmVQcm9wZXJ0aWVzYCB0byB3b3JrXG4vLyBvdGhlcndpc2UgaXQnbGwgdGhyb3cgXCJUeXBlRXJyb3I6IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIGNhbGxlZCBvbiBub24tb2JqZWN0XCJcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzdHJpY3QtdHlwZS1wcmVkaWNhdGVzXG5pZih0eXBlb2Ygd3JhcHBlZD09PSdmdW5jdGlvbicpe3RyeXt3cmFwcGVkLnByb3RvdHlwZT13cmFwcGVkLnByb3RvdHlwZXx8e307T2JqZWN0LmRlZmluZVByb3BlcnRpZXMod3JhcHBlZCx7X19zZW50cnlfXzp7ZW51bWVyYWJsZTpmYWxzZSx2YWx1ZTp0cnVlfSxfX3NlbnRyeV9vcmlnaW5hbF9fOntlbnVtZXJhYmxlOmZhbHNlLHZhbHVlOm9yaWdpbmFsfSxfX3NlbnRyeV93cmFwcGVkX186e2VudW1lcmFibGU6ZmFsc2UsdmFsdWU6d3JhcHBlZH19KTt9Y2F0Y2goX09vKXsvLyBUaGlzIGNhbiB0aHJvdyBpZiBtdWx0aXBsZSBmaWxsIGhhcHBlbnMgb24gYSBnbG9iYWwgb2JqZWN0IGxpa2UgWE1MSHR0cFJlcXVlc3Rcbi8vIEZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzIwNDNcbn19c291cmNlW25hbWVdPXdyYXBwZWQ7fS8qKlxuICAgKiBFbmNvZGVzIGdpdmVuIG9iamVjdCBpbnRvIHVybC1mcmllbmRseSBmb3JtYXRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBBbiBvYmplY3QgdGhhdCBjb250YWlucyBzZXJpYWxpemFibGUgdmFsdWVzXG4gICAqIEByZXR1cm5zIHN0cmluZyBFbmNvZGVkXG4gICAqL2Z1bmN0aW9uIHVybEVuY29kZShvYmplY3Qpe3JldHVybiBPYmplY3Qua2V5cyhvYmplY3QpLm1hcCgvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW5zYWZlLWFueVxuZnVuY3Rpb24oa2V5KXtyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGtleSkrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KG9iamVjdFtrZXldKTt9KS5qb2luKCcmJyk7fS8qKlxuICAgKiBUcmFuc2Zvcm1zIGFueSBvYmplY3QgaW50byBhbiBvYmplY3QgbGl0ZXJhbCB3aXRoIGFsbCBpdCdzIGF0dHJpYnV0ZXNcbiAgICogYXR0YWNoZWQgdG8gaXQuXG4gICAqXG4gICAqIEBwYXJhbSB2YWx1ZSBJbml0aWFsIHNvdXJjZSB0aGF0IHdlIGhhdmUgdG8gdHJhbnNmb3JtIGluIG9yZGVyIHRvIGJlIHVzYWJsZSBieSB0aGUgc2VyaWFsaXplclxuICAgKi9mdW5jdGlvbiBnZXRXYWxrU291cmNlKHZhbHVlKXtpZihpc0Vycm9yKHZhbHVlKSl7dmFyIGVycm9yPXZhbHVlO3ZhciBlcnI9e21lc3NhZ2U6ZXJyb3IubWVzc2FnZSxuYW1lOmVycm9yLm5hbWUsc3RhY2s6ZXJyb3Iuc3RhY2t9O2Zvcih2YXIgaSBpbiBlcnJvcil7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGVycm9yLGkpKXtlcnJbaV09ZXJyb3JbaV07fX1yZXR1cm4gZXJyO31pZihpc0V2ZW50KHZhbHVlKSl7dmFyIGV2ZW50XzE9dmFsdWU7dmFyIHNvdXJjZT17fTtzb3VyY2UudHlwZT1ldmVudF8xLnR5cGU7Ly8gQWNjZXNzaW5nIGV2ZW50LnRhcmdldCBjYW4gdGhyb3cgKHNlZSBnZXRzZW50cnkvcmF2ZW4tanMjODM4LCAjNzY4KVxudHJ5e3NvdXJjZS50YXJnZXQ9aXNFbGVtZW50KGV2ZW50XzEudGFyZ2V0KT9odG1sVHJlZUFzU3RyaW5nKGV2ZW50XzEudGFyZ2V0KTpPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZXZlbnRfMS50YXJnZXQpO31jYXRjaChfb08pe3NvdXJjZS50YXJnZXQ9Jzx1bmtub3duPic7fXRyeXtzb3VyY2UuY3VycmVudFRhcmdldD1pc0VsZW1lbnQoZXZlbnRfMS5jdXJyZW50VGFyZ2V0KT9odG1sVHJlZUFzU3RyaW5nKGV2ZW50XzEuY3VycmVudFRhcmdldCk6T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGV2ZW50XzEuY3VycmVudFRhcmdldCk7fWNhdGNoKF9vTyl7c291cmNlLmN1cnJlbnRUYXJnZXQ9Jzx1bmtub3duPic7fS8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzdHJpY3QtdHlwZS1wcmVkaWNhdGVzXG5pZih0eXBlb2YgQ3VzdG9tRXZlbnQhPT0ndW5kZWZpbmVkJyYmdmFsdWUgaW5zdGFuY2VvZiBDdXN0b21FdmVudCl7c291cmNlLmRldGFpbD1ldmVudF8xLmRldGFpbDt9Zm9yKHZhciBpIGluIGV2ZW50XzEpe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChldmVudF8xLGkpKXtzb3VyY2VbaV09ZXZlbnRfMTt9fXJldHVybiBzb3VyY2U7fXJldHVybiB2YWx1ZTt9LyoqIENhbGN1bGF0ZXMgYnl0ZXMgc2l6ZSBvZiBpbnB1dCBzdHJpbmcgKi9mdW5jdGlvbiB1dGY4TGVuZ3RoKHZhbHVlKXsvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYml0d2lzZVxucmV0dXJufi1lbmNvZGVVUkkodmFsdWUpLnNwbGl0KC8lLi58Li8pLmxlbmd0aDt9LyoqIENhbGN1bGF0ZXMgYnl0ZXMgc2l6ZSBvZiBpbnB1dCBvYmplY3QgKi9mdW5jdGlvbiBqc29uU2l6ZSh2YWx1ZSl7cmV0dXJuIHV0ZjhMZW5ndGgoSlNPTi5zdHJpbmdpZnkodmFsdWUpKTt9LyoqIEpTRG9jICovZnVuY3Rpb24gbm9ybWFsaXplVG9TaXplKG9iamVjdCwvLyBEZWZhdWx0IE5vZGUuanMgUkVQTCBkZXB0aFxuZGVwdGgsLy8gMTAwa0IsIGFzIDIwMGtCIGlzIG1heCBwYXlsb2FkIHNpemUsIHNvIGhhbGYgc291bmRzIHJlYXNvbmFibGVcbm1heFNpemUpe2lmKGRlcHRoPT09dm9pZCAwKXtkZXB0aD0zO31pZihtYXhTaXplPT09dm9pZCAwKXttYXhTaXplPTEwMCoxMDI0O312YXIgc2VyaWFsaXplZD1ub3JtYWxpemUkMShvYmplY3QsZGVwdGgpO2lmKGpzb25TaXplKHNlcmlhbGl6ZWQpPm1heFNpemUpe3JldHVybiBub3JtYWxpemVUb1NpemUob2JqZWN0LGRlcHRoLTEsbWF4U2l6ZSk7fXJldHVybiBzZXJpYWxpemVkO30vKiogVHJhbnNmb3JtcyBhbnkgaW5wdXQgdmFsdWUgaW50byBhIHN0cmluZyBmb3JtLCBlaXRoZXIgcHJpbWl0aXZlIHZhbHVlIG9yIGEgdHlwZSBvZiB0aGUgaW5wdXQgKi9mdW5jdGlvbiBzZXJpYWxpemVWYWx1ZSh2YWx1ZSl7dmFyIHR5cGU9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTsvLyBOb2RlLmpzIFJFUEwgbm90YXRpb25cbmlmKHR5cGVvZiB2YWx1ZT09PSdzdHJpbmcnKXtyZXR1cm4gdmFsdWU7fWlmKHR5cGU9PT0nW29iamVjdCBPYmplY3RdJyl7cmV0dXJuJ1tPYmplY3RdJzt9aWYodHlwZT09PSdbb2JqZWN0IEFycmF5XScpe3JldHVybidbQXJyYXldJzt9dmFyIG5vcm1hbGl6ZWQ9bm9ybWFsaXplVmFsdWUodmFsdWUpO3JldHVybiBpc1ByaW1pdGl2ZSQxKG5vcm1hbGl6ZWQpP25vcm1hbGl6ZWQ6dHlwZTt9LyoqXG4gICAqIG5vcm1hbGl6ZVZhbHVlKClcbiAgICpcbiAgICogVGFrZXMgdW5zZXJpYWxpemFibGUgaW5wdXQgYW5kIG1ha2UgaXQgc2VyaWFsaXphYmxlIGZyaWVuZGx5XG4gICAqXG4gICAqIC0gdHJhbnNsYXRlcyB1bmRlZmluZWQvTmFOIHZhbHVlcyB0byBcIlt1bmRlZmluZWRdXCIvXCJbTmFOXVwiIHJlc3BlY3RpdmVseSxcbiAgICogLSBzZXJpYWxpemVzIEVycm9yIG9iamVjdHNcbiAgICogLSBmaWx0ZXIgZ2xvYmFsIG9iamVjdHNcbiAgICovIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjeWNsb21hdGljLWNvbXBsZXhpdHlcbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlLGtleSl7aWYoa2V5PT09J2RvbWFpbicmJnZhbHVlJiZfdHlwZW9mMih2YWx1ZSk9PT0nb2JqZWN0JyYmdmFsdWUuX2V2ZW50cyl7cmV0dXJuJ1tEb21haW5dJzt9aWYoa2V5PT09J2RvbWFpbkVtaXR0ZXInKXtyZXR1cm4nW0RvbWFpbkVtaXR0ZXJdJzt9aWYodHlwZW9mIGdsb2JhbCE9PSd1bmRlZmluZWQnJiZ2YWx1ZT09PWdsb2JhbCl7cmV0dXJuJ1tHbG9iYWxdJzt9aWYodHlwZW9mIHdpbmRvdyE9PSd1bmRlZmluZWQnJiZ2YWx1ZT09PXdpbmRvdyl7cmV0dXJuJ1tXaW5kb3ddJzt9aWYodHlwZW9mIGRvY3VtZW50IT09J3VuZGVmaW5lZCcmJnZhbHVlPT09ZG9jdW1lbnQpe3JldHVybidbRG9jdW1lbnRdJzt9Ly8gUmVhY3QncyBTeW50aGV0aWNFdmVudCB0aGluZ3lcbmlmKGlzU3ludGhldGljRXZlbnQodmFsdWUpKXtyZXR1cm4nW1N5bnRoZXRpY0V2ZW50XSc7fS8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby10YXV0b2xvZ3ktZXhwcmVzc2lvblxuaWYodHlwZW9mIHZhbHVlPT09J251bWJlcicmJnZhbHVlIT09dmFsdWUpe3JldHVybidbTmFOXSc7fWlmKHZhbHVlPT09dm9pZCAwKXtyZXR1cm4nW3VuZGVmaW5lZF0nO31pZih0eXBlb2YgdmFsdWU9PT0nZnVuY3Rpb24nKXtyZXR1cm5cIltGdW5jdGlvbjogXCIrKHZhbHVlLm5hbWV8fCc8dW5rbm93bi1mdW5jdGlvbi1uYW1lPicpK1wiXVwiO31yZXR1cm4gdmFsdWU7fS8qKlxuICAgKiBXYWxrcyBhbiBvYmplY3QgdG8gcGVyZm9ybSBhIG5vcm1hbGl6YXRpb24gb24gaXRcbiAgICpcbiAgICogQHBhcmFtIGtleSBvZiBvYmplY3QgdGhhdCdzIHdhbGtlZCBpbiBjdXJyZW50IGl0ZXJhdGlvblxuICAgKiBAcGFyYW0gdmFsdWUgb2JqZWN0IHRvIGJlIHdhbGtlZFxuICAgKiBAcGFyYW0gZGVwdGggT3B0aW9uYWwgbnVtYmVyIGluZGljYXRpbmcgaG93IGRlZXAgc2hvdWxkIHdhbGtpbmcgYmUgcGVyZm9ybWVkXG4gICAqIEBwYXJhbSBtZW1vIE9wdGlvbmFsIE1lbW8gY2xhc3MgaGFuZGxpbmcgZGVjeWNsaW5nXG4gICAqL2Z1bmN0aW9uIHdhbGsoa2V5LHZhbHVlLGRlcHRoLG1lbW8pe2lmKGRlcHRoPT09dm9pZCAwKXtkZXB0aD0rSW5maW5pdHk7fWlmKG1lbW89PT12b2lkIDApe21lbW89bmV3IE1lbW8oKTt9Ly8gSWYgd2UgcmVhY2ggdGhlIG1heGltdW0gZGVwdGgsIHNlcmlhbGl6ZSB3aGF0ZXZlciBoYXMgbGVmdFxuaWYoZGVwdGg9PT0wKXtyZXR1cm4gc2VyaWFsaXplVmFsdWUodmFsdWUpO30vLyBJZiB2YWx1ZSBpbXBsZW1lbnRzIGB0b0pTT05gIG1ldGhvZCwgY2FsbCBpdCBhbmQgcmV0dXJuIGVhcmx5XG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby11bnNhZmUtYW55XG5pZih2YWx1ZSE9PW51bGwmJnZhbHVlIT09dW5kZWZpbmVkJiZ0eXBlb2YgdmFsdWUudG9KU09OPT09J2Z1bmN0aW9uJyl7cmV0dXJuIHZhbHVlLnRvSlNPTigpO30vLyB0c2xpbnQ6ZW5hYmxlOm5vLXVuc2FmZS1hbnlcbi8vIElmIG5vcm1hbGl6ZWQgdmFsdWUgaXMgYSBwcmltaXRpdmUsIHRoZXJlIGFyZSBubyBicmFuY2hlcyBsZWZ0IHRvIHdhbGssIHNvIHdlIGNhbiBqdXN0IGJhaWwgb3V0LCBhcyB0aGVyZXMgbm8gcG9pbnQgaW4gZ29pbmcgZG93biB0aGF0IGJyYW5jaCBhbnkgZnVydGhlclxudmFyIG5vcm1hbGl6ZWQ9bm9ybWFsaXplVmFsdWUodmFsdWUsa2V5KTtpZihpc1ByaW1pdGl2ZSQxKG5vcm1hbGl6ZWQpKXtyZXR1cm4gbm9ybWFsaXplZDt9Ly8gQ3JlYXRlIHNvdXJjZSB0aGF0IHdlIHdpbGwgdXNlIGZvciBuZXh0IGl0dGVyYXRpb25zLCBlaXRoZXIgb2JqZWN0aWZpZWQgZXJyb3Igb2JqZWN0IChFcnJvciB0eXBlIHdpdGggZXh0cmFjdGVkIGtleXM6dmFsdWUgcGFpcnMpIG9yIHRoZSBpbnB1dCBpdHNlbGZcbnZhciBzb3VyY2U9Z2V0V2Fsa1NvdXJjZSh2YWx1ZSk7Ly8gQ3JlYXRlIGFuIGFjY3VtdWxhdG9yIHRoYXQgd2lsbCBhY3QgYXMgYSBwYXJlbnQgZm9yIGFsbCBmdXR1cmUgaXR0ZXJhdGlvbnMgb2YgdGhhdCBicmFuY2hcbnZhciBhY2M9QXJyYXkuaXNBcnJheSh2YWx1ZSk/W106e307Ly8gSWYgd2UgYWxyZWFkeSB3YWxrZWQgdGhhdCBicmFuY2gsIGJhaWwgb3V0LCBhcyBpdCdzIGNpcmN1bGFyIHJlZmVyZW5jZVxuaWYobWVtby5tZW1vaXplKHZhbHVlKSl7cmV0dXJuJ1tDaXJjdWxhciB+XSc7fS8vIFdhbGsgYWxsIGtleXMgb2YgdGhlIHNvdXJjZVxuZm9yKHZhciBpbm5lcktleSBpbiBzb3VyY2Upey8vIEF2b2lkIGl0ZXJhdGluZyBvdmVyIGZpZWxkcyBpbiB0aGUgcHJvdG90eXBlIGlmIHRoZXkndmUgc29tZWhvdyBiZWVuIGV4cG9zZWQgdG8gZW51bWVyYXRpb24uXG5pZighT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxpbm5lcktleSkpe2NvbnRpbnVlO30vLyBSZWN1cnNpdmVseSB3YWxrIHRocm91Z2ggYWxsIHRoZSBjaGlsZCBub2Rlc1xuYWNjW2lubmVyS2V5XT13YWxrKGlubmVyS2V5LHNvdXJjZVtpbm5lcktleV0sZGVwdGgtMSxtZW1vKTt9Ly8gT25jZSB3YWxrZWQgdGhyb3VnaCBhbGwgdGhlIGJyYW5jaGVzLCByZW1vdmUgdGhlIHBhcmVudCBmcm9tIG1lbW8gc3RvcmFnZVxubWVtby51bm1lbW9pemUodmFsdWUpOy8vIFJldHVybiBhY2N1bXVsYXRlZCB2YWx1ZXNcbnJldHVybiBhY2M7fS8qKlxuICAgKiBub3JtYWxpemUoKVxuICAgKlxuICAgKiAtIENyZWF0ZXMgYSBjb3B5IHRvIHByZXZlbnQgb3JpZ2luYWwgaW5wdXQgbXV0YXRpb25cbiAgICogLSBTa2lwIG5vbi1lbnVtZXJhYmxlcnNcbiAgICogLSBDYWxscyBgdG9KU09OYCBpZiBpbXBsZW1lbnRlZFxuICAgKiAtIFJlbW92ZXMgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICAgKiAtIFRyYW5zbGF0ZXMgbm9uLXNlcmlhbGl6ZWFibGUgdmFsdWVzICh1bmRlZmluZWQvTmFOL0Z1bmN0aW9ucykgdG8gc2VyaWFsaXphYmxlIGZvcm1hdFxuICAgKiAtIFRyYW5zbGF0ZXMga25vd24gZ2xvYmFsIG9iamVjdHMvQ2xhc3NlcyB0byBhIHN0cmluZyByZXByZXNlbnRhdGlvbnNcbiAgICogLSBUYWtlcyBjYXJlIG9mIEVycm9yIG9iamVjdHMgc2VyaWFsaXphdGlvblxuICAgKiAtIE9wdGlvbmFsbHkgbGltaXQgZGVwdGggb2YgZmluYWwgb3V0cHV0XG4gICAqL2Z1bmN0aW9uIG5vcm1hbGl6ZSQxKGlucHV0LGRlcHRoKXt0cnl7Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVuc2FmZS1hbnlcbnJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGlucHV0LGZ1bmN0aW9uKGtleSx2YWx1ZSl7cmV0dXJuIHdhbGsoa2V5LHZhbHVlLGRlcHRoKTt9KSk7fWNhdGNoKF9vTyl7cmV0dXJuJyoqbm9uLXNlcmlhbGl6YWJsZSoqJzt9fS8qKlxuICAgKiBHaXZlbiBhbnkgY2FwdHVyZWQgZXhjZXB0aW9uLCBleHRyYWN0IGl0cyBrZXlzIGFuZCBjcmVhdGUgYSBzb3J0ZWRcbiAgICogYW5kIHRydW5jYXRlZCBsaXN0IHRoYXQgd2lsbCBiZSB1c2VkIGluc2lkZSB0aGUgZXZlbnQgbWVzc2FnZS5cbiAgICogZWcuIGBOb24tZXJyb3IgZXhjZXB0aW9uIGNhcHR1cmVkIHdpdGgga2V5czogZm9vLCBiYXIsIGJhemBcbiAgICovZnVuY3Rpb24gZXh0cmFjdEV4Y2VwdGlvbktleXNGb3JNZXNzYWdlKGV4Y2VwdGlvbixtYXhMZW5ndGgpe2lmKG1heExlbmd0aD09PXZvaWQgMCl7bWF4TGVuZ3RoPTQwO30vLyB0c2xpbnQ6ZGlzYWJsZTpzdHJpY3QtdHlwZS1wcmVkaWNhdGVzXG52YXIga2V5cz1PYmplY3Qua2V5cyhnZXRXYWxrU291cmNlKGV4Y2VwdGlvbikpO2tleXMuc29ydCgpO2lmKCFrZXlzLmxlbmd0aCl7cmV0dXJuJ1tvYmplY3QgaGFzIG5vIGtleXNdJzt9aWYoa2V5c1swXS5sZW5ndGg+PW1heExlbmd0aCl7cmV0dXJuIHRydW5jYXRlKGtleXNbMF0sbWF4TGVuZ3RoKTt9Zm9yKHZhciBpbmNsdWRlZEtleXM9a2V5cy5sZW5ndGg7aW5jbHVkZWRLZXlzPjA7aW5jbHVkZWRLZXlzLS0pe3ZhciBzZXJpYWxpemVkPWtleXMuc2xpY2UoMCxpbmNsdWRlZEtleXMpLmpvaW4oJywgJyk7aWYoc2VyaWFsaXplZC5sZW5ndGg+bWF4TGVuZ3RoKXtjb250aW51ZTt9aWYoaW5jbHVkZWRLZXlzPT09a2V5cy5sZW5ndGgpe3JldHVybiBzZXJpYWxpemVkO31yZXR1cm4gdHJ1bmNhdGUoc2VyaWFsaXplZCxtYXhMZW5ndGgpO31yZXR1cm4nJzt9LyoqIFN5bmNQcm9taXNlIGludGVybmFsIHN0YXRlcyAqL3ZhciBTdGF0ZXM7KGZ1bmN0aW9uKFN0YXRlcyl7LyoqIFBlbmRpbmcgKi9TdGF0ZXNbXCJQRU5ESU5HXCJdPVwiUEVORElOR1wiOy8qKiBSZXNvbHZlZCAvIE9LICovU3RhdGVzW1wiUkVTT0xWRURcIl09XCJSRVNPTFZFRFwiOy8qKiBSZWplY3RlZCAvIEVycm9yICovU3RhdGVzW1wiUkVKRUNURURcIl09XCJSRUpFQ1RFRFwiO30pKFN0YXRlc3x8KFN0YXRlcz17fSkpOy8qKlxuICAgKiBUaGVuYWJsZSBjbGFzcyB0aGF0IGJlaGF2ZXMgbGlrZSBhIFByb21pc2UgYW5kIGZvbGxvd3MgaXQncyBpbnRlcmZhY2VcbiAgICogYnV0IGlzIG5vdCBhc3luYyBpbnRlcm5hbGx5XG4gICAqL3ZhciBTeW5jUHJvbWlzZT0vKiogQGNsYXNzICovZnVuY3Rpb24oKXtmdW5jdGlvbiBTeW5jUHJvbWlzZShleGVjdXRvcil7dmFyIF90aGlzPXRoaXM7dGhpcy5fc3RhdGU9U3RhdGVzLlBFTkRJTkc7dGhpcy5faGFuZGxlcnM9W107LyoqIEpTRG9jICovdGhpcy5fcmVzb2x2ZT1mdW5jdGlvbih2YWx1ZSl7X3RoaXMuX3NldFJlc3VsdChTdGF0ZXMuUkVTT0xWRUQsdmFsdWUpO307LyoqIEpTRG9jICovdGhpcy5fcmVqZWN0PWZ1bmN0aW9uKHJlYXNvbil7X3RoaXMuX3NldFJlc3VsdChTdGF0ZXMuUkVKRUNURUQscmVhc29uKTt9Oy8qKiBKU0RvYyAqL3RoaXMuX3NldFJlc3VsdD1mdW5jdGlvbihzdGF0ZSx2YWx1ZSl7aWYoX3RoaXMuX3N0YXRlIT09U3RhdGVzLlBFTkRJTkcpe3JldHVybjt9aWYoaXNUaGVuYWJsZSh2YWx1ZSkpe3ZhbHVlLnRoZW4oX3RoaXMuX3Jlc29sdmUsX3RoaXMuX3JlamVjdCk7cmV0dXJuO31fdGhpcy5fc3RhdGU9c3RhdGU7X3RoaXMuX3ZhbHVlPXZhbHVlO190aGlzLl9leGVjdXRlSGFuZGxlcnMoKTt9Oy8vIFRPRE86IEZJWE1FXG4vKiogSlNEb2MgKi90aGlzLl9hdHRhY2hIYW5kbGVyPWZ1bmN0aW9uKGhhbmRsZXIpe190aGlzLl9oYW5kbGVycz1fdGhpcy5faGFuZGxlcnMuY29uY2F0KGhhbmRsZXIpO190aGlzLl9leGVjdXRlSGFuZGxlcnMoKTt9Oy8qKiBKU0RvYyAqL3RoaXMuX2V4ZWN1dGVIYW5kbGVycz1mdW5jdGlvbigpe2lmKF90aGlzLl9zdGF0ZT09PVN0YXRlcy5QRU5ESU5HKXtyZXR1cm47fWlmKF90aGlzLl9zdGF0ZT09PVN0YXRlcy5SRUpFQ1RFRCl7X3RoaXMuX2hhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcil7aWYoaGFuZGxlci5vbnJlamVjdGVkKXtoYW5kbGVyLm9ucmVqZWN0ZWQoX3RoaXMuX3ZhbHVlKTt9fSk7fWVsc2V7X3RoaXMuX2hhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcil7aWYoaGFuZGxlci5vbmZ1bGZpbGxlZCl7Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVuc2FmZS1hbnlcbmhhbmRsZXIub25mdWxmaWxsZWQoX3RoaXMuX3ZhbHVlKTt9fSk7fV90aGlzLl9oYW5kbGVycz1bXTt9O3RyeXtleGVjdXRvcih0aGlzLl9yZXNvbHZlLHRoaXMuX3JlamVjdCk7fWNhdGNoKGUpe3RoaXMuX3JlamVjdChlKTt9fS8qKiBKU0RvYyAqL1N5bmNQcm9taXNlLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybidbb2JqZWN0IFN5bmNQcm9taXNlXSc7fTsvKiogSlNEb2MgKi9TeW5jUHJvbWlzZS5yZXNvbHZlPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpe3Jlc29sdmUodmFsdWUpO30pO307LyoqIEpTRG9jICovU3luY1Byb21pc2UucmVqZWN0PWZ1bmN0aW9uKHJlYXNvbil7cmV0dXJuIG5ldyBTeW5jUHJvbWlzZShmdW5jdGlvbihfLHJlamVjdCl7cmVqZWN0KHJlYXNvbik7fSk7fTsvKiogSlNEb2MgKi9TeW5jUHJvbWlzZS5hbGw9ZnVuY3Rpb24oY29sbGVjdGlvbil7cmV0dXJuIG5ldyBTeW5jUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7aWYoIUFycmF5LmlzQXJyYXkoY29sbGVjdGlvbikpe3JlamVjdChuZXcgVHlwZUVycm9yKFwiUHJvbWlzZS5hbGwgcmVxdWlyZXMgYW4gYXJyYXkgYXMgaW5wdXQuXCIpKTtyZXR1cm47fWlmKGNvbGxlY3Rpb24ubGVuZ3RoPT09MCl7cmVzb2x2ZShbXSk7cmV0dXJuO312YXIgY291bnRlcj1jb2xsZWN0aW9uLmxlbmd0aDt2YXIgcmVzb2x2ZWRDb2xsZWN0aW9uPVtdO2NvbGxlY3Rpb24uZm9yRWFjaChmdW5jdGlvbihpdGVtLGluZGV4KXtTeW5jUHJvbWlzZS5yZXNvbHZlKGl0ZW0pLnRoZW4oZnVuY3Rpb24odmFsdWUpe3Jlc29sdmVkQ29sbGVjdGlvbltpbmRleF09dmFsdWU7Y291bnRlci09MTtpZihjb3VudGVyIT09MCl7cmV0dXJuO31yZXNvbHZlKHJlc29sdmVkQ29sbGVjdGlvbik7fSkudGhlbihudWxsLHJlamVjdCk7fSk7fSk7fTsvKiogSlNEb2MgKi9TeW5jUHJvbWlzZS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihfb25mdWxmaWxsZWQsX29ucmVqZWN0ZWQpe3ZhciBfdGhpcz10aGlzO3JldHVybiBuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe190aGlzLl9hdHRhY2hIYW5kbGVyKHtvbmZ1bGZpbGxlZDpmdW5jdGlvbiBvbmZ1bGZpbGxlZChyZXN1bHQpe2lmKCFfb25mdWxmaWxsZWQpey8vIFRPRE86IMKvXFxfKOODhClfL8KvXG4vLyBUT0RPOiBGSVhNRVxucmVzb2x2ZShyZXN1bHQpO3JldHVybjt9dHJ5e3Jlc29sdmUoX29uZnVsZmlsbGVkKHJlc3VsdCkpO3JldHVybjt9Y2F0Y2goZSl7cmVqZWN0KGUpO3JldHVybjt9fSxvbnJlamVjdGVkOmZ1bmN0aW9uIG9ucmVqZWN0ZWQocmVhc29uKXtpZighX29ucmVqZWN0ZWQpe3JlamVjdChyZWFzb24pO3JldHVybjt9dHJ5e3Jlc29sdmUoX29ucmVqZWN0ZWQocmVhc29uKSk7cmV0dXJuO31jYXRjaChlKXtyZWplY3QoZSk7cmV0dXJuO319fSk7fSk7fTsvKiogSlNEb2MgKi9TeW5jUHJvbWlzZS5wcm90b3R5cGVbXCJjYXRjaFwiXT1mdW5jdGlvbihvbnJlamVjdGVkKXtyZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKHZhbCl7cmV0dXJuIHZhbDt9LG9ucmVqZWN0ZWQpO307LyoqIEpTRG9jICovU3luY1Byb21pc2UucHJvdG90eXBlW1wiZmluYWxseVwiXT1mdW5jdGlvbihvbmZpbmFsbHkpe3ZhciBfdGhpcz10aGlzO3JldHVybiBuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe3ZhciB2YWw7dmFyIGlzUmVqZWN0ZWQ7cmV0dXJuIF90aGlzLnRoZW4oZnVuY3Rpb24odmFsdWUpe2lzUmVqZWN0ZWQ9ZmFsc2U7dmFsPXZhbHVlO2lmKG9uZmluYWxseSl7b25maW5hbGx5KCk7fX0sZnVuY3Rpb24ocmVhc29uKXtpc1JlamVjdGVkPXRydWU7dmFsPXJlYXNvbjtpZihvbmZpbmFsbHkpe29uZmluYWxseSgpO319KS50aGVuKGZ1bmN0aW9uKCl7aWYoaXNSZWplY3RlZCl7cmVqZWN0KHZhbCk7cmV0dXJuO30vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW5zYWZlLWFueVxucmVzb2x2ZSh2YWwpO30pO30pO307cmV0dXJuIFN5bmNQcm9taXNlO30oKTsvKiogQSBzaW1wbGUgcXVldWUgdGhhdCBob2xkcyBwcm9taXNlcy4gKi92YXIgUHJvbWlzZUJ1ZmZlcj0vKiogQGNsYXNzICovZnVuY3Rpb24oKXtmdW5jdGlvbiBQcm9taXNlQnVmZmVyKF9saW1pdCl7dGhpcy5fbGltaXQ9X2xpbWl0Oy8qKiBJbnRlcm5hbCBzZXQgb2YgcXVldWVkIFByb21pc2VzICovdGhpcy5fYnVmZmVyPVtdO30vKipcbiAgICAgICAqIFNheXMgaWYgdGhlIGJ1ZmZlciBpcyByZWFkeSB0byB0YWtlIG1vcmUgcmVxdWVzdHNcbiAgICAgICAqL1Byb21pc2VCdWZmZXIucHJvdG90eXBlLmlzUmVhZHk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbGltaXQ9PT11bmRlZmluZWR8fHRoaXMubGVuZ3RoKCk8dGhpcy5fbGltaXQ7fTsvKipcbiAgICAgICAqIEFkZCBhIHByb21pc2UgdG8gdGhlIHF1ZXVlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB0YXNrIENhbiBiZSBhbnkgUHJvbWlzZUxpa2U8VD5cbiAgICAgICAqIEByZXR1cm5zIFRoZSBvcmlnaW5hbCBwcm9taXNlLlxuICAgICAgICovUHJvbWlzZUJ1ZmZlci5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHRhc2spe3ZhciBfdGhpcz10aGlzO2lmKCF0aGlzLmlzUmVhZHkoKSl7cmV0dXJuIFN5bmNQcm9taXNlLnJlamVjdChuZXcgU2VudHJ5RXJyb3IoJ05vdCBhZGRpbmcgUHJvbWlzZSBkdWUgdG8gYnVmZmVyIGxpbWl0IHJlYWNoZWQuJykpO31pZih0aGlzLl9idWZmZXIuaW5kZXhPZih0YXNrKT09PS0xKXt0aGlzLl9idWZmZXIucHVzaCh0YXNrKTt9dGFzay50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIF90aGlzLnJlbW92ZSh0YXNrKTt9KS50aGVuKG51bGwsZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMucmVtb3ZlKHRhc2spLnRoZW4obnVsbCxmdW5jdGlvbigpey8vIFdlIGhhdmUgdG8gYWRkIHRoaXMgY2F0Y2ggaGVyZSBvdGhlcndpc2Ugd2UgaGF2ZSBhbiB1bmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uXG4vLyBiZWNhdXNlIGl0J3MgYSBuZXcgUHJvbWlzZSBjaGFpbi5cbn0pO30pO3JldHVybiB0YXNrO307LyoqXG4gICAgICAgKiBSZW1vdmUgYSBwcm9taXNlIHRvIHRoZSBxdWV1ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gdGFzayBDYW4gYmUgYW55IFByb21pc2VMaWtlPFQ+XG4gICAgICAgKiBAcmV0dXJucyBSZW1vdmVkIHByb21pc2UuXG4gICAgICAgKi9Qcm9taXNlQnVmZmVyLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24odGFzayl7dmFyIHJlbW92ZWRUYXNrPXRoaXMuX2J1ZmZlci5zcGxpY2UodGhpcy5fYnVmZmVyLmluZGV4T2YodGFzayksMSlbMF07cmV0dXJuIHJlbW92ZWRUYXNrO307LyoqXG4gICAgICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIG51bWJlciBvZiB1bnJlc29sdmVkIHByb21pc2VzIGluIHRoZSBxdWV1ZS5cbiAgICAgICAqL1Byb21pc2VCdWZmZXIucHJvdG90eXBlLmxlbmd0aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9idWZmZXIubGVuZ3RoO307LyoqXG4gICAgICAgKiBUaGlzIHdpbGwgZHJhaW4gdGhlIHdob2xlIHF1ZXVlLCByZXR1cm5zIHRydWUgaWYgcXVldWUgaXMgZW1wdHkgb3IgZHJhaW5lZC5cbiAgICAgICAqIElmIHRpbWVvdXQgaXMgcHJvdmlkZWQgYW5kIHRoZSBxdWV1ZSB0YWtlcyBsb25nZXIgdG8gZHJhaW4sIHRoZSBwcm9taXNlIHN0aWxsIHJlc29sdmVzIGJ1dCB3aXRoIGZhbHNlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB0aW1lb3V0IE51bWJlciBpbiBtcyB0byB3YWl0IHVudGlsIGl0IHJlc29sdmVzIHdpdGggZmFsc2UuXG4gICAgICAgKi9Qcm9taXNlQnVmZmVyLnByb3RvdHlwZS5kcmFpbj1mdW5jdGlvbih0aW1lb3V0KXt2YXIgX3RoaXM9dGhpcztyZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpe3ZhciBjYXB0dXJlZFNldFRpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbigpe2lmKHRpbWVvdXQmJnRpbWVvdXQ+MCl7cmVzb2x2ZShmYWxzZSk7fX0sdGltZW91dCk7U3luY1Byb21pc2UuYWxsKF90aGlzLl9idWZmZXIpLnRoZW4oZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQoY2FwdHVyZWRTZXRUaW1lb3V0KTtyZXNvbHZlKHRydWUpO30pLnRoZW4obnVsbCxmdW5jdGlvbigpe3Jlc29sdmUodHJ1ZSk7fSk7fSk7fTtyZXR1cm4gUHJvbWlzZUJ1ZmZlcjt9KCk7LyoqXG4gICAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBGZXRjaCBBUElcbiAgICoge0BsaW5rIHN1cHBvcnRzRmV0Y2h9LlxuICAgKlxuICAgKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICAgKi9mdW5jdGlvbiBzdXBwb3J0c0ZldGNoKCl7aWYoISgnZmV0Y2gnaW4gZ2V0R2xvYmFsT2JqZWN0KCkpKXtyZXR1cm4gZmFsc2U7fXRyeXsvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW51c2VkLWV4cHJlc3Npb25cbm5ldyBIZWFkZXJzKCk7Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVudXNlZC1leHByZXNzaW9uXG5uZXcgUmVxdWVzdCgnJyk7Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVudXNlZC1leHByZXNzaW9uXG5uZXcgUmVzcG9uc2UoKTtyZXR1cm4gdHJ1ZTt9Y2F0Y2goZSl7cmV0dXJuIGZhbHNlO319LyoqXG4gICAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBGZXRjaCBBUEkgbmF0aXZlbHlcbiAgICoge0BsaW5rIHN1cHBvcnRzTmF0aXZlRmV0Y2h9LlxuICAgKlxuICAgKiBAcmV0dXJucyB0cnVlIGlmIGB3aW5kb3cuZmV0Y2hgIGlzIG5hdGl2ZWx5IGltcGxlbWVudGVkLCBmYWxzZSBvdGhlcndpc2VcbiAgICovZnVuY3Rpb24gc3VwcG9ydHNOYXRpdmVGZXRjaCgpe2lmKCFzdXBwb3J0c0ZldGNoKCkpe3JldHVybiBmYWxzZTt9dmFyIGlzTmF0aXZlRnVuYz1mdW5jdGlvbiBpc05hdGl2ZUZ1bmMoZnVuYyl7cmV0dXJuIGZ1bmMudG9TdHJpbmcoKS5pbmRleE9mKCduYXRpdmUnKSE9PS0xO307dmFyIGdsb2JhbD1nZXRHbG9iYWxPYmplY3QoKTt2YXIgcmVzdWx0PW51bGw7dmFyIGRvYz1nbG9iYWwuZG9jdW1lbnQ7aWYoZG9jKXt2YXIgc2FuZGJveD1kb2MuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7c2FuZGJveC5oaWRkZW49dHJ1ZTt0cnl7ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoc2FuZGJveCk7aWYoc2FuZGJveC5jb250ZW50V2luZG93JiZzYW5kYm94LmNvbnRlbnRXaW5kb3cuZmV0Y2gpey8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZSBuby11bmJvdW5kLW1ldGhvZFxucmVzdWx0PWlzTmF0aXZlRnVuYyhzYW5kYm94LmNvbnRlbnRXaW5kb3cuZmV0Y2gpO31kb2MuaGVhZC5yZW1vdmVDaGlsZChzYW5kYm94KTt9Y2F0Y2goZXJyKXtsb2dnZXIkMS53YXJuKCdDb3VsZCBub3QgY3JlYXRlIHNhbmRib3ggaWZyYW1lIGZvciBwdXJlIGZldGNoIGNoZWNrLCBiYWlsaW5nIHRvIHdpbmRvdy5mZXRjaDogJyxlcnIpO319aWYocmVzdWx0PT09bnVsbCl7Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lIG5vLXVuYm91bmQtbWV0aG9kXG5yZXN1bHQ9aXNOYXRpdmVGdW5jKGdsb2JhbC5mZXRjaCk7fXJldHVybiByZXN1bHQ7fS8qKlxuICAgKiBUZWxscyB3aGV0aGVyIGN1cnJlbnQgZW52aXJvbm1lbnQgc3VwcG9ydHMgUmVmZXJyZXIgUG9saWN5IEFQSVxuICAgKiB7QGxpbmsgc3VwcG9ydHNSZWZlcnJlclBvbGljeX0uXG4gICAqXG4gICAqIEByZXR1cm5zIEFuc3dlciB0byB0aGUgZ2l2ZW4gcXVlc3Rpb24uXG4gICAqL2Z1bmN0aW9uIHN1cHBvcnRzUmVmZXJyZXJQb2xpY3koKXsvLyBEZXNwaXRlIGFsbCBzdGFycyBpbiB0aGUgc2t5IHNheWluZyB0aGF0IEVkZ2Ugc3VwcG9ydHMgb2xkIGRyYWZ0IHN5bnRheCwgYWthICduZXZlcicsICdhbHdheXMnLCAnb3JpZ2luJyBhbmQgJ2RlZmF1bHRcbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI2ZlYXQ9cmVmZXJyZXItcG9saWN5XG4vLyBJdCBkb2Vzbid0LiBBbmQgaXQgdGhyb3cgZXhjZXB0aW9uIGluc3RlYWQgb2YgaWdub3JpbmcgdGhpcyBwYXJhbWV0ZXIuLi5cbi8vIFJFRjogaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9yYXZlbi1qcy9pc3N1ZXMvMTIzM1xuaWYoIXN1cHBvcnRzRmV0Y2goKSl7cmV0dXJuIGZhbHNlO310cnl7Ly8gdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLWV4cHJlc3Npb25cbm5ldyBSZXF1ZXN0KCdfJyx7cmVmZXJyZXJQb2xpY3k6J29yaWdpbid9KTtyZXR1cm4gdHJ1ZTt9Y2F0Y2goZSl7cmV0dXJuIGZhbHNlO319LyoqXG4gICAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBIaXN0b3J5IEFQSVxuICAgKiB7QGxpbmsgc3VwcG9ydHNIaXN0b3J5fS5cbiAgICpcbiAgICogQHJldHVybnMgQW5zd2VyIHRvIHRoZSBnaXZlbiBxdWVzdGlvbi5cbiAgICovZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCl7Ly8gTk9URTogaW4gQ2hyb21lIEFwcCBlbnZpcm9ubWVudCwgdG91Y2hpbmcgaGlzdG9yeS5wdXNoU3RhdGUsICpldmVuIGluc2lkZVxuLy8gICAgICAgYSB0cnkvY2F0Y2ggYmxvY2sqLCB3aWxsIGNhdXNlIENocm9tZSB0byBvdXRwdXQgYW4gZXJyb3IgdG8gY29uc29sZS5lcnJvclxuLy8gYm9ycm93ZWQgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzEzOTQ1L2ZpbGVzXG52YXIgZ2xvYmFsPWdldEdsb2JhbE9iamVjdCgpO3ZhciBjaHJvbWU9Z2xvYmFsLmNocm9tZTsvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW5zYWZlLWFueVxudmFyIGlzQ2hyb21lUGFja2FnZWRBcHA9Y2hyb21lJiZjaHJvbWUuYXBwJiZjaHJvbWUuYXBwLnJ1bnRpbWU7dmFyIGhhc0hpc3RvcnlBcGk9J2hpc3RvcnknaW4gZ2xvYmFsJiYhIWdsb2JhbC5oaXN0b3J5LnB1c2hTdGF0ZSYmISFnbG9iYWwuaGlzdG9yeS5yZXBsYWNlU3RhdGU7cmV0dXJuIWlzQ2hyb21lUGFja2FnZWRBcHAmJmhhc0hpc3RvcnlBcGk7fXZhciBUUkFDRVBBUkVOVF9SRUdFWFA9L15bIFxcdF0qKFswLTlhLWZdezMyfSk/LT8oWzAtOWEtZl17MTZ9KT8tPyhbMDFdKT9bIFxcdF0qJC87LyoqXG4gICAqIFNwYW4gY29udGFpbmcgYWxsIGRhdGEgYWJvdXQgYSBzcGFuXG4gICAqL3ZhciBTcGFuPS8qKiBAY2xhc3MgKi9mdW5jdGlvbigpe2Z1bmN0aW9uIFNwYW4oX3RyYWNlSWQsX3NwYW5JZCxfc2FtcGxlZCxfcGFyZW50KXtpZihfdHJhY2VJZD09PXZvaWQgMCl7X3RyYWNlSWQ9dXVpZDQoKTt9aWYoX3NwYW5JZD09PXZvaWQgMCl7X3NwYW5JZD11dWlkNCgpLnN1YnN0cmluZygxNik7fXRoaXMuX3RyYWNlSWQ9X3RyYWNlSWQ7dGhpcy5fc3BhbklkPV9zcGFuSWQ7dGhpcy5fc2FtcGxlZD1fc2FtcGxlZDt0aGlzLl9wYXJlbnQ9X3BhcmVudDt9LyoqXG4gICAgICAgKiBTZXR0ZXIgZm9yIHBhcmVudFxuICAgICAgICovU3Bhbi5wcm90b3R5cGUuc2V0UGFyZW50PWZ1bmN0aW9uKHBhcmVudCl7dGhpcy5fcGFyZW50PXBhcmVudDtyZXR1cm4gdGhpczt9Oy8qKlxuICAgICAgICogU2V0dGVyIGZvciBzYW1wbGVkXG4gICAgICAgKi9TcGFuLnByb3RvdHlwZS5zZXRTYW1wbGVkPWZ1bmN0aW9uKHNhbXBsZWQpe3RoaXMuX3NhbXBsZWQ9c2FtcGxlZDtyZXR1cm4gdGhpczt9Oy8qKlxuICAgICAgICogQ29udGludWVzIGEgdHJhY2VcbiAgICAgICAqIEBwYXJhbSB0cmFjZXBhcmVudCBUcmFjZXBhcmVudCBzdHJpbmdcbiAgICAgICAqL1NwYW4uZnJvbVRyYWNlcGFyZW50PWZ1bmN0aW9uKHRyYWNlcGFyZW50KXt2YXIgbWF0Y2hlcz10cmFjZXBhcmVudC5tYXRjaChUUkFDRVBBUkVOVF9SRUdFWFApO2lmKG1hdGNoZXMpe3ZhciBzYW1wbGVkPXZvaWQgMDtpZihtYXRjaGVzWzNdPT09JzEnKXtzYW1wbGVkPXRydWU7fWVsc2UgaWYobWF0Y2hlc1szXT09PScwJyl7c2FtcGxlZD1mYWxzZTt9dmFyIHBhcmVudF8xPW5ldyBTcGFuKG1hdGNoZXNbMV0sbWF0Y2hlc1syXSxzYW1wbGVkKTtyZXR1cm4gbmV3IFNwYW4obWF0Y2hlc1sxXSx1bmRlZmluZWQsc2FtcGxlZCxwYXJlbnRfMSk7fXJldHVybiB1bmRlZmluZWQ7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9TcGFuLnByb3RvdHlwZS50b1RyYWNlcGFyZW50PWZ1bmN0aW9uKCl7dmFyIHNhbXBsZWQ9Jyc7aWYodGhpcy5fc2FtcGxlZD09PXRydWUpe3NhbXBsZWQ9Jy0xJzt9ZWxzZSBpZih0aGlzLl9zYW1wbGVkPT09ZmFsc2Upe3NhbXBsZWQ9Jy0wJzt9cmV0dXJuIHRoaXMuX3RyYWNlSWQrXCItXCIrdGhpcy5fc3BhbklkK3NhbXBsZWQ7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9TcGFuLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm57cGFyZW50OnRoaXMuX3BhcmVudCYmdGhpcy5fcGFyZW50LnRvSlNPTigpfHx1bmRlZmluZWQsc2FtcGxlZDp0aGlzLl9zYW1wbGVkLHNwYW5faWQ6dGhpcy5fc3BhbklkLHRyYWNlX2lkOnRoaXMuX3RyYWNlSWR9O307cmV0dXJuIFNwYW47fSgpOy8qKlxuICAgKiBIb2xkcyBhZGRpdGlvbmFsIGV2ZW50IGluZm9ybWF0aW9uLiB7QGxpbmsgU2NvcGUuYXBwbHlUb0V2ZW50fSB3aWxsIGJlXG4gICAqIGNhbGxlZCBieSB0aGUgY2xpZW50IGJlZm9yZSBhbiBldmVudCB3aWxsIGJlIHNlbnQuXG4gICAqL3ZhciBTY29wZT0vKiogQGNsYXNzICovZnVuY3Rpb24oKXtmdW5jdGlvbiBTY29wZSgpey8qKiBGbGFnIGlmIG5vdGlmaXlpbmcgaXMgaGFwcGVuaW5nLiAqL3RoaXMuX25vdGlmeWluZ0xpc3RlbmVycz1mYWxzZTsvKiogQ2FsbGJhY2sgZm9yIGNsaWVudCB0byByZWNlaXZlIHNjb3BlIGNoYW5nZXMuICovdGhpcy5fc2NvcGVMaXN0ZW5lcnM9W107LyoqIENhbGxiYWNrIGxpc3QgdGhhdCB3aWxsIGJlIGNhbGxlZCBhZnRlciB7QGxpbmsgYXBwbHlUb0V2ZW50fS4gKi90aGlzLl9ldmVudFByb2Nlc3NvcnM9W107LyoqIEFycmF5IG9mIGJyZWFkY3J1bWJzLiAqL3RoaXMuX2JyZWFkY3J1bWJzPVtdOy8qKiBVc2VyICovdGhpcy5fdXNlcj17fTsvKiogVGFncyAqL3RoaXMuX3RhZ3M9e307LyoqIEV4dHJhICovdGhpcy5fZXh0cmE9e307LyoqIENvbnRleHRzICovdGhpcy5fY29udGV4dD17fTt9LyoqXG4gICAgICAgKiBBZGQgaW50ZXJuYWwgb24gY2hhbmdlIGxpc3RlbmVyLiBVc2VkIGZvciBzdWIgU0RLcyB0aGF0IG5lZWQgdG8gc3RvcmUgdGhlIHNjb3BlLlxuICAgICAgICogQGhpZGRlblxuICAgICAgICovU2NvcGUucHJvdG90eXBlLmFkZFNjb3BlTGlzdGVuZXI9ZnVuY3Rpb24oY2FsbGJhY2spe3RoaXMuX3Njb3BlTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovU2NvcGUucHJvdG90eXBlLmFkZEV2ZW50UHJvY2Vzc29yPWZ1bmN0aW9uKGNhbGxiYWNrKXt0aGlzLl9ldmVudFByb2Nlc3NvcnMucHVzaChjYWxsYmFjayk7cmV0dXJuIHRoaXM7fTsvKipcbiAgICAgICAqIFRoaXMgd2lsbCBiZSBjYWxsZWQgb24gZXZlcnkgc2V0IGNhbGwuXG4gICAgICAgKi9TY29wZS5wcm90b3R5cGUuX25vdGlmeVNjb3BlTGlzdGVuZXJzPWZ1bmN0aW9uKCl7dmFyIF90aGlzPXRoaXM7aWYoIXRoaXMuX25vdGlmeWluZ0xpc3RlbmVycyl7dGhpcy5fbm90aWZ5aW5nTGlzdGVuZXJzPXRydWU7c2V0VGltZW91dChmdW5jdGlvbigpe190aGlzLl9zY29wZUxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uKGNhbGxiYWNrKXtjYWxsYmFjayhfdGhpcyk7fSk7X3RoaXMuX25vdGlmeWluZ0xpc3RlbmVycz1mYWxzZTt9KTt9fTsvKipcbiAgICAgICAqIFRoaXMgd2lsbCBiZSBjYWxsZWQgYWZ0ZXIge0BsaW5rIGFwcGx5VG9FdmVudH0gaXMgZmluaXNoZWQuXG4gICAgICAgKi9TY29wZS5wcm90b3R5cGUuX25vdGlmeUV2ZW50UHJvY2Vzc29ycz1mdW5jdGlvbihwcm9jZXNzb3JzLGV2ZW50LGhpbnQsaW5kZXgpe3ZhciBfdGhpcz10aGlzO2lmKGluZGV4PT09dm9pZCAwKXtpbmRleD0wO31yZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXt2YXIgcHJvY2Vzc29yPXByb2Nlc3NvcnNbaW5kZXhdOy8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzdHJpY3QtdHlwZS1wcmVkaWNhdGVzXG5pZihldmVudD09PW51bGx8fHR5cGVvZiBwcm9jZXNzb3IhPT0nZnVuY3Rpb24nKXtyZXNvbHZlKGV2ZW50KTt9ZWxzZXt2YXIgcmVzdWx0PXByb2Nlc3NvcihfYXNzaWduKHt9LGV2ZW50KSxoaW50KTtpZihpc1RoZW5hYmxlKHJlc3VsdCkpe3Jlc3VsdC50aGVuKGZ1bmN0aW9uKF9maW5hbCl7cmV0dXJuIF90aGlzLl9ub3RpZnlFdmVudFByb2Nlc3NvcnMocHJvY2Vzc29ycyxfZmluYWwsaGludCxpbmRleCsxKS50aGVuKHJlc29sdmUpO30pLnRoZW4obnVsbCxyZWplY3QpO31lbHNle190aGlzLl9ub3RpZnlFdmVudFByb2Nlc3NvcnMocHJvY2Vzc29ycyxyZXN1bHQsaGludCxpbmRleCsxKS50aGVuKHJlc29sdmUpLnRoZW4obnVsbCxyZWplY3QpO319fSk7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9TY29wZS5wcm90b3R5cGUuc2V0VXNlcj1mdW5jdGlvbih1c2VyKXt0aGlzLl91c2VyPW5vcm1hbGl6ZSQxKHVzZXIpO3RoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7cmV0dXJuIHRoaXM7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9TY29wZS5wcm90b3R5cGUuc2V0VGFncz1mdW5jdGlvbih0YWdzKXt0aGlzLl90YWdzPV9hc3NpZ24oe30sdGhpcy5fdGFncyxub3JtYWxpemUkMSh0YWdzKSk7dGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtyZXR1cm4gdGhpczt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL1Njb3BlLnByb3RvdHlwZS5zZXRUYWc9ZnVuY3Rpb24oa2V5LHZhbHVlKXt2YXIgX2E7dGhpcy5fdGFncz1fYXNzaWduKHt9LHRoaXMuX3RhZ3MsKF9hPXt9LF9hW2tleV09bm9ybWFsaXplJDEodmFsdWUpLF9hKSk7dGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtyZXR1cm4gdGhpczt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL1Njb3BlLnByb3RvdHlwZS5zZXRFeHRyYXM9ZnVuY3Rpb24oZXh0cmEpe3RoaXMuX2V4dHJhPV9hc3NpZ24oe30sdGhpcy5fZXh0cmEsbm9ybWFsaXplJDEoZXh0cmEpKTt0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO3JldHVybiB0aGlzO307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovU2NvcGUucHJvdG90eXBlLnNldEV4dHJhPWZ1bmN0aW9uKGtleSxleHRyYSl7dmFyIF9hO3RoaXMuX2V4dHJhPV9hc3NpZ24oe30sdGhpcy5fZXh0cmEsKF9hPXt9LF9hW2tleV09bm9ybWFsaXplJDEoZXh0cmEpLF9hKSk7dGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtyZXR1cm4gdGhpczt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL1Njb3BlLnByb3RvdHlwZS5zZXRGaW5nZXJwcmludD1mdW5jdGlvbihmaW5nZXJwcmludCl7dGhpcy5fZmluZ2VycHJpbnQ9bm9ybWFsaXplJDEoZmluZ2VycHJpbnQpO3RoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7cmV0dXJuIHRoaXM7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9TY29wZS5wcm90b3R5cGUuc2V0TGV2ZWw9ZnVuY3Rpb24obGV2ZWwpe3RoaXMuX2xldmVsPW5vcm1hbGl6ZSQxKGxldmVsKTt0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO3JldHVybiB0aGlzO307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovU2NvcGUucHJvdG90eXBlLnNldFRyYW5zYWN0aW9uPWZ1bmN0aW9uKHRyYW5zYWN0aW9uKXt0aGlzLl90cmFuc2FjdGlvbj10cmFuc2FjdGlvbjt0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO3JldHVybiB0aGlzO307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovU2NvcGUucHJvdG90eXBlLnNldENvbnRleHQ9ZnVuY3Rpb24obmFtZSxjb250ZXh0KXt0aGlzLl9jb250ZXh0W25hbWVdPWNvbnRleHQ/bm9ybWFsaXplJDEoY29udGV4dCk6dW5kZWZpbmVkO3RoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7cmV0dXJuIHRoaXM7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9TY29wZS5wcm90b3R5cGUuc2V0U3Bhbj1mdW5jdGlvbihzcGFuKXt0aGlzLl9zcGFuPXNwYW47dGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtyZXR1cm4gdGhpczt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL1Njb3BlLnByb3RvdHlwZS5zdGFydFNwYW49ZnVuY3Rpb24ocGFyZW50U3Bhbil7dmFyIHNwYW49bmV3IFNwYW4oKTtzcGFuLnNldFBhcmVudChwYXJlbnRTcGFuKTt0aGlzLnNldFNwYW4oc3Bhbik7cmV0dXJuIHNwYW47fTsvKipcbiAgICAgICAqIEludGVybmFsIGdldHRlciBmb3IgU3BhbiwgdXNlZCBpbiBIdWIuXG4gICAgICAgKiBAaGlkZGVuXG4gICAgICAgKi9TY29wZS5wcm90b3R5cGUuZ2V0U3Bhbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zcGFuO307LyoqXG4gICAgICAgKiBJbmhlcml0IHZhbHVlcyBmcm9tIHRoZSBwYXJlbnQgc2NvcGUuXG4gICAgICAgKiBAcGFyYW0gc2NvcGUgdG8gY2xvbmUuXG4gICAgICAgKi9TY29wZS5jbG9uZT1mdW5jdGlvbihzY29wZSl7dmFyIG5ld1Njb3BlPW5ldyBTY29wZSgpO2lmKHNjb3BlKXtuZXdTY29wZS5fYnJlYWRjcnVtYnM9X19zcHJlYWQoc2NvcGUuX2JyZWFkY3J1bWJzKTtuZXdTY29wZS5fdGFncz1fYXNzaWduKHt9LHNjb3BlLl90YWdzKTtuZXdTY29wZS5fZXh0cmE9X2Fzc2lnbih7fSxzY29wZS5fZXh0cmEpO25ld1Njb3BlLl9jb250ZXh0PV9hc3NpZ24oe30sc2NvcGUuX2NvbnRleHQpO25ld1Njb3BlLl91c2VyPXNjb3BlLl91c2VyO25ld1Njb3BlLl9sZXZlbD1zY29wZS5fbGV2ZWw7bmV3U2NvcGUuX3NwYW49c2NvcGUuX3NwYW47bmV3U2NvcGUuX3RyYW5zYWN0aW9uPXNjb3BlLl90cmFuc2FjdGlvbjtuZXdTY29wZS5fZmluZ2VycHJpbnQ9c2NvcGUuX2ZpbmdlcnByaW50O25ld1Njb3BlLl9ldmVudFByb2Nlc3NvcnM9X19zcHJlYWQoc2NvcGUuX2V2ZW50UHJvY2Vzc29ycyk7fXJldHVybiBuZXdTY29wZTt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL1Njb3BlLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuX2JyZWFkY3J1bWJzPVtdO3RoaXMuX3RhZ3M9e307dGhpcy5fZXh0cmE9e307dGhpcy5fdXNlcj17fTt0aGlzLl9jb250ZXh0PXt9O3RoaXMuX2xldmVsPXVuZGVmaW5lZDt0aGlzLl90cmFuc2FjdGlvbj11bmRlZmluZWQ7dGhpcy5fZmluZ2VycHJpbnQ9dW5kZWZpbmVkO3RoaXMuX3NwYW49dW5kZWZpbmVkO3RoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7cmV0dXJuIHRoaXM7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9TY29wZS5wcm90b3R5cGUuYWRkQnJlYWRjcnVtYj1mdW5jdGlvbihicmVhZGNydW1iLG1heEJyZWFkY3J1bWJzKXt2YXIgdGltZXN0YW1wPW5ldyBEYXRlKCkuZ2V0VGltZSgpLzEwMDA7dmFyIG1lcmdlZEJyZWFkY3J1bWI9X2Fzc2lnbih7dGltZXN0YW1wOnRpbWVzdGFtcH0sYnJlYWRjcnVtYik7dGhpcy5fYnJlYWRjcnVtYnM9bWF4QnJlYWRjcnVtYnMhPT11bmRlZmluZWQmJm1heEJyZWFkY3J1bWJzPj0wP19fc3ByZWFkKHRoaXMuX2JyZWFkY3J1bWJzLFtub3JtYWxpemUkMShtZXJnZWRCcmVhZGNydW1iKV0pLnNsaWNlKC1tYXhCcmVhZGNydW1icyk6X19zcHJlYWQodGhpcy5fYnJlYWRjcnVtYnMsW25vcm1hbGl6ZSQxKG1lcmdlZEJyZWFkY3J1bWIpXSk7dGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtyZXR1cm4gdGhpczt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL1Njb3BlLnByb3RvdHlwZS5jbGVhckJyZWFkY3J1bWJzPWZ1bmN0aW9uKCl7dGhpcy5fYnJlYWRjcnVtYnM9W107dGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtyZXR1cm4gdGhpczt9Oy8qKlxuICAgICAgICogQXBwbGllcyBmaW5nZXJwcmludCBmcm9tIHRoZSBzY29wZSB0byB0aGUgZXZlbnQgaWYgdGhlcmUncyBvbmUsXG4gICAgICAgKiB1c2VzIG1lc3NhZ2UgaWYgdGhlcmUncyBvbmUgaW5zdGVhZCBvciBnZXQgcmlkIG9mIGVtcHR5IGZpbmdlcnByaW50XG4gICAgICAgKi9TY29wZS5wcm90b3R5cGUuX2FwcGx5RmluZ2VycHJpbnQ9ZnVuY3Rpb24oZXZlbnQpey8vIE1ha2Ugc3VyZSBpdCdzIGFuIGFycmF5IGZpcnN0IGFuZCB3ZSBhY3R1YWxseSBoYXZlIHNvbWV0aGluZyBpbiBwbGFjZVxuZXZlbnQuZmluZ2VycHJpbnQ9ZXZlbnQuZmluZ2VycHJpbnQ/QXJyYXkuaXNBcnJheShldmVudC5maW5nZXJwcmludCk/ZXZlbnQuZmluZ2VycHJpbnQ6W2V2ZW50LmZpbmdlcnByaW50XTpbXTsvLyBJZiB3ZSBoYXZlIHNvbWV0aGluZyBvbiB0aGUgc2NvcGUsIHRoZW4gbWVyZ2UgaXQgd2l0aCBldmVudFxuaWYodGhpcy5fZmluZ2VycHJpbnQpe2V2ZW50LmZpbmdlcnByaW50PWV2ZW50LmZpbmdlcnByaW50LmNvbmNhdCh0aGlzLl9maW5nZXJwcmludCk7fS8vIElmIHdlIGhhdmUgbm8gZGF0YSBhdCBhbGwsIHJlbW92ZSBlbXB0eSBhcnJheSBkZWZhdWx0XG5pZihldmVudC5maW5nZXJwcmludCYmIWV2ZW50LmZpbmdlcnByaW50Lmxlbmd0aCl7ZGVsZXRlIGV2ZW50LmZpbmdlcnByaW50O319Oy8qKlxuICAgICAgICogQXBwbGllcyB0aGUgY3VycmVudCBjb250ZXh0IGFuZCBmaW5nZXJwcmludCB0byB0aGUgZXZlbnQuXG4gICAgICAgKiBOb3RlIHRoYXQgYnJlYWRjcnVtYnMgd2lsbCBiZSBhZGRlZCBieSB0aGUgY2xpZW50LlxuICAgICAgICogQWxzbyBpZiB0aGUgZXZlbnQgaGFzIGFscmVhZHkgYnJlYWRjcnVtYnMgb24gaXQsIHdlIGRvIG5vdCBtZXJnZSB0aGVtLlxuICAgICAgICogQHBhcmFtIGV2ZW50IEV2ZW50XG4gICAgICAgKiBAcGFyYW0gaGludCBNYXkgY29udGFpbiBhZGRpdGlvbmFsIGluZm9ybWFydGlvbiBhYm91dCB0aGUgb3JpZ2luYWwgZXhjZXB0aW9uLlxuICAgICAgICogQGhpZGRlblxuICAgICAgICovU2NvcGUucHJvdG90eXBlLmFwcGx5VG9FdmVudD1mdW5jdGlvbihldmVudCxoaW50KXtpZih0aGlzLl9leHRyYSYmT2JqZWN0LmtleXModGhpcy5fZXh0cmEpLmxlbmd0aCl7ZXZlbnQuZXh0cmE9X2Fzc2lnbih7fSx0aGlzLl9leHRyYSxldmVudC5leHRyYSk7fWlmKHRoaXMuX3RhZ3MmJk9iamVjdC5rZXlzKHRoaXMuX3RhZ3MpLmxlbmd0aCl7ZXZlbnQudGFncz1fYXNzaWduKHt9LHRoaXMuX3RhZ3MsZXZlbnQudGFncyk7fWlmKHRoaXMuX3VzZXImJk9iamVjdC5rZXlzKHRoaXMuX3VzZXIpLmxlbmd0aCl7ZXZlbnQudXNlcj1fYXNzaWduKHt9LHRoaXMuX3VzZXIsZXZlbnQudXNlcik7fWlmKHRoaXMuX2NvbnRleHQmJk9iamVjdC5rZXlzKHRoaXMuX2NvbnRleHQpLmxlbmd0aCl7ZXZlbnQuY29udGV4dHM9X2Fzc2lnbih7fSx0aGlzLl9jb250ZXh0LGV2ZW50LmNvbnRleHRzKTt9aWYodGhpcy5fbGV2ZWwpe2V2ZW50LmxldmVsPXRoaXMuX2xldmVsO31pZih0aGlzLl90cmFuc2FjdGlvbil7ZXZlbnQudHJhbnNhY3Rpb249dGhpcy5fdHJhbnNhY3Rpb247fWlmKHRoaXMuX3NwYW4pe2V2ZW50LmNvbnRleHRzPWV2ZW50LmNvbnRleHRzfHx7fTtldmVudC5jb250ZXh0cy50cmFjZT10aGlzLl9zcGFuO310aGlzLl9hcHBseUZpbmdlcnByaW50KGV2ZW50KTtldmVudC5icmVhZGNydW1icz1fX3NwcmVhZChldmVudC5icmVhZGNydW1ic3x8W10sdGhpcy5fYnJlYWRjcnVtYnMpO2V2ZW50LmJyZWFkY3J1bWJzPWV2ZW50LmJyZWFkY3J1bWJzLmxlbmd0aD4wP2V2ZW50LmJyZWFkY3J1bWJzOnVuZGVmaW5lZDtyZXR1cm4gdGhpcy5fbm90aWZ5RXZlbnRQcm9jZXNzb3JzKF9fc3ByZWFkKGdldEdsb2JhbEV2ZW50UHJvY2Vzc29ycygpLHRoaXMuX2V2ZW50UHJvY2Vzc29ycyksZXZlbnQsaGludCk7fTtyZXR1cm4gU2NvcGU7fSgpOy8qKlxuICAgKiBSZXRydW5zIHRoZSBnbG9iYWwgZXZlbnQgcHJvY2Vzc29ycy5cbiAgICovZnVuY3Rpb24gZ2V0R2xvYmFsRXZlbnRQcm9jZXNzb3JzKCl7dmFyIGdsb2JhbD1nZXRHbG9iYWxPYmplY3QoKTtnbG9iYWwuX19TRU5UUllfXz1nbG9iYWwuX19TRU5UUllfX3x8e307Z2xvYmFsLl9fU0VOVFJZX18uZ2xvYmFsRXZlbnRQcm9jZXNzb3JzPWdsb2JhbC5fX1NFTlRSWV9fLmdsb2JhbEV2ZW50UHJvY2Vzc29yc3x8W107cmV0dXJuIGdsb2JhbC5fX1NFTlRSWV9fLmdsb2JhbEV2ZW50UHJvY2Vzc29yczt9LyoqXG4gICAqIEFkZCBhIEV2ZW50UHJvY2Vzc29yIHRvIGJlIGtlcHQgZ2xvYmFsbHkuXG4gICAqIEBwYXJhbSBjYWxsYmFjayBFdmVudFByb2Nlc3NvciB0byBhZGRcbiAgICovZnVuY3Rpb24gYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IoY2FsbGJhY2spe2dldEdsb2JhbEV2ZW50UHJvY2Vzc29ycygpLnB1c2goY2FsbGJhY2spO30vKipcbiAgICogQVBJIGNvbXBhdGliaWxpdHkgdmVyc2lvbiBvZiB0aGlzIGh1Yi5cbiAgICpcbiAgICogV0FSTklORzogVGhpcyBudW1iZXIgc2hvdWxkIG9ubHkgYmUgaW5jcmVzZWQgd2hlbiB0aGUgZ2xvYmFsIGludGVyZmFjZVxuICAgKiBjaGFuZ2VzIGEgYW5kIG5ldyBtZXRob2RzIGFyZSBpbnRyb2R1Y2VkLlxuICAgKlxuICAgKiBAaGlkZGVuXG4gICAqL3ZhciBBUElfVkVSU0lPTj0zOy8qKlxuICAgKiBEZWZhdWx0IG1heGltdW0gbnVtYmVyIG9mIGJyZWFkY3J1bWJzIGFkZGVkIHRvIGFuIGV2ZW50LiBDYW4gYmUgb3ZlcndyaXR0ZW5cbiAgICogd2l0aCB7QGxpbmsgT3B0aW9ucy5tYXhCcmVhZGNydW1ic30uXG4gICAqL3ZhciBERUZBVUxUX0JSRUFEQ1JVTUJTPTMwOy8qKlxuICAgKiBBYnNvbHV0ZSBtYXhpbXVtIG51bWJlciBvZiBicmVhZGNydW1icyBhZGRlZCB0byBhbiBldmVudC4gVGhlXG4gICAqIGBtYXhCcmVhZGNydW1ic2Agb3B0aW9uIGNhbm5vdCBiZSBoaWdoZXIgdGhhbiB0aGlzIHZhbHVlLlxuICAgKi92YXIgTUFYX0JSRUFEQ1JVTUJTPTEwMDsvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovdmFyIEh1Yj0vKiogQGNsYXNzICovZnVuY3Rpb24oKXsvKipcbiAgICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGh1Yiwgd2lsbCBwdXNoIG9uZSB7QGxpbmsgTGF5ZXJ9IGludG8gdGhlXG4gICAgICAgKiBpbnRlcm5hbCBzdGFjayBvbiBjcmVhdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gY2xpZW50IGJvdW5kIHRvIHRoZSBodWIuXG4gICAgICAgKiBAcGFyYW0gc2NvcGUgYm91bmQgdG8gdGhlIGh1Yi5cbiAgICAgICAqIEBwYXJhbSB2ZXJzaW9uIG51bWJlciwgaGlnaGVyIG51bWJlciBtZWFucyBoaWdoZXIgcHJpb3JpdHkuXG4gICAgICAgKi9mdW5jdGlvbiBIdWIoY2xpZW50LHNjb3BlLF92ZXJzaW9uKXtpZihzY29wZT09PXZvaWQgMCl7c2NvcGU9bmV3IFNjb3BlKCk7fWlmKF92ZXJzaW9uPT09dm9pZCAwKXtfdmVyc2lvbj1BUElfVkVSU0lPTjt9dGhpcy5fdmVyc2lvbj1fdmVyc2lvbjsvKiogSXMgYSB7QGxpbmsgTGF5ZXJ9W10gY29udGFpbmluZyB0aGUgY2xpZW50IGFuZCBzY29wZSAqL3RoaXMuX3N0YWNrPVtdO3RoaXMuX3N0YWNrLnB1c2goe2NsaWVudDpjbGllbnQsc2NvcGU6c2NvcGV9KTt9LyoqXG4gICAgICAgKiBJbnRlcm5hbCBoZWxwZXIgZnVuY3Rpb24gdG8gY2FsbCBhIG1ldGhvZCBvbiB0aGUgdG9wIGNsaWVudCBpZiBpdCBleGlzdHMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIG1ldGhvZCBUaGUgbWV0aG9kIHRvIGNhbGwgb24gdGhlIGNsaWVudC5cbiAgICAgICAqIEBwYXJhbSBhcmdzIEFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBjbGllbnQgZnVuY3Rpb24uXG4gICAgICAgKi9IdWIucHJvdG90eXBlLl9pbnZva2VDbGllbnQ9ZnVuY3Rpb24obWV0aG9kKXt2YXIgX2E7dmFyIGFyZ3M9W107Zm9yKHZhciBfaT0xO19pPGFyZ3VtZW50cy5sZW5ndGg7X2krKyl7YXJnc1tfaS0xXT1hcmd1bWVudHNbX2ldO312YXIgdG9wPXRoaXMuZ2V0U3RhY2tUb3AoKTtpZih0b3AmJnRvcC5jbGllbnQmJnRvcC5jbGllbnRbbWV0aG9kXSl7KF9hPXRvcC5jbGllbnQpW21ldGhvZF0uYXBwbHkoX2EsX19zcHJlYWQoYXJncyxbdG9wLnNjb3BlXSkpO319Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL0h1Yi5wcm90b3R5cGUuaXNPbGRlclRoYW49ZnVuY3Rpb24odmVyc2lvbil7cmV0dXJuIHRoaXMuX3ZlcnNpb248dmVyc2lvbjt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL0h1Yi5wcm90b3R5cGUuYmluZENsaWVudD1mdW5jdGlvbihjbGllbnQpe3ZhciB0b3A9dGhpcy5nZXRTdGFja1RvcCgpO3RvcC5jbGllbnQ9Y2xpZW50O307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovSHViLnByb3RvdHlwZS5wdXNoU2NvcGU9ZnVuY3Rpb24oKXsvLyBXZSB3YW50IHRvIGNsb25lIHRoZSBjb250ZW50IG9mIHByZXYgc2NvcGVcbnZhciBzdGFjaz10aGlzLmdldFN0YWNrKCk7dmFyIHBhcmVudFNjb3BlPXN0YWNrLmxlbmd0aD4wP3N0YWNrW3N0YWNrLmxlbmd0aC0xXS5zY29wZTp1bmRlZmluZWQ7dmFyIHNjb3BlPVNjb3BlLmNsb25lKHBhcmVudFNjb3BlKTt0aGlzLmdldFN0YWNrKCkucHVzaCh7Y2xpZW50OnRoaXMuZ2V0Q2xpZW50KCksc2NvcGU6c2NvcGV9KTtyZXR1cm4gc2NvcGU7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9IdWIucHJvdG90eXBlLnBvcFNjb3BlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0U3RhY2soKS5wb3AoKSE9PXVuZGVmaW5lZDt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL0h1Yi5wcm90b3R5cGUud2l0aFNjb3BlPWZ1bmN0aW9uKGNhbGxiYWNrKXt2YXIgc2NvcGU9dGhpcy5wdXNoU2NvcGUoKTt0cnl7Y2FsbGJhY2soc2NvcGUpO31maW5hbGx5e3RoaXMucG9wU2NvcGUoKTt9fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9IdWIucHJvdG90eXBlLmdldENsaWVudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFN0YWNrVG9wKCkuY2xpZW50O307LyoqIFJldHVybnMgdGhlIHNjb3BlIG9mIHRoZSB0b3Agc3RhY2suICovSHViLnByb3RvdHlwZS5nZXRTY29wZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFN0YWNrVG9wKCkuc2NvcGU7fTsvKiogUmV0dXJucyB0aGUgc2NvcGUgc3RhY2sgZm9yIGRvbWFpbnMgb3IgdGhlIHByb2Nlc3MuICovSHViLnByb3RvdHlwZS5nZXRTdGFjaz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdGFjazt9Oy8qKiBSZXR1cm5zIHRoZSB0b3Btb3N0IHNjb3BlIGxheWVyIGluIHRoZSBvcmRlciBkb21haW4gPiBsb2NhbCA+IHByb2Nlc3MuICovSHViLnByb3RvdHlwZS5nZXRTdGFja1RvcD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdGFja1t0aGlzLl9zdGFjay5sZW5ndGgtMV07fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9IdWIucHJvdG90eXBlLmNhcHR1cmVFeGNlcHRpb249ZnVuY3Rpb24oZXhjZXB0aW9uLGhpbnQpe3ZhciBldmVudElkPXRoaXMuX2xhc3RFdmVudElkPXV1aWQ0KCk7dmFyIGZpbmFsSGludD1oaW50Oy8vIElmIHRoZXJlJ3Mgbm8gZXhwbGljaXQgaGludCBwcm92aWRlZCwgbWltaWNrIHRoZSBzYW1lIHRoaW5nIHRoYXQgd291bGQgaGFwcGVuXG4vLyBpbiB0aGUgbWluaW1hbCBpdHNlbGYgdG8gY3JlYXRlIGEgY29uc2lzdGVudCBiZWhhdmlvci5cbi8vIFdlIGRvbid0IGRvIHRoaXMgaW4gdGhlIGNsaWVudCwgYXMgaXQncyB0aGUgbG93ZXN0IGxldmVsIEFQSSwgYW5kIGRvaW5nIHRoaXMsXG4vLyB3b3VsZCBwcmV2ZW50IHVzZXIgZnJvbSBoYXZpbmcgZnVsbCBjb250cm9sIG92ZXIgZGlyZWN0IGNhbGxzLlxuaWYoIWhpbnQpe3ZhciBzeW50aGV0aWNFeGNlcHRpb249dm9pZCAwO3RyeXt0aHJvdyBuZXcgRXJyb3IoJ1NlbnRyeSBzeW50aGV0aWNFeGNlcHRpb24nKTt9Y2F0Y2goZXhjZXB0aW9uKXtzeW50aGV0aWNFeGNlcHRpb249ZXhjZXB0aW9uO31maW5hbEhpbnQ9e29yaWdpbmFsRXhjZXB0aW9uOmV4Y2VwdGlvbixzeW50aGV0aWNFeGNlcHRpb246c3ludGhldGljRXhjZXB0aW9ufTt9dGhpcy5faW52b2tlQ2xpZW50KCdjYXB0dXJlRXhjZXB0aW9uJyxleGNlcHRpb24sX2Fzc2lnbih7fSxmaW5hbEhpbnQse2V2ZW50X2lkOmV2ZW50SWR9KSk7cmV0dXJuIGV2ZW50SWQ7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9IdWIucHJvdG90eXBlLmNhcHR1cmVNZXNzYWdlPWZ1bmN0aW9uKG1lc3NhZ2UsbGV2ZWwsaGludCl7dmFyIGV2ZW50SWQ9dGhpcy5fbGFzdEV2ZW50SWQ9dXVpZDQoKTt2YXIgZmluYWxIaW50PWhpbnQ7Ly8gSWYgdGhlcmUncyBubyBleHBsaWNpdCBoaW50IHByb3ZpZGVkLCBtaW1pY2sgdGhlIHNhbWUgdGhpbmcgdGhhdCB3b3VsZCBoYXBwZW5cbi8vIGluIHRoZSBtaW5pbWFsIGl0c2VsZiB0byBjcmVhdGUgYSBjb25zaXN0ZW50IGJlaGF2aW9yLlxuLy8gV2UgZG9uJ3QgZG8gdGhpcyBpbiB0aGUgY2xpZW50LCBhcyBpdCdzIHRoZSBsb3dlc3QgbGV2ZWwgQVBJLCBhbmQgZG9pbmcgdGhpcyxcbi8vIHdvdWxkIHByZXZlbnQgdXNlciBmcm9tIGhhdmluZyBmdWxsIGNvbnRyb2wgb3ZlciBkaXJlY3QgY2FsbHMuXG5pZighaGludCl7dmFyIHN5bnRoZXRpY0V4Y2VwdGlvbj12b2lkIDA7dHJ5e3Rocm93IG5ldyBFcnJvcihtZXNzYWdlKTt9Y2F0Y2goZXhjZXB0aW9uKXtzeW50aGV0aWNFeGNlcHRpb249ZXhjZXB0aW9uO31maW5hbEhpbnQ9e29yaWdpbmFsRXhjZXB0aW9uOm1lc3NhZ2Usc3ludGhldGljRXhjZXB0aW9uOnN5bnRoZXRpY0V4Y2VwdGlvbn07fXRoaXMuX2ludm9rZUNsaWVudCgnY2FwdHVyZU1lc3NhZ2UnLG1lc3NhZ2UsbGV2ZWwsX2Fzc2lnbih7fSxmaW5hbEhpbnQse2V2ZW50X2lkOmV2ZW50SWR9KSk7cmV0dXJuIGV2ZW50SWQ7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9IdWIucHJvdG90eXBlLmNhcHR1cmVFdmVudD1mdW5jdGlvbihldmVudCxoaW50KXt2YXIgZXZlbnRJZD10aGlzLl9sYXN0RXZlbnRJZD11dWlkNCgpO3RoaXMuX2ludm9rZUNsaWVudCgnY2FwdHVyZUV2ZW50JyxldmVudCxfYXNzaWduKHt9LGhpbnQse2V2ZW50X2lkOmV2ZW50SWR9KSk7cmV0dXJuIGV2ZW50SWQ7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9IdWIucHJvdG90eXBlLmxhc3RFdmVudElkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2xhc3RFdmVudElkO307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovSHViLnByb3RvdHlwZS5hZGRCcmVhZGNydW1iPWZ1bmN0aW9uKGJyZWFkY3J1bWIsaGludCl7dmFyIHRvcD10aGlzLmdldFN0YWNrVG9wKCk7aWYoIXRvcC5zY29wZXx8IXRvcC5jbGllbnQpe3JldHVybjt9dmFyIF9hPXRvcC5jbGllbnQuZ2V0T3B0aW9ucyYmdG9wLmNsaWVudC5nZXRPcHRpb25zKCl8fHt9LF9iPV9hLmJlZm9yZUJyZWFkY3J1bWIsYmVmb3JlQnJlYWRjcnVtYj1fYj09PXZvaWQgMD9udWxsOl9iLF9jPV9hLm1heEJyZWFkY3J1bWJzLG1heEJyZWFkY3J1bWJzPV9jPT09dm9pZCAwP0RFRkFVTFRfQlJFQURDUlVNQlM6X2M7aWYobWF4QnJlYWRjcnVtYnM8PTApe3JldHVybjt9dmFyIHRpbWVzdGFtcD1uZXcgRGF0ZSgpLmdldFRpbWUoKS8xMDAwO3ZhciBtZXJnZWRCcmVhZGNydW1iPV9hc3NpZ24oe3RpbWVzdGFtcDp0aW1lc3RhbXB9LGJyZWFkY3J1bWIpO3ZhciBmaW5hbEJyZWFkY3J1bWI9YmVmb3JlQnJlYWRjcnVtYj9jb25zb2xlU2FuZGJveChmdW5jdGlvbigpe3JldHVybiBiZWZvcmVCcmVhZGNydW1iKG1lcmdlZEJyZWFkY3J1bWIsaGludCk7fSk6bWVyZ2VkQnJlYWRjcnVtYjtpZihmaW5hbEJyZWFkY3J1bWI9PT1udWxsKXtyZXR1cm47fXRvcC5zY29wZS5hZGRCcmVhZGNydW1iKGZpbmFsQnJlYWRjcnVtYixNYXRoLm1pbihtYXhCcmVhZGNydW1icyxNQVhfQlJFQURDUlVNQlMpKTt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL0h1Yi5wcm90b3R5cGUuc2V0VXNlcj1mdW5jdGlvbih1c2VyKXt2YXIgdG9wPXRoaXMuZ2V0U3RhY2tUb3AoKTtpZighdG9wLnNjb3BlKXtyZXR1cm47fXRvcC5zY29wZS5zZXRVc2VyKHVzZXIpO307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovSHViLnByb3RvdHlwZS5zZXRUYWdzPWZ1bmN0aW9uKHRhZ3Mpe3ZhciB0b3A9dGhpcy5nZXRTdGFja1RvcCgpO2lmKCF0b3Auc2NvcGUpe3JldHVybjt9dG9wLnNjb3BlLnNldFRhZ3ModGFncyk7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9IdWIucHJvdG90eXBlLnNldEV4dHJhcz1mdW5jdGlvbihleHRyYXMpe3ZhciB0b3A9dGhpcy5nZXRTdGFja1RvcCgpO2lmKCF0b3Auc2NvcGUpe3JldHVybjt9dG9wLnNjb3BlLnNldEV4dHJhcyhleHRyYXMpO307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovSHViLnByb3RvdHlwZS5zZXRUYWc9ZnVuY3Rpb24oa2V5LHZhbHVlKXt2YXIgdG9wPXRoaXMuZ2V0U3RhY2tUb3AoKTtpZighdG9wLnNjb3BlKXtyZXR1cm47fXRvcC5zY29wZS5zZXRUYWcoa2V5LHZhbHVlKTt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL0h1Yi5wcm90b3R5cGUuc2V0RXh0cmE9ZnVuY3Rpb24oa2V5LGV4dHJhKXt2YXIgdG9wPXRoaXMuZ2V0U3RhY2tUb3AoKTtpZighdG9wLnNjb3BlKXtyZXR1cm47fXRvcC5zY29wZS5zZXRFeHRyYShrZXksZXh0cmEpO307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovSHViLnByb3RvdHlwZS5zZXRDb250ZXh0PWZ1bmN0aW9uKG5hbWUsY29udGV4dCl7dmFyIHRvcD10aGlzLmdldFN0YWNrVG9wKCk7aWYoIXRvcC5zY29wZSl7cmV0dXJuO310b3Auc2NvcGUuc2V0Q29udGV4dChuYW1lLGNvbnRleHQpO307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovSHViLnByb3RvdHlwZS5jb25maWd1cmVTY29wZT1mdW5jdGlvbihjYWxsYmFjayl7dmFyIHRvcD10aGlzLmdldFN0YWNrVG9wKCk7aWYodG9wLnNjb3BlJiZ0b3AuY2xpZW50KXtjYWxsYmFjayh0b3Auc2NvcGUpO319Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL0h1Yi5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKGNhbGxiYWNrKXt2YXIgb2xkSHViPW1ha2VNYWluKHRoaXMpO3RyeXtjYWxsYmFjayh0aGlzKTt9ZmluYWxseXttYWtlTWFpbihvbGRIdWIpO319Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL0h1Yi5wcm90b3R5cGUuZ2V0SW50ZWdyYXRpb249ZnVuY3Rpb24oaW50ZWdyYXRpb24pe3ZhciBjbGllbnQ9dGhpcy5nZXRDbGllbnQoKTtpZighY2xpZW50KXtyZXR1cm4gbnVsbDt9dHJ5e3JldHVybiBjbGllbnQuZ2V0SW50ZWdyYXRpb24oaW50ZWdyYXRpb24pO31jYXRjaChfb08pe2xvZ2dlciQxLndhcm4oXCJDYW5ub3QgcmV0cmlldmUgaW50ZWdyYXRpb24gXCIraW50ZWdyYXRpb24uaWQrXCIgZnJvbSB0aGUgY3VycmVudCBIdWJcIik7cmV0dXJuIG51bGw7fX07LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovSHViLnByb3RvdHlwZS50cmFjZUhlYWRlcnM9ZnVuY3Rpb24oKXt2YXIgdG9wPXRoaXMuZ2V0U3RhY2tUb3AoKTtpZih0b3Auc2NvcGUmJnRvcC5jbGllbnQpe3ZhciBzcGFuPXRvcC5zY29wZS5nZXRTcGFuKCk7aWYoc3Bhbil7cmV0dXJueydzZW50cnktdHJhY2UnOnNwYW4udG9UcmFjZXBhcmVudCgpfTt9fXJldHVybnt9O307cmV0dXJuIEh1Yjt9KCk7LyoqIFJldHVybnMgdGhlIGdsb2JhbCBzaGltIHJlZ2lzdHJ5LiAqL2Z1bmN0aW9uIGdldE1haW5DYXJyaWVyKCl7dmFyIGNhcnJpZXI9Z2V0R2xvYmFsT2JqZWN0KCk7Y2Fycmllci5fX1NFTlRSWV9fPWNhcnJpZXIuX19TRU5UUllfX3x8e2h1Yjp1bmRlZmluZWR9O3JldHVybiBjYXJyaWVyO30vKipcbiAgICogUmVwbGFjZXMgdGhlIGN1cnJlbnQgbWFpbiBodWIgd2l0aCB0aGUgcGFzc2VkIG9uZSBvbiB0aGUgZ2xvYmFsIG9iamVjdFxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgb2xkIHJlcGxhY2VkIGh1YlxuICAgKi9mdW5jdGlvbiBtYWtlTWFpbihodWIpe3ZhciByZWdpc3RyeT1nZXRNYWluQ2FycmllcigpO3ZhciBvbGRIdWI9Z2V0SHViRnJvbUNhcnJpZXIocmVnaXN0cnkpO3NldEh1Yk9uQ2FycmllcihyZWdpc3RyeSxodWIpO3JldHVybiBvbGRIdWI7fS8qKlxuICAgKiBSZXR1cm5zIHRoZSBkZWZhdWx0IGh1YiBpbnN0YW5jZS5cbiAgICpcbiAgICogSWYgYSBodWIgaXMgYWxyZWFkeSByZWdpc3RlcmVkIGluIHRoZSBnbG9iYWwgY2FycmllciBidXQgdGhpcyBtb2R1bGVcbiAgICogY29udGFpbnMgYSBtb3JlIHJlY2VudCB2ZXJzaW9uLCBpdCByZXBsYWNlcyB0aGUgcmVnaXN0ZXJlZCB2ZXJzaW9uLlxuICAgKiBPdGhlcndpc2UsIHRoZSBjdXJyZW50bHkgcmVnaXN0ZXJlZCBodWIgd2lsbCBiZSByZXR1cm5lZC5cbiAgICovZnVuY3Rpb24gZ2V0Q3VycmVudEh1Yigpey8vIEdldCBtYWluIGNhcnJpZXIgKGdsb2JhbCBmb3IgZXZlcnkgZW52aXJvbm1lbnQpXG52YXIgcmVnaXN0cnk9Z2V0TWFpbkNhcnJpZXIoKTsvLyBJZiB0aGVyZSdzIG5vIGh1Yiwgb3IgaXRzIGFuIG9sZCBBUEksIGFzc2lnbiBhIG5ldyBvbmVcbmlmKCFoYXNIdWJPbkNhcnJpZXIocmVnaXN0cnkpfHxnZXRIdWJGcm9tQ2FycmllcihyZWdpc3RyeSkuaXNPbGRlclRoYW4oQVBJX1ZFUlNJT04pKXtzZXRIdWJPbkNhcnJpZXIocmVnaXN0cnksbmV3IEh1YigpKTt9Ly8gUHJlZmVyIGRvbWFpbnMgb3ZlciBnbG9iYWwgaWYgdGhleSBhcmUgdGhlcmUgKGFwcGxpY2FibGUgb25seSB0byBOb2RlIGVudmlyb25tZW50KVxuaWYoaXNOb2RlRW52KCkpe3JldHVybiBnZXRIdWJGcm9tQWN0aXZlRG9tYWluKHJlZ2lzdHJ5KTt9Ly8gUmV0dXJuIGh1YiB0aGF0IGxpdmVzIG9uIGEgZ2xvYmFsIG9iamVjdFxucmV0dXJuIGdldEh1YkZyb21DYXJyaWVyKHJlZ2lzdHJ5KTt9LyoqXG4gICAqIFRyeSB0byByZWFkIHRoZSBodWIgZnJvbSBhbiBhY3RpdmUgZG9tYWluLCBmYWxsYmFjayB0byB0aGUgcmVnaXN0cnkgaWYgb25lIGRvZXNudCBleGlzdFxuICAgKiBAcmV0dXJucyBkaXNjb3ZlcmVkIGh1YlxuICAgKi9mdW5jdGlvbiBnZXRIdWJGcm9tQWN0aXZlRG9tYWluKHJlZ2lzdHJ5KXt0cnl7Ly8gV2UgbmVlZCB0byB1c2UgYGR5bmFtaWNSZXF1aXJlYCBiZWNhdXNlIGByZXF1aXJlYCBvbiBpdCdzIG93biB3aWxsIGJlIG9wdGltaXplZCBieSB3ZWJwYWNrLlxuLy8gV2UgZG8gbm90IHdhbnQgdGhpcyB0byBoYXBwZW4sIHdlIG5lZWQgdG8gdHJ5IHRvIGByZXF1aXJlYCB0aGUgZG9tYWluIG5vZGUgbW9kdWxlIGFuZCBmYWlsIGlmIHdlIGFyZSBpbiBicm93c2VyXG4vLyBmb3IgZXhhbXBsZSBzbyB3ZSBkbyBub3QgaGF2ZSB0byBzaGltIGl0IGFuZCB1c2UgYGdldEN1cnJlbnRIdWJgIHVuaXZlcnNhbGx5LlxudmFyIGRvbWFpbj1keW5hbWljUmVxdWlyZShtb2R1bGUsJ2RvbWFpbicpO3ZhciBhY3RpdmVEb21haW49ZG9tYWluLmFjdGl2ZTsvLyBJZiB0aGVyZSBubyBhY3RpdmUgZG9tYWluLCBqdXN0IHJldHVybiBnbG9iYWwgaHViXG5pZighYWN0aXZlRG9tYWluKXtyZXR1cm4gZ2V0SHViRnJvbUNhcnJpZXIocmVnaXN0cnkpO30vLyBJZiB0aGVyZSdzIG5vIGh1YiBvbiBjdXJyZW50IGRvbWFpbiwgb3IgaXRzIGFuIG9sZCBBUEksIGFzc2lnbiBhIG5ldyBvbmVcbmlmKCFoYXNIdWJPbkNhcnJpZXIoYWN0aXZlRG9tYWluKXx8Z2V0SHViRnJvbUNhcnJpZXIoYWN0aXZlRG9tYWluKS5pc09sZGVyVGhhbihBUElfVkVSU0lPTikpe3ZhciByZWdpc3RyeUh1YlRvcFN0YWNrPWdldEh1YkZyb21DYXJyaWVyKHJlZ2lzdHJ5KS5nZXRTdGFja1RvcCgpO3NldEh1Yk9uQ2FycmllcihhY3RpdmVEb21haW4sbmV3IEh1YihyZWdpc3RyeUh1YlRvcFN0YWNrLmNsaWVudCxTY29wZS5jbG9uZShyZWdpc3RyeUh1YlRvcFN0YWNrLnNjb3BlKSkpO30vLyBSZXR1cm4gaHViIHRoYXQgbGl2ZXMgb24gYSBkb21haW5cbnJldHVybiBnZXRIdWJGcm9tQ2FycmllcihhY3RpdmVEb21haW4pO31jYXRjaChfT28pey8vIFJldHVybiBodWIgdGhhdCBsaXZlcyBvbiBhIGdsb2JhbCBvYmplY3RcbnJldHVybiBnZXRIdWJGcm9tQ2FycmllcihyZWdpc3RyeSk7fX0vKipcbiAgICogVGhpcyB3aWxsIHRlbGwgd2hldGhlciBhIGNhcnJpZXIgaGFzIGEgaHViIG9uIGl0IG9yIG5vdFxuICAgKiBAcGFyYW0gY2FycmllciBvYmplY3RcbiAgICovZnVuY3Rpb24gaGFzSHViT25DYXJyaWVyKGNhcnJpZXIpe2lmKGNhcnJpZXImJmNhcnJpZXIuX19TRU5UUllfXyYmY2Fycmllci5fX1NFTlRSWV9fLmh1Yil7cmV0dXJuIHRydWU7fXJldHVybiBmYWxzZTt9LyoqXG4gICAqIFRoaXMgd2lsbCBjcmVhdGUgYSBuZXcge0BsaW5rIEh1Yn0gYW5kIGFkZCB0byB0aGUgcGFzc2VkIG9iamVjdCBvblxuICAgKiBfX1NFTlRSWV9fLmh1Yi5cbiAgICogQHBhcmFtIGNhcnJpZXIgb2JqZWN0XG4gICAqIEBoaWRkZW5cbiAgICovZnVuY3Rpb24gZ2V0SHViRnJvbUNhcnJpZXIoY2Fycmllcil7aWYoY2FycmllciYmY2Fycmllci5fX1NFTlRSWV9fJiZjYXJyaWVyLl9fU0VOVFJZX18uaHViKXtyZXR1cm4gY2Fycmllci5fX1NFTlRSWV9fLmh1Yjt9Y2Fycmllci5fX1NFTlRSWV9fPWNhcnJpZXIuX19TRU5UUllfX3x8e307Y2Fycmllci5fX1NFTlRSWV9fLmh1Yj1uZXcgSHViKCk7cmV0dXJuIGNhcnJpZXIuX19TRU5UUllfXy5odWI7fS8qKlxuICAgKiBUaGlzIHdpbGwgc2V0IHBhc3NlZCB7QGxpbmsgSHVifSBvbiB0aGUgcGFzc2VkIG9iamVjdCdzIF9fU0VOVFJZX18uaHViIGF0dHJpYnV0ZVxuICAgKiBAcGFyYW0gY2FycmllciBvYmplY3RcbiAgICogQHBhcmFtIGh1YiBIdWJcbiAgICovZnVuY3Rpb24gc2V0SHViT25DYXJyaWVyKGNhcnJpZXIsaHViKXtpZighY2Fycmllcil7cmV0dXJuIGZhbHNlO31jYXJyaWVyLl9fU0VOVFJZX189Y2Fycmllci5fX1NFTlRSWV9ffHx7fTtjYXJyaWVyLl9fU0VOVFJZX18uaHViPWh1YjtyZXR1cm4gdHJ1ZTt9LyoqXG4gICAqIFRoaXMgY2FsbHMgYSBmdW5jdGlvbiBvbiB0aGUgY3VycmVudCBodWIuXG4gICAqIEBwYXJhbSBtZXRob2QgZnVuY3Rpb24gdG8gY2FsbCBvbiBodWIuXG4gICAqIEBwYXJhbSBhcmdzIHRvIHBhc3MgdG8gZnVuY3Rpb24uXG4gICAqL2Z1bmN0aW9uIGNhbGxPbkh1YihtZXRob2Qpe3ZhciBhcmdzPVtdO2Zvcih2YXIgX2k9MTtfaTxhcmd1bWVudHMubGVuZ3RoO19pKyspe2FyZ3NbX2ktMV09YXJndW1lbnRzW19pXTt9dmFyIGh1Yj1nZXRDdXJyZW50SHViKCk7aWYoaHViJiZodWJbbWV0aG9kXSl7Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVuc2FmZS1hbnlcbnJldHVybiBodWJbbWV0aG9kXS5hcHBseShodWIsX19zcHJlYWQoYXJncykpO310aHJvdyBuZXcgRXJyb3IoXCJObyBodWIgZGVmaW5lZCBvciBcIittZXRob2QrXCIgd2FzIG5vdCBmb3VuZCBvbiB0aGUgaHViLCBwbGVhc2Ugb3BlbiBhIGJ1ZyByZXBvcnQuXCIpO30vKipcbiAgICogQ2FwdHVyZXMgYW4gZXhjZXB0aW9uIGV2ZW50IGFuZCBzZW5kcyBpdCB0byBTZW50cnkuXG4gICAqXG4gICAqIEBwYXJhbSBleGNlcHRpb24gQW4gZXhjZXB0aW9uLWxpa2Ugb2JqZWN0LlxuICAgKiBAcmV0dXJucyBUaGUgZ2VuZXJhdGVkIGV2ZW50SWQuXG4gICAqL2Z1bmN0aW9uIGNhcHR1cmVFeGNlcHRpb24oZXhjZXB0aW9uKXt2YXIgc3ludGhldGljRXhjZXB0aW9uO3RyeXt0aHJvdyBuZXcgRXJyb3IoJ1NlbnRyeSBzeW50aGV0aWNFeGNlcHRpb24nKTt9Y2F0Y2goZXhjZXB0aW9uKXtzeW50aGV0aWNFeGNlcHRpb249ZXhjZXB0aW9uO31yZXR1cm4gY2FsbE9uSHViKCdjYXB0dXJlRXhjZXB0aW9uJyxleGNlcHRpb24se29yaWdpbmFsRXhjZXB0aW9uOmV4Y2VwdGlvbixzeW50aGV0aWNFeGNlcHRpb246c3ludGhldGljRXhjZXB0aW9ufSk7fS8qKlxuICAgKiBDYXB0dXJlcyBhIG1lc3NhZ2UgZXZlbnQgYW5kIHNlbmRzIGl0IHRvIFNlbnRyeS5cbiAgICpcbiAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gc2VuZCB0byBTZW50cnkuXG4gICAqIEBwYXJhbSBsZXZlbCBEZWZpbmUgdGhlIGxldmVsIG9mIHRoZSBtZXNzYWdlLlxuICAgKiBAcmV0dXJucyBUaGUgZ2VuZXJhdGVkIGV2ZW50SWQuXG4gICAqL2Z1bmN0aW9uIGNhcHR1cmVNZXNzYWdlKG1lc3NhZ2UsbGV2ZWwpe3ZhciBzeW50aGV0aWNFeGNlcHRpb247dHJ5e3Rocm93IG5ldyBFcnJvcihtZXNzYWdlKTt9Y2F0Y2goZXhjZXB0aW9uKXtzeW50aGV0aWNFeGNlcHRpb249ZXhjZXB0aW9uO31yZXR1cm4gY2FsbE9uSHViKCdjYXB0dXJlTWVzc2FnZScsbWVzc2FnZSxsZXZlbCx7b3JpZ2luYWxFeGNlcHRpb246bWVzc2FnZSxzeW50aGV0aWNFeGNlcHRpb246c3ludGhldGljRXhjZXB0aW9ufSk7fS8qKlxuICAgKiBDYXB0dXJlcyBhIG1hbnVhbGx5IGNyZWF0ZWQgZXZlbnQgYW5kIHNlbmRzIGl0IHRvIFNlbnRyeS5cbiAgICpcbiAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBzZW5kIHRvIFNlbnRyeS5cbiAgICogQHJldHVybnMgVGhlIGdlbmVyYXRlZCBldmVudElkLlxuICAgKi9mdW5jdGlvbiBjYXB0dXJlRXZlbnQoZXZlbnQpe3JldHVybiBjYWxsT25IdWIoJ2NhcHR1cmVFdmVudCcsZXZlbnQpO30vKipcbiAgICogQ2FsbGJhY2sgdG8gc2V0IGNvbnRleHQgaW5mb3JtYXRpb24gb250byB0aGUgc2NvcGUuXG4gICAqIEBwYXJhbSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIFNjb3BlLlxuICAgKi9mdW5jdGlvbiBjb25maWd1cmVTY29wZShjYWxsYmFjayl7Y2FsbE9uSHViKCdjb25maWd1cmVTY29wZScsY2FsbGJhY2spO30vKipcbiAgICogUmVjb3JkcyBhIG5ldyBicmVhZGNydW1iIHdoaWNoIHdpbGwgYmUgYXR0YWNoZWQgdG8gZnV0dXJlIGV2ZW50cy5cbiAgICpcbiAgICogQnJlYWRjcnVtYnMgd2lsbCBiZSBhZGRlZCB0byBzdWJzZXF1ZW50IGV2ZW50cyB0byBwcm92aWRlIG1vcmUgY29udGV4dCBvblxuICAgKiB1c2VyJ3MgYWN0aW9ucyBwcmlvciB0byBhbiBlcnJvciBvciBjcmFzaC5cbiAgICpcbiAgICogQHBhcmFtIGJyZWFkY3J1bWIgVGhlIGJyZWFkY3J1bWIgdG8gcmVjb3JkLlxuICAgKi9mdW5jdGlvbiBhZGRCcmVhZGNydW1iKGJyZWFkY3J1bWIpe2NhbGxPbkh1YignYWRkQnJlYWRjcnVtYicsYnJlYWRjcnVtYik7fS8qKlxuICAgKiBTZXRzIGNvbnRleHQgZGF0YSB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICAgKiBAcGFyYW0gbmFtZSBvZiB0aGUgY29udGV4dFxuICAgKiBAcGFyYW0gY29udGV4dCBBbnkga2luZCBvZiBkYXRhLiBUaGlzIGRhdGEgd2lsbCBiZSBub3JtYWlsemVkLlxuICAgKi9mdW5jdGlvbiBzZXRDb250ZXh0KG5hbWUsY29udGV4dCl7Y2FsbE9uSHViKCdzZXRDb250ZXh0JyxuYW1lLGNvbnRleHQpO30vKipcbiAgICogU2V0IGFuIG9iamVjdCB0aGF0IHdpbGwgYmUgbWVyZ2VkIHNlbnQgYXMgZXh0cmEgZGF0YSB3aXRoIHRoZSBldmVudC5cbiAgICogQHBhcmFtIGV4dHJhcyBFeHRyYXMgb2JqZWN0IHRvIG1lcmdlIGludG8gY3VycmVudCBjb250ZXh0LlxuICAgKi9mdW5jdGlvbiBzZXRFeHRyYXMoZXh0cmFzKXtjYWxsT25IdWIoJ3NldEV4dHJhcycsZXh0cmFzKTt9LyoqXG4gICAqIFNldCBhbiBvYmplY3QgdGhhdCB3aWxsIGJlIG1lcmdlZCBzZW50IGFzIHRhZ3MgZGF0YSB3aXRoIHRoZSBldmVudC5cbiAgICogQHBhcmFtIHRhZ3MgVGFncyBjb250ZXh0IG9iamVjdCB0byBtZXJnZSBpbnRvIGN1cnJlbnQgY29udGV4dC5cbiAgICovZnVuY3Rpb24gc2V0VGFncyh0YWdzKXtjYWxsT25IdWIoJ3NldFRhZ3MnLHRhZ3MpO30vKipcbiAgICogU2V0IGtleTp2YWx1ZSB0aGF0IHdpbGwgYmUgc2VudCBhcyBleHRyYSBkYXRhIHdpdGggdGhlIGV2ZW50LlxuICAgKiBAcGFyYW0ga2V5IFN0cmluZyBvZiBleHRyYVxuICAgKiBAcGFyYW0gZXh0cmEgQW55IGtpbmQgb2YgZGF0YS4gVGhpcyBkYXRhIHdpbGwgYmUgbm9ybWFpbHplZC5cbiAgICovZnVuY3Rpb24gc2V0RXh0cmEoa2V5LGV4dHJhKXtjYWxsT25IdWIoJ3NldEV4dHJhJyxrZXksZXh0cmEpO30vKipcbiAgICogU2V0IGtleTp2YWx1ZSB0aGF0IHdpbGwgYmUgc2VudCBhcyB0YWdzIGRhdGEgd2l0aCB0aGUgZXZlbnQuXG4gICAqIEBwYXJhbSBrZXkgU3RyaW5nIGtleSBvZiB0YWdcbiAgICogQHBhcmFtIHZhbHVlIFN0cmluZyB2YWx1ZSBvZiB0YWdcbiAgICovZnVuY3Rpb24gc2V0VGFnKGtleSx2YWx1ZSl7Y2FsbE9uSHViKCdzZXRUYWcnLGtleSx2YWx1ZSk7fS8qKlxuICAgKiBVcGRhdGVzIHVzZXIgY29udGV4dCBpbmZvcm1hdGlvbiBmb3IgZnV0dXJlIGV2ZW50cy5cbiAgICpcbiAgICogQHBhcmFtIHVzZXIgVXNlciBjb250ZXh0IG9iamVjdCB0byBiZSBzZXQgaW4gdGhlIGN1cnJlbnQgY29udGV4dC4gUGFzcyBgbnVsbGAgdG8gdW5zZXQgdGhlIHVzZXIuXG4gICAqL2Z1bmN0aW9uIHNldFVzZXIodXNlcil7Y2FsbE9uSHViKCdzZXRVc2VyJyx1c2VyKTt9LyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgc2NvcGUgd2l0aCBhbmQgZXhlY3V0ZXMgdGhlIGdpdmVuIG9wZXJhdGlvbiB3aXRoaW4uXG4gICAqIFRoZSBzY29wZSBpcyBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgb25jZSB0aGUgb3BlcmF0aW9uXG4gICAqIGZpbmlzaGVzIG9yIHRocm93cy5cbiAgICpcbiAgICogVGhpcyBpcyBlc3NlbnRpYWxseSBhIGNvbnZlbmllbmNlIGZ1bmN0aW9uIGZvcjpcbiAgICpcbiAgICogICAgIHB1c2hTY29wZSgpO1xuICAgKiAgICAgY2FsbGJhY2soKTtcbiAgICogICAgIHBvcFNjb3BlKCk7XG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgZW5jbG9zZWQgaW50byBwdXNoL3BvcFNjb3BlLlxuICAgKi9mdW5jdGlvbiB3aXRoU2NvcGUoY2FsbGJhY2spe2NhbGxPbkh1Yignd2l0aFNjb3BlJyxjYWxsYmFjayk7fS8qKiBSZWd1bGFyIGV4cHJlc3Npb24gdXNlZCB0byBwYXJzZSBhIERzbi4gKi92YXIgRFNOX1JFR0VYPS9eKD86KFxcdyspOilcXC9cXC8oPzooXFx3KykoPzo6KFxcdyspKT9AKShbXFx3XFwuLV0rKSg/OjooXFxkKykpP1xcLyguKykvOy8qKiBFcnJvciBtZXNzYWdlICovdmFyIEVSUk9SX01FU1NBR0U9J0ludmFsaWQgRHNuJzsvKiogVGhlIFNlbnRyeSBEc24sIGlkZW50aWZ5aW5nIGEgU2VudHJ5IGluc3RhbmNlIGFuZCBwcm9qZWN0LiAqL3ZhciBEc249LyoqIEBjbGFzcyAqL2Z1bmN0aW9uKCl7LyoqIENyZWF0ZXMgYSBuZXcgRHNuIGNvbXBvbmVudCAqL2Z1bmN0aW9uIERzbihmcm9tKXtpZih0eXBlb2YgZnJvbT09PSdzdHJpbmcnKXt0aGlzLl9mcm9tU3RyaW5nKGZyb20pO31lbHNle3RoaXMuX2Zyb21Db21wb25lbnRzKGZyb20pO310aGlzLl92YWxpZGF0ZSgpO30vKipcbiAgICAgICAqIFJlbmRlcnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERzbi5cbiAgICAgICAqXG4gICAgICAgKiBCeSBkZWZhdWx0LCB0aGlzIHdpbGwgcmVuZGVyIHRoZSBwdWJsaWMgcmVwcmVzZW50YXRpb24gd2l0aG91dCB0aGUgcGFzc3dvcmRcbiAgICAgICAqIGNvbXBvbmVudC4gVG8gZ2V0IHRoZSBkZXByZWNhdGVkIHByaXZhdGUgX3JlcHJlc2VudGF0aW9uLCBzZXQgYHdpdGhQYXNzd29yZGBcbiAgICAgICAqIHRvIHRydWUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHdpdGhQYXNzd29yZCBXaGVuIHNldCB0byB0cnVlLCB0aGUgcGFzc3dvcmQgd2lsbCBiZSBpbmNsdWRlZC5cbiAgICAgICAqL0Rzbi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24od2l0aFBhc3N3b3JkKXtpZih3aXRoUGFzc3dvcmQ9PT12b2lkIDApe3dpdGhQYXNzd29yZD1mYWxzZTt9Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXRoaXMtYXNzaWdubWVudFxudmFyIF9hPXRoaXMsaG9zdD1fYS5ob3N0LHBhdGg9X2EucGF0aCxwYXNzPV9hLnBhc3MscG9ydD1fYS5wb3J0LHByb2plY3RJZD1fYS5wcm9qZWN0SWQscHJvdG9jb2w9X2EucHJvdG9jb2wsdXNlcj1fYS51c2VyO3JldHVybiBwcm90b2NvbCtcIjovL1wiK3VzZXIrKHdpdGhQYXNzd29yZCYmcGFzcz9cIjpcIitwYXNzOicnKSsoXCJAXCIraG9zdCsocG9ydD9cIjpcIitwb3J0OicnKStcIi9cIisocGF0aD9wYXRoK1wiL1wiOnBhdGgpK3Byb2plY3RJZCk7fTsvKiogUGFyc2VzIGEgc3RyaW5nIGludG8gdGhpcyBEc24uICovRHNuLnByb3RvdHlwZS5fZnJvbVN0cmluZz1mdW5jdGlvbihzdHIpe3ZhciBtYXRjaD1EU05fUkVHRVguZXhlYyhzdHIpO2lmKCFtYXRjaCl7dGhyb3cgbmV3IFNlbnRyeUVycm9yKEVSUk9SX01FU1NBR0UpO312YXIgX2E9X19yZWFkKG1hdGNoLnNsaWNlKDEpLDYpLHByb3RvY29sPV9hWzBdLHVzZXI9X2FbMV0sX2I9X2FbMl0scGFzcz1fYj09PXZvaWQgMD8nJzpfYixob3N0PV9hWzNdLF9jPV9hWzRdLHBvcnQ9X2M9PT12b2lkIDA/Jyc6X2MsbGFzdFBhdGg9X2FbNV07dmFyIHBhdGg9Jyc7dmFyIHByb2plY3RJZD1sYXN0UGF0aDt2YXIgc3BsaXQ9cHJvamVjdElkLnNwbGl0KCcvJyk7aWYoc3BsaXQubGVuZ3RoPjEpe3BhdGg9c3BsaXQuc2xpY2UoMCwtMSkuam9pbignLycpO3Byb2plY3RJZD1zcGxpdC5wb3AoKTt9dGhpcy5fZnJvbUNvbXBvbmVudHMoe2hvc3Q6aG9zdCxwYXNzOnBhc3MscGF0aDpwYXRoLHByb2plY3RJZDpwcm9qZWN0SWQscG9ydDpwb3J0LHByb3RvY29sOnByb3RvY29sLHVzZXI6dXNlcn0pO307LyoqIE1hcHMgRHNuIGNvbXBvbmVudHMgaW50byB0aGlzIGluc3RhbmNlLiAqL0Rzbi5wcm90b3R5cGUuX2Zyb21Db21wb25lbnRzPWZ1bmN0aW9uKGNvbXBvbmVudHMpe3RoaXMucHJvdG9jb2w9Y29tcG9uZW50cy5wcm90b2NvbDt0aGlzLnVzZXI9Y29tcG9uZW50cy51c2VyO3RoaXMucGFzcz1jb21wb25lbnRzLnBhc3N8fCcnO3RoaXMuaG9zdD1jb21wb25lbnRzLmhvc3Q7dGhpcy5wb3J0PWNvbXBvbmVudHMucG9ydHx8Jyc7dGhpcy5wYXRoPWNvbXBvbmVudHMucGF0aHx8Jyc7dGhpcy5wcm9qZWN0SWQ9Y29tcG9uZW50cy5wcm9qZWN0SWQ7fTsvKiogVmFsaWRhdGVzIHRoaXMgRHNuIGFuZCB0aHJvd3Mgb24gZXJyb3IuICovRHNuLnByb3RvdHlwZS5fdmFsaWRhdGU9ZnVuY3Rpb24oKXt2YXIgX3RoaXM9dGhpcztbJ3Byb3RvY29sJywndXNlcicsJ2hvc3QnLCdwcm9qZWN0SWQnXS5mb3JFYWNoKGZ1bmN0aW9uKGNvbXBvbmVudCl7aWYoIV90aGlzW2NvbXBvbmVudF0pe3Rocm93IG5ldyBTZW50cnlFcnJvcihFUlJPUl9NRVNTQUdFKTt9fSk7aWYodGhpcy5wcm90b2NvbCE9PSdodHRwJyYmdGhpcy5wcm90b2NvbCE9PSdodHRwcycpe3Rocm93IG5ldyBTZW50cnlFcnJvcihFUlJPUl9NRVNTQUdFKTt9aWYodGhpcy5wb3J0JiZpc05hTihwYXJzZUludCh0aGlzLnBvcnQsMTApKSl7dGhyb3cgbmV3IFNlbnRyeUVycm9yKEVSUk9SX01FU1NBR0UpO319O3JldHVybiBEc247fSgpO3ZhciBTRU5UUllfQVBJX1ZFUlNJT049JzcnOy8qKiBIZWxwZXIgY2xhc3MgdG8gcHJvdmlkZSB1cmxzIHRvIGRpZmZlcmVudCBTZW50cnkgZW5kcG9pbnRzLiAqL3ZhciBBUEk9LyoqIEBjbGFzcyAqL2Z1bmN0aW9uKCl7LyoqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBUEkgKi9mdW5jdGlvbiBBUEkoZHNuKXt0aGlzLmRzbj1kc247dGhpcy5fZHNuT2JqZWN0PW5ldyBEc24oZHNuKTt9LyoqIFJldHVybnMgdGhlIERzbiBvYmplY3QuICovQVBJLnByb3RvdHlwZS5nZXREc249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZHNuT2JqZWN0O307LyoqIFJldHVybnMgYSBzdHJpbmcgd2l0aCBhdXRoIGhlYWRlcnMgaW4gdGhlIHVybCB0byB0aGUgc3RvcmUgZW5kcG9pbnQuICovQVBJLnByb3RvdHlwZS5nZXRTdG9yZUVuZHBvaW50PWZ1bmN0aW9uKCl7cmV0dXJuXCJcIit0aGlzLl9nZXRCYXNlVXJsKCkrdGhpcy5nZXRTdG9yZUVuZHBvaW50UGF0aCgpO307LyoqIFJldHVybnMgdGhlIHN0b3JlIGVuZHBvaW50IHdpdGggYXV0aCBhZGRlZCBpbiB1cmwgZW5jb2RlZC4gKi9BUEkucHJvdG90eXBlLmdldFN0b3JlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGg9ZnVuY3Rpb24oKXt2YXIgZHNuPXRoaXMuX2Rzbk9iamVjdDt2YXIgYXV0aD17c2VudHJ5X2tleTpkc24udXNlcixzZW50cnlfdmVyc2lvbjpTRU5UUllfQVBJX1ZFUlNJT059Oy8vIEF1dGggaXMgaW50ZW50aW9uYWxseSBzZW50IGFzIHBhcnQgb2YgcXVlcnkgc3RyaW5nIChOT1QgYXMgY3VzdG9tIEhUVFAgaGVhZGVyKVxuLy8gdG8gYXZvaWQgcHJlZmxpZ2h0IENPUlMgcmVxdWVzdHNcbnJldHVybiB0aGlzLmdldFN0b3JlRW5kcG9pbnQoKStcIj9cIit1cmxFbmNvZGUoYXV0aCk7fTsvKiogUmV0dXJucyB0aGUgYmFzZSBwYXRoIG9mIHRoZSB1cmwgaW5jbHVkaW5nIHRoZSBwb3J0LiAqL0FQSS5wcm90b3R5cGUuX2dldEJhc2VVcmw9ZnVuY3Rpb24oKXt2YXIgZHNuPXRoaXMuX2Rzbk9iamVjdDt2YXIgcHJvdG9jb2w9ZHNuLnByb3RvY29sP2Rzbi5wcm90b2NvbCtcIjpcIjonJzt2YXIgcG9ydD1kc24ucG9ydD9cIjpcIitkc24ucG9ydDonJztyZXR1cm4gcHJvdG9jb2wrXCIvL1wiK2Rzbi5ob3N0K3BvcnQ7fTsvKiogUmV0dXJucyBvbmx5IHRoZSBwYXRoIGNvbXBvbmVudCBmb3IgdGhlIHN0b3JlIGVuZHBvaW50LiAqL0FQSS5wcm90b3R5cGUuZ2V0U3RvcmVFbmRwb2ludFBhdGg9ZnVuY3Rpb24oKXt2YXIgZHNuPXRoaXMuX2Rzbk9iamVjdDtyZXR1cm4oZHNuLnBhdGg/XCIvXCIrZHNuLnBhdGg6JycpK1wiL2FwaS9cIitkc24ucHJvamVjdElkK1wiL3N0b3JlL1wiO307LyoqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgaW4gcmVxdWVzdCBoZWFkZXJzLiAqL0FQSS5wcm90b3R5cGUuZ2V0UmVxdWVzdEhlYWRlcnM9ZnVuY3Rpb24oY2xpZW50TmFtZSxjbGllbnRWZXJzaW9uKXt2YXIgZHNuPXRoaXMuX2Rzbk9iamVjdDt2YXIgaGVhZGVyPVtcIlNlbnRyeSBzZW50cnlfdmVyc2lvbj1cIitTRU5UUllfQVBJX1ZFUlNJT05dO2hlYWRlci5wdXNoKFwic2VudHJ5X3RpbWVzdGFtcD1cIituZXcgRGF0ZSgpLmdldFRpbWUoKSk7aGVhZGVyLnB1c2goXCJzZW50cnlfY2xpZW50PVwiK2NsaWVudE5hbWUrXCIvXCIrY2xpZW50VmVyc2lvbik7aGVhZGVyLnB1c2goXCJzZW50cnlfa2V5PVwiK2Rzbi51c2VyKTtpZihkc24ucGFzcyl7aGVhZGVyLnB1c2goXCJzZW50cnlfc2VjcmV0PVwiK2Rzbi5wYXNzKTt9cmV0dXJueydDb250ZW50LVR5cGUnOidhcHBsaWNhdGlvbi9qc29uJywnWC1TZW50cnktQXV0aCc6aGVhZGVyLmpvaW4oJywgJyl9O307LyoqIFJldHVybnMgdGhlIHVybCB0byB0aGUgcmVwb3J0IGRpYWxvZyBlbmRwb2ludC4gKi9BUEkucHJvdG90eXBlLmdldFJlcG9ydERpYWxvZ0VuZHBvaW50PWZ1bmN0aW9uKGRpYWxvZ09wdGlvbnMpe2lmKGRpYWxvZ09wdGlvbnM9PT12b2lkIDApe2RpYWxvZ09wdGlvbnM9e307fXZhciBkc249dGhpcy5fZHNuT2JqZWN0O3ZhciBlbmRwb2ludD1cIlwiK3RoaXMuX2dldEJhc2VVcmwoKSsoZHNuLnBhdGg/XCIvXCIrZHNuLnBhdGg6JycpK1wiL2FwaS9lbWJlZC9lcnJvci1wYWdlL1wiO3ZhciBlbmNvZGVkT3B0aW9ucz1bXTtlbmNvZGVkT3B0aW9ucy5wdXNoKFwiZHNuPVwiK2Rzbi50b1N0cmluZygpKTtmb3IodmFyIGtleSBpbiBkaWFsb2dPcHRpb25zKXtpZihrZXk9PT0ndXNlcicpe2lmKCFkaWFsb2dPcHRpb25zLnVzZXIpe2NvbnRpbnVlO31pZihkaWFsb2dPcHRpb25zLnVzZXIubmFtZSl7ZW5jb2RlZE9wdGlvbnMucHVzaChcIm5hbWU9XCIrZW5jb2RlVVJJQ29tcG9uZW50KGRpYWxvZ09wdGlvbnMudXNlci5uYW1lKSk7fWlmKGRpYWxvZ09wdGlvbnMudXNlci5lbWFpbCl7ZW5jb2RlZE9wdGlvbnMucHVzaChcImVtYWlsPVwiK2VuY29kZVVSSUNvbXBvbmVudChkaWFsb2dPcHRpb25zLnVzZXIuZW1haWwpKTt9fWVsc2V7ZW5jb2RlZE9wdGlvbnMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KStcIj1cIitlbmNvZGVVUklDb21wb25lbnQoZGlhbG9nT3B0aW9uc1trZXldKSk7fX1pZihlbmNvZGVkT3B0aW9ucy5sZW5ndGgpe3JldHVybiBlbmRwb2ludCtcIj9cIitlbmNvZGVkT3B0aW9ucy5qb2luKCcmJyk7fXJldHVybiBlbmRwb2ludDt9O3JldHVybiBBUEk7fSgpO3ZhciBpbnN0YWxsZWRJbnRlZ3JhdGlvbnM9W107LyoqIEdldHMgaW50ZWdyYXRpb24gdG8gaW5zdGFsbCAqL2Z1bmN0aW9uIGdldEludGVncmF0aW9uc1RvU2V0dXAob3B0aW9ucyl7dmFyIGRlZmF1bHRJbnRlZ3JhdGlvbnM9b3B0aW9ucy5kZWZhdWx0SW50ZWdyYXRpb25zJiZfX3NwcmVhZChvcHRpb25zLmRlZmF1bHRJbnRlZ3JhdGlvbnMpfHxbXTt2YXIgdXNlckludGVncmF0aW9ucz1vcHRpb25zLmludGVncmF0aW9uczt2YXIgaW50ZWdyYXRpb25zPVtdO2lmKEFycmF5LmlzQXJyYXkodXNlckludGVncmF0aW9ucykpe3ZhciB1c2VySW50ZWdyYXRpb25zTmFtZXNfMT11c2VySW50ZWdyYXRpb25zLm1hcChmdW5jdGlvbihpKXtyZXR1cm4gaS5uYW1lO30pO3ZhciBwaWNrZWRJbnRlZ3JhdGlvbnNOYW1lc18xPVtdOy8vIExlYXZlIG9ubHkgdW5pcXVlIGRlZmF1bHQgaW50ZWdyYXRpb25zLCB0aGF0IHdlcmUgbm90IG92ZXJyaWRkZW4gd2l0aCBwcm92aWRlZCB1c2VyIGludGVncmF0aW9uc1xuZGVmYXVsdEludGVncmF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGRlZmF1bHRJbnRlZ3JhdGlvbil7aWYodXNlckludGVncmF0aW9uc05hbWVzXzEuaW5kZXhPZihkZWZhdWx0SW50ZWdyYXRpb24ubmFtZSk9PT0tMSYmcGlja2VkSW50ZWdyYXRpb25zTmFtZXNfMS5pbmRleE9mKGRlZmF1bHRJbnRlZ3JhdGlvbi5uYW1lKT09PS0xKXtpbnRlZ3JhdGlvbnMucHVzaChkZWZhdWx0SW50ZWdyYXRpb24pO3BpY2tlZEludGVncmF0aW9uc05hbWVzXzEucHVzaChkZWZhdWx0SW50ZWdyYXRpb24ubmFtZSk7fX0pOy8vIERvbid0IGFkZCBzYW1lIHVzZXIgaW50ZWdyYXRpb24gdHdpY2VcbnVzZXJJbnRlZ3JhdGlvbnMuZm9yRWFjaChmdW5jdGlvbih1c2VySW50ZWdyYXRpb24pe2lmKHBpY2tlZEludGVncmF0aW9uc05hbWVzXzEuaW5kZXhPZih1c2VySW50ZWdyYXRpb24ubmFtZSk9PT0tMSl7aW50ZWdyYXRpb25zLnB1c2godXNlckludGVncmF0aW9uKTtwaWNrZWRJbnRlZ3JhdGlvbnNOYW1lc18xLnB1c2godXNlckludGVncmF0aW9uLm5hbWUpO319KTt9ZWxzZSBpZih0eXBlb2YgdXNlckludGVncmF0aW9ucz09PSdmdW5jdGlvbicpe2ludGVncmF0aW9ucz11c2VySW50ZWdyYXRpb25zKGRlZmF1bHRJbnRlZ3JhdGlvbnMpO2ludGVncmF0aW9ucz1BcnJheS5pc0FycmF5KGludGVncmF0aW9ucyk/aW50ZWdyYXRpb25zOltpbnRlZ3JhdGlvbnNdO31lbHNle2ludGVncmF0aW9ucz1fX3NwcmVhZChkZWZhdWx0SW50ZWdyYXRpb25zKTt9Ly8gTWFrZSBzdXJlIHRoYXQgaWYgcHJlc2VudCwgYERlYnVnYCBpbnRlZ3JhdGlvbiB3aWxsIGFsd2F5cyBydW4gbGFzdFxudmFyIGludGVncmF0aW9uc05hbWVzPWludGVncmF0aW9ucy5tYXAoZnVuY3Rpb24oaSl7cmV0dXJuIGkubmFtZTt9KTt2YXIgYWx3YXlzTGFzdFRvUnVuPSdEZWJ1Zyc7aWYoaW50ZWdyYXRpb25zTmFtZXMuaW5kZXhPZihhbHdheXNMYXN0VG9SdW4pIT09LTEpe2ludGVncmF0aW9ucy5wdXNoLmFwcGx5KGludGVncmF0aW9ucyxfX3NwcmVhZChpbnRlZ3JhdGlvbnMuc3BsaWNlKGludGVncmF0aW9uc05hbWVzLmluZGV4T2YoYWx3YXlzTGFzdFRvUnVuKSwxKSkpO31yZXR1cm4gaW50ZWdyYXRpb25zO30vKiogU2V0dXAgZ2l2ZW4gaW50ZWdyYXRpb24gKi9mdW5jdGlvbiBzZXR1cEludGVncmF0aW9uKGludGVncmF0aW9uKXtpZihpbnN0YWxsZWRJbnRlZ3JhdGlvbnMuaW5kZXhPZihpbnRlZ3JhdGlvbi5uYW1lKSE9PS0xKXtyZXR1cm47fWludGVncmF0aW9uLnNldHVwT25jZShhZGRHbG9iYWxFdmVudFByb2Nlc3NvcixnZXRDdXJyZW50SHViKTtpbnN0YWxsZWRJbnRlZ3JhdGlvbnMucHVzaChpbnRlZ3JhdGlvbi5uYW1lKTtsb2dnZXIkMS5sb2coXCJJbnRlZ3JhdGlvbiBpbnN0YWxsZWQ6IFwiK2ludGVncmF0aW9uLm5hbWUpO30vKipcbiAgICogR2l2ZW4gYSBsaXN0IG9mIGludGVncmF0aW9uIGluc3RhbmNlcyB0aGlzIGluc3RhbGxzIHRoZW0gYWxsLiBXaGVuIGB3aXRoRGVmYXVsdHNgIGlzIHNldCB0byBgdHJ1ZWAgdGhlbiBhbGwgZGVmYXVsdFxuICAgKiBpbnRlZ3JhdGlvbnMgYXJlIGFkZGVkIHVubGVzcyB0aGV5IHdlcmUgYWxyZWFkeSBwcm92aWRlZCBiZWZvcmUuXG4gICAqIEBwYXJhbSBpbnRlZ3JhdGlvbnMgYXJyYXkgb2YgaW50ZWdyYXRpb24gaW5zdGFuY2VzXG4gICAqIEBwYXJhbSB3aXRoRGVmYXVsdCBzaG91bGQgZW5hYmxlIGRlZmF1bHQgaW50ZWdyYXRpb25zXG4gICAqL2Z1bmN0aW9uIHNldHVwSW50ZWdyYXRpb25zKG9wdGlvbnMpe3ZhciBpbnRlZ3JhdGlvbnM9e307Z2V0SW50ZWdyYXRpb25zVG9TZXR1cChvcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uKGludGVncmF0aW9uKXtpbnRlZ3JhdGlvbnNbaW50ZWdyYXRpb24ubmFtZV09aW50ZWdyYXRpb247c2V0dXBJbnRlZ3JhdGlvbihpbnRlZ3JhdGlvbik7fSk7cmV0dXJuIGludGVncmF0aW9uczt9LyoqXG4gICAqIEJhc2UgaW1wbGVtZW50YXRpb24gZm9yIGFsbCBKYXZhU2NyaXB0IFNESyBjbGllbnRzLlxuICAgKlxuICAgKiBDYWxsIHRoZSBjb25zdHJ1Y3RvciB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIGJhY2tlbmQgY29uc3RydWN0b3IgYW5kIG9wdGlvbnNcbiAgICogc3BlY2lmaWMgdG8gdGhlIGNsaWVudCBzdWJjbGFzcy4gVG8gYWNjZXNzIHRoZXNlIG9wdGlvbnMgbGF0ZXIsIHVzZVxuICAgKiB7QGxpbmsgQ2xpZW50LmdldE9wdGlvbnN9LiBBbHNvLCB0aGUgQmFja2VuZCBpbnN0YW5jZSBpcyBhdmFpbGFibGUgdmlhXG4gICAqIHtAbGluayBDbGllbnQuZ2V0QmFja2VuZH0uXG4gICAqXG4gICAqIElmIGEgRHNuIGlzIHNwZWNpZmllZCBpbiB0aGUgb3B0aW9ucywgaXQgd2lsbCBiZSBwYXJzZWQgYW5kIHN0b3JlZC4gVXNlXG4gICAqIHtAbGluayBDbGllbnQuZ2V0RHNufSB0byByZXRyaWV2ZSB0aGUgRHNuIGF0IGFueSBtb21lbnQuIEluIGNhc2UgdGhlIERzbiBpc1xuICAgKiBpbnZhbGlkLCB0aGUgY29uc3RydWN0b3Igd2lsbCB0aHJvdyBhIHtAbGluayBTZW50cnlFeGNlcHRpb259LiBOb3RlIHRoYXRcbiAgICogd2l0aG91dCBhIHZhbGlkIERzbiwgdGhlIFNESyB3aWxsIG5vdCBzZW5kIGFueSBldmVudHMgdG8gU2VudHJ5LlxuICAgKlxuICAgKiBCZWZvcmUgc2VuZGluZyBhbiBldmVudCB2aWEgdGhlIGJhY2tlbmQsIGl0IGlzIHBhc3NlZCB0aHJvdWdoXG4gICAqIHtAbGluayBCYXNlQ2xpZW50LnByZXBhcmVFdmVudH0gdG8gYWRkIFNESyBpbmZvcm1hdGlvbiBhbmQgc2NvcGUgZGF0YVxuICAgKiAoYnJlYWRjcnVtYnMgYW5kIGNvbnRleHQpLiBUbyBhZGQgbW9yZSBjdXN0b20gaW5mb3JtYXRpb24sIG92ZXJyaWRlIHRoaXNcbiAgICogbWV0aG9kIGFuZCBleHRlbmQgdGhlIHJlc3VsdGluZyBwcmVwYXJlZCBldmVudC5cbiAgICpcbiAgICogVG8gaXNzdWUgYXV0b21hdGljYWxseSBjcmVhdGVkIGV2ZW50cyAoZS5nLiB2aWEgaW5zdHJ1bWVudGF0aW9uKSwgdXNlXG4gICAqIHtAbGluayBDbGllbnQuY2FwdHVyZUV2ZW50fS4gSXQgd2lsbCBwcmVwYXJlIHRoZSBldmVudCBhbmQgcGFzcyBpdCB0aHJvdWdoXG4gICAqIHRoZSBjYWxsYmFjayBsaWZlY3ljbGUuIFRvIGlzc3VlIGF1dG8tYnJlYWRjcnVtYnMsIHVzZVxuICAgKiB7QGxpbmsgQ2xpZW50LmFkZEJyZWFkY3J1bWJ9LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjbGFzcyBOb2RlQ2xpZW50IGV4dGVuZHMgQmFzZUNsaWVudDxOb2RlQmFja2VuZCwgTm9kZU9wdGlvbnM+IHtcbiAgICogICBwdWJsaWMgY29uc3RydWN0b3Iob3B0aW9uczogTm9kZU9wdGlvbnMpIHtcbiAgICogICAgIHN1cGVyKE5vZGVCYWNrZW5kLCBvcHRpb25zKTtcbiAgICogICB9XG4gICAqXG4gICAqICAgLy8gLi4uXG4gICAqIH1cbiAgICovdmFyIEJhc2VDbGllbnQ9LyoqIEBjbGFzcyAqL2Z1bmN0aW9uKCl7LyoqXG4gICAgICAgKiBJbml0aWFsaXplcyB0aGlzIGNsaWVudCBpbnN0YW5jZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gYmFja2VuZENsYXNzIEEgY29uc3RydWN0b3IgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBiYWNrZW5kLlxuICAgICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBmb3IgdGhlIGNsaWVudC5cbiAgICAgICAqL2Z1bmN0aW9uIEJhc2VDbGllbnQoYmFja2VuZENsYXNzLG9wdGlvbnMpey8qKiBBcnJheSBvZiB1c2VkIGludGVncmF0aW9ucy4gKi90aGlzLl9pbnRlZ3JhdGlvbnM9e307LyoqIElzIHRoZSBjbGllbnQgc3RpbGwgcHJvY2Vzc2luZyBhIGNhbGw/ICovdGhpcy5fcHJvY2Vzc2luZz1mYWxzZTt0aGlzLl9iYWNrZW5kPW5ldyBiYWNrZW5kQ2xhc3Mob3B0aW9ucyk7dGhpcy5fb3B0aW9ucz1vcHRpb25zO2lmKG9wdGlvbnMuZHNuKXt0aGlzLl9kc249bmV3IERzbihvcHRpb25zLmRzbik7fWlmKHRoaXMuX2lzRW5hYmxlZCgpKXt0aGlzLl9pbnRlZ3JhdGlvbnM9c2V0dXBJbnRlZ3JhdGlvbnModGhpcy5fb3B0aW9ucyk7fX0vKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9CYXNlQ2xpZW50LnByb3RvdHlwZS5jYXB0dXJlRXhjZXB0aW9uPWZ1bmN0aW9uKGV4Y2VwdGlvbixoaW50LHNjb3BlKXt2YXIgX3RoaXM9dGhpczt2YXIgZXZlbnRJZD1oaW50JiZoaW50LmV2ZW50X2lkO3RoaXMuX3Byb2Nlc3Npbmc9dHJ1ZTt0aGlzLl9nZXRCYWNrZW5kKCkuZXZlbnRGcm9tRXhjZXB0aW9uKGV4Y2VwdGlvbixoaW50KS50aGVuKGZ1bmN0aW9uKGV2ZW50KXtyZXR1cm4gX3RoaXMuX3Byb2Nlc3NFdmVudChldmVudCxoaW50LHNjb3BlKTt9KS50aGVuKGZ1bmN0aW9uKGZpbmFsRXZlbnQpey8vIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGZpbmFsRXZlbnQgaW4gY2FzZSBiZWZvcmVTZW5kIHJldHVybmVkIG51bGxcbmV2ZW50SWQ9ZmluYWxFdmVudCYmZmluYWxFdmVudC5ldmVudF9pZDtfdGhpcy5fcHJvY2Vzc2luZz1mYWxzZTt9KS50aGVuKG51bGwsZnVuY3Rpb24ocmVhc29uKXtsb2dnZXIkMS5lcnJvcihyZWFzb24pO190aGlzLl9wcm9jZXNzaW5nPWZhbHNlO30pO3JldHVybiBldmVudElkO307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovQmFzZUNsaWVudC5wcm90b3R5cGUuY2FwdHVyZU1lc3NhZ2U9ZnVuY3Rpb24obWVzc2FnZSxsZXZlbCxoaW50LHNjb3BlKXt2YXIgX3RoaXM9dGhpczt2YXIgZXZlbnRJZD1oaW50JiZoaW50LmV2ZW50X2lkO3RoaXMuX3Byb2Nlc3Npbmc9dHJ1ZTt2YXIgcHJvbWlzZWRFdmVudD1pc1ByaW1pdGl2ZSQxKG1lc3NhZ2UpP3RoaXMuX2dldEJhY2tlbmQoKS5ldmVudEZyb21NZXNzYWdlKFwiXCIrbWVzc2FnZSxsZXZlbCxoaW50KTp0aGlzLl9nZXRCYWNrZW5kKCkuZXZlbnRGcm9tRXhjZXB0aW9uKG1lc3NhZ2UsaGludCk7cHJvbWlzZWRFdmVudC50aGVuKGZ1bmN0aW9uKGV2ZW50KXtyZXR1cm4gX3RoaXMuX3Byb2Nlc3NFdmVudChldmVudCxoaW50LHNjb3BlKTt9KS50aGVuKGZ1bmN0aW9uKGZpbmFsRXZlbnQpey8vIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGZpbmFsRXZlbnQgaW4gY2FzZSBiZWZvcmVTZW5kIHJldHVybmVkIG51bGxcbmV2ZW50SWQ9ZmluYWxFdmVudCYmZmluYWxFdmVudC5ldmVudF9pZDtfdGhpcy5fcHJvY2Vzc2luZz1mYWxzZTt9KS50aGVuKG51bGwsZnVuY3Rpb24ocmVhc29uKXtsb2dnZXIkMS5lcnJvcihyZWFzb24pO190aGlzLl9wcm9jZXNzaW5nPWZhbHNlO30pO3JldHVybiBldmVudElkO307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovQmFzZUNsaWVudC5wcm90b3R5cGUuY2FwdHVyZUV2ZW50PWZ1bmN0aW9uKGV2ZW50LGhpbnQsc2NvcGUpe3ZhciBfdGhpcz10aGlzO3ZhciBldmVudElkPWhpbnQmJmhpbnQuZXZlbnRfaWQ7dGhpcy5fcHJvY2Vzc2luZz10cnVlO3RoaXMuX3Byb2Nlc3NFdmVudChldmVudCxoaW50LHNjb3BlKS50aGVuKGZ1bmN0aW9uKGZpbmFsRXZlbnQpey8vIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGZpbmFsRXZlbnQgaW4gY2FzZSBiZWZvcmVTZW5kIHJldHVybmVkIG51bGxcbmV2ZW50SWQ9ZmluYWxFdmVudCYmZmluYWxFdmVudC5ldmVudF9pZDtfdGhpcy5fcHJvY2Vzc2luZz1mYWxzZTt9KS50aGVuKG51bGwsZnVuY3Rpb24ocmVhc29uKXtsb2dnZXIkMS5lcnJvcihyZWFzb24pO190aGlzLl9wcm9jZXNzaW5nPWZhbHNlO30pO3JldHVybiBldmVudElkO307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovQmFzZUNsaWVudC5wcm90b3R5cGUuZ2V0RHNuPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2Rzbjt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL0Jhc2VDbGllbnQucHJvdG90eXBlLmdldE9wdGlvbnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb3B0aW9uczt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL0Jhc2VDbGllbnQucHJvdG90eXBlLmZsdXNoPWZ1bmN0aW9uKHRpbWVvdXQpe3ZhciBfdGhpcz10aGlzO3JldHVybiB0aGlzLl9pc0NsaWVudFByb2Nlc3NpbmcodGltZW91dCkudGhlbihmdW5jdGlvbihzdGF0dXMpe2NsZWFySW50ZXJ2YWwoc3RhdHVzLmludGVydmFsKTtyZXR1cm4gX3RoaXMuX2dldEJhY2tlbmQoKS5nZXRUcmFuc3BvcnQoKS5jbG9zZSh0aW1lb3V0KS50aGVuKGZ1bmN0aW9uKHRyYW5zcG9ydEZsdXNoZWQpe3JldHVybiBzdGF0dXMucmVhZHkmJnRyYW5zcG9ydEZsdXNoZWQ7fSk7fSk7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9CYXNlQ2xpZW50LnByb3RvdHlwZS5jbG9zZT1mdW5jdGlvbih0aW1lb3V0KXt2YXIgX3RoaXM9dGhpcztyZXR1cm4gdGhpcy5mbHVzaCh0aW1lb3V0KS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7X3RoaXMuZ2V0T3B0aW9ucygpLmVuYWJsZWQ9ZmFsc2U7cmV0dXJuIHJlc3VsdDt9KTt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL0Jhc2VDbGllbnQucHJvdG90eXBlLmdldEludGVncmF0aW9ucz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9pbnRlZ3JhdGlvbnN8fHt9O307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovQmFzZUNsaWVudC5wcm90b3R5cGUuZ2V0SW50ZWdyYXRpb249ZnVuY3Rpb24oaW50ZWdyYXRpb24pe3RyeXtyZXR1cm4gdGhpcy5faW50ZWdyYXRpb25zW2ludGVncmF0aW9uLmlkXXx8bnVsbDt9Y2F0Y2goX29PKXtsb2dnZXIkMS53YXJuKFwiQ2Fubm90IHJldHJpZXZlIGludGVncmF0aW9uIFwiK2ludGVncmF0aW9uLmlkK1wiIGZyb20gdGhlIGN1cnJlbnQgQ2xpZW50XCIpO3JldHVybiBudWxsO319Oy8qKiBXYWl0cyBmb3IgdGhlIGNsaWVudCB0byBiZSBkb25lIHdpdGggcHJvY2Vzc2luZy4gKi9CYXNlQ2xpZW50LnByb3RvdHlwZS5faXNDbGllbnRQcm9jZXNzaW5nPWZ1bmN0aW9uKHRpbWVvdXQpe3ZhciBfdGhpcz10aGlzO3JldHVybiBuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSl7dmFyIHRpY2tlZD0wO3ZhciB0aWNrPTE7dmFyIGludGVydmFsPTA7Y2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7aW50ZXJ2YWw9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtpZighX3RoaXMuX3Byb2Nlc3Npbmcpe3Jlc29sdmUoe2ludGVydmFsOmludGVydmFsLHJlYWR5OnRydWV9KTt9ZWxzZXt0aWNrZWQrPXRpY2s7aWYodGltZW91dCYmdGlja2VkPj10aW1lb3V0KXtyZXNvbHZlKHtpbnRlcnZhbDppbnRlcnZhbCxyZWFkeTpmYWxzZX0pO319fSx0aWNrKTt9KTt9Oy8qKiBSZXR1cm5zIHRoZSBjdXJyZW50IGJhY2tlbmQuICovQmFzZUNsaWVudC5wcm90b3R5cGUuX2dldEJhY2tlbmQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYmFja2VuZDt9Oy8qKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhpcyBTREsgaXMgZW5hYmxlZCBhbmQgYSB2YWxpZCBEc24gaXMgcHJlc2VudC4gKi9CYXNlQ2xpZW50LnByb3RvdHlwZS5faXNFbmFibGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0T3B0aW9ucygpLmVuYWJsZWQhPT1mYWxzZSYmdGhpcy5fZHNuIT09dW5kZWZpbmVkO307LyoqXG4gICAgICAgKiBBZGRzIGNvbW1vbiBpbmZvcm1hdGlvbiB0byBldmVudHMuXG4gICAgICAgKlxuICAgICAgICogVGhlIGluZm9ybWF0aW9uIGluY2x1ZGVzIHJlbGVhc2UgYW5kIGVudmlyb25tZW50IGZyb20gYG9wdGlvbnNgLFxuICAgICAgICogYnJlYWRjcnVtYnMgYW5kIGNvbnRleHQgKGV4dHJhLCB0YWdzIGFuZCB1c2VyKSBmcm9tIHRoZSBzY29wZS5cbiAgICAgICAqXG4gICAgICAgKiBJbmZvcm1hdGlvbiB0aGF0IGlzIGFscmVhZHkgcHJlc2VudCBpbiB0aGUgZXZlbnQgaXMgbmV2ZXIgb3ZlcndyaXR0ZW4uIEZvclxuICAgICAgICogbmVzdGVkIG9iamVjdHMsIHN1Y2ggYXMgdGhlIGNvbnRleHQsIGtleXMgYXJlIG1lcmdlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50LlxuICAgICAgICogQHBhcmFtIGhpbnQgTWF5IGNvbnRhaW4gYWRkaXRpb25hbCBpbmZvcm1hcnRpb24gYWJvdXQgdGhlIG9yaWdpbmFsIGV4Y2VwdGlvbi5cbiAgICAgICAqIEBwYXJhbSBzY29wZSBBIHNjb3BlIGNvbnRhaW5pbmcgZXZlbnQgbWV0YWRhdGEuXG4gICAgICAgKiBAcmV0dXJucyBBIG5ldyBldmVudCB3aXRoIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICAgKi9CYXNlQ2xpZW50LnByb3RvdHlwZS5fcHJlcGFyZUV2ZW50PWZ1bmN0aW9uKGV2ZW50LHNjb3BlLGhpbnQpe3ZhciBfYT10aGlzLmdldE9wdGlvbnMoKSxlbnZpcm9ubWVudD1fYS5lbnZpcm9ubWVudCxyZWxlYXNlPV9hLnJlbGVhc2UsZGlzdD1fYS5kaXN0LF9iPV9hLm1heFZhbHVlTGVuZ3RoLG1heFZhbHVlTGVuZ3RoPV9iPT09dm9pZCAwPzI1MDpfYjt2YXIgcHJlcGFyZWQ9X2Fzc2lnbih7fSxldmVudCk7aWYocHJlcGFyZWQuZW52aXJvbm1lbnQ9PT11bmRlZmluZWQmJmVudmlyb25tZW50IT09dW5kZWZpbmVkKXtwcmVwYXJlZC5lbnZpcm9ubWVudD1lbnZpcm9ubWVudDt9aWYocHJlcGFyZWQucmVsZWFzZT09PXVuZGVmaW5lZCYmcmVsZWFzZSE9PXVuZGVmaW5lZCl7cHJlcGFyZWQucmVsZWFzZT1yZWxlYXNlO31pZihwcmVwYXJlZC5kaXN0PT09dW5kZWZpbmVkJiZkaXN0IT09dW5kZWZpbmVkKXtwcmVwYXJlZC5kaXN0PWRpc3Q7fWlmKHByZXBhcmVkLm1lc3NhZ2Upe3ByZXBhcmVkLm1lc3NhZ2U9dHJ1bmNhdGUocHJlcGFyZWQubWVzc2FnZSxtYXhWYWx1ZUxlbmd0aCk7fXZhciBleGNlcHRpb249cHJlcGFyZWQuZXhjZXB0aW9uJiZwcmVwYXJlZC5leGNlcHRpb24udmFsdWVzJiZwcmVwYXJlZC5leGNlcHRpb24udmFsdWVzWzBdO2lmKGV4Y2VwdGlvbiYmZXhjZXB0aW9uLnZhbHVlKXtleGNlcHRpb24udmFsdWU9dHJ1bmNhdGUoZXhjZXB0aW9uLnZhbHVlLG1heFZhbHVlTGVuZ3RoKTt9dmFyIHJlcXVlc3Q9cHJlcGFyZWQucmVxdWVzdDtpZihyZXF1ZXN0JiZyZXF1ZXN0LnVybCl7cmVxdWVzdC51cmw9dHJ1bmNhdGUocmVxdWVzdC51cmwsbWF4VmFsdWVMZW5ndGgpO31pZihwcmVwYXJlZC5ldmVudF9pZD09PXVuZGVmaW5lZCl7cHJlcGFyZWQuZXZlbnRfaWQ9dXVpZDQoKTt9dGhpcy5fYWRkSW50ZWdyYXRpb25zKHByZXBhcmVkLnNkayk7Ly8gV2UgcHJlcGFyZSB0aGUgcmVzdWx0IGhlcmUgd2l0aCBhIHJlc29sdmVkIEV2ZW50LlxudmFyIHJlc3VsdD1TeW5jUHJvbWlzZS5yZXNvbHZlKHByZXBhcmVkKTsvLyBUaGlzIHNob3VsZCBiZSB0aGUgbGFzdCB0aGluZyBjYWxsZWQsIHNpbmNlIHdlIHdhbnQgdGhhdFxuLy8ge0BsaW5rIEh1Yi5hZGRFdmVudFByb2Nlc3Nvcn0gZ2V0cyB0aGUgZmluaXNoZWQgcHJlcGFyZWQgZXZlbnQuXG5pZihzY29wZSl7Ly8gSW4gY2FzZSB3ZSBoYXZlIGEgaHViIHdlIHJlYXNzaWduIGl0LlxucmVzdWx0PXNjb3BlLmFwcGx5VG9FdmVudChwcmVwYXJlZCxoaW50KTt9cmV0dXJuIHJlc3VsdDt9Oy8qKlxuICAgICAgICogVGhpcyBmdW5jdGlvbiBhZGRzIGFsbCB1c2VkIGludGVncmF0aW9ucyB0byB0aGUgU0RLIGluZm8gaW4gdGhlIGV2ZW50LlxuICAgICAgICogQHBhcmFtIHNka0luZm8gVGhlIHNka0luZm8gb2YgdGhlIGV2ZW50IHRoYXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBhbGwgaW50ZWdyYXRpb25zLlxuICAgICAgICovQmFzZUNsaWVudC5wcm90b3R5cGUuX2FkZEludGVncmF0aW9ucz1mdW5jdGlvbihzZGtJbmZvKXt2YXIgaW50ZWdyYXRpb25zQXJyYXk9T2JqZWN0LmtleXModGhpcy5faW50ZWdyYXRpb25zKTtpZihzZGtJbmZvJiZpbnRlZ3JhdGlvbnNBcnJheS5sZW5ndGg+MCl7c2RrSW5mby5pbnRlZ3JhdGlvbnM9aW50ZWdyYXRpb25zQXJyYXk7fX07LyoqXG4gICAgICAgKiBQcm9jZXNzZXMgYW4gZXZlbnQgKGVpdGhlciBlcnJvciBvciBtZXNzYWdlKSBhbmQgc2VuZHMgaXQgdG8gU2VudHJ5LlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgYWxzbyBhZGRzIGJyZWFkY3J1bWJzIGFuZCBjb250ZXh0IGluZm9ybWF0aW9uIHRvIHRoZSBldmVudC4gSG93ZXZlcixcbiAgICAgICAqIHBsYXRmb3JtIHNwZWNpZmljIG1ldGEgZGF0YSAoc3VjaCBhcyB0aGUgVXNlcidzIElQIGFkZHJlc3MpIG11c3QgYmUgYWRkZWRcbiAgICAgICAqIGJ5IHRoZSBTREsgaW1wbGVtZW50b3IuXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdG8gc2VuZCB0byBTZW50cnkuXG4gICAgICAgKiBAcGFyYW0gaGludCBNYXkgY29udGFpbiBhZGRpdGlvbmFsIGluZm9ybWFydGlvbiBhYm91dCB0aGUgb3JpZ2luYWwgZXhjZXB0aW9uLlxuICAgICAgICogQHBhcmFtIHNjb3BlIEEgc2NvcGUgY29udGFpbmluZyBldmVudCBtZXRhZGF0YS5cbiAgICAgICAqIEByZXR1cm5zIEEgU3luY1Byb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBldmVudCBvciByZWplY3RzIGluIGNhc2UgZXZlbnQgd2FzL3dpbGwgbm90IGJlIHNlbmQuXG4gICAgICAgKi9CYXNlQ2xpZW50LnByb3RvdHlwZS5fcHJvY2Vzc0V2ZW50PWZ1bmN0aW9uKGV2ZW50LGhpbnQsc2NvcGUpe3ZhciBfdGhpcz10aGlzO3ZhciBfYT10aGlzLmdldE9wdGlvbnMoKSxiZWZvcmVTZW5kPV9hLmJlZm9yZVNlbmQsc2FtcGxlUmF0ZT1fYS5zYW1wbGVSYXRlO2lmKCF0aGlzLl9pc0VuYWJsZWQoKSl7cmV0dXJuIFN5bmNQcm9taXNlLnJlamVjdCgnU0RLIG5vdCBlbmFibGVkLCB3aWxsIG5vdCBzZW5kIGV2ZW50LicpO30vLyAxLjAgPT09IDEwMCUgZXZlbnRzIGFyZSBzZW50XG4vLyAwLjAgPT09IDAlIGV2ZW50cyBhcmUgc2VudFxuaWYodHlwZW9mIHNhbXBsZVJhdGU9PT0nbnVtYmVyJyYmTWF0aC5yYW5kb20oKT5zYW1wbGVSYXRlKXtyZXR1cm4gU3luY1Byb21pc2UucmVqZWN0KCdUaGlzIGV2ZW50IGhhcyBiZWVuIHNhbXBsZWQsIHdpbGwgbm90IHNlbmQgZXZlbnQuJyk7fXJldHVybiBuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe190aGlzLl9wcmVwYXJlRXZlbnQoZXZlbnQsc2NvcGUsaGludCkudGhlbihmdW5jdGlvbihwcmVwYXJlZCl7aWYocHJlcGFyZWQ9PT1udWxsKXtyZWplY3QoJ0FuIGV2ZW50IHByb2Nlc3NvciByZXR1cm5lZCBudWxsLCB3aWxsIG5vdCBzZW5kIGV2ZW50LicpO3JldHVybjt9dmFyIGZpbmFsRXZlbnQ9cHJlcGFyZWQ7dHJ5e3ZhciBpc0ludGVybmFsRXhjZXB0aW9uPWhpbnQmJmhpbnQuZGF0YSYmaGludC5kYXRhLl9fc2VudHJ5X189PT10cnVlO2lmKGlzSW50ZXJuYWxFeGNlcHRpb258fCFiZWZvcmVTZW5kKXtfdGhpcy5fZ2V0QmFja2VuZCgpLnNlbmRFdmVudChmaW5hbEV2ZW50KTtyZXNvbHZlKGZpbmFsRXZlbnQpO3JldHVybjt9dmFyIGJlZm9yZVNlbmRSZXN1bHQ9YmVmb3JlU2VuZChwcmVwYXJlZCxoaW50KTsvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c3RyaWN0LXR5cGUtcHJlZGljYXRlc1xuaWYodHlwZW9mIGJlZm9yZVNlbmRSZXN1bHQ9PT0ndW5kZWZpbmVkJyl7bG9nZ2VyJDEuZXJyb3IoJ2BiZWZvcmVTZW5kYCBtZXRob2QgaGFzIHRvIHJldHVybiBgbnVsbGAgb3IgYSB2YWxpZCBldmVudC4nKTt9ZWxzZSBpZihpc1RoZW5hYmxlKGJlZm9yZVNlbmRSZXN1bHQpKXtfdGhpcy5faGFuZGxlQXN5bmNCZWZvcmVTZW5kKGJlZm9yZVNlbmRSZXN1bHQscmVzb2x2ZSxyZWplY3QpO31lbHNle2ZpbmFsRXZlbnQ9YmVmb3JlU2VuZFJlc3VsdDtpZihmaW5hbEV2ZW50PT09bnVsbCl7bG9nZ2VyJDEubG9nKCdgYmVmb3JlU2VuZGAgcmV0dXJuZWQgYG51bGxgLCB3aWxsIG5vdCBzZW5kIGV2ZW50LicpO3Jlc29sdmUobnVsbCk7cmV0dXJuO30vLyBGcm9tIGhlcmUgb24gd2UgYXJlIHJlYWxseSBhc3luY1xuX3RoaXMuX2dldEJhY2tlbmQoKS5zZW5kRXZlbnQoZmluYWxFdmVudCk7cmVzb2x2ZShmaW5hbEV2ZW50KTt9fWNhdGNoKGV4Y2VwdGlvbil7X3RoaXMuY2FwdHVyZUV4Y2VwdGlvbihleGNlcHRpb24se2RhdGE6e19fc2VudHJ5X186dHJ1ZX0sb3JpZ2luYWxFeGNlcHRpb246ZXhjZXB0aW9ufSk7cmVqZWN0KCdgYmVmb3JlU2VuZGAgdGhyZXcgYW4gZXJyb3IsIHdpbGwgbm90IHNlbmQgZXZlbnQuJyk7fX0pLnRoZW4obnVsbCxmdW5jdGlvbigpe3JlamVjdCgnYGJlZm9yZVNlbmRgIHRocmV3IGFuIGVycm9yLCB3aWxsIG5vdCBzZW5kIGV2ZW50LicpO30pO30pO307LyoqXG4gICAgICAgKiBSZXNvbHZlcyBiZWZvcmUgc2VuZCBQcm9taXNlIGFuZCBjYWxscyByZXNvbHZlL3JlamVjdCBvbiBwYXJlbnQgU3luY1Byb21pc2UuXG4gICAgICAgKi9CYXNlQ2xpZW50LnByb3RvdHlwZS5faGFuZGxlQXN5bmNCZWZvcmVTZW5kPWZ1bmN0aW9uKGJlZm9yZVNlbmQscmVzb2x2ZSxyZWplY3Qpe3ZhciBfdGhpcz10aGlzO2JlZm9yZVNlbmQudGhlbihmdW5jdGlvbihwcm9jZXNzZWRFdmVudCl7aWYocHJvY2Vzc2VkRXZlbnQ9PT1udWxsKXtyZWplY3QoJ2BiZWZvcmVTZW5kYCByZXR1cm5lZCBgbnVsbGAsIHdpbGwgbm90IHNlbmQgZXZlbnQuJyk7cmV0dXJuO30vLyBGcm9tIGhlcmUgb24gd2UgYXJlIHJlYWxseSBhc3luY1xuX3RoaXMuX2dldEJhY2tlbmQoKS5zZW5kRXZlbnQocHJvY2Vzc2VkRXZlbnQpO3Jlc29sdmUocHJvY2Vzc2VkRXZlbnQpO30pLnRoZW4obnVsbCxmdW5jdGlvbihlKXtyZWplY3QoXCJiZWZvcmVTZW5kIHJlamVjdGVkIHdpdGggXCIrZSk7fSk7fTtyZXR1cm4gQmFzZUNsaWVudDt9KCk7LyoqIE5vb3AgdHJhbnNwb3J0ICovdmFyIE5vb3BUcmFuc3BvcnQ9LyoqIEBjbGFzcyAqL2Z1bmN0aW9uKCl7ZnVuY3Rpb24gTm9vcFRyYW5zcG9ydCgpe30vKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9Ob29wVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kRXZlbnQ9ZnVuY3Rpb24oXyl7cmV0dXJuIFN5bmNQcm9taXNlLnJlc29sdmUoe3JlYXNvbjpcIk5vb3BUcmFuc3BvcnQ6IEV2ZW50IGhhcyBiZWVuIHNraXBwZWQgYmVjYXVzZSBubyBEc24gaXMgY29uZmlndXJlZC5cIixzdGF0dXM6U3RhdHVzLlNraXBwZWR9KTt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL05vb3BUcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlPWZ1bmN0aW9uKF8pe3JldHVybiBTeW5jUHJvbWlzZS5yZXNvbHZlKHRydWUpO307cmV0dXJuIE5vb3BUcmFuc3BvcnQ7fSgpOy8qKlxuICAgKiBUaGlzIGlzIHRoZSBiYXNlIGltcGxlbWVudGlvbiBvZiBhIEJhY2tlbmQuXG4gICAqIEBoaWRkZW5cbiAgICovdmFyIEJhc2VCYWNrZW5kPS8qKiBAY2xhc3MgKi9mdW5jdGlvbigpey8qKiBDcmVhdGVzIGEgbmV3IGJhY2tlbmQgaW5zdGFuY2UuICovZnVuY3Rpb24gQmFzZUJhY2tlbmQob3B0aW9ucyl7dGhpcy5fb3B0aW9ucz1vcHRpb25zO2lmKCF0aGlzLl9vcHRpb25zLmRzbil7bG9nZ2VyJDEud2FybignTm8gRFNOIHByb3ZpZGVkLCBiYWNrZW5kIHdpbGwgbm90IGRvIGFueXRoaW5nLicpO310aGlzLl90cmFuc3BvcnQ9dGhpcy5fc2V0dXBUcmFuc3BvcnQoKTt9LyoqXG4gICAgICAgKiBTZXRzIHVwIHRoZSB0cmFuc3BvcnQgc28gaXQgY2FuIGJlIHVzZWQgbGF0ZXIgdG8gc2VuZCByZXF1ZXN0cy5cbiAgICAgICAqL0Jhc2VCYWNrZW5kLnByb3RvdHlwZS5fc2V0dXBUcmFuc3BvcnQ9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IE5vb3BUcmFuc3BvcnQoKTt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL0Jhc2VCYWNrZW5kLnByb3RvdHlwZS5ldmVudEZyb21FeGNlcHRpb249ZnVuY3Rpb24oX2V4Y2VwdGlvbixfaGludCl7dGhyb3cgbmV3IFNlbnRyeUVycm9yKCdCYWNrZW5kIGhhcyB0byBpbXBsZW1lbnQgYGV2ZW50RnJvbUV4Y2VwdGlvbmAgbWV0aG9kJyk7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9CYXNlQmFja2VuZC5wcm90b3R5cGUuZXZlbnRGcm9tTWVzc2FnZT1mdW5jdGlvbihfbWVzc2FnZSxfbGV2ZWwsX2hpbnQpe3Rocm93IG5ldyBTZW50cnlFcnJvcignQmFja2VuZCBoYXMgdG8gaW1wbGVtZW50IGBldmVudEZyb21NZXNzYWdlYCBtZXRob2QnKTt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL0Jhc2VCYWNrZW5kLnByb3RvdHlwZS5zZW5kRXZlbnQ9ZnVuY3Rpb24oZXZlbnQpe3RoaXMuX3RyYW5zcG9ydC5zZW5kRXZlbnQoZXZlbnQpLnRoZW4obnVsbCxmdW5jdGlvbihyZWFzb24pe2xvZ2dlciQxLmVycm9yKFwiRXJyb3Igd2hpbGUgc2VuZGluZyBldmVudDogXCIrcmVhc29uKTt9KTt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL0Jhc2VCYWNrZW5kLnByb3RvdHlwZS5nZXRUcmFuc3BvcnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdHJhbnNwb3J0O307cmV0dXJuIEJhc2VCYWNrZW5kO30oKTsvKipcbiAgICogSW50ZXJuYWwgZnVuY3Rpb24gdG8gY3JlYXRlIGEgbmV3IFNESyBjbGllbnQgaW5zdGFuY2UuIFRoZSBjbGllbnQgaXNcbiAgICogaW5zdGFsbGVkIGFuZCB0aGVuIGJvdW5kIHRvIHRoZSBjdXJyZW50IHNjb3BlLlxuICAgKlxuICAgKiBAcGFyYW0gY2xpZW50Q2xhc3MgVGhlIGNsaWVudCBjbGFzcyB0byBpbnN0YW5jaWF0ZS5cbiAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyB0byBwYXNzIHRvIHRoZSBjbGllbnQuXG4gICAqL2Z1bmN0aW9uIGluaXRBbmRCaW5kKGNsaWVudENsYXNzLG9wdGlvbnMpe2lmKG9wdGlvbnMuZGVidWc9PT10cnVlKXtsb2dnZXIkMS5lbmFibGUoKTt9Z2V0Q3VycmVudEh1YigpLmJpbmRDbGllbnQobmV3IGNsaWVudENsYXNzKG9wdGlvbnMpKTt9dmFyIG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZzsvKiogUGF0Y2ggdG9TdHJpbmcgY2FsbHMgdG8gcmV0dXJuIHByb3BlciBuYW1lIGZvciB3cmFwcGVkIGZ1bmN0aW9ucyAqL3ZhciBGdW5jdGlvblRvU3RyaW5nPS8qKiBAY2xhc3MgKi9mdW5jdGlvbigpe2Z1bmN0aW9uIEZ1bmN0aW9uVG9TdHJpbmcoKXsvKipcbiAgICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgICAqL3RoaXMubmFtZT1GdW5jdGlvblRvU3RyaW5nLmlkO30vKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9GdW5jdGlvblRvU3RyaW5nLnByb3RvdHlwZS5zZXR1cE9uY2U9ZnVuY3Rpb24oKXtvcmlnaW5hbEZ1bmN0aW9uVG9TdHJpbmc9RnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO0Z1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBhcmdzPVtdO2Zvcih2YXIgX2k9MDtfaTxhcmd1bWVudHMubGVuZ3RoO19pKyspe2FyZ3NbX2ldPWFyZ3VtZW50c1tfaV07fXZhciBjb250ZXh0PXRoaXMuX19zZW50cnlfXz90aGlzLl9fc2VudHJ5X29yaWdpbmFsX186dGhpczsvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW5zYWZlLWFueVxucmV0dXJuIG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZy5hcHBseShjb250ZXh0LGFyZ3MpO307fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9GdW5jdGlvblRvU3RyaW5nLmlkPSdGdW5jdGlvblRvU3RyaW5nJztyZXR1cm4gRnVuY3Rpb25Ub1N0cmluZzt9KCk7Ly8gXCJTY3JpcHQgZXJyb3IuXCIgaXMgaGFyZCBjb2RlZCBpbnRvIGJyb3dzZXJzIGZvciBlcnJvcnMgdGhhdCBpdCBjYW4ndCByZWFkLlxuLy8gdGhpcyBpcyB0aGUgcmVzdWx0IG9mIGEgc2NyaXB0IGJlaW5nIHB1bGxlZCBpbiBmcm9tIGFuIGV4dGVybmFsIGRvbWFpbiBhbmQgQ09SUy5cbnZhciBERUZBVUxUX0lHTk9SRV9FUlJPUlM9Wy9eU2NyaXB0IGVycm9yXFwuPyQvLC9eSmF2YXNjcmlwdCBlcnJvcjogU2NyaXB0IGVycm9yXFwuPyBvbiBsaW5lIDAkL107LyoqIEluYm91bmQgZmlsdGVycyBjb25maWd1cmFibGUgYnkgdGhlIHVzZXIgKi92YXIgSW5ib3VuZEZpbHRlcnM9LyoqIEBjbGFzcyAqL2Z1bmN0aW9uKCl7ZnVuY3Rpb24gSW5ib3VuZEZpbHRlcnMoX29wdGlvbnMpe2lmKF9vcHRpb25zPT09dm9pZCAwKXtfb3B0aW9ucz17fTt9dGhpcy5fb3B0aW9ucz1fb3B0aW9uczsvKipcbiAgICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgICAqL3RoaXMubmFtZT1JbmJvdW5kRmlsdGVycy5pZDt9LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLnNldHVwT25jZT1mdW5jdGlvbigpe2FkZEdsb2JhbEV2ZW50UHJvY2Vzc29yKGZ1bmN0aW9uKGV2ZW50KXt2YXIgaHViPWdldEN1cnJlbnRIdWIoKTtpZighaHViKXtyZXR1cm4gZXZlbnQ7fXZhciBzZWxmPWh1Yi5nZXRJbnRlZ3JhdGlvbihJbmJvdW5kRmlsdGVycyk7aWYoc2VsZil7dmFyIGNsaWVudD1odWIuZ2V0Q2xpZW50KCk7dmFyIGNsaWVudE9wdGlvbnM9Y2xpZW50P2NsaWVudC5nZXRPcHRpb25zKCk6e307dmFyIG9wdGlvbnM9c2VsZi5fbWVyZ2VPcHRpb25zKGNsaWVudE9wdGlvbnMpO2lmKHNlbGYuX3Nob3VsZERyb3BFdmVudChldmVudCxvcHRpb25zKSl7cmV0dXJuIG51bGw7fX1yZXR1cm4gZXZlbnQ7fSk7fTsvKiogSlNEb2MgKi9JbmJvdW5kRmlsdGVycy5wcm90b3R5cGUuX3Nob3VsZERyb3BFdmVudD1mdW5jdGlvbihldmVudCxvcHRpb25zKXtpZih0aGlzLl9pc1NlbnRyeUVycm9yKGV2ZW50LG9wdGlvbnMpKXtsb2dnZXIkMS53YXJuKFwiRXZlbnQgZHJvcHBlZCBkdWUgdG8gYmVpbmcgaW50ZXJuYWwgU2VudHJ5IEVycm9yLlxcbkV2ZW50OiBcIitnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50KSk7cmV0dXJuIHRydWU7fWlmKHRoaXMuX2lzSWdub3JlZEVycm9yKGV2ZW50LG9wdGlvbnMpKXtsb2dnZXIkMS53YXJuKFwiRXZlbnQgZHJvcHBlZCBkdWUgdG8gYmVpbmcgbWF0Y2hlZCBieSBgaWdub3JlRXJyb3JzYCBvcHRpb24uXFxuRXZlbnQ6IFwiK2dldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpKTtyZXR1cm4gdHJ1ZTt9aWYodGhpcy5faXNCbGFja2xpc3RlZFVybChldmVudCxvcHRpb25zKSl7bG9nZ2VyJDEud2FybihcIkV2ZW50IGRyb3BwZWQgZHVlIHRvIGJlaW5nIG1hdGNoZWQgYnkgYGJsYWNrbGlzdFVybHNgIG9wdGlvbi5cXG5FdmVudDogXCIrZ2V0RXZlbnREZXNjcmlwdGlvbihldmVudCkrXCIuXFxuVXJsOiBcIit0aGlzLl9nZXRFdmVudEZpbHRlclVybChldmVudCkpO3JldHVybiB0cnVlO31pZighdGhpcy5faXNXaGl0ZWxpc3RlZFVybChldmVudCxvcHRpb25zKSl7bG9nZ2VyJDEud2FybihcIkV2ZW50IGRyb3BwZWQgZHVlIHRvIG5vdCBiZWluZyBtYXRjaGVkIGJ5IGB3aGl0ZWxpc3RVcmxzYCBvcHRpb24uXFxuRXZlbnQ6IFwiK2dldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpK1wiLlxcblVybDogXCIrdGhpcy5fZ2V0RXZlbnRGaWx0ZXJVcmwoZXZlbnQpKTtyZXR1cm4gdHJ1ZTt9cmV0dXJuIGZhbHNlO307LyoqIEpTRG9jICovSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLl9pc1NlbnRyeUVycm9yPWZ1bmN0aW9uKGV2ZW50LG9wdGlvbnMpe2lmKG9wdGlvbnM9PT12b2lkIDApe29wdGlvbnM9e307fWlmKCFvcHRpb25zLmlnbm9yZUludGVybmFsKXtyZXR1cm4gZmFsc2U7fXRyeXtyZXR1cm4gZXZlbnQmJmV2ZW50LmV4Y2VwdGlvbiYmZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyYmZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXSYmZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS50eXBlPT09J1NlbnRyeUVycm9yJ3x8ZmFsc2U7fWNhdGNoKF9vTyl7cmV0dXJuIGZhbHNlO319Oy8qKiBKU0RvYyAqL0luYm91bmRGaWx0ZXJzLnByb3RvdHlwZS5faXNJZ25vcmVkRXJyb3I9ZnVuY3Rpb24oZXZlbnQsb3B0aW9ucyl7aWYob3B0aW9ucz09PXZvaWQgMCl7b3B0aW9ucz17fTt9aWYoIW9wdGlvbnMuaWdub3JlRXJyb3JzfHwhb3B0aW9ucy5pZ25vcmVFcnJvcnMubGVuZ3RoKXtyZXR1cm4gZmFsc2U7fXJldHVybiB0aGlzLl9nZXRQb3NzaWJsZUV2ZW50TWVzc2FnZXMoZXZlbnQpLnNvbWUoZnVuY3Rpb24obWVzc2FnZSl7Ly8gTm90IHN1cmUgd2h5IFR5cGVTY3JpcHQgY29tcGxhaW5zIGhlcmUuLi5cbnJldHVybiBvcHRpb25zLmlnbm9yZUVycm9ycy5zb21lKGZ1bmN0aW9uKHBhdHRlcm4pe3JldHVybiBpc01hdGNoaW5nUGF0dGVybihtZXNzYWdlLHBhdHRlcm4pO30pO30pO307LyoqIEpTRG9jICovSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLl9pc0JsYWNrbGlzdGVkVXJsPWZ1bmN0aW9uKGV2ZW50LG9wdGlvbnMpe2lmKG9wdGlvbnM9PT12b2lkIDApe29wdGlvbnM9e307fS8vIFRPRE86IFVzZSBHbG9iIGluc3RlYWQ/XG5pZighb3B0aW9ucy5ibGFja2xpc3RVcmxzfHwhb3B0aW9ucy5ibGFja2xpc3RVcmxzLmxlbmd0aCl7cmV0dXJuIGZhbHNlO312YXIgdXJsPXRoaXMuX2dldEV2ZW50RmlsdGVyVXJsKGV2ZW50KTtyZXR1cm4hdXJsP2ZhbHNlOm9wdGlvbnMuYmxhY2tsaXN0VXJscy5zb21lKGZ1bmN0aW9uKHBhdHRlcm4pe3JldHVybiBpc01hdGNoaW5nUGF0dGVybih1cmwscGF0dGVybik7fSk7fTsvKiogSlNEb2MgKi9JbmJvdW5kRmlsdGVycy5wcm90b3R5cGUuX2lzV2hpdGVsaXN0ZWRVcmw9ZnVuY3Rpb24oZXZlbnQsb3B0aW9ucyl7aWYob3B0aW9ucz09PXZvaWQgMCl7b3B0aW9ucz17fTt9Ly8gVE9ETzogVXNlIEdsb2IgaW5zdGVhZD9cbmlmKCFvcHRpb25zLndoaXRlbGlzdFVybHN8fCFvcHRpb25zLndoaXRlbGlzdFVybHMubGVuZ3RoKXtyZXR1cm4gdHJ1ZTt9dmFyIHVybD10aGlzLl9nZXRFdmVudEZpbHRlclVybChldmVudCk7cmV0dXJuIXVybD90cnVlOm9wdGlvbnMud2hpdGVsaXN0VXJscy5zb21lKGZ1bmN0aW9uKHBhdHRlcm4pe3JldHVybiBpc01hdGNoaW5nUGF0dGVybih1cmwscGF0dGVybik7fSk7fTsvKiogSlNEb2MgKi9JbmJvdW5kRmlsdGVycy5wcm90b3R5cGUuX21lcmdlT3B0aW9ucz1mdW5jdGlvbihjbGllbnRPcHRpb25zKXtpZihjbGllbnRPcHRpb25zPT09dm9pZCAwKXtjbGllbnRPcHRpb25zPXt9O31yZXR1cm57YmxhY2tsaXN0VXJsczpfX3NwcmVhZCh0aGlzLl9vcHRpb25zLmJsYWNrbGlzdFVybHN8fFtdLGNsaWVudE9wdGlvbnMuYmxhY2tsaXN0VXJsc3x8W10pLGlnbm9yZUVycm9yczpfX3NwcmVhZCh0aGlzLl9vcHRpb25zLmlnbm9yZUVycm9yc3x8W10sY2xpZW50T3B0aW9ucy5pZ25vcmVFcnJvcnN8fFtdLERFRkFVTFRfSUdOT1JFX0VSUk9SUyksaWdub3JlSW50ZXJuYWw6dHlwZW9mIHRoaXMuX29wdGlvbnMuaWdub3JlSW50ZXJuYWwhPT0ndW5kZWZpbmVkJz90aGlzLl9vcHRpb25zLmlnbm9yZUludGVybmFsOnRydWUsd2hpdGVsaXN0VXJsczpfX3NwcmVhZCh0aGlzLl9vcHRpb25zLndoaXRlbGlzdFVybHN8fFtdLGNsaWVudE9wdGlvbnMud2hpdGVsaXN0VXJsc3x8W10pfTt9Oy8qKiBKU0RvYyAqL0luYm91bmRGaWx0ZXJzLnByb3RvdHlwZS5fZ2V0UG9zc2libGVFdmVudE1lc3NhZ2VzPWZ1bmN0aW9uKGV2ZW50KXtpZihldmVudC5tZXNzYWdlKXtyZXR1cm5bZXZlbnQubWVzc2FnZV07fWlmKGV2ZW50LmV4Y2VwdGlvbil7dHJ5e3ZhciBfYT1ldmVudC5leGNlcHRpb24udmFsdWVzJiZldmVudC5leGNlcHRpb24udmFsdWVzWzBdfHx7fSxfYj1fYS50eXBlLHR5cGU9X2I9PT12b2lkIDA/Jyc6X2IsX2M9X2EudmFsdWUsdmFsdWU9X2M9PT12b2lkIDA/Jyc6X2M7cmV0dXJuW1wiXCIrdmFsdWUsdHlwZStcIjogXCIrdmFsdWVdO31jYXRjaChvTyl7bG9nZ2VyJDEuZXJyb3IoXCJDYW5ub3QgZXh0cmFjdCBtZXNzYWdlIGZvciBldmVudCBcIitnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50KSk7cmV0dXJuW107fX1yZXR1cm5bXTt9Oy8qKiBKU0RvYyAqL0luYm91bmRGaWx0ZXJzLnByb3RvdHlwZS5fZ2V0RXZlbnRGaWx0ZXJVcmw9ZnVuY3Rpb24oZXZlbnQpe3RyeXtpZihldmVudC5zdGFja3RyYWNlKXt2YXIgZnJhbWVzXzE9ZXZlbnQuc3RhY2t0cmFjZS5mcmFtZXM7cmV0dXJuIGZyYW1lc18xJiZmcmFtZXNfMVtmcmFtZXNfMS5sZW5ndGgtMV0uZmlsZW5hbWV8fG51bGw7fWlmKGV2ZW50LmV4Y2VwdGlvbil7dmFyIGZyYW1lc18yPWV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMmJmV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0uc3RhY2t0cmFjZSYmZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5zdGFja3RyYWNlLmZyYW1lcztyZXR1cm4gZnJhbWVzXzImJmZyYW1lc18yW2ZyYW1lc18yLmxlbmd0aC0xXS5maWxlbmFtZXx8bnVsbDt9cmV0dXJuIG51bGw7fWNhdGNoKG9PKXtsb2dnZXIkMS5lcnJvcihcIkNhbm5vdCBleHRyYWN0IHVybCBmb3IgZXZlbnQgXCIrZ2V0RXZlbnREZXNjcmlwdGlvbihldmVudCkpO3JldHVybiBudWxsO319Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL0luYm91bmRGaWx0ZXJzLmlkPSdJbmJvdW5kRmlsdGVycyc7cmV0dXJuIEluYm91bmRGaWx0ZXJzO30oKTt2YXIgQ29yZUludGVncmF0aW9ucz0vKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsRnVuY3Rpb25Ub1N0cmluZzpGdW5jdGlvblRvU3RyaW5nLEluYm91bmRGaWx0ZXJzOkluYm91bmRGaWx0ZXJzfSk7Ly8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzXG4vLyBnbG9iYWwgcmVmZXJlbmNlIHRvIHNsaWNlXG52YXIgVU5LTk9XTl9GVU5DVElPTj0nPyc7Ly8gQ2hyb21pdW0gYmFzZWQgYnJvd3NlcnM6IENocm9tZSwgQnJhdmUsIG5ldyBPcGVyYSwgbmV3IEVkZ2VcbnZhciBjaHJvbWU9L15cXHMqYXQgKD86KC4qPykgP1xcKCk/KCg/OmZpbGV8aHR0cHM/fGJsb2J8Y2hyb21lLWV4dGVuc2lvbnxuYXRpdmV8ZXZhbHx3ZWJwYWNrfDxhbm9ueW1vdXM+fFstYS16XSs6fFxcLykuKj8pKD86OihcXGQrKSk/KD86OihcXGQrKSk/XFwpP1xccyokL2k7Ly8gZ2Vja28gcmVnZXg6IGAoPzpidW5kbGV8XFxkK1xcLmpzKWA6IGBidW5kbGVgIGlzIGZvciByZWFjdCBuYXRpdmUsIGBcXGQrXFwuanNgIGFsc28gYnV0IHNwZWNpZmljYWxseSBmb3IgcmFtIGJ1bmRsZXMgYmVjYXVzZSBpdFxuLy8gZ2VuZXJhdGVzIGZpbGVuYW1lcyB3aXRob3V0IGEgcHJlZml4IGxpa2UgYGZpbGU6Ly9gIHRoZSBmaWxlbmFtZXMgaW4gdGhlIHN0YWNrdHJhY2UgYXJlIGp1c3QgNDIuanNcbi8vIFdlIG5lZWQgdGhpcyBzcGVjaWZpYyBjYXNlIGZvciBub3cgYmVjYXVzZSB3ZSB3YW50IG5vIG90aGVyIHJlZ2V4IHRvIG1hdGNoLlxudmFyIGdlY2tvPS9eXFxzKiguKj8pKD86XFwoKC4qPylcXCkpPyg/Ol58QCk/KCg/OmZpbGV8aHR0cHM/fGJsb2J8Y2hyb21lfHdlYnBhY2t8cmVzb3VyY2V8bW96LWV4dGVuc2lvbikuKj86XFwvLio/fFxcW25hdGl2ZSBjb2RlXFxdfFteQF0qKD86YnVuZGxlfFxcZCtcXC5qcykpKD86OihcXGQrKSk/KD86OihcXGQrKSk/XFxzKiQvaTt2YXIgd2luanM9L15cXHMqYXQgKD86KCg/OlxcW29iamVjdCBvYmplY3RcXF0pPy4rKSApP1xcKD8oKD86ZmlsZXxtcy1hcHB4fGh0dHBzP3x3ZWJwYWNrfGJsb2IpOi4qPyk6KFxcZCspKD86OihcXGQrKSk/XFwpP1xccyokL2k7dmFyIGdlY2tvRXZhbD0vKFxcUyspIGxpbmUgKFxcZCspKD86ID4gZXZhbCBsaW5lIFxcZCspKiA+IGV2YWwvaTt2YXIgY2hyb21lRXZhbD0vXFwoKFxcUyopKD86OihcXGQrKSkoPzo6KFxcZCspKVxcKS87LyoqIEpTRG9jICovZnVuY3Rpb24gY29tcHV0ZVN0YWNrVHJhY2UoZXgpey8vIHRzbGludDpkaXNhYmxlOm5vLXVuc2FmZS1hbnlcbnZhciBzdGFjaz1udWxsO3ZhciBwb3BTaXplPWV4JiZleC5mcmFtZXNUb1BvcDt0cnl7Ly8gVGhpcyBtdXN0IGJlIHRyaWVkIGZpcnN0IGJlY2F1c2UgT3BlcmEgMTAgKmRlc3Ryb3lzKlxuLy8gaXRzIHN0YWNrdHJhY2UgcHJvcGVydHkgaWYgeW91IHRyeSB0byBhY2Nlc3MgdGhlIHN0YWNrXG4vLyBwcm9wZXJ0eSBmaXJzdCEhXG5zdGFjaz1jb21wdXRlU3RhY2tUcmFjZUZyb21TdGFja3RyYWNlUHJvcChleCk7aWYoc3RhY2spe3JldHVybiBwb3BGcmFtZXMoc3RhY2sscG9wU2l6ZSk7fX1jYXRjaChlKXsvLyBuby1lbXB0eVxufXRyeXtzdGFjaz1jb21wdXRlU3RhY2tUcmFjZUZyb21TdGFja1Byb3AoZXgpO2lmKHN0YWNrKXtyZXR1cm4gcG9wRnJhbWVzKHN0YWNrLHBvcFNpemUpO319Y2F0Y2goZSl7Ly8gbm8tZW1wdHlcbn1yZXR1cm57bWVzc2FnZTpleHRyYWN0TWVzc2FnZShleCksbmFtZTpleCYmZXgubmFtZSxzdGFjazpbXSxmYWlsZWQ6dHJ1ZX07fS8qKiBKU0RvYyAqLyAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y3ljbG9tYXRpYy1jb21wbGV4aXR5XG5mdW5jdGlvbiBjb21wdXRlU3RhY2tUcmFjZUZyb21TdGFja1Byb3AoZXgpey8vIHRzbGludDpkaXNhYmxlOm5vLWNvbmRpdGlvbmFsLWFzc2lnbm1lbnRcbmlmKCFleHx8IWV4LnN0YWNrKXtyZXR1cm4gbnVsbDt9dmFyIHN0YWNrPVtdO3ZhciBsaW5lcz1leC5zdGFjay5zcGxpdCgnXFxuJyk7dmFyIGlzRXZhbDt2YXIgc3VibWF0Y2g7dmFyIHBhcnRzO3ZhciBlbGVtZW50O2Zvcih2YXIgaT0wO2k8bGluZXMubGVuZ3RoOysraSl7aWYocGFydHM9Y2hyb21lLmV4ZWMobGluZXNbaV0pKXt2YXIgaXNOYXRpdmU9cGFydHNbMl0mJnBhcnRzWzJdLmluZGV4T2YoJ25hdGl2ZScpPT09MDsvLyBzdGFydCBvZiBsaW5lXG5pc0V2YWw9cGFydHNbMl0mJnBhcnRzWzJdLmluZGV4T2YoJ2V2YWwnKT09PTA7Ly8gc3RhcnQgb2YgbGluZVxuaWYoaXNFdmFsJiYoc3VibWF0Y2g9Y2hyb21lRXZhbC5leGVjKHBhcnRzWzJdKSkpey8vIHRocm93IG91dCBldmFsIGxpbmUvY29sdW1uIGFuZCB1c2UgdG9wLW1vc3QgbGluZS9jb2x1bW4gbnVtYmVyXG5wYXJ0c1syXT1zdWJtYXRjaFsxXTsvLyB1cmxcbnBhcnRzWzNdPXN1Ym1hdGNoWzJdOy8vIGxpbmVcbnBhcnRzWzRdPXN1Ym1hdGNoWzNdOy8vIGNvbHVtblxufWVsZW1lbnQ9e3VybDpwYXJ0c1syXSxmdW5jOnBhcnRzWzFdfHxVTktOT1dOX0ZVTkNUSU9OLGFyZ3M6aXNOYXRpdmU/W3BhcnRzWzJdXTpbXSxsaW5lOnBhcnRzWzNdPytwYXJ0c1szXTpudWxsLGNvbHVtbjpwYXJ0c1s0XT8rcGFydHNbNF06bnVsbH07fWVsc2UgaWYocGFydHM9d2luanMuZXhlYyhsaW5lc1tpXSkpe2VsZW1lbnQ9e3VybDpwYXJ0c1syXSxmdW5jOnBhcnRzWzFdfHxVTktOT1dOX0ZVTkNUSU9OLGFyZ3M6W10sbGluZTorcGFydHNbM10sY29sdW1uOnBhcnRzWzRdPytwYXJ0c1s0XTpudWxsfTt9ZWxzZSBpZihwYXJ0cz1nZWNrby5leGVjKGxpbmVzW2ldKSl7aXNFdmFsPXBhcnRzWzNdJiZwYXJ0c1szXS5pbmRleE9mKCcgPiBldmFsJyk+LTE7aWYoaXNFdmFsJiYoc3VibWF0Y2g9Z2Vja29FdmFsLmV4ZWMocGFydHNbM10pKSl7Ly8gdGhyb3cgb3V0IGV2YWwgbGluZS9jb2x1bW4gYW5kIHVzZSB0b3AtbW9zdCBsaW5lIG51bWJlclxucGFydHNbMV09cGFydHNbMV18fFwiZXZhbFwiO3BhcnRzWzNdPXN1Ym1hdGNoWzFdO3BhcnRzWzRdPXN1Ym1hdGNoWzJdO3BhcnRzWzVdPScnOy8vIG5vIGNvbHVtbiB3aGVuIGV2YWxcbn1lbHNlIGlmKGk9PT0wJiYhcGFydHNbNV0mJmV4LmNvbHVtbk51bWJlciE9PXZvaWQgMCl7Ly8gRmlyZUZveCB1c2VzIHRoaXMgYXdlc29tZSBjb2x1bW5OdW1iZXIgcHJvcGVydHkgZm9yIGl0cyB0b3AgZnJhbWVcbi8vIEFsc28gbm90ZSwgRmlyZWZveCdzIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZCBhbmQgZXZlcnl0aGluZyBlbHNlIGV4cGVjdHMgMS1iYXNlZCxcbi8vIHNvIGFkZGluZyAxXG4vLyBOT1RFOiB0aGlzIGhhY2sgZG9lc24ndCB3b3JrIGlmIHRvcC1tb3N0IGZyYW1lIGlzIGV2YWxcbnN0YWNrWzBdLmNvbHVtbj1leC5jb2x1bW5OdW1iZXIrMTt9ZWxlbWVudD17dXJsOnBhcnRzWzNdLGZ1bmM6cGFydHNbMV18fFVOS05PV05fRlVOQ1RJT04sYXJnczpwYXJ0c1syXT9wYXJ0c1syXS5zcGxpdCgnLCcpOltdLGxpbmU6cGFydHNbNF0/K3BhcnRzWzRdOm51bGwsY29sdW1uOnBhcnRzWzVdPytwYXJ0c1s1XTpudWxsfTt9ZWxzZXtjb250aW51ZTt9aWYoIWVsZW1lbnQuZnVuYyYmZWxlbWVudC5saW5lKXtlbGVtZW50LmZ1bmM9VU5LTk9XTl9GVU5DVElPTjt9c3RhY2sucHVzaChlbGVtZW50KTt9aWYoIXN0YWNrLmxlbmd0aCl7cmV0dXJuIG51bGw7fXJldHVybnttZXNzYWdlOmV4dHJhY3RNZXNzYWdlKGV4KSxuYW1lOmV4Lm5hbWUsc3RhY2s6c3RhY2t9O30vKiogSlNEb2MgKi9mdW5jdGlvbiBjb21wdXRlU3RhY2tUcmFjZUZyb21TdGFja3RyYWNlUHJvcChleCl7aWYoIWV4fHwhZXguc3RhY2t0cmFjZSl7cmV0dXJuIG51bGw7fS8vIEFjY2VzcyBhbmQgc3RvcmUgdGhlIHN0YWNrdHJhY2UgcHJvcGVydHkgYmVmb3JlIGRvaW5nIEFOWVRISU5HXG4vLyBlbHNlIHRvIGl0IGJlY2F1c2UgT3BlcmEgaXMgbm90IHZlcnkgZ29vZCBhdCBwcm92aWRpbmcgaXRcbi8vIHJlbGlhYmx5IGluIG90aGVyIGNpcmN1bXN0YW5jZXMuXG52YXIgc3RhY2t0cmFjZT1leC5zdGFja3RyYWNlO3ZhciBvcGVyYTEwUmVnZXg9LyBsaW5lIChcXGQrKS4qc2NyaXB0ICg/OmluICk/KFxcUyspKD86OiBpbiBmdW5jdGlvbiAoXFxTKykpPyQvaTt2YXIgb3BlcmExMVJlZ2V4PS8gbGluZSAoXFxkKyksIGNvbHVtbiAoXFxkKylcXHMqKD86aW4gKD86PGFub255bW91cyBmdW5jdGlvbjogKFtePl0rKT58KFteXFwpXSspKVxcKCguKilcXCkpPyBpbiAoLiopOlxccyokL2k7dmFyIGxpbmVzPXN0YWNrdHJhY2Uuc3BsaXQoJ1xcbicpO3ZhciBzdGFjaz1bXTt2YXIgcGFydHM7Zm9yKHZhciBsaW5lPTA7bGluZTxsaW5lcy5sZW5ndGg7bGluZSs9Mil7Ly8gdHNsaW50OmRpc2FibGU6bm8tY29uZGl0aW9uYWwtYXNzaWdubWVudFxudmFyIGVsZW1lbnQ9bnVsbDtpZihwYXJ0cz1vcGVyYTEwUmVnZXguZXhlYyhsaW5lc1tsaW5lXSkpe2VsZW1lbnQ9e3VybDpwYXJ0c1syXSxmdW5jOnBhcnRzWzNdLGFyZ3M6W10sbGluZTorcGFydHNbMV0sY29sdW1uOm51bGx9O31lbHNlIGlmKHBhcnRzPW9wZXJhMTFSZWdleC5leGVjKGxpbmVzW2xpbmVdKSl7ZWxlbWVudD17dXJsOnBhcnRzWzZdLGZ1bmM6cGFydHNbM118fHBhcnRzWzRdLGFyZ3M6cGFydHNbNV0/cGFydHNbNV0uc3BsaXQoJywnKTpbXSxsaW5lOitwYXJ0c1sxXSxjb2x1bW46K3BhcnRzWzJdfTt9aWYoZWxlbWVudCl7aWYoIWVsZW1lbnQuZnVuYyYmZWxlbWVudC5saW5lKXtlbGVtZW50LmZ1bmM9VU5LTk9XTl9GVU5DVElPTjt9c3RhY2sucHVzaChlbGVtZW50KTt9fWlmKCFzdGFjay5sZW5ndGgpe3JldHVybiBudWxsO31yZXR1cm57bWVzc2FnZTpleHRyYWN0TWVzc2FnZShleCksbmFtZTpleC5uYW1lLHN0YWNrOnN0YWNrfTt9LyoqIFJlbW92ZSBOIG51bWJlciBvZiBmcmFtZXMgZnJvbSB0aGUgc3RhY2sgKi9mdW5jdGlvbiBwb3BGcmFtZXMoc3RhY2t0cmFjZSxwb3BTaXplKXt0cnl7cmV0dXJuIF9hc3NpZ24oe30sc3RhY2t0cmFjZSx7c3RhY2s6c3RhY2t0cmFjZS5zdGFjay5zbGljZShwb3BTaXplKX0pO31jYXRjaChlKXtyZXR1cm4gc3RhY2t0cmFjZTt9fS8qKlxuICAgKiBUaGVyZSBhcmUgY2FzZXMgd2hlcmUgc3RhY2t0cmFjZS5tZXNzYWdlIGlzIGFuIEV2ZW50IG9iamVjdFxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy8xOTQ5XG4gICAqIEluIHRoaXMgc3BlY2lmaWMgY2FzZSB3ZSB0cnkgdG8gZXh0cmFjdCBzdGFja3RyYWNlLm1lc3NhZ2UuZXJyb3IubWVzc2FnZVxuICAgKi9mdW5jdGlvbiBleHRyYWN0TWVzc2FnZShleCl7dmFyIG1lc3NhZ2U9ZXgmJmV4Lm1lc3NhZ2U7aWYoIW1lc3NhZ2Upe3JldHVybidObyBlcnJvciBtZXNzYWdlJzt9aWYobWVzc2FnZS5lcnJvciYmdHlwZW9mIG1lc3NhZ2UuZXJyb3IubWVzc2FnZT09PSdzdHJpbmcnKXtyZXR1cm4gbWVzc2FnZS5lcnJvci5tZXNzYWdlO31yZXR1cm4gbWVzc2FnZTt9dmFyIFNUQUNLVFJBQ0VfTElNSVQ9NTA7LyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBhbiBleGNlcHRpb24gZnJvbSBhbiBUcmFjZUtpdFN0YWNrVHJhY2VcbiAgICogQHBhcmFtIHN0YWNrdHJhY2UgVHJhY2VLaXRTdGFja1RyYWNlIHRoYXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYW4gZXhjZXB0aW9uXG4gICAqIEBoaWRkZW5cbiAgICovZnVuY3Rpb24gZXhjZXB0aW9uRnJvbVN0YWNrdHJhY2Uoc3RhY2t0cmFjZSl7dmFyIGZyYW1lcz1wcmVwYXJlRnJhbWVzRm9yRXZlbnQoc3RhY2t0cmFjZS5zdGFjayk7dmFyIGV4Y2VwdGlvbj17dHlwZTpzdGFja3RyYWNlLm5hbWUsdmFsdWU6c3RhY2t0cmFjZS5tZXNzYWdlfTtpZihmcmFtZXMmJmZyYW1lcy5sZW5ndGgpe2V4Y2VwdGlvbi5zdGFja3RyYWNlPXtmcmFtZXM6ZnJhbWVzfTt9Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnN0cmljdC10eXBlLXByZWRpY2F0ZXNcbmlmKGV4Y2VwdGlvbi50eXBlPT09dW5kZWZpbmVkJiZleGNlcHRpb24udmFsdWU9PT0nJyl7ZXhjZXB0aW9uLnZhbHVlPSdVbnJlY292ZXJhYmxlIGVycm9yIGNhdWdodCc7fXJldHVybiBleGNlcHRpb247fS8qKlxuICAgKiBAaGlkZGVuXG4gICAqL2Z1bmN0aW9uIGV2ZW50RnJvbVBsYWluT2JqZWN0KGV4Y2VwdGlvbixzeW50aGV0aWNFeGNlcHRpb24scmVqZWN0aW9uKXt2YXIgZXZlbnQ9e2V4Y2VwdGlvbjp7dmFsdWVzOlt7dHlwZTppc0V2ZW50KGV4Y2VwdGlvbik/ZXhjZXB0aW9uLmNvbnN0cnVjdG9yLm5hbWU6cmVqZWN0aW9uPydVbmhhbmRsZWRSZWplY3Rpb24nOidFcnJvcicsdmFsdWU6XCJOb24tRXJyb3IgXCIrKHJlamVjdGlvbj8ncHJvbWlzZSByZWplY3Rpb24nOidleGNlcHRpb24nKStcIiBjYXB0dXJlZCB3aXRoIGtleXM6IFwiK2V4dHJhY3RFeGNlcHRpb25LZXlzRm9yTWVzc2FnZShleGNlcHRpb24pfV19LGV4dHJhOntfX3NlcmlhbGl6ZWRfXzpub3JtYWxpemVUb1NpemUoZXhjZXB0aW9uKX19O2lmKHN5bnRoZXRpY0V4Y2VwdGlvbil7dmFyIHN0YWNrdHJhY2U9Y29tcHV0ZVN0YWNrVHJhY2Uoc3ludGhldGljRXhjZXB0aW9uKTt2YXIgZnJhbWVzXzE9cHJlcGFyZUZyYW1lc0ZvckV2ZW50KHN0YWNrdHJhY2Uuc3RhY2spO2V2ZW50LnN0YWNrdHJhY2U9e2ZyYW1lczpmcmFtZXNfMX07fXJldHVybiBldmVudDt9LyoqXG4gICAqIEBoaWRkZW5cbiAgICovZnVuY3Rpb24gZXZlbnRGcm9tU3RhY2t0cmFjZShzdGFja3RyYWNlKXt2YXIgZXhjZXB0aW9uPWV4Y2VwdGlvbkZyb21TdGFja3RyYWNlKHN0YWNrdHJhY2UpO3JldHVybntleGNlcHRpb246e3ZhbHVlczpbZXhjZXB0aW9uXX19O30vKipcbiAgICogQGhpZGRlblxuICAgKi9mdW5jdGlvbiBwcmVwYXJlRnJhbWVzRm9yRXZlbnQoc3RhY2spe2lmKCFzdGFja3x8IXN0YWNrLmxlbmd0aCl7cmV0dXJuW107fXZhciBsb2NhbFN0YWNrPXN0YWNrO3ZhciBmaXJzdEZyYW1lRnVuY3Rpb249bG9jYWxTdGFja1swXS5mdW5jfHwnJzt2YXIgbGFzdEZyYW1lRnVuY3Rpb249bG9jYWxTdGFja1tsb2NhbFN0YWNrLmxlbmd0aC0xXS5mdW5jfHwnJzsvLyBJZiBzdGFjayBzdGFydHMgd2l0aCBvbmUgb2Ygb3VyIEFQSSBjYWxscywgcmVtb3ZlIGl0IChzdGFydHMsIG1lYW5pbmcgaXQncyB0aGUgdG9wIG9mIHRoZSBzdGFjayAtIGFrYSBsYXN0IGNhbGwpXG5pZihmaXJzdEZyYW1lRnVuY3Rpb24uaW5kZXhPZignY2FwdHVyZU1lc3NhZ2UnKSE9PS0xfHxmaXJzdEZyYW1lRnVuY3Rpb24uaW5kZXhPZignY2FwdHVyZUV4Y2VwdGlvbicpIT09LTEpe2xvY2FsU3RhY2s9bG9jYWxTdGFjay5zbGljZSgxKTt9Ly8gSWYgc3RhY2sgZW5kcyB3aXRoIG9uZSBvZiBvdXIgaW50ZXJuYWwgQVBJIGNhbGxzLCByZW1vdmUgaXQgKGVuZHMsIG1lYW5pbmcgaXQncyB0aGUgYm90dG9tIG9mIHRoZSBzdGFjayAtIGFrYSB0b3AtbW9zdCBjYWxsKVxuaWYobGFzdEZyYW1lRnVuY3Rpb24uaW5kZXhPZignc2VudHJ5V3JhcHBlZCcpIT09LTEpe2xvY2FsU3RhY2s9bG9jYWxTdGFjay5zbGljZSgwLC0xKTt9Ly8gVGhlIGZyYW1lIHdoZXJlIHRoZSBjcmFzaCBoYXBwZW5lZCwgc2hvdWxkIGJlIHRoZSBsYXN0IGVudHJ5IGluIHRoZSBhcnJheVxucmV0dXJuIGxvY2FsU3RhY2subWFwKGZ1bmN0aW9uKGZyYW1lKXtyZXR1cm57Y29sbm86ZnJhbWUuY29sdW1uPT09bnVsbD91bmRlZmluZWQ6ZnJhbWUuY29sdW1uLGZpbGVuYW1lOmZyYW1lLnVybHx8bG9jYWxTdGFja1swXS51cmwsXCJmdW5jdGlvblwiOmZyYW1lLmZ1bmN8fCc/Jyxpbl9hcHA6dHJ1ZSxsaW5lbm86ZnJhbWUubGluZT09PW51bGw/dW5kZWZpbmVkOmZyYW1lLmxpbmV9O30pLnNsaWNlKDAsU1RBQ0tUUkFDRV9MSU1JVCkucmV2ZXJzZSgpO30vKiogSlNEb2MgKi9mdW5jdGlvbiBldmVudEZyb21Vbmtub3duSW5wdXQoZXhjZXB0aW9uLHN5bnRoZXRpY0V4Y2VwdGlvbixvcHRpb25zKXtpZihvcHRpb25zPT09dm9pZCAwKXtvcHRpb25zPXt9O312YXIgZXZlbnQ7aWYoaXNFcnJvckV2ZW50KGV4Y2VwdGlvbikmJmV4Y2VwdGlvbi5lcnJvcil7Ly8gSWYgaXQgaXMgYW4gRXJyb3JFdmVudCB3aXRoIGBlcnJvcmAgcHJvcGVydHksIGV4dHJhY3QgaXQgdG8gZ2V0IGFjdHVhbCBFcnJvclxudmFyIGVycm9yRXZlbnQ9ZXhjZXB0aW9uO2V4Y2VwdGlvbj1lcnJvckV2ZW50LmVycm9yOy8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tcGFyYW1ldGVyLXJlYXNzaWdubWVudFxuZXZlbnQ9ZXZlbnRGcm9tU3RhY2t0cmFjZShjb21wdXRlU3RhY2tUcmFjZShleGNlcHRpb24pKTtyZXR1cm4gZXZlbnQ7fWlmKGlzRE9NRXJyb3IoZXhjZXB0aW9uKXx8aXNET01FeGNlcHRpb24oZXhjZXB0aW9uKSl7Ly8gSWYgaXQgaXMgYSBET01FcnJvciBvciBET01FeGNlcHRpb24gKHdoaWNoIGFyZSBsZWdhY3kgQVBJcywgYnV0IHN0aWxsIHN1cHBvcnRlZCBpbiBzb21lIGJyb3dzZXJzKVxuLy8gdGhlbiB3ZSBqdXN0IGV4dHJhY3QgdGhlIG5hbWUgYW5kIG1lc3NhZ2UsIGFzIHRoZXkgZG9uJ3QgcHJvdmlkZSBhbnl0aGluZyBlbHNlXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRE9NRXJyb3Jcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9ET01FeGNlcHRpb25cbnZhciBkb21FeGNlcHRpb249ZXhjZXB0aW9uO3ZhciBuYW1lXzE9ZG9tRXhjZXB0aW9uLm5hbWV8fChpc0RPTUVycm9yKGRvbUV4Y2VwdGlvbik/J0RPTUVycm9yJzonRE9NRXhjZXB0aW9uJyk7dmFyIG1lc3NhZ2U9ZG9tRXhjZXB0aW9uLm1lc3NhZ2U/bmFtZV8xK1wiOiBcIitkb21FeGNlcHRpb24ubWVzc2FnZTpuYW1lXzE7ZXZlbnQ9ZXZlbnRGcm9tU3RyaW5nKG1lc3NhZ2Usc3ludGhldGljRXhjZXB0aW9uLG9wdGlvbnMpO2FkZEV4Y2VwdGlvblR5cGVWYWx1ZShldmVudCxtZXNzYWdlKTtyZXR1cm4gZXZlbnQ7fWlmKGlzRXJyb3IoZXhjZXB0aW9uKSl7Ly8gd2UgaGF2ZSBhIHJlYWwgRXJyb3Igb2JqZWN0LCBkbyBub3RoaW5nXG5ldmVudD1ldmVudEZyb21TdGFja3RyYWNlKGNvbXB1dGVTdGFja1RyYWNlKGV4Y2VwdGlvbikpO3JldHVybiBldmVudDt9aWYoaXNQbGFpbk9iamVjdCQxKGV4Y2VwdGlvbil8fGlzRXZlbnQoZXhjZXB0aW9uKSl7Ly8gSWYgaXQgaXMgcGxhaW4gT2JqZWN0IG9yIEV2ZW50LCBzZXJpYWxpemUgaXQgbWFudWFsbHkgYW5kIGV4dHJhY3Qgb3B0aW9uc1xuLy8gVGhpcyB3aWxsIGFsbG93IHVzIHRvIGdyb3VwIGV2ZW50cyBiYXNlZCBvbiB0b3AtbGV2ZWwga2V5c1xuLy8gd2hpY2ggaXMgbXVjaCBiZXR0ZXIgdGhhbiBjcmVhdGluZyBuZXcgZ3JvdXAgd2hlbiBhbnkga2V5L3ZhbHVlIGNoYW5nZVxudmFyIG9iamVjdEV4Y2VwdGlvbj1leGNlcHRpb247ZXZlbnQ9ZXZlbnRGcm9tUGxhaW5PYmplY3Qob2JqZWN0RXhjZXB0aW9uLHN5bnRoZXRpY0V4Y2VwdGlvbixvcHRpb25zLnJlamVjdGlvbik7YWRkRXhjZXB0aW9uTWVjaGFuaXNtKGV2ZW50LHtzeW50aGV0aWM6dHJ1ZX0pO3JldHVybiBldmVudDt9Ly8gSWYgbm9uZSBvZiBwcmV2aW91cyBjaGVja3Mgd2VyZSB2YWxpZCwgdGhlbiBpdCBtZWFucyB0aGF0IGl0J3Mgbm90OlxuLy8gLSBhbiBpbnN0YW5jZSBvZiBET01FcnJvclxuLy8gLSBhbiBpbnN0YW5jZSBvZiBET01FeGNlcHRpb25cbi8vIC0gYW4gaW5zdGFuY2Ugb2YgRXZlbnRcbi8vIC0gYW4gaW5zdGFuY2Ugb2YgRXJyb3Jcbi8vIC0gYSB2YWxpZCBFcnJvckV2ZW50IChvbmUgd2l0aCBhbiBlcnJvciBwcm9wZXJ0eSlcbi8vIC0gYSBwbGFpbiBPYmplY3Rcbi8vXG4vLyBTbyBiYWlsIG91dCBhbmQgY2FwdHVyZSBpdCBhcyBhIHNpbXBsZSBtZXNzYWdlOlxuZXZlbnQ9ZXZlbnRGcm9tU3RyaW5nKGV4Y2VwdGlvbixzeW50aGV0aWNFeGNlcHRpb24sb3B0aW9ucyk7YWRkRXhjZXB0aW9uVHlwZVZhbHVlKGV2ZW50LFwiXCIrZXhjZXB0aW9uLHVuZGVmaW5lZCk7YWRkRXhjZXB0aW9uTWVjaGFuaXNtKGV2ZW50LHtzeW50aGV0aWM6dHJ1ZX0pO3JldHVybiBldmVudDt9Ly8gdGhpcy5fb3B0aW9ucy5hdHRhY2hTdGFja3RyYWNlXG4vKiogSlNEb2MgKi9mdW5jdGlvbiBldmVudEZyb21TdHJpbmcoaW5wdXQsc3ludGhldGljRXhjZXB0aW9uLG9wdGlvbnMpe2lmKG9wdGlvbnM9PT12b2lkIDApe29wdGlvbnM9e307fXZhciBldmVudD17bWVzc2FnZTppbnB1dH07aWYob3B0aW9ucy5hdHRhY2hTdGFja3RyYWNlJiZzeW50aGV0aWNFeGNlcHRpb24pe3ZhciBzdGFja3RyYWNlPWNvbXB1dGVTdGFja1RyYWNlKHN5bnRoZXRpY0V4Y2VwdGlvbik7dmFyIGZyYW1lc18xPXByZXBhcmVGcmFtZXNGb3JFdmVudChzdGFja3RyYWNlLnN0YWNrKTtldmVudC5zdGFja3RyYWNlPXtmcmFtZXM6ZnJhbWVzXzF9O31yZXR1cm4gZXZlbnQ7fS8qKiBCYXNlIFRyYW5zcG9ydCBjbGFzcyBpbXBsZW1lbnRhdGlvbiAqL3ZhciBCYXNlVHJhbnNwb3J0PS8qKiBAY2xhc3MgKi9mdW5jdGlvbigpe2Z1bmN0aW9uIEJhc2VUcmFuc3BvcnQob3B0aW9ucyl7dGhpcy5vcHRpb25zPW9wdGlvbnM7LyoqIEEgc2ltcGxlIGJ1ZmZlciBob2xkaW5nIGFsbCByZXF1ZXN0cy4gKi90aGlzLl9idWZmZXI9bmV3IFByb21pc2VCdWZmZXIoMzApO3RoaXMudXJsPW5ldyBBUEkodGhpcy5vcHRpb25zLmRzbikuZ2V0U3RvcmVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCgpO30vKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9CYXNlVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kRXZlbnQ9ZnVuY3Rpb24oXyl7dGhyb3cgbmV3IFNlbnRyeUVycm9yKCdUcmFuc3BvcnQgQ2xhc3MgaGFzIHRvIGltcGxlbWVudCBgc2VuZEV2ZW50YCBtZXRob2QnKTt9Oy8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL0Jhc2VUcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlPWZ1bmN0aW9uKHRpbWVvdXQpe3JldHVybiB0aGlzLl9idWZmZXIuZHJhaW4odGltZW91dCk7fTtyZXR1cm4gQmFzZVRyYW5zcG9ydDt9KCk7dmFyIGdsb2JhbCQyPWdldEdsb2JhbE9iamVjdCgpOy8qKiBgZmV0Y2hgIGJhc2VkIHRyYW5zcG9ydCAqL3ZhciBGZXRjaFRyYW5zcG9ydD0vKiogQGNsYXNzICovZnVuY3Rpb24oX3N1cGVyKXtfX2V4dGVuZHMoRmV0Y2hUcmFuc3BvcnQsX3N1cGVyKTtmdW5jdGlvbiBGZXRjaFRyYW5zcG9ydCgpe3ZhciBfdGhpcz1fc3VwZXIhPT1udWxsJiZfc3VwZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzOy8qKiBMb2NrcyB0cmFuc3BvcnQgYWZ0ZXIgcmVjZWl2aW5nIDQyOSByZXNwb25zZSAqL190aGlzLl9kaXNhYmxlZFVudGlsPW5ldyBEYXRlKERhdGUubm93KCkpO3JldHVybiBfdGhpczt9LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovRmV0Y2hUcmFuc3BvcnQucHJvdG90eXBlLnNlbmRFdmVudD1mdW5jdGlvbihldmVudCl7dmFyIF90aGlzPXRoaXM7aWYobmV3IERhdGUoRGF0ZS5ub3coKSk8dGhpcy5fZGlzYWJsZWRVbnRpbCl7cmV0dXJuIFByb21pc2UucmVqZWN0KHtldmVudDpldmVudCxyZWFzb246XCJUcmFuc3BvcnQgbG9ja2VkIHRpbGwgXCIrdGhpcy5fZGlzYWJsZWRVbnRpbCtcIiBkdWUgdG8gdG9vIG1hbnkgcmVxdWVzdHMuXCIsc3RhdHVzOjQyOX0pO312YXIgZGVmYXVsdE9wdGlvbnM9e2JvZHk6SlNPTi5zdHJpbmdpZnkoZXZlbnQpLG1ldGhvZDonUE9TVCcsLy8gRGVzcGl0ZSBhbGwgc3RhcnMgaW4gdGhlIHNreSBzYXlpbmcgdGhhdCBFZGdlIHN1cHBvcnRzIG9sZCBkcmFmdCBzeW50YXgsIGFrYSAnbmV2ZXInLCAnYWx3YXlzJywgJ29yaWdpbicgYW5kICdkZWZhdWx0XG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNmZWF0PXJlZmVycmVyLXBvbGljeVxuLy8gSXQgZG9lc24ndC4gQW5kIGl0IHRocm93IGV4Y2VwdGlvbiBpbnN0ZWFkIG9mIGlnbm9yaW5nIHRoaXMgcGFyYW1ldGVyLi4uXG4vLyBSRUY6IGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvcmF2ZW4tanMvaXNzdWVzLzEyMzNcbnJlZmVycmVyUG9saWN5OnN1cHBvcnRzUmVmZXJyZXJQb2xpY3koKT8nb3JpZ2luJzonJ307cmV0dXJuIHRoaXMuX2J1ZmZlci5hZGQobmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtyZXR1cm4gX19hd2FpdGVyKF90aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgcmVzcG9uc2UsZXJyXzEsc3RhdHVzLG5vdztyZXR1cm4gX19nZW5lcmF0b3IodGhpcyxmdW5jdGlvbihfYSl7c3dpdGNoKF9hLmxhYmVsKXtjYXNlIDA6X2EudHJ5cy5wdXNoKFswLDIsLDNdKTtyZXR1cm5bNC8qeWllbGQqLyxnbG9iYWwkMi5mZXRjaCh0aGlzLnVybCxkZWZhdWx0T3B0aW9ucyldO2Nhc2UgMTpyZXNwb25zZT1fYS5zZW50KCk7cmV0dXJuWzMvKmJyZWFrKi8sM107Y2FzZSAyOmVycl8xPV9hLnNlbnQoKTtyZWplY3QoZXJyXzEpO3JldHVyblsyLypyZXR1cm4qL107Y2FzZSAzOnN0YXR1cz1TdGF0dXMuZnJvbUh0dHBDb2RlKHJlc3BvbnNlLnN0YXR1cyk7aWYoc3RhdHVzPT09U3RhdHVzLlN1Y2Nlc3Mpe3Jlc29sdmUoe3N0YXR1czpzdGF0dXN9KTtyZXR1cm5bMi8qcmV0dXJuKi9dO31pZihzdGF0dXM9PT1TdGF0dXMuUmF0ZUxpbWl0KXtub3c9RGF0ZS5ub3coKTt0aGlzLl9kaXNhYmxlZFVudGlsPW5ldyBEYXRlKG5vdytwYXJzZVJldHJ5QWZ0ZXJIZWFkZXIobm93LHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdSZXRyeS1BZnRlcicpKSk7bG9nZ2VyJDEud2FybihcIlRvbyBtYW55IHJlcXVlc3RzLCBiYWNraW5nIG9mZiB0aWxsOiBcIit0aGlzLl9kaXNhYmxlZFVudGlsKTt9cmVqZWN0KHJlc3BvbnNlKTtyZXR1cm5bMi8qcmV0dXJuKi9dO319KTt9KTt9KSk7fTtyZXR1cm4gRmV0Y2hUcmFuc3BvcnQ7fShCYXNlVHJhbnNwb3J0KTsvKiogYFhIUmAgYmFzZWQgdHJhbnNwb3J0ICovdmFyIFhIUlRyYW5zcG9ydD0vKiogQGNsYXNzICovZnVuY3Rpb24oX3N1cGVyKXtfX2V4dGVuZHMoWEhSVHJhbnNwb3J0LF9zdXBlcik7ZnVuY3Rpb24gWEhSVHJhbnNwb3J0KCl7dmFyIF90aGlzPV9zdXBlciE9PW51bGwmJl9zdXBlci5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXM7LyoqIExvY2tzIHRyYW5zcG9ydCBhZnRlciByZWNlaXZpbmcgNDI5IHJlc3BvbnNlICovX3RoaXMuX2Rpc2FibGVkVW50aWw9bmV3IERhdGUoRGF0ZS5ub3coKSk7cmV0dXJuIF90aGlzO30vKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9YSFJUcmFuc3BvcnQucHJvdG90eXBlLnNlbmRFdmVudD1mdW5jdGlvbihldmVudCl7dmFyIF90aGlzPXRoaXM7aWYobmV3IERhdGUoRGF0ZS5ub3coKSk8dGhpcy5fZGlzYWJsZWRVbnRpbCl7cmV0dXJuIFByb21pc2UucmVqZWN0KHtldmVudDpldmVudCxyZWFzb246XCJUcmFuc3BvcnQgbG9ja2VkIHRpbGwgXCIrdGhpcy5fZGlzYWJsZWRVbnRpbCtcIiBkdWUgdG8gdG9vIG1hbnkgcmVxdWVzdHMuXCIsc3RhdHVzOjQyOX0pO31yZXR1cm4gdGhpcy5fYnVmZmVyLmFkZChuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe3ZhciByZXF1ZXN0PW5ldyBYTUxIdHRwUmVxdWVzdCgpO3JlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7aWYocmVxdWVzdC5yZWFkeVN0YXRlIT09NCl7cmV0dXJuO312YXIgc3RhdHVzPVN0YXR1cy5mcm9tSHR0cENvZGUocmVxdWVzdC5zdGF0dXMpO2lmKHN0YXR1cz09PVN0YXR1cy5TdWNjZXNzKXtyZXNvbHZlKHtzdGF0dXM6c3RhdHVzfSk7cmV0dXJuO31pZihzdGF0dXM9PT1TdGF0dXMuUmF0ZUxpbWl0KXt2YXIgbm93PURhdGUubm93KCk7X3RoaXMuX2Rpc2FibGVkVW50aWw9bmV3IERhdGUobm93K3BhcnNlUmV0cnlBZnRlckhlYWRlcihub3cscmVxdWVzdC5nZXRSZXNwb25zZUhlYWRlcignUmV0cnktQWZ0ZXInKSkpO2xvZ2dlciQxLndhcm4oXCJUb28gbWFueSByZXF1ZXN0cywgYmFja2luZyBvZmYgdGlsbDogXCIrX3RoaXMuX2Rpc2FibGVkVW50aWwpO31yZWplY3QocmVxdWVzdCk7fTtyZXF1ZXN0Lm9wZW4oJ1BPU1QnLF90aGlzLnVybCk7cmVxdWVzdC5zZW5kKEpTT04uc3RyaW5naWZ5KGV2ZW50KSk7fSkpO307cmV0dXJuIFhIUlRyYW5zcG9ydDt9KEJhc2VUcmFuc3BvcnQpO3ZhciBpbmRleCQxPS8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxCYXNlVHJhbnNwb3J0OkJhc2VUcmFuc3BvcnQsRmV0Y2hUcmFuc3BvcnQ6RmV0Y2hUcmFuc3BvcnQsWEhSVHJhbnNwb3J0OlhIUlRyYW5zcG9ydH0pOy8qKlxuICAgKiBUaGUgU2VudHJ5IEJyb3dzZXIgU0RLIEJhY2tlbmQuXG4gICAqIEBoaWRkZW5cbiAgICovdmFyIEJyb3dzZXJCYWNrZW5kPS8qKiBAY2xhc3MgKi9mdW5jdGlvbihfc3VwZXIpe19fZXh0ZW5kcyhCcm93c2VyQmFja2VuZCxfc3VwZXIpO2Z1bmN0aW9uIEJyb3dzZXJCYWNrZW5kKCl7cmV0dXJuIF9zdXBlciE9PW51bGwmJl9zdXBlci5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXM7fS8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL0Jyb3dzZXJCYWNrZW5kLnByb3RvdHlwZS5fc2V0dXBUcmFuc3BvcnQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fb3B0aW9ucy5kc24pey8vIFdlIHJldHVybiB0aGUgbm9vcCB0cmFuc3BvcnQgaGVyZSBpbiBjYXNlIHRoZXJlIGlzIG5vIERzbi5cbnJldHVybiBfc3VwZXIucHJvdG90eXBlLl9zZXR1cFRyYW5zcG9ydC5jYWxsKHRoaXMpO312YXIgdHJhbnNwb3J0T3B0aW9ucz1fYXNzaWduKHt9LHRoaXMuX29wdGlvbnMudHJhbnNwb3J0T3B0aW9ucyx7ZHNuOnRoaXMuX29wdGlvbnMuZHNufSk7aWYodGhpcy5fb3B0aW9ucy50cmFuc3BvcnQpe3JldHVybiBuZXcgdGhpcy5fb3B0aW9ucy50cmFuc3BvcnQodHJhbnNwb3J0T3B0aW9ucyk7fWlmKHN1cHBvcnRzRmV0Y2goKSl7cmV0dXJuIG5ldyBGZXRjaFRyYW5zcG9ydCh0cmFuc3BvcnRPcHRpb25zKTt9cmV0dXJuIG5ldyBYSFJUcmFuc3BvcnQodHJhbnNwb3J0T3B0aW9ucyk7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9Ccm93c2VyQmFja2VuZC5wcm90b3R5cGUuZXZlbnRGcm9tRXhjZXB0aW9uPWZ1bmN0aW9uKGV4Y2VwdGlvbixoaW50KXt2YXIgc3ludGhldGljRXhjZXB0aW9uPWhpbnQmJmhpbnQuc3ludGhldGljRXhjZXB0aW9ufHx1bmRlZmluZWQ7dmFyIGV2ZW50PWV2ZW50RnJvbVVua25vd25JbnB1dChleGNlcHRpb24sc3ludGhldGljRXhjZXB0aW9uLHthdHRhY2hTdGFja3RyYWNlOnRoaXMuX29wdGlvbnMuYXR0YWNoU3RhY2t0cmFjZX0pO2FkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCx7aGFuZGxlZDp0cnVlLHR5cGU6J2dlbmVyaWMnfSk7ZXZlbnQubGV2ZWw9U2V2ZXJpdHkuRXJyb3I7aWYoaGludCYmaGludC5ldmVudF9pZCl7ZXZlbnQuZXZlbnRfaWQ9aGludC5ldmVudF9pZDt9cmV0dXJuIFN5bmNQcm9taXNlLnJlc29sdmUoZXZlbnQpO307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovQnJvd3NlckJhY2tlbmQucHJvdG90eXBlLmV2ZW50RnJvbU1lc3NhZ2U9ZnVuY3Rpb24obWVzc2FnZSxsZXZlbCxoaW50KXtpZihsZXZlbD09PXZvaWQgMCl7bGV2ZWw9U2V2ZXJpdHkuSW5mbzt9dmFyIHN5bnRoZXRpY0V4Y2VwdGlvbj1oaW50JiZoaW50LnN5bnRoZXRpY0V4Y2VwdGlvbnx8dW5kZWZpbmVkO3ZhciBldmVudD1ldmVudEZyb21TdHJpbmcobWVzc2FnZSxzeW50aGV0aWNFeGNlcHRpb24se2F0dGFjaFN0YWNrdHJhY2U6dGhpcy5fb3B0aW9ucy5hdHRhY2hTdGFja3RyYWNlfSk7ZXZlbnQubGV2ZWw9bGV2ZWw7aWYoaGludCYmaGludC5ldmVudF9pZCl7ZXZlbnQuZXZlbnRfaWQ9aGludC5ldmVudF9pZDt9cmV0dXJuIFN5bmNQcm9taXNlLnJlc29sdmUoZXZlbnQpO307cmV0dXJuIEJyb3dzZXJCYWNrZW5kO30oQmFzZUJhY2tlbmQpO3ZhciBTREtfTkFNRT0nc2VudHJ5LmphdmFzY3JpcHQuYnJvd3Nlcic7dmFyIFNES19WRVJTSU9OPSc1LjguMCc7LyoqXG4gICAqIFRoZSBTZW50cnkgQnJvd3NlciBTREsgQ2xpZW50LlxuICAgKlxuICAgKiBAc2VlIEJyb3dzZXJPcHRpb25zIGZvciBkb2N1bWVudGF0aW9uIG9uIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cbiAgICogQHNlZSBTZW50cnlDbGllbnQgZm9yIHVzYWdlIGRvY3VtZW50YXRpb24uXG4gICAqL3ZhciBCcm93c2VyQ2xpZW50PS8qKiBAY2xhc3MgKi9mdW5jdGlvbihfc3VwZXIpe19fZXh0ZW5kcyhCcm93c2VyQ2xpZW50LF9zdXBlcik7LyoqXG4gICAgICAgKiBDcmVhdGVzIGEgbmV3IEJyb3dzZXIgU0RLIGluc3RhbmNlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSBvcHRpb25zIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhpcyBTREsuXG4gICAgICAgKi9mdW5jdGlvbiBCcm93c2VyQ2xpZW50KG9wdGlvbnMpe2lmKG9wdGlvbnM9PT12b2lkIDApe29wdGlvbnM9e307fXJldHVybiBfc3VwZXIuY2FsbCh0aGlzLEJyb3dzZXJCYWNrZW5kLG9wdGlvbnMpfHx0aGlzO30vKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9Ccm93c2VyQ2xpZW50LnByb3RvdHlwZS5fcHJlcGFyZUV2ZW50PWZ1bmN0aW9uKGV2ZW50LHNjb3BlLGhpbnQpe2V2ZW50LnBsYXRmb3JtPWV2ZW50LnBsYXRmb3JtfHwnamF2YXNjcmlwdCc7ZXZlbnQuc2RrPV9hc3NpZ24oe30sZXZlbnQuc2RrLHtuYW1lOlNES19OQU1FLHBhY2thZ2VzOl9fc3ByZWFkKGV2ZW50LnNkayYmZXZlbnQuc2RrLnBhY2thZ2VzfHxbXSxbe25hbWU6J25wbTpAc2VudHJ5L2Jyb3dzZXInLHZlcnNpb246U0RLX1ZFUlNJT059XSksdmVyc2lvbjpTREtfVkVSU0lPTn0pO3JldHVybiBfc3VwZXIucHJvdG90eXBlLl9wcmVwYXJlRXZlbnQuY2FsbCh0aGlzLGV2ZW50LHNjb3BlLGhpbnQpO307LyoqXG4gICAgICAgKiBTaG93IGEgcmVwb3J0IGRpYWxvZyB0byB0aGUgdXNlciB0byBzZW5kIGZlZWRiYWNrIHRvIGEgc3BlY2lmaWMgZXZlbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIG9wdGlvbnMgU2V0IGluZGl2aWR1YWwgb3B0aW9ucyBmb3IgdGhlIGRpYWxvZ1xuICAgICAgICovQnJvd3NlckNsaWVudC5wcm90b3R5cGUuc2hvd1JlcG9ydERpYWxvZz1mdW5jdGlvbihvcHRpb25zKXtpZihvcHRpb25zPT09dm9pZCAwKXtvcHRpb25zPXt9O30vLyBkb2Vzbid0IHdvcmsgd2l0aG91dCBhIGRvY3VtZW50IChSZWFjdCBOYXRpdmUpXG52YXIgZG9jdW1lbnQ9Z2V0R2xvYmFsT2JqZWN0KCkuZG9jdW1lbnQ7aWYoIWRvY3VtZW50KXtyZXR1cm47fWlmKCF0aGlzLl9pc0VuYWJsZWQoKSl7bG9nZ2VyJDEuZXJyb3IoJ1RyeWluZyB0byBjYWxsIHNob3dSZXBvcnREaWFsb2cgd2l0aCBTZW50cnkgQ2xpZW50IGlzIGRpc2FibGVkJyk7cmV0dXJuO312YXIgZHNuPW9wdGlvbnMuZHNufHx0aGlzLmdldERzbigpO2lmKCFvcHRpb25zLmV2ZW50SWQpe2xvZ2dlciQxLmVycm9yKCdNaXNzaW5nIGBldmVudElkYCBvcHRpb24gaW4gc2hvd1JlcG9ydERpYWxvZyBjYWxsJyk7cmV0dXJuO31pZighZHNuKXtsb2dnZXIkMS5lcnJvcignTWlzc2luZyBgRHNuYCBvcHRpb24gaW4gc2hvd1JlcG9ydERpYWxvZyBjYWxsJyk7cmV0dXJuO312YXIgc2NyaXB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO3NjcmlwdC5hc3luYz10cnVlO3NjcmlwdC5zcmM9bmV3IEFQSShkc24pLmdldFJlcG9ydERpYWxvZ0VuZHBvaW50KG9wdGlvbnMpO2lmKG9wdGlvbnMub25Mb2FkKXtzY3JpcHQub25sb2FkPW9wdGlvbnMub25Mb2FkO30oZG9jdW1lbnQuaGVhZHx8ZG9jdW1lbnQuYm9keSkuYXBwZW5kQ2hpbGQoc2NyaXB0KTt9O3JldHVybiBCcm93c2VyQ2xpZW50O30oQmFzZUNsaWVudCk7dmFyIGRlYm91bmNlRHVyYXRpb249MTAwMDt2YXIga2V5cHJlc3NUaW1lb3V0O3ZhciBsYXN0Q2FwdHVyZWRFdmVudDt2YXIgaWdub3JlT25FcnJvcj0wOy8qKlxuICAgKiBAaGlkZGVuXG4gICAqL2Z1bmN0aW9uIHNob3VsZElnbm9yZU9uRXJyb3IoKXtyZXR1cm4gaWdub3JlT25FcnJvcj4wO30vKipcbiAgICogQGhpZGRlblxuICAgKi9mdW5jdGlvbiBpZ25vcmVOZXh0T25FcnJvcigpey8vIG9uZXJyb3Igc2hvdWxkIHRyaWdnZXIgYmVmb3JlIHNldFRpbWVvdXRcbmlnbm9yZU9uRXJyb3IrPTE7c2V0VGltZW91dChmdW5jdGlvbigpe2lnbm9yZU9uRXJyb3ItPTE7fSk7fS8qKlxuICAgKiBJbnN0cnVtZW50cyB0aGUgZ2l2ZW4gZnVuY3Rpb24gYW5kIHNlbmRzIGFuIGV2ZW50IHRvIFNlbnRyeSBldmVyeSB0aW1lIHRoZVxuICAgKiBmdW5jdGlvbiB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gZm4gQSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcmV0dXJucyBUaGUgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICogQGhpZGRlblxuICAgKi9mdW5jdGlvbiB3cmFwKGZuLG9wdGlvbnMsYmVmb3JlKXtpZihvcHRpb25zPT09dm9pZCAwKXtvcHRpb25zPXt9O30vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c3RyaWN0LXR5cGUtcHJlZGljYXRlc1xuaWYodHlwZW9mIGZuIT09J2Z1bmN0aW9uJyl7cmV0dXJuIGZuO310cnl7Ly8gV2UgZG9uJ3Qgd2FubmEgd3JhcCBpdCB0d2ljZVxuaWYoZm4uX19zZW50cnlfXyl7cmV0dXJuIGZuO30vLyBJZiB0aGlzIGhhcyBhbHJlYWR5IGJlZW4gd3JhcHBlZCBpbiB0aGUgcGFzdCwgcmV0dXJuIHRoYXQgd3JhcHBlZCBmdW5jdGlvblxuaWYoZm4uX19zZW50cnlfd3JhcHBlZF9fKXtyZXR1cm4gZm4uX19zZW50cnlfd3JhcHBlZF9fO319Y2F0Y2goZSl7Ly8gSnVzdCBhY2Nlc3NpbmcgY3VzdG9tIHByb3BzIGluIHNvbWUgU2VsZW5pdW0gZW52aXJvbm1lbnRzXG4vLyBjYW4gY2F1c2UgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXhjZXB0aW9uIChzZWUgcmF2ZW4tanMjNDk1KS5cbi8vIEJhaWwgb24gd3JhcHBpbmcgYW5kIHJldHVybiB0aGUgZnVuY3Rpb24gYXMtaXMgKGRlZmVycyB0byB3aW5kb3cub25lcnJvcikuXG5yZXR1cm4gZm47fXZhciBzZW50cnlXcmFwcGVkPWZ1bmN0aW9uIHNlbnRyeVdyYXBwZWQoKXsvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c3RyaWN0LXR5cGUtcHJlZGljYXRlc1xuaWYoYmVmb3JlJiZ0eXBlb2YgYmVmb3JlPT09J2Z1bmN0aW9uJyl7YmVmb3JlLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9dmFyIGFyZ3M9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTsvLyB0c2xpbnQ6ZGlzYWJsZTpuby11bnNhZmUtYW55XG50cnl7dmFyIHdyYXBwZWRBcmd1bWVudHM9YXJncy5tYXAoZnVuY3Rpb24oYXJnKXtyZXR1cm4gd3JhcChhcmcsb3B0aW9ucyk7fSk7aWYoZm4uaGFuZGxlRXZlbnQpey8vIEF0dGVtcHQgdG8gaW52b2tlIHVzZXItbGFuZCBmdW5jdGlvblxuLy8gTk9URTogSWYgeW91IGFyZSBhIFNlbnRyeSB1c2VyLCBhbmQgeW91IGFyZSBzZWVpbmcgdGhpcyBzdGFjayBmcmFtZSwgaXRcbi8vICAgICAgIG1lYW5zIHRoZSBzZW50cnkuamF2YXNjcmlwdCBTREsgY2F1Z2h0IGFuIGVycm9yIGludm9raW5nIHlvdXIgYXBwbGljYXRpb24gY29kZS4gVGhpc1xuLy8gICAgICAgaXMgZXhwZWN0ZWQgYmVoYXZpb3IgYW5kIE5PVCBpbmRpY2F0aXZlIG9mIGEgYnVnIHdpdGggc2VudHJ5LmphdmFzY3JpcHQuXG5yZXR1cm4gZm4uaGFuZGxlRXZlbnQuYXBwbHkodGhpcyx3cmFwcGVkQXJndW1lbnRzKTt9Ly8gQXR0ZW1wdCB0byBpbnZva2UgdXNlci1sYW5kIGZ1bmN0aW9uXG4vLyBOT1RFOiBJZiB5b3UgYXJlIGEgU2VudHJ5IHVzZXIsIGFuZCB5b3UgYXJlIHNlZWluZyB0aGlzIHN0YWNrIGZyYW1lLCBpdFxuLy8gICAgICAgbWVhbnMgdGhlIHNlbnRyeS5qYXZhc2NyaXB0IFNESyBjYXVnaHQgYW4gZXJyb3IgaW52b2tpbmcgeW91ciBhcHBsaWNhdGlvbiBjb2RlLiBUaGlzXG4vLyAgICAgICBpcyBleHBlY3RlZCBiZWhhdmlvciBhbmQgTk9UIGluZGljYXRpdmUgb2YgYSBidWcgd2l0aCBzZW50cnkuamF2YXNjcmlwdC5cbnJldHVybiBmbi5hcHBseSh0aGlzLHdyYXBwZWRBcmd1bWVudHMpOy8vIHRzbGludDplbmFibGU6bm8tdW5zYWZlLWFueVxufWNhdGNoKGV4KXtpZ25vcmVOZXh0T25FcnJvcigpO3dpdGhTY29wZShmdW5jdGlvbihzY29wZSl7c2NvcGUuYWRkRXZlbnRQcm9jZXNzb3IoZnVuY3Rpb24oZXZlbnQpe3ZhciBwcm9jZXNzZWRFdmVudD1fYXNzaWduKHt9LGV2ZW50KTtpZihvcHRpb25zLm1lY2hhbmlzbSl7YWRkRXhjZXB0aW9uVHlwZVZhbHVlKHByb2Nlc3NlZEV2ZW50LHVuZGVmaW5lZCx1bmRlZmluZWQpO2FkZEV4Y2VwdGlvbk1lY2hhbmlzbShwcm9jZXNzZWRFdmVudCxvcHRpb25zLm1lY2hhbmlzbSk7fXByb2Nlc3NlZEV2ZW50LmV4dHJhPV9hc3NpZ24oe30scHJvY2Vzc2VkRXZlbnQuZXh0cmEse2FyZ3VtZW50czpub3JtYWxpemUkMShhcmdzLDMpfSk7cmV0dXJuIHByb2Nlc3NlZEV2ZW50O30pO2NhcHR1cmVFeGNlcHRpb24oZXgpO30pO3Rocm93IGV4O319Oy8vIEFjY2Vzc2luZyBzb21lIG9iamVjdHMgbWF5IHRocm93XG4vLyByZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzExNjhcbnRyeXtmb3IodmFyIHByb3BlcnR5IGluIGZuKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZm4scHJvcGVydHkpKXtzZW50cnlXcmFwcGVkW3Byb3BlcnR5XT1mbltwcm9wZXJ0eV07fX19Y2F0Y2goX29PKXt9Ly8gdHNsaW50OmRpc2FibGUtbGluZTpuby1lbXB0eVxuZm4ucHJvdG90eXBlPWZuLnByb3RvdHlwZXx8e307c2VudHJ5V3JhcHBlZC5wcm90b3R5cGU9Zm4ucHJvdG90eXBlO09iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwnX19zZW50cnlfd3JhcHBlZF9fJyx7ZW51bWVyYWJsZTpmYWxzZSx2YWx1ZTpzZW50cnlXcmFwcGVkfSk7Ly8gU2lnbmFsIHRoYXQgdGhpcyBmdW5jdGlvbiBoYXMgYmVlbiB3cmFwcGVkL2ZpbGxlZCBhbHJlYWR5XG4vLyBmb3IgYm90aCBkZWJ1Z2dpbmcgYW5kIHRvIHByZXZlbnQgaXQgdG8gYmVpbmcgd3JhcHBlZC9maWxsZWQgdHdpY2Vcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHNlbnRyeVdyYXBwZWQse19fc2VudHJ5X186e2VudW1lcmFibGU6ZmFsc2UsdmFsdWU6dHJ1ZX0sX19zZW50cnlfb3JpZ2luYWxfXzp7ZW51bWVyYWJsZTpmYWxzZSx2YWx1ZTpmbn19KTsvLyBSZXN0b3JlIG9yaWdpbmFsIGZ1bmN0aW9uIG5hbWUgKG5vdCBhbGwgYnJvd3NlcnMgYWxsb3cgdGhhdClcbnRyeXt2YXIgZGVzY3JpcHRvcj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNlbnRyeVdyYXBwZWQsJ25hbWUnKTtpZihkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbnRyeVdyYXBwZWQsJ25hbWUnLHtnZXQ6ZnVuY3Rpb24gZ2V0KCl7cmV0dXJuIGZuLm5hbWU7fX0pO319Y2F0Y2goX29PKXsvKm5vLWVtcHR5Ki99cmV0dXJuIHNlbnRyeVdyYXBwZWQ7fXZhciBkZWJvdW5jZVRpbWVyPTA7LyoqXG4gICAqIFdyYXBzIGFkZEV2ZW50TGlzdGVuZXIgdG8gY2FwdHVyZSBVSSBicmVhZGNydW1ic1xuICAgKiBAcGFyYW0gZXZlbnROYW1lIHRoZSBldmVudCBuYW1lIChlLmcuIFwiY2xpY2tcIilcbiAgICogQHJldHVybnMgd3JhcHBlZCBicmVhZGNydW1iIGV2ZW50cyBoYW5kbGVyXG4gICAqIEBoaWRkZW5cbiAgICovZnVuY3Rpb24gYnJlYWRjcnVtYkV2ZW50SGFuZGxlcihldmVudE5hbWUsZGVib3VuY2Upe2lmKGRlYm91bmNlPT09dm9pZCAwKXtkZWJvdW5jZT1mYWxzZTt9cmV0dXJuIGZ1bmN0aW9uKGV2ZW50KXsvLyByZXNldCBrZXlwcmVzcyB0aW1lb3V0OyBlLmcuIHRyaWdnZXJpbmcgYSAnY2xpY2snIGFmdGVyXG4vLyBhICdrZXlwcmVzcycgd2lsbCByZXNldCB0aGUga2V5cHJlc3MgZGVib3VuY2Ugc28gdGhhdCBhIG5ld1xuLy8gc2V0IG9mIGtleXByZXNzZXMgY2FuIGJlIHJlY29yZGVkXG5rZXlwcmVzc1RpbWVvdXQ9dW5kZWZpbmVkOy8vIEl0J3MgcG9zc2libGUgdGhpcyBoYW5kbGVyIG1pZ2h0IHRyaWdnZXIgbXVsdGlwbGUgdGltZXMgZm9yIHRoZSBzYW1lXG4vLyBldmVudCAoZS5nLiBldmVudCBwcm9wYWdhdGlvbiB0aHJvdWdoIG5vZGUgYW5jZXN0b3JzKS4gSWdub3JlIGlmIHdlJ3ZlXG4vLyBhbHJlYWR5IGNhcHR1cmVkIHRoZSBldmVudC5cbmlmKCFldmVudHx8bGFzdENhcHR1cmVkRXZlbnQ9PT1ldmVudCl7cmV0dXJuO31sYXN0Q2FwdHVyZWRFdmVudD1ldmVudDt2YXIgY2FwdHVyZUJyZWFkY3J1bWI9ZnVuY3Rpb24gY2FwdHVyZUJyZWFkY3J1bWIoKXt2YXIgdGFyZ2V0Oy8vIEFjY2Vzc2luZyBldmVudC50YXJnZXQgY2FuIHRocm93IChzZWUgZ2V0c2VudHJ5L3JhdmVuLWpzIzgzOCwgIzc2OClcbnRyeXt0YXJnZXQ9ZXZlbnQudGFyZ2V0P2h0bWxUcmVlQXNTdHJpbmcoZXZlbnQudGFyZ2V0KTpodG1sVHJlZUFzU3RyaW5nKGV2ZW50KTt9Y2F0Y2goZSl7dGFyZ2V0PSc8dW5rbm93bj4nO31pZih0YXJnZXQubGVuZ3RoPT09MCl7cmV0dXJuO31nZXRDdXJyZW50SHViKCkuYWRkQnJlYWRjcnVtYih7Y2F0ZWdvcnk6XCJ1aS5cIitldmVudE5hbWUsbWVzc2FnZTp0YXJnZXR9LHtldmVudDpldmVudCxuYW1lOmV2ZW50TmFtZX0pO307aWYoZGVib3VuY2VUaW1lcil7Y2xlYXJUaW1lb3V0KGRlYm91bmNlVGltZXIpO31pZihkZWJvdW5jZSl7ZGVib3VuY2VUaW1lcj1zZXRUaW1lb3V0KGNhcHR1cmVCcmVhZGNydW1iKTt9ZWxzZXtjYXB0dXJlQnJlYWRjcnVtYigpO319O30vKipcbiAgICogV3JhcHMgYWRkRXZlbnRMaXN0ZW5lciB0byBjYXB0dXJlIGtleXByZXNzIFVJIGV2ZW50c1xuICAgKiBAcmV0dXJucyB3cmFwcGVkIGtleXByZXNzIGV2ZW50cyBoYW5kbGVyXG4gICAqIEBoaWRkZW5cbiAgICovZnVuY3Rpb24ga2V5cHJlc3NFdmVudEhhbmRsZXIoKXsvLyBUT0RPOiBpZiBzb21laG93IHVzZXIgc3dpdGNoZXMga2V5cHJlc3MgdGFyZ2V0IGJlZm9yZVxuLy8gICAgICAgZGVib3VuY2UgdGltZW91dCBpcyB0cmlnZ2VyZWQsIHdlIHdpbGwgb25seSBjYXB0dXJlXG4vLyAgICAgICBhIHNpbmdsZSBicmVhZGNydW1iIGZyb20gdGhlIEZJUlNUIHRhcmdldCAoYWNjZXB0YWJsZT8pXG5yZXR1cm4gZnVuY3Rpb24oZXZlbnQpe3ZhciB0YXJnZXQ7dHJ5e3RhcmdldD1ldmVudC50YXJnZXQ7fWNhdGNoKGUpey8vIGp1c3QgYWNjZXNzaW5nIGV2ZW50IHByb3BlcnRpZXMgY2FuIHRocm93IGFuIGV4Y2VwdGlvbiBpbiBzb21lIHJhcmUgY2lyY3Vtc3RhbmNlc1xuLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3JhdmVuLWpzL2lzc3Vlcy84MzhcbnJldHVybjt9dmFyIHRhZ05hbWU9dGFyZ2V0JiZ0YXJnZXQudGFnTmFtZTsvLyBvbmx5IGNvbnNpZGVyIGtleXByZXNzIGV2ZW50cyBvbiBhY3R1YWwgaW5wdXQgZWxlbWVudHNcbi8vIHRoaXMgd2lsbCBkaXNyZWdhcmQga2V5cHJlc3NlcyB0YXJnZXRpbmcgYm9keSAoZS5nLiB0YWJiaW5nXG4vLyB0aHJvdWdoIGVsZW1lbnRzLCBob3RrZXlzLCBldGMpXG5pZighdGFnTmFtZXx8dGFnTmFtZSE9PSdJTlBVVCcmJnRhZ05hbWUhPT0nVEVYVEFSRUEnJiYhdGFyZ2V0LmlzQ29udGVudEVkaXRhYmxlKXtyZXR1cm47fS8vIHJlY29yZCBmaXJzdCBrZXlwcmVzcyBpbiBhIHNlcmllcywgYnV0IGlnbm9yZSBzdWJzZXF1ZW50XG4vLyBrZXlwcmVzc2VzIHVudGlsIGRlYm91bmNlIGNsZWFyc1xuaWYoIWtleXByZXNzVGltZW91dCl7YnJlYWRjcnVtYkV2ZW50SGFuZGxlcignaW5wdXQnKShldmVudCk7fWNsZWFyVGltZW91dChrZXlwcmVzc1RpbWVvdXQpO2tleXByZXNzVGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7a2V5cHJlc3NUaW1lb3V0PXVuZGVmaW5lZDt9LGRlYm91bmNlRHVyYXRpb24pO307fS8qKiBHbG9iYWwgaGFuZGxlcnMgKi92YXIgR2xvYmFsSGFuZGxlcnM9LyoqIEBjbGFzcyAqL2Z1bmN0aW9uKCl7LyoqIEpTRG9jICovZnVuY3Rpb24gR2xvYmFsSGFuZGxlcnMob3B0aW9ucyl7LyoqXG4gICAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICAgKi90aGlzLm5hbWU9R2xvYmFsSGFuZGxlcnMuaWQ7LyoqIEpTRG9jICovdGhpcy5fZ2xvYmFsPWdldEdsb2JhbE9iamVjdCgpOy8qKiBKU0RvYyAqL3RoaXMuX29sZE9uRXJyb3JIYW5kbGVyPW51bGw7LyoqIEpTRG9jICovdGhpcy5fb2xkT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyPW51bGw7LyoqIEpTRG9jICovdGhpcy5fb25FcnJvckhhbmRsZXJJbnN0YWxsZWQ9ZmFsc2U7LyoqIEpTRG9jICovdGhpcy5fb25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVySW5zdGFsbGVkPWZhbHNlO3RoaXMuX29wdGlvbnM9X2Fzc2lnbih7b25lcnJvcjp0cnVlLG9udW5oYW5kbGVkcmVqZWN0aW9uOnRydWV9LG9wdGlvbnMpO30vKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9HbG9iYWxIYW5kbGVycy5wcm90b3R5cGUuc2V0dXBPbmNlPWZ1bmN0aW9uKCl7RXJyb3Iuc3RhY2tUcmFjZUxpbWl0PTUwO2lmKHRoaXMuX29wdGlvbnMub25lcnJvcil7bG9nZ2VyJDEubG9nKCdHbG9iYWwgSGFuZGxlciBhdHRhY2hlZDogb25lcnJvcicpO3RoaXMuX2luc3RhbGxHbG9iYWxPbkVycm9ySGFuZGxlcigpO31pZih0aGlzLl9vcHRpb25zLm9udW5oYW5kbGVkcmVqZWN0aW9uKXtsb2dnZXIkMS5sb2coJ0dsb2JhbCBIYW5kbGVyIGF0dGFjaGVkOiBvbnVuaGFuZGxlZHJlamVjdGlvbicpO3RoaXMuX2luc3RhbGxHbG9iYWxPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIoKTt9fTsvKiogSlNEb2MgKi9HbG9iYWxIYW5kbGVycy5wcm90b3R5cGUuX2luc3RhbGxHbG9iYWxPbkVycm9ySGFuZGxlcj1mdW5jdGlvbigpe2lmKHRoaXMuX29uRXJyb3JIYW5kbGVySW5zdGFsbGVkKXtyZXR1cm47fXZhciBzZWxmPXRoaXM7Ly8gdHNsaW50OmRpc2FibGUtbGluZTpuby10aGlzLWFzc2lnbm1lbnRcbnRoaXMuX29sZE9uRXJyb3JIYW5kbGVyPXRoaXMuX2dsb2JhbC5vbmVycm9yO3RoaXMuX2dsb2JhbC5vbmVycm9yPWZ1bmN0aW9uKG1zZyx1cmwsbGluZSxjb2x1bW4sZXJyb3Ipe3ZhciBjdXJyZW50SHViPWdldEN1cnJlbnRIdWIoKTt2YXIgaGFzSW50ZWdyYXRpb249Y3VycmVudEh1Yi5nZXRJbnRlZ3JhdGlvbihHbG9iYWxIYW5kbGVycyk7dmFyIGlzRmFpbGVkT3duRGVsaXZlcnk9ZXJyb3ImJmVycm9yLl9fc2VudHJ5X293bl9yZXF1ZXN0X189PT10cnVlO2lmKCFoYXNJbnRlZ3JhdGlvbnx8c2hvdWxkSWdub3JlT25FcnJvcigpfHxpc0ZhaWxlZE93bkRlbGl2ZXJ5KXtpZihzZWxmLl9vbGRPbkVycm9ySGFuZGxlcil7cmV0dXJuIHNlbGYuX29sZE9uRXJyb3JIYW5kbGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9cmV0dXJuIGZhbHNlO312YXIgY2xpZW50PWN1cnJlbnRIdWIuZ2V0Q2xpZW50KCk7dmFyIGV2ZW50PWlzUHJpbWl0aXZlJDEoZXJyb3IpP3NlbGYuX2V2ZW50RnJvbUluY29tcGxldGVPbkVycm9yKG1zZyx1cmwsbGluZSxjb2x1bW4pOnNlbGYuX2VuaGFuY2VFdmVudFdpdGhJbml0aWFsRnJhbWUoZXZlbnRGcm9tVW5rbm93bklucHV0KGVycm9yLHVuZGVmaW5lZCx7YXR0YWNoU3RhY2t0cmFjZTpjbGllbnQmJmNsaWVudC5nZXRPcHRpb25zKCkuYXR0YWNoU3RhY2t0cmFjZSxyZWplY3Rpb246ZmFsc2V9KSx1cmwsbGluZSxjb2x1bW4pO2FkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCx7aGFuZGxlZDpmYWxzZSx0eXBlOidvbmVycm9yJ30pO2N1cnJlbnRIdWIuY2FwdHVyZUV2ZW50KGV2ZW50LHtvcmlnaW5hbEV4Y2VwdGlvbjplcnJvcn0pO2lmKHNlbGYuX29sZE9uRXJyb3JIYW5kbGVyKXtyZXR1cm4gc2VsZi5fb2xkT25FcnJvckhhbmRsZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpO31yZXR1cm4gZmFsc2U7fTt0aGlzLl9vbkVycm9ySGFuZGxlckluc3RhbGxlZD10cnVlO307LyoqIEpTRG9jICovR2xvYmFsSGFuZGxlcnMucHJvdG90eXBlLl9pbnN0YWxsR2xvYmFsT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyPWZ1bmN0aW9uKCl7aWYodGhpcy5fb25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVySW5zdGFsbGVkKXtyZXR1cm47fXZhciBzZWxmPXRoaXM7Ly8gdHNsaW50OmRpc2FibGUtbGluZTpuby10aGlzLWFzc2lnbm1lbnRcbnRoaXMuX29sZE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlcj10aGlzLl9nbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb247dGhpcy5fZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uPWZ1bmN0aW9uKGUpe3ZhciBlcnJvcj1lO3RyeXtlcnJvcj1lJiYncmVhc29uJ2luIGU/ZS5yZWFzb246ZTt9Y2F0Y2goX29PKXsvLyBuby1lbXB0eVxufXZhciBjdXJyZW50SHViPWdldEN1cnJlbnRIdWIoKTt2YXIgaGFzSW50ZWdyYXRpb249Y3VycmVudEh1Yi5nZXRJbnRlZ3JhdGlvbihHbG9iYWxIYW5kbGVycyk7dmFyIGlzRmFpbGVkT3duRGVsaXZlcnk9ZXJyb3ImJmVycm9yLl9fc2VudHJ5X293bl9yZXF1ZXN0X189PT10cnVlO2lmKCFoYXNJbnRlZ3JhdGlvbnx8c2hvdWxkSWdub3JlT25FcnJvcigpfHxpc0ZhaWxlZE93bkRlbGl2ZXJ5KXtpZihzZWxmLl9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIpe3JldHVybiBzZWxmLl9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpO31yZXR1cm4gZmFsc2U7fXZhciBjbGllbnQ9Y3VycmVudEh1Yi5nZXRDbGllbnQoKTt2YXIgZXZlbnQ9aXNQcmltaXRpdmUkMShlcnJvcik/c2VsZi5fZXZlbnRGcm9tSW5jb21wbGV0ZVJlamVjdGlvbihlcnJvcik6ZXZlbnRGcm9tVW5rbm93bklucHV0KGVycm9yLHVuZGVmaW5lZCx7YXR0YWNoU3RhY2t0cmFjZTpjbGllbnQmJmNsaWVudC5nZXRPcHRpb25zKCkuYXR0YWNoU3RhY2t0cmFjZSxyZWplY3Rpb246dHJ1ZX0pO2V2ZW50LmxldmVsPVNldmVyaXR5LkVycm9yO2FkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCx7aGFuZGxlZDpmYWxzZSx0eXBlOidvbnVuaGFuZGxlZHJlamVjdGlvbid9KTtjdXJyZW50SHViLmNhcHR1cmVFdmVudChldmVudCx7b3JpZ2luYWxFeGNlcHRpb246ZXJyb3J9KTtpZihzZWxmLl9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIpe3JldHVybiBzZWxmLl9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpO31yZXR1cm4gZmFsc2U7fTt0aGlzLl9vblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXJJbnN0YWxsZWQ9dHJ1ZTt9Oy8qKlxuICAgICAgICogVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGEgc3RhY2sgZnJvbSBhbiBvbGQsIGVycm9yLWxlc3Mgb25lcnJvciBoYW5kbGVyLlxuICAgICAgICovR2xvYmFsSGFuZGxlcnMucHJvdG90eXBlLl9ldmVudEZyb21JbmNvbXBsZXRlT25FcnJvcj1mdW5jdGlvbihtc2csdXJsLGxpbmUsY29sdW1uKXt2YXIgRVJST1JfVFlQRVNfUkU9L14oPzpbVXVdbmNhdWdodCAoPzpleGNlcHRpb246ICk/KT8oPzooKD86RXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJfClFcnJvcik6ICk/KC4qKSQvaTsvLyBJZiAnbWVzc2FnZScgaXMgRXJyb3JFdmVudCwgZ2V0IHJlYWwgbWVzc2FnZSBmcm9tIGluc2lkZVxudmFyIG1lc3NhZ2U9aXNFcnJvckV2ZW50KG1zZyk/bXNnLm1lc3NhZ2U6bXNnO3ZhciBuYW1lO2lmKGlzU3RyaW5nKG1lc3NhZ2UpKXt2YXIgZ3JvdXBzPW1lc3NhZ2UubWF0Y2goRVJST1JfVFlQRVNfUkUpO2lmKGdyb3Vwcyl7bmFtZT1ncm91cHNbMV07bWVzc2FnZT1ncm91cHNbMl07fX12YXIgZXZlbnQ9e2V4Y2VwdGlvbjp7dmFsdWVzOlt7dHlwZTpuYW1lfHwnRXJyb3InLHZhbHVlOm1lc3NhZ2V9XX19O3JldHVybiB0aGlzLl9lbmhhbmNlRXZlbnRXaXRoSW5pdGlhbEZyYW1lKGV2ZW50LHVybCxsaW5lLGNvbHVtbik7fTsvKipcbiAgICAgICAqIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBhbiBFdmVudCBmcm9tIGFuIFRyYWNlS2l0U3RhY2tUcmFjZSB0aGF0IGhhcyBwYXJ0IG9mIGl0IG1pc3NpbmcuXG4gICAgICAgKi9HbG9iYWxIYW5kbGVycy5wcm90b3R5cGUuX2V2ZW50RnJvbUluY29tcGxldGVSZWplY3Rpb249ZnVuY3Rpb24oZXJyb3Ipe3JldHVybntleGNlcHRpb246e3ZhbHVlczpbe3R5cGU6J1VuaGFuZGxlZFJlamVjdGlvbicsdmFsdWU6XCJOb24tRXJyb3IgcHJvbWlzZSByZWplY3Rpb24gY2FwdHVyZWQgd2l0aCB2YWx1ZTogXCIrZXJyb3J9XX19O307LyoqIEpTRG9jICovR2xvYmFsSGFuZGxlcnMucHJvdG90eXBlLl9lbmhhbmNlRXZlbnRXaXRoSW5pdGlhbEZyYW1lPWZ1bmN0aW9uKGV2ZW50LHVybCxsaW5lLGNvbHVtbil7ZXZlbnQuZXhjZXB0aW9uPWV2ZW50LmV4Y2VwdGlvbnx8e307ZXZlbnQuZXhjZXB0aW9uLnZhbHVlcz1ldmVudC5leGNlcHRpb24udmFsdWVzfHxbXTtldmVudC5leGNlcHRpb24udmFsdWVzWzBdPWV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF18fHt9O2V2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0uc3RhY2t0cmFjZT1ldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnN0YWNrdHJhY2V8fHt9O2V2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0uc3RhY2t0cmFjZS5mcmFtZXM9ZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5zdGFja3RyYWNlLmZyYW1lc3x8W107dmFyIGNvbG5vPWlzTmFOKHBhcnNlSW50KGNvbHVtbiwxMCkpP3VuZGVmaW5lZDpjb2x1bW47dmFyIGxpbmVubz1pc05hTihwYXJzZUludChsaW5lLDEwKSk/dW5kZWZpbmVkOmxpbmU7dmFyIGZpbGVuYW1lPWlzU3RyaW5nKHVybCkmJnVybC5sZW5ndGg+MD91cmw6Z2V0TG9jYXRpb25IcmVmKCk7aWYoZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5zdGFja3RyYWNlLmZyYW1lcy5sZW5ndGg9PT0wKXtldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnN0YWNrdHJhY2UuZnJhbWVzLnB1c2goe2NvbG5vOmNvbG5vLGZpbGVuYW1lOmZpbGVuYW1lLFwiZnVuY3Rpb25cIjonPycsaW5fYXBwOnRydWUsbGluZW5vOmxpbmVub30pO31yZXR1cm4gZXZlbnQ7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9HbG9iYWxIYW5kbGVycy5pZD0nR2xvYmFsSGFuZGxlcnMnO3JldHVybiBHbG9iYWxIYW5kbGVyczt9KCk7LyoqIFdyYXAgdGltZXIgZnVuY3Rpb25zIGFuZCBldmVudCB0YXJnZXRzIHRvIGNhdGNoIGVycm9ycyBhbmQgcHJvdmlkZSBiZXR0ZXIgbWV0YSBkYXRhICovdmFyIFRyeUNhdGNoPS8qKiBAY2xhc3MgKi9mdW5jdGlvbigpe2Z1bmN0aW9uIFRyeUNhdGNoKCl7LyoqIEpTRG9jICovdGhpcy5faWdub3JlT25FcnJvcj0wOy8qKlxuICAgICAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgICAgICovdGhpcy5uYW1lPVRyeUNhdGNoLmlkO30vKiogSlNEb2MgKi9UcnlDYXRjaC5wcm90b3R5cGUuX3dyYXBUaW1lRnVuY3Rpb249ZnVuY3Rpb24ob3JpZ2luYWwpe3JldHVybiBmdW5jdGlvbigpe3ZhciBhcmdzPVtdO2Zvcih2YXIgX2k9MDtfaTxhcmd1bWVudHMubGVuZ3RoO19pKyspe2FyZ3NbX2ldPWFyZ3VtZW50c1tfaV07fXZhciBvcmlnaW5hbENhbGxiYWNrPWFyZ3NbMF07YXJnc1swXT13cmFwKG9yaWdpbmFsQ2FsbGJhY2sse21lY2hhbmlzbTp7ZGF0YTp7XCJmdW5jdGlvblwiOmdldEZ1bmN0aW9uTmFtZShvcmlnaW5hbCl9LGhhbmRsZWQ6dHJ1ZSx0eXBlOidpbnN0cnVtZW50J319KTtyZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcyxhcmdzKTt9O307LyoqIEpTRG9jICovVHJ5Q2F0Y2gucHJvdG90eXBlLl93cmFwUkFGPWZ1bmN0aW9uKG9yaWdpbmFsKXtyZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2spe3JldHVybiBvcmlnaW5hbCh3cmFwKGNhbGxiYWNrLHttZWNoYW5pc206e2RhdGE6e1wiZnVuY3Rpb25cIjoncmVxdWVzdEFuaW1hdGlvbkZyYW1lJyxoYW5kbGVyOmdldEZ1bmN0aW9uTmFtZShvcmlnaW5hbCl9LGhhbmRsZWQ6dHJ1ZSx0eXBlOidpbnN0cnVtZW50J319KSk7fTt9Oy8qKiBKU0RvYyAqL1RyeUNhdGNoLnByb3RvdHlwZS5fd3JhcEV2ZW50VGFyZ2V0PWZ1bmN0aW9uKHRhcmdldCl7dmFyIGdsb2JhbD1nZXRHbG9iYWxPYmplY3QoKTt2YXIgcHJvdG89Z2xvYmFsW3RhcmdldF0mJmdsb2JhbFt0YXJnZXRdLnByb3RvdHlwZTtpZighcHJvdG98fCFwcm90by5oYXNPd25Qcm9wZXJ0eXx8IXByb3RvLmhhc093blByb3BlcnR5KCdhZGRFdmVudExpc3RlbmVyJykpe3JldHVybjt9ZmlsbChwcm90bywnYWRkRXZlbnRMaXN0ZW5lcicsZnVuY3Rpb24ob3JpZ2luYWwpe3JldHVybiBmdW5jdGlvbihldmVudE5hbWUsZm4sb3B0aW9ucyl7dHJ5ey8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bmJvdW5kLW1ldGhvZCBzdHJpY3QtdHlwZS1wcmVkaWNhdGVzXG5pZih0eXBlb2YgZm4uaGFuZGxlRXZlbnQ9PT0nZnVuY3Rpb24nKXtmbi5oYW5kbGVFdmVudD13cmFwKGZuLmhhbmRsZUV2ZW50LmJpbmQoZm4pLHttZWNoYW5pc206e2RhdGE6e1wiZnVuY3Rpb25cIjonaGFuZGxlRXZlbnQnLGhhbmRsZXI6Z2V0RnVuY3Rpb25OYW1lKGZuKSx0YXJnZXQ6dGFyZ2V0fSxoYW5kbGVkOnRydWUsdHlwZTonaW5zdHJ1bWVudCd9fSk7fX1jYXRjaChlcnIpey8vIGNhbiBzb21ldGltZXMgZ2V0ICdQZXJtaXNzaW9uIGRlbmllZCB0byBhY2Nlc3MgcHJvcGVydHkgXCJoYW5kbGUgRXZlbnQnXG59cmV0dXJuIG9yaWdpbmFsLmNhbGwodGhpcyxldmVudE5hbWUsd3JhcChmbix7bWVjaGFuaXNtOntkYXRhOntcImZ1bmN0aW9uXCI6J2FkZEV2ZW50TGlzdGVuZXInLGhhbmRsZXI6Z2V0RnVuY3Rpb25OYW1lKGZuKSx0YXJnZXQ6dGFyZ2V0fSxoYW5kbGVkOnRydWUsdHlwZTonaW5zdHJ1bWVudCd9fSksb3B0aW9ucyk7fTt9KTtmaWxsKHByb3RvLCdyZW1vdmVFdmVudExpc3RlbmVyJyxmdW5jdGlvbihvcmlnaW5hbCl7cmV0dXJuIGZ1bmN0aW9uKGV2ZW50TmFtZSxmbixvcHRpb25zKXt2YXIgY2FsbGJhY2s9Zm47dHJ5e2NhbGxiYWNrPWNhbGxiYWNrJiYoY2FsbGJhY2suX19zZW50cnlfd3JhcHBlZF9ffHxjYWxsYmFjayk7fWNhdGNoKGUpey8vIGlnbm9yZSwgYWNjZXNzaW5nIF9fc2VudHJ5X3dyYXBwZWRfXyB3aWxsIHRocm93IGluIHNvbWUgU2VsZW5pdW0gZW52aXJvbm1lbnRzXG59cmV0dXJuIG9yaWdpbmFsLmNhbGwodGhpcyxldmVudE5hbWUsY2FsbGJhY2ssb3B0aW9ucyk7fTt9KTt9Oy8qKlxuICAgICAgICogV3JhcCB0aW1lciBmdW5jdGlvbnMgYW5kIGV2ZW50IHRhcmdldHMgdG8gY2F0Y2ggZXJyb3JzXG4gICAgICAgKiBhbmQgcHJvdmlkZSBiZXR0ZXIgbWV0YWRhdGEuXG4gICAgICAgKi9UcnlDYXRjaC5wcm90b3R5cGUuc2V0dXBPbmNlPWZ1bmN0aW9uKCl7dGhpcy5faWdub3JlT25FcnJvcj10aGlzLl9pZ25vcmVPbkVycm9yO3ZhciBnbG9iYWw9Z2V0R2xvYmFsT2JqZWN0KCk7ZmlsbChnbG9iYWwsJ3NldFRpbWVvdXQnLHRoaXMuX3dyYXBUaW1lRnVuY3Rpb24uYmluZCh0aGlzKSk7ZmlsbChnbG9iYWwsJ3NldEludGVydmFsJyx0aGlzLl93cmFwVGltZUZ1bmN0aW9uLmJpbmQodGhpcykpO2ZpbGwoZ2xvYmFsLCdyZXF1ZXN0QW5pbWF0aW9uRnJhbWUnLHRoaXMuX3dyYXBSQUYuYmluZCh0aGlzKSk7WydFdmVudFRhcmdldCcsJ1dpbmRvdycsJ05vZGUnLCdBcHBsaWNhdGlvbkNhY2hlJywnQXVkaW9UcmFja0xpc3QnLCdDaGFubmVsTWVyZ2VyTm9kZScsJ0NyeXB0b09wZXJhdGlvbicsJ0V2ZW50U291cmNlJywnRmlsZVJlYWRlcicsJ0hUTUxVbmtub3duRWxlbWVudCcsJ0lEQkRhdGFiYXNlJywnSURCUmVxdWVzdCcsJ0lEQlRyYW5zYWN0aW9uJywnS2V5T3BlcmF0aW9uJywnTWVkaWFDb250cm9sbGVyJywnTWVzc2FnZVBvcnQnLCdNb2RhbFdpbmRvdycsJ05vdGlmaWNhdGlvbicsJ1NWR0VsZW1lbnRJbnN0YW5jZScsJ1NjcmVlbicsJ1RleHRUcmFjaycsJ1RleHRUcmFja0N1ZScsJ1RleHRUcmFja0xpc3QnLCdXZWJTb2NrZXQnLCdXZWJTb2NrZXRXb3JrZXInLCdXb3JrZXInLCdYTUxIdHRwUmVxdWVzdCcsJ1hNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXQnLCdYTUxIdHRwUmVxdWVzdFVwbG9hZCddLmZvckVhY2godGhpcy5fd3JhcEV2ZW50VGFyZ2V0LmJpbmQodGhpcykpO307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovVHJ5Q2F0Y2guaWQ9J1RyeUNhdGNoJztyZXR1cm4gVHJ5Q2F0Y2g7fSgpOy8qKlxuICAgKiBTYWZlbHkgZXh0cmFjdCBmdW5jdGlvbiBuYW1lIGZyb20gaXRzZWxmXG4gICAqL2Z1bmN0aW9uIGdldEZ1bmN0aW9uTmFtZShmbil7dHJ5e3JldHVybiBmbiYmZm4ubmFtZXx8Jzxhbm9ueW1vdXM+Jzt9Y2F0Y2goZSl7Ly8gSnVzdCBhY2Nlc3NpbmcgY3VzdG9tIHByb3BzIGluIHNvbWUgU2VsZW5pdW0gZW52aXJvbm1lbnRzXG4vLyBjYW4gY2F1c2UgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXhjZXB0aW9uIChzZWUgcmF2ZW4tanMjNDk1KS5cbnJldHVybic8YW5vbnltb3VzPic7fX12YXIgZ2xvYmFsJDM9Z2V0R2xvYmFsT2JqZWN0KCk7dmFyIGxhc3RIcmVmOy8qKiBEZWZhdWx0IEJyZWFkY3J1bWJzIGluc3RydW1lbnRhdGlvbnMgKi92YXIgQnJlYWRjcnVtYnMkMT0vKiogQGNsYXNzICovZnVuY3Rpb24oKXsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9mdW5jdGlvbiBCcmVhZGNydW1icyhvcHRpb25zKXsvKipcbiAgICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgICAqL3RoaXMubmFtZT1CcmVhZGNydW1icy5pZDt0aGlzLl9vcHRpb25zPV9hc3NpZ24oe2NvbnNvbGU6dHJ1ZSxkb206dHJ1ZSxmZXRjaDp0cnVlLGhpc3Rvcnk6dHJ1ZSxzZW50cnk6dHJ1ZSx4aHI6dHJ1ZX0sb3B0aW9ucyk7fS8qKiBKU0RvYyAqL0JyZWFkY3J1bWJzLnByb3RvdHlwZS5faW5zdHJ1bWVudENvbnNvbGU9ZnVuY3Rpb24oKXtpZighKCdjb25zb2xlJ2luIGdsb2JhbCQzKSl7cmV0dXJuO31bJ2RlYnVnJywnaW5mbycsJ3dhcm4nLCdlcnJvcicsJ2xvZycsJ2Fzc2VydCddLmZvckVhY2goZnVuY3Rpb24obGV2ZWwpe2lmKCEobGV2ZWwgaW4gZ2xvYmFsJDMuY29uc29sZSkpe3JldHVybjt9ZmlsbChnbG9iYWwkMy5jb25zb2xlLGxldmVsLGZ1bmN0aW9uKG9yaWdpbmFsQ29uc29sZUxldmVsKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYXJncz1bXTtmb3IodmFyIF9pPTA7X2k8YXJndW1lbnRzLmxlbmd0aDtfaSsrKXthcmdzW19pXT1hcmd1bWVudHNbX2ldO312YXIgYnJlYWRjcnVtYkRhdGE9e2NhdGVnb3J5Oidjb25zb2xlJyxkYXRhOntleHRyYTp7YXJndW1lbnRzOm5vcm1hbGl6ZSQxKGFyZ3MsMyl9LGxvZ2dlcjonY29uc29sZSd9LGxldmVsOlNldmVyaXR5LmZyb21TdHJpbmcobGV2ZWwpLG1lc3NhZ2U6c2FmZUpvaW4oYXJncywnICcpfTtpZihsZXZlbD09PSdhc3NlcnQnKXtpZihhcmdzWzBdPT09ZmFsc2Upe2JyZWFkY3J1bWJEYXRhLm1lc3NhZ2U9XCJBc3NlcnRpb24gZmFpbGVkOiBcIisoc2FmZUpvaW4oYXJncy5zbGljZSgxKSwnICcpfHwnY29uc29sZS5hc3NlcnQnKTticmVhZGNydW1iRGF0YS5kYXRhLmV4dHJhLmFyZ3VtZW50cz1ub3JtYWxpemUkMShhcmdzLnNsaWNlKDEpLDMpO0JyZWFkY3J1bWJzLmFkZEJyZWFkY3J1bWIoYnJlYWRjcnVtYkRhdGEse2lucHV0OmFyZ3MsbGV2ZWw6bGV2ZWx9KTt9fWVsc2V7QnJlYWRjcnVtYnMuYWRkQnJlYWRjcnVtYihicmVhZGNydW1iRGF0YSx7aW5wdXQ6YXJncyxsZXZlbDpsZXZlbH0pO30vLyB0aGlzIGZhaWxzIGZvciBzb21lIGJyb3dzZXJzLiA6KFxuaWYob3JpZ2luYWxDb25zb2xlTGV2ZWwpe0Z1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKG9yaWdpbmFsQ29uc29sZUxldmVsLGdsb2JhbCQzLmNvbnNvbGUsYXJncyk7fX07fSk7fSk7fTsvKiogSlNEb2MgKi9CcmVhZGNydW1icy5wcm90b3R5cGUuX2luc3RydW1lbnRET009ZnVuY3Rpb24oKXtpZighKCdkb2N1bWVudCdpbiBnbG9iYWwkMykpe3JldHVybjt9Ly8gQ2FwdHVyZSBicmVhZGNydW1icyBmcm9tIGFueSBjbGljayB0aGF0IGlzIHVuaGFuZGxlZCAvIGJ1YmJsZWQgdXAgYWxsIHRoZSB3YXlcbi8vIHRvIHRoZSBkb2N1bWVudC4gRG8gdGhpcyBiZWZvcmUgd2UgaW5zdHJ1bWVudCBhZGRFdmVudExpc3RlbmVyLlxuZ2xvYmFsJDMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGJyZWFkY3J1bWJFdmVudEhhbmRsZXIoJ2NsaWNrJyksZmFsc2UpO2dsb2JhbCQzLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJyxrZXlwcmVzc0V2ZW50SGFuZGxlcigpLGZhbHNlKTsvLyBBZnRlciBob29raW5nIGludG8gZG9jdW1lbnQgYnViYmxlZCB1cCBjbGljayBhbmQga2V5cHJlc3NlcyBldmVudHMsIHdlIGFsc28gaG9vayBpbnRvIHVzZXIgaGFuZGxlZCBjbGljayAmIGtleXByZXNzZXMuXG5bJ0V2ZW50VGFyZ2V0JywnTm9kZSddLmZvckVhY2goZnVuY3Rpb24odGFyZ2V0KXt2YXIgcHJvdG89Z2xvYmFsJDNbdGFyZ2V0XSYmZ2xvYmFsJDNbdGFyZ2V0XS5wcm90b3R5cGU7aWYoIXByb3RvfHwhcHJvdG8uaGFzT3duUHJvcGVydHl8fCFwcm90by5oYXNPd25Qcm9wZXJ0eSgnYWRkRXZlbnRMaXN0ZW5lcicpKXtyZXR1cm47fWZpbGwocHJvdG8sJ2FkZEV2ZW50TGlzdGVuZXInLGZ1bmN0aW9uKG9yaWdpbmFsKXtyZXR1cm4gZnVuY3Rpb24oZXZlbnROYW1lLGZuLG9wdGlvbnMpe2lmKGZuJiZmbi5oYW5kbGVFdmVudCl7aWYoZXZlbnROYW1lPT09J2NsaWNrJyl7ZmlsbChmbiwnaGFuZGxlRXZlbnQnLGZ1bmN0aW9uKGlubmVyT3JpZ2luYWwpe3JldHVybiBmdW5jdGlvbihldmVudCl7YnJlYWRjcnVtYkV2ZW50SGFuZGxlcignY2xpY2snKShldmVudCk7cmV0dXJuIGlubmVyT3JpZ2luYWwuY2FsbCh0aGlzLGV2ZW50KTt9O30pO31pZihldmVudE5hbWU9PT0na2V5cHJlc3MnKXtmaWxsKGZuLCdoYW5kbGVFdmVudCcsZnVuY3Rpb24oaW5uZXJPcmlnaW5hbCl7cmV0dXJuIGZ1bmN0aW9uKGV2ZW50KXtrZXlwcmVzc0V2ZW50SGFuZGxlcigpKGV2ZW50KTtyZXR1cm4gaW5uZXJPcmlnaW5hbC5jYWxsKHRoaXMsZXZlbnQpO307fSk7fX1lbHNle2lmKGV2ZW50TmFtZT09PSdjbGljaycpe2JyZWFkY3J1bWJFdmVudEhhbmRsZXIoJ2NsaWNrJyx0cnVlKSh0aGlzKTt9aWYoZXZlbnROYW1lPT09J2tleXByZXNzJyl7a2V5cHJlc3NFdmVudEhhbmRsZXIoKSh0aGlzKTt9fXJldHVybiBvcmlnaW5hbC5jYWxsKHRoaXMsZXZlbnROYW1lLGZuLG9wdGlvbnMpO307fSk7ZmlsbChwcm90bywncmVtb3ZlRXZlbnRMaXN0ZW5lcicsZnVuY3Rpb24ob3JpZ2luYWwpe3JldHVybiBmdW5jdGlvbihldmVudE5hbWUsZm4sb3B0aW9ucyl7dmFyIGNhbGxiYWNrPWZuO3RyeXtjYWxsYmFjaz1jYWxsYmFjayYmKGNhbGxiYWNrLl9fc2VudHJ5X3dyYXBwZWRfX3x8Y2FsbGJhY2spO31jYXRjaChlKXsvLyBpZ25vcmUsIGFjY2Vzc2luZyBfX3NlbnRyeV93cmFwcGVkX18gd2lsbCB0aHJvdyBpbiBzb21lIFNlbGVuaXVtIGVudmlyb25tZW50c1xufXJldHVybiBvcmlnaW5hbC5jYWxsKHRoaXMsZXZlbnROYW1lLGNhbGxiYWNrLG9wdGlvbnMpO307fSk7fSk7fTsvKiogSlNEb2MgKi9CcmVhZGNydW1icy5wcm90b3R5cGUuX2luc3RydW1lbnRGZXRjaD1mdW5jdGlvbigpe2lmKCFzdXBwb3J0c05hdGl2ZUZldGNoKCkpe3JldHVybjt9ZmlsbChnbG9iYWwkMywnZmV0Y2gnLGZ1bmN0aW9uKG9yaWdpbmFsRmV0Y2gpe3JldHVybiBmdW5jdGlvbigpe3ZhciBhcmdzPVtdO2Zvcih2YXIgX2k9MDtfaTxhcmd1bWVudHMubGVuZ3RoO19pKyspe2FyZ3NbX2ldPWFyZ3VtZW50c1tfaV07fXZhciBmZXRjaElucHV0PWFyZ3NbMF07dmFyIG1ldGhvZD0nR0VUJzt2YXIgdXJsO2lmKHR5cGVvZiBmZXRjaElucHV0PT09J3N0cmluZycpe3VybD1mZXRjaElucHV0O31lbHNlIGlmKCdSZXF1ZXN0J2luIGdsb2JhbCQzJiZmZXRjaElucHV0IGluc3RhbmNlb2YgUmVxdWVzdCl7dXJsPWZldGNoSW5wdXQudXJsO2lmKGZldGNoSW5wdXQubWV0aG9kKXttZXRob2Q9ZmV0Y2hJbnB1dC5tZXRob2Q7fX1lbHNle3VybD1TdHJpbmcoZmV0Y2hJbnB1dCk7fWlmKGFyZ3NbMV0mJmFyZ3NbMV0ubWV0aG9kKXttZXRob2Q9YXJnc1sxXS5tZXRob2Q7fXZhciBjbGllbnQ9Z2V0Q3VycmVudEh1YigpLmdldENsaWVudCgpO3ZhciBkc249Y2xpZW50JiZjbGllbnQuZ2V0RHNuKCk7aWYoZHNuKXt2YXIgZmlsdGVyVXJsPW5ldyBBUEkoZHNuKS5nZXRTdG9yZUVuZHBvaW50KCk7Ly8gaWYgU2VudHJ5IGtleSBhcHBlYXJzIGluIFVSTCwgZG9uJ3QgY2FwdHVyZSBpdCBhcyBhIHJlcXVlc3Rcbi8vIGJ1dCByYXRoZXIgYXMgb3VyIG93biAnc2VudHJ5JyB0eXBlIGJyZWFkY3J1bWJcbmlmKGZpbHRlclVybCYmdXJsLmluZGV4T2YoZmlsdGVyVXJsKSE9PS0xKXtpZihtZXRob2Q9PT0nUE9TVCcmJmFyZ3NbMV0mJmFyZ3NbMV0uYm9keSl7YWRkU2VudHJ5QnJlYWRjcnVtYihhcmdzWzFdLmJvZHkpO31yZXR1cm4gb3JpZ2luYWxGZXRjaC5hcHBseShnbG9iYWwkMyxhcmdzKTt9fXZhciBmZXRjaERhdGE9e21ldGhvZDppc1N0cmluZyhtZXRob2QpP21ldGhvZC50b1VwcGVyQ2FzZSgpOm1ldGhvZCx1cmw6dXJsfTtyZXR1cm4gb3JpZ2luYWxGZXRjaC5hcHBseShnbG9iYWwkMyxhcmdzKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtmZXRjaERhdGEuc3RhdHVzX2NvZGU9cmVzcG9uc2Uuc3RhdHVzO0JyZWFkY3J1bWJzLmFkZEJyZWFkY3J1bWIoe2NhdGVnb3J5OidmZXRjaCcsZGF0YTpmZXRjaERhdGEsdHlwZTonaHR0cCd9LHtpbnB1dDphcmdzLHJlc3BvbnNlOnJlc3BvbnNlfSk7cmV0dXJuIHJlc3BvbnNlO30pLnRoZW4obnVsbCxmdW5jdGlvbihlcnJvcil7QnJlYWRjcnVtYnMuYWRkQnJlYWRjcnVtYih7Y2F0ZWdvcnk6J2ZldGNoJyxkYXRhOmZldGNoRGF0YSxsZXZlbDpTZXZlcml0eS5FcnJvcix0eXBlOidodHRwJ30se2Vycm9yOmVycm9yLGlucHV0OmFyZ3N9KTt0aHJvdyBlcnJvcjt9KTt9O30pO307LyoqIEpTRG9jICovQnJlYWRjcnVtYnMucHJvdG90eXBlLl9pbnN0cnVtZW50SGlzdG9yeT1mdW5jdGlvbigpe3ZhciBfdGhpcz10aGlzO2lmKCFzdXBwb3J0c0hpc3RvcnkoKSl7cmV0dXJuO312YXIgY2FwdHVyZVVybENoYW5nZT1mdW5jdGlvbiBjYXB0dXJlVXJsQ2hhbmdlKGZyb20sdG8pe3ZhciBwYXJzZWRMb2M9cGFyc2VVcmwoZ2xvYmFsJDMubG9jYXRpb24uaHJlZik7dmFyIHBhcnNlZFRvPXBhcnNlVXJsKHRvKTt2YXIgcGFyc2VkRnJvbT1wYXJzZVVybChmcm9tKTsvLyBJbml0aWFsIHB1c2hTdGF0ZSBkb2Vzbid0IHByb3ZpZGUgYGZyb21gIGluZm9ybWF0aW9uXG5pZighcGFyc2VkRnJvbS5wYXRoKXtwYXJzZWRGcm9tPXBhcnNlZExvYzt9Ly8gYmVjYXVzZSBvbnBvcHN0YXRlIG9ubHkgdGVsbHMgeW91IHRoZSBcIm5ld1wiICh0bykgdmFsdWUgb2YgbG9jYXRpb24uaHJlZiwgYW5kXG4vLyBub3QgdGhlIHByZXZpb3VzIChmcm9tKSB2YWx1ZSwgd2UgbmVlZCB0byB0cmFjayB0aGUgdmFsdWUgb2YgdGhlIGN1cnJlbnQgVVJMXG4vLyBzdGF0ZSBvdXJzZWx2ZXNcbmxhc3RIcmVmPXRvOy8vIFVzZSBvbmx5IHRoZSBwYXRoIGNvbXBvbmVudCBvZiB0aGUgVVJMIGlmIHRoZSBVUkwgbWF0Y2hlcyB0aGUgY3VycmVudFxuLy8gZG9jdW1lbnQgKGFsbW9zdCBhbGwgdGhlIHRpbWUgd2hlbiB1c2luZyBwdXNoU3RhdGUpXG5pZihwYXJzZWRMb2MucHJvdG9jb2w9PT1wYXJzZWRUby5wcm90b2NvbCYmcGFyc2VkTG9jLmhvc3Q9PT1wYXJzZWRUby5ob3N0KXsvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tcGFyYW1ldGVyLXJlYXNzaWdubWVudFxudG89cGFyc2VkVG8ucmVsYXRpdmU7fWlmKHBhcnNlZExvYy5wcm90b2NvbD09PXBhcnNlZEZyb20ucHJvdG9jb2wmJnBhcnNlZExvYy5ob3N0PT09cGFyc2VkRnJvbS5ob3N0KXsvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tcGFyYW1ldGVyLXJlYXNzaWdubWVudFxuZnJvbT1wYXJzZWRGcm9tLnJlbGF0aXZlO31CcmVhZGNydW1icy5hZGRCcmVhZGNydW1iKHtjYXRlZ29yeTonbmF2aWdhdGlvbicsZGF0YTp7ZnJvbTpmcm9tLHRvOnRvfX0pO307Ly8gcmVjb3JkIG5hdmlnYXRpb24gKFVSTCkgY2hhbmdlc1xudmFyIG9sZE9uUG9wU3RhdGU9Z2xvYmFsJDMub25wb3BzdGF0ZTtnbG9iYWwkMy5vbnBvcHN0YXRlPWZ1bmN0aW9uKCl7dmFyIGFyZ3M9W107Zm9yKHZhciBfaT0wO19pPGFyZ3VtZW50cy5sZW5ndGg7X2krKyl7YXJnc1tfaV09YXJndW1lbnRzW19pXTt9dmFyIGN1cnJlbnRIcmVmPWdsb2JhbCQzLmxvY2F0aW9uLmhyZWY7Y2FwdHVyZVVybENoYW5nZShsYXN0SHJlZixjdXJyZW50SHJlZik7aWYob2xkT25Qb3BTdGF0ZSl7cmV0dXJuIG9sZE9uUG9wU3RhdGUuYXBwbHkoX3RoaXMsYXJncyk7fX07LyoqXG4gICAgICAgICAgICogQGhpZGRlblxuICAgICAgICAgICAqL2Z1bmN0aW9uIGhpc3RvcnlSZXBsYWNlbWVudEZ1bmN0aW9uKG9yaWdpbmFsSGlzdG9yeUZ1bmN0aW9uKXsvLyBub3RlIGhpc3RvcnkucHVzaFN0YXRlLmxlbmd0aCBpcyAwOyBpbnRlbnRpb25hbGx5IG5vdCBkZWNsYXJpbmdcbi8vIHBhcmFtcyB0byBwcmVzZXJ2ZSAwIGFyaXR5XG5yZXR1cm4gZnVuY3Rpb24oKXt2YXIgYXJncz1bXTtmb3IodmFyIF9pPTA7X2k8YXJndW1lbnRzLmxlbmd0aDtfaSsrKXthcmdzW19pXT1hcmd1bWVudHNbX2ldO312YXIgdXJsPWFyZ3MubGVuZ3RoPjI/YXJnc1syXTp1bmRlZmluZWQ7Ly8gdXJsIGFyZ3VtZW50IGlzIG9wdGlvbmFsXG5pZih1cmwpey8vIGNvZXJjZSB0byBzdHJpbmcgKHRoaXMgaXMgd2hhdCBwdXNoU3RhdGUgZG9lcylcbmNhcHR1cmVVcmxDaGFuZ2UobGFzdEhyZWYsU3RyaW5nKHVybCkpO31yZXR1cm4gb3JpZ2luYWxIaXN0b3J5RnVuY3Rpb24uYXBwbHkodGhpcyxhcmdzKTt9O31maWxsKGdsb2JhbCQzLmhpc3RvcnksJ3B1c2hTdGF0ZScsaGlzdG9yeVJlcGxhY2VtZW50RnVuY3Rpb24pO2ZpbGwoZ2xvYmFsJDMuaGlzdG9yeSwncmVwbGFjZVN0YXRlJyxoaXN0b3J5UmVwbGFjZW1lbnRGdW5jdGlvbik7fTsvKiogSlNEb2MgKi9CcmVhZGNydW1icy5wcm90b3R5cGUuX2luc3RydW1lbnRYSFI9ZnVuY3Rpb24oKXtpZighKCdYTUxIdHRwUmVxdWVzdCdpbiBnbG9iYWwkMykpe3JldHVybjt9LyoqXG4gICAgICAgICAgICogQGhpZGRlblxuICAgICAgICAgICAqL2Z1bmN0aW9uIHdyYXBQcm9wKHByb3AseGhyKXtpZihwcm9wIGluIHhociYmdHlwZW9mIHhocltwcm9wXT09PSdmdW5jdGlvbicpe2ZpbGwoeGhyLHByb3AsZnVuY3Rpb24ob3JpZ2luYWwpe3JldHVybiB3cmFwKG9yaWdpbmFsLHttZWNoYW5pc206e2RhdGE6e1wiZnVuY3Rpb25cIjpwcm9wLGhhbmRsZXI6b3JpZ2luYWwmJm9yaWdpbmFsLm5hbWV8fCc8YW5vbnltb3VzPid9LGhhbmRsZWQ6dHJ1ZSx0eXBlOidpbnN0cnVtZW50J319KTt9KTt9fXZhciB4aHJwcm90bz1YTUxIdHRwUmVxdWVzdC5wcm90b3R5cGU7ZmlsbCh4aHJwcm90bywnb3BlbicsZnVuY3Rpb24ob3JpZ2luYWxPcGVuKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYXJncz1bXTtmb3IodmFyIF9pPTA7X2k8YXJndW1lbnRzLmxlbmd0aDtfaSsrKXthcmdzW19pXT1hcmd1bWVudHNbX2ldO312YXIgdXJsPWFyZ3NbMV07dGhpcy5fX3NlbnRyeV94aHJfXz17bWV0aG9kOmlzU3RyaW5nKGFyZ3NbMF0pP2FyZ3NbMF0udG9VcHBlckNhc2UoKTphcmdzWzBdLHVybDphcmdzWzFdfTt2YXIgY2xpZW50PWdldEN1cnJlbnRIdWIoKS5nZXRDbGllbnQoKTt2YXIgZHNuPWNsaWVudCYmY2xpZW50LmdldERzbigpO2lmKGRzbil7dmFyIGZpbHRlclVybD1uZXcgQVBJKGRzbikuZ2V0U3RvcmVFbmRwb2ludCgpOy8vIGlmIFNlbnRyeSBrZXkgYXBwZWFycyBpbiBVUkwsIGRvbid0IGNhcHR1cmUgaXQgYXMgYSByZXF1ZXN0XG4vLyBidXQgcmF0aGVyIGFzIG91ciBvd24gJ3NlbnRyeScgdHlwZSBicmVhZGNydW1iXG5pZihpc1N0cmluZyh1cmwpJiZmaWx0ZXJVcmwmJnVybC5pbmRleE9mKGZpbHRlclVybCkhPT0tMSl7dGhpcy5fX3NlbnRyeV9vd25fcmVxdWVzdF9fPXRydWU7fX1yZXR1cm4gb3JpZ2luYWxPcGVuLmFwcGx5KHRoaXMsYXJncyk7fTt9KTtmaWxsKHhocnByb3RvLCdzZW5kJyxmdW5jdGlvbihvcmlnaW5hbFNlbmQpe3JldHVybiBmdW5jdGlvbigpe3ZhciBhcmdzPVtdO2Zvcih2YXIgX2k9MDtfaTxhcmd1bWVudHMubGVuZ3RoO19pKyspe2FyZ3NbX2ldPWFyZ3VtZW50c1tfaV07fXZhciB4aHI9dGhpczsvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLXRoaXMtYXNzaWdubWVudFxuaWYoeGhyLl9fc2VudHJ5X293bl9yZXF1ZXN0X18pe2FkZFNlbnRyeUJyZWFkY3J1bWIoYXJnc1swXSk7fS8qKlxuICAgICAgICAgICAgICAgICAgICogQGhpZGRlblxuICAgICAgICAgICAgICAgICAgICovZnVuY3Rpb24gb25yZWFkeXN0YXRlY2hhbmdlSGFuZGxlcigpe2lmKHhoci5yZWFkeVN0YXRlPT09NCl7aWYoeGhyLl9fc2VudHJ5X293bl9yZXF1ZXN0X18pe3JldHVybjt9dHJ5ey8vIHRvdWNoaW5nIHN0YXR1c0NvZGUgaW4gc29tZSBwbGF0Zm9ybXMgdGhyb3dzXG4vLyBhbiBleGNlcHRpb25cbmlmKHhoci5fX3NlbnRyeV94aHJfXyl7eGhyLl9fc2VudHJ5X3hocl9fLnN0YXR1c19jb2RlPXhoci5zdGF0dXM7fX1jYXRjaChlKXsvKiBkbyBub3RoaW5nICovfUJyZWFkY3J1bWJzLmFkZEJyZWFkY3J1bWIoe2NhdGVnb3J5Oid4aHInLGRhdGE6eGhyLl9fc2VudHJ5X3hocl9fLHR5cGU6J2h0dHAnfSx7eGhyOnhocn0pO319dmFyIHhtbEh0dHBSZXF1ZXN0UHJvcHM9WydvbmxvYWQnLCdvbmVycm9yJywnb25wcm9ncmVzcyddO3htbEh0dHBSZXF1ZXN0UHJvcHMuZm9yRWFjaChmdW5jdGlvbihwcm9wKXt3cmFwUHJvcChwcm9wLHhocik7fSk7aWYoJ29ucmVhZHlzdGF0ZWNoYW5nZSdpbiB4aHImJnR5cGVvZiB4aHIub25yZWFkeXN0YXRlY2hhbmdlPT09J2Z1bmN0aW9uJyl7ZmlsbCh4aHIsJ29ucmVhZHlzdGF0ZWNoYW5nZScsZnVuY3Rpb24ob3JpZ2luYWwpe3JldHVybiB3cmFwKG9yaWdpbmFsLHttZWNoYW5pc206e2RhdGE6e1wiZnVuY3Rpb25cIjonb25yZWFkeXN0YXRlY2hhbmdlJyxoYW5kbGVyOm9yaWdpbmFsJiZvcmlnaW5hbC5uYW1lfHwnPGFub255bW91cz4nfSxoYW5kbGVkOnRydWUsdHlwZTonaW5zdHJ1bWVudCd9fSxvbnJlYWR5c3RhdGVjaGFuZ2VIYW5kbGVyKTt9KTt9ZWxzZXsvLyBpZiBvbnJlYWR5c3RhdGVjaGFuZ2Ugd2Fzbid0IGFjdHVhbGx5IHNldCBieSB0aGUgcGFnZSBvbiB0aGlzIHhociwgd2Vcbi8vIGFyZSBmcmVlIHRvIHNldCBvdXIgb3duIGFuZCBjYXB0dXJlIHRoZSBicmVhZGNydW1iXG54aHIub25yZWFkeXN0YXRlY2hhbmdlPW9ucmVhZHlzdGF0ZWNoYW5nZUhhbmRsZXI7fXJldHVybiBvcmlnaW5hbFNlbmQuYXBwbHkodGhpcyxhcmdzKTt9O30pO307LyoqXG4gICAgICAgKiBIZWxwZXIgdGhhdCBjaGVja3MgaWYgaW50ZWdyYXRpb24gaXMgZW5hYmxlZCBvbiB0aGUgY2xpZW50LlxuICAgICAgICogQHBhcmFtIGJyZWFkY3J1bWIgQnJlYWRjcnVtYlxuICAgICAgICogQHBhcmFtIGhpbnQgQnJlYWRjcnVtYkhpbnRcbiAgICAgICAqL0JyZWFkY3J1bWJzLmFkZEJyZWFkY3J1bWI9ZnVuY3Rpb24oYnJlYWRjcnVtYixoaW50KXtpZihnZXRDdXJyZW50SHViKCkuZ2V0SW50ZWdyYXRpb24oQnJlYWRjcnVtYnMpKXtnZXRDdXJyZW50SHViKCkuYWRkQnJlYWRjcnVtYihicmVhZGNydW1iLGhpbnQpO319Oy8qKlxuICAgICAgICogSW5zdHJ1bWVudCBicm93c2VyIGJ1aWx0LWlucyB3LyBicmVhZGNydW1iIGNhcHR1cmluZ1xuICAgICAgICogIC0gQ29uc29sZSBBUElcbiAgICAgICAqICAtIERPTSBBUEkgKGNsaWNrL3R5cGluZylcbiAgICAgICAqICAtIFhNTEh0dHBSZXF1ZXN0IEFQSVxuICAgICAgICogIC0gRmV0Y2ggQVBJXG4gICAgICAgKiAgLSBIaXN0b3J5IEFQSVxuICAgICAgICovQnJlYWRjcnVtYnMucHJvdG90eXBlLnNldHVwT25jZT1mdW5jdGlvbigpe2lmKHRoaXMuX29wdGlvbnMuY29uc29sZSl7dGhpcy5faW5zdHJ1bWVudENvbnNvbGUoKTt9aWYodGhpcy5fb3B0aW9ucy5kb20pe3RoaXMuX2luc3RydW1lbnRET00oKTt9aWYodGhpcy5fb3B0aW9ucy54aHIpe3RoaXMuX2luc3RydW1lbnRYSFIoKTt9aWYodGhpcy5fb3B0aW9ucy5mZXRjaCl7dGhpcy5faW5zdHJ1bWVudEZldGNoKCk7fWlmKHRoaXMuX29wdGlvbnMuaGlzdG9yeSl7dGhpcy5faW5zdHJ1bWVudEhpc3RvcnkoKTt9fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9CcmVhZGNydW1icy5pZD0nQnJlYWRjcnVtYnMnO3JldHVybiBCcmVhZGNydW1iczt9KCk7LyoqIEpTRG9jICovZnVuY3Rpb24gYWRkU2VudHJ5QnJlYWRjcnVtYihzZXJpYWxpemVkRGF0YSl7Ly8gVGhlcmUncyBhbHdheXMgc29tZXRoaW5nIHRoYXQgY2FuIGdvIHdyb25nIHdpdGggZGVzZXJpYWxpemF0aW9uLi4uXG50cnl7dmFyIGV2ZW50XzE9SlNPTi5wYXJzZShzZXJpYWxpemVkRGF0YSk7QnJlYWRjcnVtYnMkMS5hZGRCcmVhZGNydW1iKHtjYXRlZ29yeTonc2VudHJ5JyxldmVudF9pZDpldmVudF8xLmV2ZW50X2lkLGxldmVsOmV2ZW50XzEubGV2ZWx8fFNldmVyaXR5LmZyb21TdHJpbmcoJ2Vycm9yJyksbWVzc2FnZTpnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50XzEpfSx7ZXZlbnQ6ZXZlbnRfMX0pO31jYXRjaChfb08pe2xvZ2dlciQxLmVycm9yKCdFcnJvciB3aGlsZSBhZGRpbmcgc2VudHJ5IHR5cGUgYnJlYWRjcnVtYicpO319dmFyIERFRkFVTFRfS0VZPSdjYXVzZSc7dmFyIERFRkFVTFRfTElNSVQ9NTsvKiogQWRkcyBTREsgaW5mbyB0byBhbiBldmVudC4gKi92YXIgTGlua2VkRXJyb3JzPS8qKiBAY2xhc3MgKi9mdW5jdGlvbigpey8qKlxuICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAqL2Z1bmN0aW9uIExpbmtlZEVycm9ycyhvcHRpb25zKXtpZihvcHRpb25zPT09dm9pZCAwKXtvcHRpb25zPXt9O30vKipcbiAgICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgICAqL3RoaXMubmFtZT1MaW5rZWRFcnJvcnMuaWQ7dGhpcy5fa2V5PW9wdGlvbnMua2V5fHxERUZBVUxUX0tFWTt0aGlzLl9saW1pdD1vcHRpb25zLmxpbWl0fHxERUZBVUxUX0xJTUlUO30vKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9MaW5rZWRFcnJvcnMucHJvdG90eXBlLnNldHVwT25jZT1mdW5jdGlvbigpe2FkZEdsb2JhbEV2ZW50UHJvY2Vzc29yKGZ1bmN0aW9uKGV2ZW50LGhpbnQpe3ZhciBzZWxmPWdldEN1cnJlbnRIdWIoKS5nZXRJbnRlZ3JhdGlvbihMaW5rZWRFcnJvcnMpO2lmKHNlbGYpe3JldHVybiBzZWxmLl9oYW5kbGVyKGV2ZW50LGhpbnQpO31yZXR1cm4gZXZlbnQ7fSk7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9MaW5rZWRFcnJvcnMucHJvdG90eXBlLl9oYW5kbGVyPWZ1bmN0aW9uKGV2ZW50LGhpbnQpe2lmKCFldmVudC5leGNlcHRpb258fCFldmVudC5leGNlcHRpb24udmFsdWVzfHwhaGludHx8IShoaW50Lm9yaWdpbmFsRXhjZXB0aW9uIGluc3RhbmNlb2YgRXJyb3IpKXtyZXR1cm4gZXZlbnQ7fXZhciBsaW5rZWRFcnJvcnM9dGhpcy5fd2Fsa0Vycm9yVHJlZShoaW50Lm9yaWdpbmFsRXhjZXB0aW9uLHRoaXMuX2tleSk7ZXZlbnQuZXhjZXB0aW9uLnZhbHVlcz1fX3NwcmVhZChsaW5rZWRFcnJvcnMsZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyk7cmV0dXJuIGV2ZW50O307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovTGlua2VkRXJyb3JzLnByb3RvdHlwZS5fd2Fsa0Vycm9yVHJlZT1mdW5jdGlvbihlcnJvcixrZXksc3RhY2spe2lmKHN0YWNrPT09dm9pZCAwKXtzdGFjaz1bXTt9aWYoIShlcnJvcltrZXldaW5zdGFuY2VvZiBFcnJvcil8fHN0YWNrLmxlbmd0aCsxPj10aGlzLl9saW1pdCl7cmV0dXJuIHN0YWNrO312YXIgc3RhY2t0cmFjZT1jb21wdXRlU3RhY2tUcmFjZShlcnJvcltrZXldKTt2YXIgZXhjZXB0aW9uPWV4Y2VwdGlvbkZyb21TdGFja3RyYWNlKHN0YWNrdHJhY2UpO3JldHVybiB0aGlzLl93YWxrRXJyb3JUcmVlKGVycm9yW2tleV0sa2V5LF9fc3ByZWFkKFtleGNlcHRpb25dLHN0YWNrKSk7fTsvKipcbiAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgKi9MaW5rZWRFcnJvcnMuaWQ9J0xpbmtlZEVycm9ycyc7cmV0dXJuIExpbmtlZEVycm9yczt9KCk7dmFyIGdsb2JhbCQ0PWdldEdsb2JhbE9iamVjdCgpOy8qKiBVc2VyQWdlbnQgKi92YXIgVXNlckFnZW50PS8qKiBAY2xhc3MgKi9mdW5jdGlvbigpe2Z1bmN0aW9uIFVzZXJBZ2VudCgpey8qKlxuICAgICAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgICAgICovdGhpcy5uYW1lPVVzZXJBZ2VudC5pZDt9LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovVXNlckFnZW50LnByb3RvdHlwZS5zZXR1cE9uY2U9ZnVuY3Rpb24oKXthZGRHbG9iYWxFdmVudFByb2Nlc3NvcihmdW5jdGlvbihldmVudCl7aWYoZ2V0Q3VycmVudEh1YigpLmdldEludGVncmF0aW9uKFVzZXJBZ2VudCkpe2lmKCFnbG9iYWwkNC5uYXZpZ2F0b3J8fCFnbG9iYWwkNC5sb2NhdGlvbil7cmV0dXJuIGV2ZW50O30vLyBSZXF1ZXN0IEludGVyZmFjZTogaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9kZXZlbG9wbWVudC9zZGstZGV2L2V2ZW50LXBheWxvYWRzL3JlcXVlc3QvXG52YXIgcmVxdWVzdD1ldmVudC5yZXF1ZXN0fHx7fTtyZXF1ZXN0LnVybD1yZXF1ZXN0LnVybHx8Z2xvYmFsJDQubG9jYXRpb24uaHJlZjtyZXF1ZXN0LmhlYWRlcnM9cmVxdWVzdC5oZWFkZXJzfHx7fTtyZXF1ZXN0LmhlYWRlcnNbJ1VzZXItQWdlbnQnXT1nbG9iYWwkNC5uYXZpZ2F0b3IudXNlckFnZW50O3JldHVybiBfYXNzaWduKHt9LGV2ZW50LHtyZXF1ZXN0OnJlcXVlc3R9KTt9cmV0dXJuIGV2ZW50O30pO307LyoqXG4gICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICovVXNlckFnZW50LmlkPSdVc2VyQWdlbnQnO3JldHVybiBVc2VyQWdlbnQ7fSgpO3ZhciBCcm93c2VySW50ZWdyYXRpb25zPS8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxHbG9iYWxIYW5kbGVyczpHbG9iYWxIYW5kbGVycyxUcnlDYXRjaDpUcnlDYXRjaCxCcmVhZGNydW1iczpCcmVhZGNydW1icyQxLExpbmtlZEVycm9yczpMaW5rZWRFcnJvcnMsVXNlckFnZW50OlVzZXJBZ2VudH0pO3ZhciBkZWZhdWx0SW50ZWdyYXRpb25zPVtuZXcgSW5ib3VuZEZpbHRlcnMoKSxuZXcgRnVuY3Rpb25Ub1N0cmluZygpLG5ldyBUcnlDYXRjaCgpLG5ldyBCcmVhZGNydW1icyQxKCksbmV3IEdsb2JhbEhhbmRsZXJzKCksbmV3IExpbmtlZEVycm9ycygpLG5ldyBVc2VyQWdlbnQoKV07LyoqXG4gICAqIFRoZSBTZW50cnkgQnJvd3NlciBTREsgQ2xpZW50LlxuICAgKlxuICAgKiBUbyB1c2UgdGhpcyBTREssIGNhbGwgdGhlIHtAbGluayBpbml0fSBmdW5jdGlvbiBhcyBlYXJseSBhcyBwb3NzaWJsZSB3aGVuXG4gICAqIGxvYWRpbmcgdGhlIHdlYiBwYWdlLiBUbyBzZXQgY29udGV4dCBpbmZvcm1hdGlvbiBvciBzZW5kIG1hbnVhbCBldmVudHMsIHVzZVxuICAgKiB0aGUgcHJvdmlkZWQgbWV0aG9kcy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogYGBgXG4gICAqXG4gICAqIGltcG9ydCB7IGluaXQgfSBmcm9tICdAc2VudHJ5L2Jyb3dzZXInO1xuICAgKlxuICAgKiBpbml0KHtcbiAgICogICBkc246ICdfX0RTTl9fJyxcbiAgICogICAvLyAuLi5cbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBcbiAgICpcbiAgICogaW1wb3J0IHsgY29uZmlndXJlU2NvcGUgfSBmcm9tICdAc2VudHJ5L2Jyb3dzZXInO1xuICAgKiBjb25maWd1cmVTY29wZSgoc2NvcGU6IFNjb3BlKSA9PiB7XG4gICAqICAgc2NvcGUuc2V0RXh0cmEoeyBiYXR0ZXJ5OiAwLjcgfSk7XG4gICAqICAgc2NvcGUuc2V0VGFnKHsgdXNlcl9tb2RlOiAnYWRtaW4nIH0pO1xuICAgKiAgIHNjb3BlLnNldFVzZXIoeyBpZDogJzQ3MTEnIH0pO1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYFxuICAgKlxuICAgKiBpbXBvcnQgeyBhZGRCcmVhZGNydW1iIH0gZnJvbSAnQHNlbnRyeS9icm93c2VyJztcbiAgICogYWRkQnJlYWRjcnVtYih7XG4gICAqICAgbWVzc2FnZTogJ015IEJyZWFkY3J1bWInLFxuICAgKiAgIC8vIC4uLlxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIGBgYFxuICAgKlxuICAgKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9icm93c2VyJztcbiAgICogU2VudHJ5LmNhcHR1cmVNZXNzYWdlKCdIZWxsbywgd29ybGQhJyk7XG4gICAqIFNlbnRyeS5jYXB0dXJlRXhjZXB0aW9uKG5ldyBFcnJvcignR29vZCBieWUnKSk7XG4gICAqIFNlbnRyeS5jYXB0dXJlRXZlbnQoe1xuICAgKiAgIG1lc3NhZ2U6ICdNYW51YWwnLFxuICAgKiAgIHN0YWNrdHJhY2U6IFtcbiAgICogICAgIC8vIC4uLlxuICAgKiAgIF0sXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHNlZSB7QGxpbmsgQnJvd3Nlck9wdGlvbnN9IGZvciBkb2N1bWVudGF0aW9uIG9uIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cbiAgICovZnVuY3Rpb24gaW5pdChvcHRpb25zKXtpZihvcHRpb25zPT09dm9pZCAwKXtvcHRpb25zPXt9O31pZihvcHRpb25zLmRlZmF1bHRJbnRlZ3JhdGlvbnM9PT11bmRlZmluZWQpe29wdGlvbnMuZGVmYXVsdEludGVncmF0aW9ucz1kZWZhdWx0SW50ZWdyYXRpb25zO31pZihvcHRpb25zLnJlbGVhc2U9PT11bmRlZmluZWQpe3ZhciB3aW5kb3dfMT1nZXRHbG9iYWxPYmplY3QoKTsvLyBUaGlzIHN1cHBvcnRzIHRoZSB2YXJpYWJsZSB0aGF0IHNlbnRyeS13ZWJwYWNrLXBsdWdpbiBpbmplY3RzXG5pZih3aW5kb3dfMS5TRU5UUllfUkVMRUFTRSYmd2luZG93XzEuU0VOVFJZX1JFTEVBU0UuaWQpe29wdGlvbnMucmVsZWFzZT13aW5kb3dfMS5TRU5UUllfUkVMRUFTRS5pZDt9fWluaXRBbmRCaW5kKEJyb3dzZXJDbGllbnQsb3B0aW9ucyk7fS8qKlxuICAgKiBQcmVzZW50IHRoZSB1c2VyIHdpdGggYSByZXBvcnQgZGlhbG9nLlxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyBFdmVyeXRoaW5nIGlzIG9wdGlvbmFsLCB3ZSB0cnkgdG8gZmV0Y2ggYWxsIGluZm8gbmVlZCBmcm9tIHRoZSBnbG9iYWwgc2NvcGUuXG4gICAqL2Z1bmN0aW9uIHNob3dSZXBvcnREaWFsb2cob3B0aW9ucyl7aWYob3B0aW9ucz09PXZvaWQgMCl7b3B0aW9ucz17fTt9aWYoIW9wdGlvbnMuZXZlbnRJZCl7b3B0aW9ucy5ldmVudElkPWdldEN1cnJlbnRIdWIoKS5sYXN0RXZlbnRJZCgpO312YXIgY2xpZW50PWdldEN1cnJlbnRIdWIoKS5nZXRDbGllbnQoKTtpZihjbGllbnQpe2NsaWVudC5zaG93UmVwb3J0RGlhbG9nKG9wdGlvbnMpO319LyoqXG4gICAqIFRoaXMgaXMgdGhlIGdldHRlciBmb3IgbGFzdEV2ZW50SWQuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBsYXN0IGV2ZW50IGlkIG9mIGEgY2FwdHVyZWQgZXZlbnQuXG4gICAqL2Z1bmN0aW9uIGxhc3RFdmVudElkKCl7cmV0dXJuIGdldEN1cnJlbnRIdWIoKS5sYXN0RXZlbnRJZCgpO30vKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBoZXJlIHRvIGJlIEFQSSBjb21wYXRpYmxlIHdpdGggdGhlIGxvYWRlci5cbiAgICogQGhpZGRlblxuICAgKi9mdW5jdGlvbiBmb3JjZUxvYWQoKXt9Ly8gTm9vcFxuLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgaGVyZSB0byBiZSBBUEkgY29tcGF0aWJsZSB3aXRoIHRoZSBsb2FkZXIuXG4gICAqIEBoaWRkZW5cbiAgICovZnVuY3Rpb24gb25Mb2FkKGNhbGxiYWNrKXtjYWxsYmFjaygpO30vKipcbiAgICogQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhbGwgY3VycmVudCBldmVudHMgaGF2ZSBiZWVuIHNlbnQuXG4gICAqIElmIHlvdSBwcm92aWRlIGEgdGltZW91dCBhbmQgdGhlIHF1ZXVlIHRha2VzIGxvbmdlciB0byBkcmFpbiB0aGUgcHJvbWlzZSByZXR1cm5zIGZhbHNlLlxuICAgKlxuICAgKiBAcGFyYW0gdGltZW91dCBNYXhpbXVtIHRpbWUgaW4gbXMgdGhlIGNsaWVudCBzaG91bGQgd2FpdC5cbiAgICovZnVuY3Rpb24gZmx1c2godGltZW91dCl7dmFyIGNsaWVudD1nZXRDdXJyZW50SHViKCkuZ2V0Q2xpZW50KCk7aWYoY2xpZW50KXtyZXR1cm4gY2xpZW50LmZsdXNoKHRpbWVvdXQpO31yZXR1cm4gU3luY1Byb21pc2UucmVqZWN0KGZhbHNlKTt9LyoqXG4gICAqIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIGN1cnJlbnQgZXZlbnRzIGhhdmUgYmVlbiBzZW50LlxuICAgKiBJZiB5b3UgcHJvdmlkZSBhIHRpbWVvdXQgYW5kIHRoZSBxdWV1ZSB0YWtlcyBsb25nZXIgdG8gZHJhaW4gdGhlIHByb21pc2UgcmV0dXJucyBmYWxzZS5cbiAgICpcbiAgICogQHBhcmFtIHRpbWVvdXQgTWF4aW11bSB0aW1lIGluIG1zIHRoZSBjbGllbnQgc2hvdWxkIHdhaXQuXG4gICAqL2Z1bmN0aW9uIGNsb3NlKHRpbWVvdXQpe3ZhciBjbGllbnQ9Z2V0Q3VycmVudEh1YigpLmdldENsaWVudCgpO2lmKGNsaWVudCl7cmV0dXJuIGNsaWVudC5jbG9zZSh0aW1lb3V0KTt9cmV0dXJuIFN5bmNQcm9taXNlLnJlamVjdChmYWxzZSk7fS8qKlxuICAgKiBXcmFwIGNvZGUgd2l0aGluIGEgdHJ5L2NhdGNoIGJsb2NrIHNvIHRoZSBTREsgaXMgYWJsZSB0byBjYXB0dXJlIGVycm9ycy5cbiAgICpcbiAgICogQHBhcmFtIGZuIEEgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIHJlc3VsdCBvZiB3cmFwcGVkIGZ1bmN0aW9uIGNhbGwuXG4gICAqL2Z1bmN0aW9uIHdyYXAkMShmbil7cmV0dXJuIHdyYXAoZm4pKCk7Ly8gdHNsaW50OmRpc2FibGUtbGluZTpuby11bnNhZmUtYW55XG59dmFyIHdpbmRvd0ludGVncmF0aW9ucz17fTsvLyBUaGlzIGJsb2NrIGlzIG5lZWRlZCB0byBhZGQgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBpbnRlZ3JhdGlvbnMgcGFja2FnZXMgd2hlbiB1c2VkIHdpdGggYSBDRE5cbi8vIHRzbGludDpkaXNhYmxlOiBuby11bnNhZmUtYW55XG52YXIgX3dpbmRvdz1nZXRHbG9iYWxPYmplY3QoKTtpZihfd2luZG93LlNlbnRyeSYmX3dpbmRvdy5TZW50cnkuSW50ZWdyYXRpb25zKXt3aW5kb3dJbnRlZ3JhdGlvbnM9X3dpbmRvdy5TZW50cnkuSW50ZWdyYXRpb25zO30vLyB0c2xpbnQ6ZW5hYmxlOiBuby11bnNhZmUtYW55XG52YXIgSU5URUdSQVRJT05TPV9hc3NpZ24oe30sd2luZG93SW50ZWdyYXRpb25zLENvcmVJbnRlZ3JhdGlvbnMsQnJvd3NlckludGVncmF0aW9ucyk7dmFyIFNlbnRyeT0vKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsSW50ZWdyYXRpb25zOklOVEVHUkFUSU9OUyxUcmFuc3BvcnRzOmluZGV4JDEsZ2V0IFNldmVyaXR5KCl7cmV0dXJuIFNldmVyaXR5O30sZ2V0IFN0YXR1cygpe3JldHVybiBTdGF0dXM7fSxhZGRHbG9iYWxFdmVudFByb2Nlc3NvcjphZGRHbG9iYWxFdmVudFByb2Nlc3NvcixhZGRCcmVhZGNydW1iOmFkZEJyZWFkY3J1bWIsY2FwdHVyZUV4Y2VwdGlvbjpjYXB0dXJlRXhjZXB0aW9uLGNhcHR1cmVFdmVudDpjYXB0dXJlRXZlbnQsY2FwdHVyZU1lc3NhZ2U6Y2FwdHVyZU1lc3NhZ2UsY29uZmlndXJlU2NvcGU6Y29uZmlndXJlU2NvcGUsZ2V0SHViRnJvbUNhcnJpZXI6Z2V0SHViRnJvbUNhcnJpZXIsZ2V0Q3VycmVudEh1YjpnZXRDdXJyZW50SHViLEh1YjpIdWIsU2NvcGU6U2NvcGUsc2V0Q29udGV4dDpzZXRDb250ZXh0LHNldEV4dHJhOnNldEV4dHJhLHNldEV4dHJhczpzZXRFeHRyYXMsc2V0VGFnOnNldFRhZyxzZXRUYWdzOnNldFRhZ3Msc2V0VXNlcjpzZXRVc2VyLFNwYW46U3Bhbix3aXRoU2NvcGU6d2l0aFNjb3BlLEJyb3dzZXJDbGllbnQ6QnJvd3NlckNsaWVudCxkZWZhdWx0SW50ZWdyYXRpb25zOmRlZmF1bHRJbnRlZ3JhdGlvbnMsZm9yY2VMb2FkOmZvcmNlTG9hZCxpbml0OmluaXQsbGFzdEV2ZW50SWQ6bGFzdEV2ZW50SWQsb25Mb2FkOm9uTG9hZCxzaG93UmVwb3J0RGlhbG9nOnNob3dSZXBvcnREaWFsb2csZmx1c2g6Zmx1c2gsY2xvc2U6Y2xvc2Usd3JhcDp3cmFwJDEsU0RLX05BTUU6U0RLX05BTUUsU0RLX1ZFUlNJT046U0RLX1ZFUlNJT059KTt2YXIgc2NyaXB0JHM9e25hbWU6J0Vycm9yQm91bmRhcnknLGRhdGE6ZnVuY3Rpb24gZGF0YSgpe3JldHVybntzZW50cnk6bnVsbH07fSxjb21wdXRlZDpfb2JqZWN0U3ByZWFkKHt9LGluZGV4X2VzbS5tYXBHZXR0ZXJzKFsnYXBpQ2xpZW50JywnY29uZmlnJ10pKSxtZXRob2RzOntpbml0U2VudHJ5OmZ1bmN0aW9uIGluaXRTZW50cnkoKXt2YXIgaW50ZWdyYXRpb25zPXRoaXMuY29uZmlnLnVzZVNlbnRyeUJyZWFkY3J1bWJzP1tuZXcgSU5URUdSQVRJT05TLkJyZWFkY3J1bWJzKCldOltdO2luaXQoe2RzbjpFTlYuc2VudHJ5RFNOLHJlbGVhc2U6J3BpY2tlckAxLjEyLjAnLGRlZmF1bHRJbnRlZ3JhdGlvbnM6ZmFsc2UsaW50ZWdyYXRpb25zOmludGVncmF0aW9uc30pO3RoaXMuc2VudHJ5PVNlbnRyeTt9LGZvcm1hdENvbXBvbmVudE5hbWU6ZnVuY3Rpb24gZm9ybWF0Q29tcG9uZW50TmFtZSh2bSl7aWYodm0uJHJvb3Q9PT12bSl7cmV0dXJuJ3Jvb3QgaW5zdGFuY2UnO312YXIgbmFtZT12bS5faXNWdWU/dm0uJG9wdGlvbnMubmFtZXx8dm0uJG9wdGlvbnMuX2NvbXBvbmVudFRhZzp2bS5uYW1lO3JldHVybihuYW1lP1wiY29tcG9uZW50IDxcIi5jb25jYXQobmFtZSxcIj5cIik6J2Fub255bW91cyBjb21wb25lbnQnKSsodm0uX2lzVnVlJiZ2bS4kb3B0aW9ucy5fX2ZpbGU/XCIgYXQgXCIuY29uY2F0KHZtLiRvcHRpb25zLl9fZmlsZSk6JycpO319LGVycm9yQ2FwdHVyZWQ6ZnVuY3Rpb24gZXJyb3JDYXB0dXJlZChlcnIsdm0saW5mbyl7dmFyIF90aGlzMzM9dGhpczt2YXIgbWV0YWRhdGE9e307bWV0YWRhdGEuY29tcG9uZW50TmFtZT10aGlzLmZvcm1hdENvbXBvbmVudE5hbWUodm0pO21ldGFkYXRhLnByb3BzRGF0YT12bS4kb3B0aW9ucy5wcm9wc0RhdGE7aWYoaW5mbyE9PXZvaWQgMCl7bWV0YWRhdGEubGlmZWN5Y2xlSG9vaz1pbmZvO31jb25maWd1cmVTY29wZShmdW5jdGlvbihzY29wZSl7c2NvcGUuc2V0RXh0cmEoJ2NvbmZpZycsX3RoaXMzMy5jb25maWcpO3Njb3BlLnNldFRhZygndmVyc2lvbicsJzEuMTIuMCcpO3Njb3BlLnNldFRhZygnYXBpa2V5JyxfdGhpczMzLmFwaUNsaWVudC5zZXNzaW9uLmFwaWtleSk7c2NvcGUuc2V0Q29udGV4dCgndnVlJyxtZXRhZGF0YSk7fSk7dGhpcy5zZW50cnkuY2FwdHVyZUV4Y2VwdGlvbihlcnIpO30sbW91bnRlZDpmdW5jdGlvbiBtb3VudGVkKCl7dGhpcy5pbml0U2VudHJ5KCk7fSxyZW5kZXI6ZnVuY3Rpb24gcmVuZGVyKCl7cmV0dXJuIHRoaXMuJHNsb3RzW1wiZGVmYXVsdFwiXVswXTt9fTsvKiBlc2xpbnQtZW5hYmxlICovIC8qIHNjcmlwdCAqL3ZhciBfX3Z1ZV9zY3JpcHRfXyRzPXNjcmlwdCRzOy8qIHRlbXBsYXRlICovIC8qIHN0eWxlICovdmFyIF9fdnVlX2luamVjdF9zdHlsZXNfXyRzPXVuZGVmaW5lZDsvKiBzY29wZWQgKi92YXIgX192dWVfc2NvcGVfaWRfXyRzPXVuZGVmaW5lZDsvKiBtb2R1bGUgaWRlbnRpZmllciAqL3ZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJHM9dW5kZWZpbmVkOy8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi92YXIgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJHM9dW5kZWZpbmVkOy8qIHN0eWxlIGluamVjdCAqLyAvKiBzdHlsZSBpbmplY3QgU1NSICovIC8qIHN0eWxlIGluamVjdCBzaGFkb3cgZG9tICovdmFyIEVycm9yQm91bmRhcnk9bm9ybWFsaXplQ29tcG9uZW50KHt9LF9fdnVlX2luamVjdF9zdHlsZXNfXyRzLF9fdnVlX3NjcmlwdF9fJHMsX192dWVfc2NvcGVfaWRfXyRzLF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyRzLF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kcyxmYWxzZSx1bmRlZmluZWQsdW5kZWZpbmVkLHVuZGVmaW5lZCk7Ly8gUmV0cmlldmUgbGFzdCBlbGVtZW50IG9mIGFuIGFycmF5XG52YXIgbGFzdD1mdW5jdGlvbiBsYXN0KGFycmF5KXt2YXIgbGVuZ3RoPWFycmF5PT1udWxsPzA6YXJyYXkubGVuZ3RoO3JldHVybiBsZW5ndGg/YXJyYXlbbGVuZ3RoLTFdOnVuZGVmaW5lZDt9O3ZhciBDQUxMQkFDS19VUkxfS0VZPSdmcy10YWInOy8vIFVwZGF0ZSBjbGllbnQgcmVwcmVzZW50YXRpb24gdG8gaW5jbHVkZSBzb3VyY2UgaW5mb3JtYXRpb25cbnZhciBjb252ZXJ0VG9GaWxlT2JqPWZ1bmN0aW9uIGNvbnZlcnRUb0ZpbGVPYmooZmlsZVJldHVybmVkQnlBcGksY2xvdWROYW1lKXt2YXIgZmlsZT1fb2JqZWN0U3ByZWFkKHtzb3VyY2U6Y2xvdWROYW1lLHNvdXJjZUtpbmQ6J2Nsb3VkJ30sZmlsZVJldHVybmVkQnlBcGkpO3JldHVybiBmaWxlO307Ly8gRGVmYXVsdCBjbG91ZHNcbnZhciBjbG91ZFNvdXJjZXM9c291cmNlcy5maWx0ZXIoZnVuY3Rpb24ocyl7cmV0dXJuIHMudWk9PT0nY2xvdWQnO30pLm1hcChmdW5jdGlvbihzKXtyZXR1cm4gcy5uYW1lO30pLnJlZHVjZShmdW5jdGlvbihvYmosbmFtZSl7b2JqW25hbWVdPXtzdGF0dXM6J2luaXRpYWxpemVkJ307cmV0dXJuIG9iajt9LHt9KTt2YXIgaW5pdGlhbFN0YXRlPXtjbG91ZHM6X29iamVjdFNwcmVhZCh7fSxjbG91ZFNvdXJjZXMpLGNsb3VkRm9sZGVyczp7fSxzZWxlY3RlZENsb3VkUGF0aDpudWxsfTt2YXIgbXV0YXRpb25zPXtTRVRfQ0xPVURfUEFUSDpmdW5jdGlvbiBTRVRfQ0xPVURfUEFUSChzdGF0ZSxfcmVmMzIpe3ZhciBuYW1lPV9yZWYzMi5uYW1lLHBhdGg9X3JlZjMyLnBhdGgscGF5bG9hZD1fcmVmMzIucGF5bG9hZDt2YXIgZGF0YT1wYXlsb2FkO3ZhciBvYmo9c3RhdGUuY2xvdWRzW25hbWVdO2lmKG9iai5jb250ZW50cyYmb2JqLmNvbnRlbnRzW3BhdGhdKXtkYXRhPW9iai5jb250ZW50c1twYXRoXS5jb25jYXQocGF5bG9hZCk7fVZ1ZS5zZXQob2JqLCdjb250ZW50cycsX29iamVjdFNwcmVhZCh7fSxvYmouY29udGVudHMsX2RlZmluZVByb3BlcnR5KHt9LHBhdGgsZGF0YSkpKTtWdWUuc2V0KHN0YXRlLmNsb3Vkc1tuYW1lXSwnc3RhdHVzJywncmVhZHknKTt9LFNFVF9DTE9VRF9SRURJUkVDVDpmdW5jdGlvbiBTRVRfQ0xPVURfUkVESVJFQ1Qoc3RhdGUsX3JlZjMzKXt2YXIgbmFtZT1fcmVmMzMubmFtZSxhdXRoPV9yZWYzMy5wYXlsb2FkLmF1dGg7dmFyIHJlZGlyZWN0PWF1dGgucmVkaXJlY3RfdXJsO2lmKCFzdGF0ZS5jbG91ZHNbbmFtZV0pe3JldHVybjt9VnVlLnNldChzdGF0ZS5jbG91ZHNbbmFtZV0sJ3JlZGlyZWN0JyxyZWRpcmVjdCk7VnVlLnNldChzdGF0ZS5jbG91ZHNbbmFtZV0sJ3N0YXR1cycsJ3VuYXV0aG9yaXplZCcpO30sU0VUX0NMT1VEX05FWFQ6ZnVuY3Rpb24gU0VUX0NMT1VEX05FWFQoc3RhdGUsX3JlZjM0KXt2YXIgbmFtZT1fcmVmMzQubmFtZSxwYXRoPV9yZWYzNC5wYXRoLG5leHQ9X3JlZjM0Lm5leHQ7aWYoIXN0YXRlLmNsb3Vkc1tuYW1lXSl7cmV0dXJuO31WdWUuc2V0KHN0YXRlLmNsb3Vkc1tuYW1lXSwnbmV4dCcsX29iamVjdFNwcmVhZCh7fSxzdGF0ZS5jbG91ZHNbbmFtZV0ubmV4dCxfZGVmaW5lUHJvcGVydHkoe30scGF0aCxuZXh0KSkpO30sU0VUX0NMT1VEX0xPQURJTkc6ZnVuY3Rpb24gU0VUX0NMT1VEX0xPQURJTkcoc3RhdGUsbmFtZSl7aWYoIXN0YXRlLmNsb3Vkc1tuYW1lXSl7cmV0dXJuO31WdWUuc2V0KHN0YXRlLmNsb3Vkc1tuYW1lXSwnc3RhdHVzJywnbG9hZGluZycpO30sU0VUX0NMT1VEX0VSUk9SOmZ1bmN0aW9uIFNFVF9DTE9VRF9FUlJPUihzdGF0ZSxuYW1lKXt2YXIgY2xvdWRPYmo9c3RhdGUuY2xvdWRzW25hbWVdO2lmKGNsb3VkT2JqKXtWdWUuc2V0KGNsb3VkT2JqLCdzdGF0dXMnLCdlcnJvcmVkJyk7fX0sUkVNT1ZFX0NMT1VEX1BBVEhTOmZ1bmN0aW9uIFJFTU9WRV9DTE9VRF9QQVRIUyhzdGF0ZSxuYW1lKXtpZighc3RhdGUuY2xvdWRzW25hbWVdKXtyZXR1cm47fXN0YXRlLmNsb3Vkc1tuYW1lXT17c3RhdHVzOidpbml0aWFsaXplZCd9O30sUkVNT1ZFX0FMTF9DTE9VRF9QQVRIUzpmdW5jdGlvbiBSRU1PVkVfQUxMX0NMT1VEX1BBVEhTKHN0YXRlKXtzdGF0ZS5jbG91ZHM9X29iamVjdFNwcmVhZCh7fSxjbG91ZFNvdXJjZXMpO30sU0VUX0NMT1VEX0ZPTERFUlM6ZnVuY3Rpb24gU0VUX0NMT1VEX0ZPTERFUlMoc3RhdGUsZm9sZGVycyl7Zm9sZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGZvbGRlcil7c3RhdGUuY2xvdWRGb2xkZXJzW2ZvbGRlci5wYXRoXT1fb2JqZWN0U3ByZWFkKHt9LHN0YXRlLmNsb3VkRm9sZGVyc1tmb2xkZXIucGF0aF0se25hbWU6Zm9sZGVyLm5hbWV9KTt9KTt9LFNFVF9DTE9VRF9QQVRIX1NFTEVDVEVEOmZ1bmN0aW9uIFNFVF9DTE9VRF9QQVRIX1NFTEVDVEVEKHN0YXRlLHBhdGgpe3N0YXRlLnNlbGVjdGVkQ2xvdWRQYXRoPXBhdGg7fSxTRVRfQ0xPVURfRk9MREVSX0xPQURJTkc6ZnVuY3Rpb24gU0VUX0NMT1VEX0ZPTERFUl9MT0FESU5HKHN0YXRlLF9yZWYzNSl7dmFyIHBhdGg9X3JlZjM1LnBhdGgsdmFsdWU9X3JlZjM1LnZhbHVlO3N0YXRlLmNsb3VkRm9sZGVycz1fb2JqZWN0U3ByZWFkKHt9LHN0YXRlLmNsb3VkRm9sZGVycyxfZGVmaW5lUHJvcGVydHkoe30scGF0aCxfb2JqZWN0U3ByZWFkKHt9LHN0YXRlLmNsb3VkRm9sZGVyc1twYXRoXSx7bG9hZGluZzp2YWx1ZX0pKSk7fSxSRVNFVF9DTE9VRDpmdW5jdGlvbiBSRVNFVF9DTE9VRCgpey8vIGJlY2F1c2Ugb2Ygc29tZSByZWZlcmVuY2Ugd2UgbmVlZCB0byBjbGVhciBjbG91ZCBjb250ZW50cyBpbml0aWFsIHN0YXRlIHRvIHJlc2V0IHZhbHVlc1xuT2JqZWN0LmtleXMoaW5pdGlhbFN0YXRlLmNsb3VkcykuZm9yRWFjaChmdW5jdGlvbihrZXkpe2luaXRpYWxTdGF0ZS5jbG91ZHNba2V5XS5jb250ZW50cz1udWxsO30pO319O3ZhciBhY3Rpb25zPXtnb1RvRGlyZWN0b3J5OmZ1bmN0aW9uIGdvVG9EaXJlY3RvcnkoX3JlZjM2LGZvbGRlcil7dmFyIGNvbW1pdD1fcmVmMzYuY29tbWl0LGRpc3BhdGNoPV9yZWYzNi5kaXNwYXRjaCxnZXR0ZXJzPV9yZWYzNi5nZXR0ZXJzO3ZhciBuYW1lPWdldHRlcnMuY3VycmVudENsb3VkLm5hbWU7dmFyIHBhdGg9Z2V0dGVycy5jdXJyZW50Q2xvdWQucGF0aDt2YXIgZGlyUGF0aD1mb2xkZXIucGF0aDtkaXNwYXRjaCgnZmV0Y2hDbG91ZFBhdGgnLHtuYW1lOm5hbWUscGF0aDpkaXJQYXRofSkudGhlbihmdW5jdGlvbihyZXMpe2lmKG5hbWU9PT1nZXR0ZXJzLmN1cnJlbnRDbG91ZC5uYW1lJiZyZXMhPT11bmRlZmluZWQpe3ZhciBuZXdQYXRoPXBhdGguY29uY2F0KFtkaXJQYXRoXSk7dmFyIG5ld1JvdXRlPVsnc291cmNlJyxuYW1lLG5ld1BhdGhdO2NvbW1pdCgnQ0hBTkdFX1JPVVRFJyxuZXdSb3V0ZSk7fX0pO30sbG9nb3V0OmZ1bmN0aW9uIGxvZ291dChfcmVmMzcsbmFtZSl7dmFyIGNvbW1pdD1fcmVmMzcuY29tbWl0LGRpc3BhdGNoPV9yZWYzNy5kaXNwYXRjaCxnZXR0ZXJzPV9yZWYzNy5nZXR0ZXJzOy8vIExvZ291dCBzaW5nbGUgY2xvdWRcbmlmKG5hbWUpe2dldHRlcnMuY2xvdWRDbGllbnQubG9nb3V0KG5hbWUpLnRoZW4oZnVuY3Rpb24oKXtjb21taXQoJ1JFTU9WRV9DTE9VRF9QQVRIUycsbmFtZSk7Y29tbWl0KCdSRU1PVkVfU09VUkNFX0ZST01fV0FJVElORycsbmFtZSk7aWYobmFtZT09PWdldHRlcnMuY3VycmVudENsb3VkLm5hbWUpey8vIEdldCBvdXQgb2YgYW55IGZvbGRlcnNcbmNvbW1pdCgnQ0hBTkdFX1JPVVRFJyxbJ3NvdXJjZScsbmFtZV0pO31jb21taXQoJ1JFTU9WRV9TT1VSQ0VfRlJPTV9ST1VURVMnLG5hbWUpO2Rpc3BhdGNoKCdmZXRjaENsb3VkUGF0aCcse25hbWU6bmFtZSxwYXRoOicvJ30pO30pO31lbHNley8vIExvZ291dCBhbGwgY2xvdWRzXG5nZXR0ZXJzLmNsb3VkQ2xpZW50LmxvZ291dCgpLnRoZW4oZnVuY3Rpb24oKXtjb21taXQoJ1JFTU9WRV9BTExfQ0xPVURfUEFUSFMnKTtjb21taXQoJ1JFTU9WRV9DTE9VRFNfRlJPTV9XQUlUSU5HJyk7fSk7fX0sb25GZXRjaFN1Y2Nlc3M6ZnVuY3Rpb24gb25GZXRjaFN1Y2Nlc3MoY29udGV4dCxfcmVmMzgpe3ZhciBuYW1lPV9yZWYzOC5uYW1lLHBhdGg9X3JlZjM4LnBhdGgscmVzPV9yZWYzOC5yZXM7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXt2YXIgY2xvdWRPYmo9cmVzW25hbWVdO2lmKGNsb3VkT2JqJiZjbG91ZE9iai5hdXRoJiZjbG91ZE9iai5hdXRoLnJlZGlyZWN0X3VybCl7Y29udGV4dC5jb21taXQoJ1NFVF9DTE9VRF9SRURJUkVDVCcse25hbWU6bmFtZSxwYXlsb2FkOmNsb3VkT2JqfSk7cmVzb2x2ZSgpO31lbHNlIGlmKGNsb3VkT2JqJiZjbG91ZE9iai5lcnJvcil7dmFyIG1zZz1jbG91ZE9iai5lcnJvci50ZXh0fHwnRXJyb3Igb2NjdXJyZWQuJztyZWplY3QobmV3IEVycm9yKG1zZykpO31lbHNlIGlmKGNsb3VkT2JqJiZjbG91ZE9iai5jb250ZW50cyl7dmFyIHBheWxvYWQ9Y2xvdWRPYmouY29udGVudHMubWFwKGZ1bmN0aW9uKGZpbGUpe3JldHVybiBjb252ZXJ0VG9GaWxlT2JqKGZpbGUsbmFtZSk7fSk7Y29udGV4dC5jb21taXQoJ1NFVF9DTE9VRF9ORVhUJyx7bmFtZTpuYW1lLHBhdGg6cGF0aCxuZXh0OmNsb3VkT2JqLm5leHR9KTsvLyBLZWVwIGEgbWFwIG9mIGZvbGRlciBuYW1lcyB0byBmb2xkZXIgcGF0aHMgKGltcG9ydGFudCBmb3IgRkIsIEdvb2dsZSwgZXRjLilcbnZhciBmb2xkZXJzPXBheWxvYWQuZmlsdGVyKGZ1bmN0aW9uKGYpe3JldHVybiBmLmZvbGRlcjt9KTtjb250ZXh0LmNvbW1pdCgnU0VUX0NMT1VEX0ZPTERFUlMnLGZvbGRlcnMpOy8vIEFkZCBjb252ZXJ0ZWQgY29udGVudHMgdG8gY2xvdWQgcGF0aCBpbiBzdGF0ZVxuY29udGV4dC5jb21taXQoJ1NFVF9DTE9VRF9QQVRIJyx7bmFtZTpuYW1lLHBhdGg6cGF0aCxwYXlsb2FkOnBheWxvYWR9KTtyZXNvbHZlKHBheWxvYWQpO31lbHNle3JlamVjdChuZXcgRXJyb3IoJ0VtcHR5IHJlc3BvbnNlLicpKTt9fSk7fSxwcmVmZXRjaENsb3VkczpmdW5jdGlvbiBwcmVmZXRjaENsb3Vkcyhjb250ZXh0KXsvLyBGZXRjaCByb290IGZvbGRlciBvZiBlYWNoIHVzZXItZGVmaW5lZCBjbG91ZCBzb3VyY2VcbnZhciBwYXRoPScvJzt2YXIgY2xvdWRzPWNvbnRleHQuZ2V0dGVycy5mcm9tU291cmNlcy5maWx0ZXIoZnVuY3Rpb24ocyl7cmV0dXJuIHMudWk9PT0nY2xvdWQnO30pLm1hcChmdW5jdGlvbihzKXtyZXR1cm4gcy5uYW1lO30pLnJlZHVjZShmdW5jdGlvbihvYmosbmFtZSl7b2JqW25hbWVdPXtwYXRoOnBhdGh9O2lmKG5hbWU9PT0nY3VzdG9tc291cmNlJyl7b2JqW25hbWVdLmN1c3RvbVNvdXJjZUNvbnRhaW5lcj1jb250ZXh0LmdldHRlcnMuY3VzdG9tU291cmNlQ29udGFpbmVyO29ialtuYW1lXS5jdXN0b21Tb3VyY2VQYXRoPWNvbnRleHQuZ2V0dGVycy5jdXN0b21Tb3VyY2VQYXRoO31yZXR1cm4gb2JqO30se30pO3ZhciBrZXlzPU9iamVjdC5rZXlzKGNsb3Vkcyk7aWYoa2V5cy5sZW5ndGgpe2tleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpe2NvbnRleHQuY29tbWl0KCdTRVRfQ0xPVURfTE9BRElORycsa2V5KTt9KTtyZXR1cm4gY29udGV4dC5nZXR0ZXJzLmNsb3VkQ2xpZW50Lmxpc3QoY2xvdWRzKS50aGVuKGZ1bmN0aW9uKHJlcyl7a2V5cy5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpe2NvbnRleHQuZGlzcGF0Y2goJ29uRmV0Y2hTdWNjZXNzJyx7bmFtZTpuYW1lLHBhdGg6cGF0aCxyZXM6cmVzfSkvLyBCZSBzaWxlbnQgb24gcmVqZWN0aW9uc1xuW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtjb250ZXh0LmNvbW1pdCgnU0VUX0NMT1VEX0VSUk9SJyxuYW1lKTt9KTt9KTt9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7a2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7Y29udGV4dC5jb21taXQoJ1NFVF9DTE9VRF9FUlJPUicsa2V5KTt9KTt9KTt9cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO30sYWRkQ2xvdWRGb2xkZXI6ZnVuY3Rpb24gYWRkQ2xvdWRGb2xkZXIoX3JlZjM5LF9yZWY0MCl7dmFyIHN0YXRlPV9yZWYzOS5zdGF0ZSxjb21taXQ9X3JlZjM5LmNvbW1pdCxkaXNwYXRjaD1fcmVmMzkuZGlzcGF0Y2gsZ2V0dGVycz1fcmVmMzkuZ2V0dGVyczt2YXIgbmFtZT1fcmVmNDAubmFtZSxwYXRoPV9yZWY0MC5wYXRoLG5leHQ9X3JlZjQwLm5leHQ7Ly8gcGF0aCBpcyBmb2xkZXIucGF0aFxuY29tbWl0KCdTRVRfQ0xPVURfRk9MREVSX0xPQURJTkcnLHtwYXRoOnBhdGgsdmFsdWU6dHJ1ZX0pO3JldHVybiBkaXNwYXRjaCgnZmV0Y2hDbG91ZFBhdGgnLHtuYW1lOm5hbWUscGF0aDpwYXRoLGxvYWQ6ZmFsc2UsbmV4dDpuZXh0fSkudGhlbihmdW5jdGlvbihyZXMpe2lmKHJlcyl7Y29tbWl0KCdTRVRfQ0xPVURfUEFUSF9TRUxFQ1RFRCcscGF0aCk7Y29tbWl0KCdTRVRfQ0xPVURfRk9MREVSX0xPQURJTkcnLHtwYXRoOnBhdGgsdmFsdWU6ZmFsc2V9KTsvLyBUT0RPIFJlbW92ZSB0aGlzIGZpbHRlciB0byBmZXRjaCBmb2xkZXJzIHJlY3Vyc2l2ZWx5LiBNYXliZSBhbiBvcHRpb24/XG52YXIgbGlzdD1yZXMuZmlsdGVyKGZ1bmN0aW9uKGYpe3JldHVybiFmLmZvbGRlcjt9KTtsaXN0LmZvckVhY2goZnVuY3Rpb24oZil7cmV0dXJuIGRpc3BhdGNoKCdhZGRGaWxlJyxmKTt9KTtjb21taXQoJ1NFVF9DTE9VRF9QQVRIX1NFTEVDVEVEJyxudWxsKTsvLyBSZWN1cnNpdmVseSBmZXRjaCB0aGlzIGZvbGRlciB1bnRpbCB0aGVyZSBhcmUgbm8gbW9yZSBuZXh0IHBhdGhzXG52YXIgbmV4dFBhdGg9c3RhdGUuY2xvdWRzW25hbWVdLm5leHQmJnN0YXRlLmNsb3Vkc1tuYW1lXS5uZXh0W3BhdGhdO2lmKG5leHRQYXRoJiZnZXR0ZXJzLmZpbGVDb3VudCE9PWdldHRlcnMubWF4RmlsZXMpe2Rpc3BhdGNoKCdhZGRDbG91ZEZvbGRlcicse25hbWU6bmFtZSxwYXRoOnBhdGgsbmV4dDpuZXh0UGF0aH0pO319fSlbXCJjYXRjaFwiXShmdW5jdGlvbihlcnIpe2NvbW1pdCgnU0VUX0NMT1VEX0ZPTERFUl9MT0FESU5HJyx7cGF0aDpwYXRoLHZhbHVlOmZhbHNlfSk7cmV0dXJuIGRpc3BhdGNoKCdzaG93Tm90aWZpY2F0aW9uJyxlcnIubWVzc2FnZSk7fSk7fSxmZXRjaENsb3VkUGF0aDpmdW5jdGlvbiBmZXRjaENsb3VkUGF0aChfcmVmNDEsX3JlZjQyKXt2YXIgc3RhdGU9X3JlZjQxLnN0YXRlLGNvbW1pdD1fcmVmNDEuY29tbWl0LGdldHRlcnM9X3JlZjQxLmdldHRlcnMsZGlzcGF0Y2g9X3JlZjQxLmRpc3BhdGNoO3ZhciBuYW1lPV9yZWY0Mi5uYW1lLF9yZWY0MiRwYXRoPV9yZWY0Mi5wYXRoLHBhdGg9X3JlZjQyJHBhdGg9PT12b2lkIDA/Jy8nOl9yZWY0MiRwYXRoLF9yZWY0MiRsb2FkPV9yZWY0Mi5sb2FkLGxvYWQ9X3JlZjQyJGxvYWQ9PT12b2lkIDA/dHJ1ZTpfcmVmNDIkbG9hZCxuZXh0PV9yZWY0Mi5uZXh0Oy8vIERvbid0IGZldGNoIHBhdGggaWYgd2UgYWxyZWFkeSBoYXZlIGl0IGNhY2hlZFxudmFyIGNsb3VkT2JqPXN0YXRlLmNsb3Vkc1tuYW1lXTtpZighbmV4dCYmY2xvdWRPYmomJmNsb3VkT2JqLmNvbnRlbnRzJiZjbG91ZE9iai5jb250ZW50c1twYXRoXSl7cmV0dXJuIFByb21pc2UucmVzb2x2ZShjbG91ZE9iai5jb250ZW50c1twYXRoXSk7fS8vIEZldGNoIGZvbGRlciBsaXN0IGZyb20gQ2xvdWRSb3V0ZXIgQVBJXG52YXIgcGF5bG9hZD1fZGVmaW5lUHJvcGVydHkoe30sbmFtZSx7cGF0aDpwYXRoLG5leHQ6bmV4dH0pO2lmKG5hbWU9PT0nY3VzdG9tc291cmNlJyl7cGF5bG9hZC5jdXN0b21zb3VyY2UuY3VzdG9tU291cmNlQ29udGFpbmVyPWdldHRlcnMuY3VzdG9tU291cmNlQ29udGFpbmVyO3BheWxvYWQuY3VzdG9tc291cmNlLmN1c3RvbVNvdXJjZVBhdGg9Z2V0dGVycy5jdXN0b21Tb3VyY2VQYXRoO31pZihsb2FkKXtjb21taXQoJ1NFVF9DTE9VRF9MT0FESU5HJyxuYW1lKTt9cmV0dXJuIGdldHRlcnMuY2xvdWRDbGllbnQubGlzdChwYXlsb2FkKS50aGVuKGZ1bmN0aW9uKHJlcyl7cmV0dXJuIGRpc3BhdGNoKCdvbkZldGNoU3VjY2Vzcycse25hbWU6bmFtZSxwYXRoOnBhdGgscmVzOnJlc30pO30pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oZXJyKXtjb21taXQoJ1NFVF9DTE9VRF9FUlJPUicsbmFtZSk7cmV0dXJuIGRpc3BhdGNoKCdzaG93Tm90aWZpY2F0aW9uJyxlcnIubWVzc2FnZSk7fSk7fSxnb1RvTGFzdFBhdGg6ZnVuY3Rpb24gZ29Ub0xhc3RQYXRoKF9yZWY0MyxuYW1lKXt2YXIgZ2V0dGVycz1fcmVmNDMuZ2V0dGVycyxjb21taXQ9X3JlZjQzLmNvbW1pdDsvLyBJZiB3ZSdyZSBhbHJlYWR5IG9uIHRoZSBsYXN0IHBhdGggdGhlbiBkbyBub3RoaW5nXG5pZihnZXR0ZXJzLmN1cnJlbnRDbG91ZC5uYW1lIT09bmFtZSl7dmFyIGxhc3RQYXRoPWdldHRlcnMucm91dGVzSGlzdG9yeS5maWx0ZXIoZnVuY3Rpb24ocm91dGUpe3JldHVybiByb3V0ZVsxXT09PW5hbWU7fSkvLyBMb29rIGZvciBhbGwgcm91dGVzIHdpdGhpbiBjdXJyZW50IGNsb3VkXG4ucG9wKCk7Ly8gUG9wIG1vc3QgcmVjZW50IHJvdXRlXG5pZihsYXN0UGF0aCYmbGFzdFBhdGgubGVuZ3RoKXtjb21taXQoJ0NIQU5HRV9ST1VURScsbGFzdFBhdGgpO31lbHNley8vIERlZmF1bHQgdG8gcm9vdCBmb2xkZXJcbmNvbW1pdCgnQ0hBTkdFX1JPVVRFJyxbJ3NvdXJjZScsbmFtZV0pO319fX07dmFyIGdldHRlcnM9e2Nsb3VkczpmdW5jdGlvbiBjbG91ZHMoc3Qpe3JldHVybiBzdC5jbG91ZHM7fSxjbG91ZEZvbGRlcnM6ZnVuY3Rpb24gY2xvdWRGb2xkZXJzKHN0KXtyZXR1cm4gc3QuY2xvdWRGb2xkZXJzO30sY3VycmVudENsb3VkOmZ1bmN0aW9uIGN1cnJlbnRDbG91ZChzdCxfcmVmNDQpe3ZhciByb3V0ZT1fcmVmNDQucm91dGU7Ly8gQ3VycmVudCBjbG91ZCBpcyBiYXNlZCBvbiBjdXJyZW50IHJvdXRlLCBlLmcuIFsnc291cmNlJywgJ2Ryb3Bib3gnXVxudmFyIG5hbWU9cm91dGVbMV07dmFyIHBhdGg9cm91dGVbMl18fFsnLyddO3ZhciBsYXN0UGF0aD1sYXN0KHBhdGgpO2lmKHN0LmNsb3Vkc1tuYW1lXSl7cmV0dXJue25hbWU6bmFtZSxwYXRoOnBhdGgsbGFzdFBhdGg6bGFzdFBhdGgsbmV4dDpzdC5jbG91ZHNbbmFtZV0ubmV4dCYmc3QuY2xvdWRzW25hbWVdLm5leHRbbGFzdFBhdGhdLHJlZGlyZWN0OnN0LmNsb3Vkc1tuYW1lXS5yZWRpcmVjdCxpc1VuYXV0aG9yaXplZDpzdC5jbG91ZHNbbmFtZV0uc3RhdHVzPT09J3VuYXV0aG9yaXplZCcsaXNFcnJvcmVkOiFzdC5jbG91ZHNbbmFtZV0uY29udGVudHMmJnN0LmNsb3Vkc1tuYW1lXS5zdGF0dXM9PT0nZXJyb3JlZCcsaXNMb2FkaW5nOnN0LmNsb3Vkc1tuYW1lXS5zdGF0dXM9PT0nbG9hZGluZyd9O31yZXR1cm57fTt9LGN1cnJlbnRDbG91ZEZpbGVzOmZ1bmN0aW9uIGN1cnJlbnRDbG91ZEZpbGVzKHN0LF9yZWY0NSl7dmFyIGN1cnJlbnRDbG91ZD1fcmVmNDUuY3VycmVudENsb3VkO3ZhciBuYW1lPWN1cnJlbnRDbG91ZC5uYW1lO3ZhciBwYXRoPWN1cnJlbnRDbG91ZC5sYXN0UGF0aDtpZihzdC5jbG91ZHNbbmFtZV0mJnN0LmNsb3Vkc1tuYW1lXS5jb250ZW50cyl7cmV0dXJuIHN0LmNsb3Vkc1tuYW1lXS5jb250ZW50c1twYXRoXXx8W107fXJldHVybltdO30sc2VsZWN0ZWRDbG91ZFBhdGg6ZnVuY3Rpb24gc2VsZWN0ZWRDbG91ZFBhdGgoc3Qpe3JldHVybiBzdC5zZWxlY3RlZENsb3VkUGF0aDt9fTt2YXIgY2xvdWRTdG9yZT17c3RhdGU6aW5pdGlhbFN0YXRlLG11dGF0aW9uczptdXRhdGlvbnMsYWN0aW9uczphY3Rpb25zLGdldHRlcnM6Z2V0dGVyc307Ly9cbnZhciBzY3JpcHQkdD17Y29tcG9uZW50czp7QmxvY2tlZDpCbG9ja2VkLERyYWdBbmREcm9wOkRyYWdBbmREcm9wLE5vdGlmaWNhdGlvbnM6Tm90aWZpY2F0aW9ucyxQaWNrRnJvbVNvdXJjZTpQaWNrRnJvbVNvdXJjZSxUcmFuc2Zvcm06VHJhbnNmb3JtLFVwbG9hZFN1bW1hcnk6VXBsb2FkU3VtbWFyeSxFcnJvckJvdW5kYXJ5OkVycm9yQm91bmRhcnl9LGNvbXB1dGVkOl9vYmplY3RTcHJlYWQoe30saW5kZXhfZXNtLm1hcEdldHRlcnMoWydjbG91ZENsaWVudCcsJ2Nyb3BGaWxlcycsJ2Zyb21Tb3VyY2VzJywnZ2xvYmFsRHJvcFpvbmUnLCdpc0lubGluZURpc3BsYXknLCdyb290SWQnLCdyb3V0ZScsJ3ByZWZldGNoZWQnLCd1aVZpc2libGUnXSkse2xvY2FsUGlja2luZ0FsbG93ZWQ6ZnVuY3Rpb24gbG9jYWxQaWNraW5nQWxsb3dlZCgpe3JldHVybiB0aGlzLnJvdXRlJiZ0aGlzLnJvdXRlWzFdPT09J2xvY2FsX2ZpbGVfc3lzdGVtJ3x8dGhpcy5nbG9iYWxEcm9wWm9uZTt9LGdldENsYXNzZXM6ZnVuY3Rpb24gZ2V0Q2xhc3Nlcygpe3JldHVybnsnZnNwLXBpY2tlci0taW5saW5lJzp0aGlzLmlzSW5saW5lRGlzcGxheX07fX0pLG1ldGhvZHM6X29iamVjdFNwcmVhZCh7fSxpbmRleF9lc20ubWFwQWN0aW9ucyhbJ2FkZEZpbGUnLCdwcmVmZXRjaENsb3VkcycsJ3Nob3dOb3RpZmljYXRpb24nXSkse2lzUm9vdFJvdXRlOmZ1bmN0aW9uIGlzUm9vdFJvdXRlKG5hbWUpe3JldHVybiB0aGlzLnJvdXRlWzBdPT09bmFtZTt9LGRldGVjdEVzY1ByZXNzZWQ6ZnVuY3Rpb24gZGV0ZWN0RXNjUHJlc3NlZChldmVudCl7aWYoZXZlbnQua2V5Q29kZT09PTI3KXt0aGlzLiRzdG9yZS5kaXNwYXRjaCgnY2FuY2VsUGljaycpO3RoaXMuJHJvb3QuJGRlc3Ryb3koKTt9fX0pLGNyZWF0ZWQ6ZnVuY3Rpb24gY3JlYXRlZCgpe3ZhciBfdGhpczM0PXRoaXM7aWYoIXRoaXMuaXNJbmxpbmVEaXNwbGF5KXt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLHRoaXMuZGV0ZWN0RXNjUHJlc3NlZCk7fWlmKCF0aGlzLnByZWZldGNoZWQpe3RoaXMuY2xvdWRDbGllbnQucHJlZmV0Y2goKS50aGVuKGZ1bmN0aW9uKHJlcyl7Ly8gTWF5YmUgbW92ZSB0aGlzIHRvIFZ1ZSBpbml0P1xuX3RoaXMzNC4kc3RvcmUuY29tbWl0KCdTRVRfUFJFRkVUQ0gnLHJlcyk7X3RoaXMzNC4kc3RvcmUuY29tbWl0KCdQUkVGRVRDSF9ET05FJyk7X3RoaXMzNC5wcmVmZXRjaENsb3VkcygpOy8vIGluaXRpYWwgZm9sZGVyIGxpc3QgbmVlZHMgdG8gYmUgZG9uZSBhZnRlciBwcmVmZXRjaCByZXF1ZXN0XG59KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7cmV0dXJuIHVuZGVmaW5lZDt9KTt9Ly8gQWRkIGZpbGVzIHBhc3NlZCBpbiBmcm9tIGNyb3BcbnZhciBwcm9taXNlcz1bXTtpZih0aGlzLmNyb3BGaWxlcyYmdGhpcy5jcm9wRmlsZXMubGVuZ3RoKXtbXS5mb3JFYWNoLmNhbGwodGhpcy5jcm9wRmlsZXMsZnVuY3Rpb24oZmlsZSl7aWYodHlwZW9mIGZpbGU9PT0nc3RyaW5nJyl7cHJvbWlzZXMucHVzaChfdGhpczM0LmNsb3VkQ2xpZW50Lm1ldGFkYXRhKGZpbGUpKTt9ZWxzZXtfdGhpczM0LmFkZEZpbGUoZmlsZSk7fX0pO3JldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihyZXMpe3Jlcy5mb3JFYWNoKGZ1bmN0aW9uKHIpe2lmKHIuZXJyb3Ipe3Rocm93IG5ldyBFcnJvcihyLmVycm9yKTt9X3RoaXMzNC5hZGRGaWxlKHIpO30pO2lmKF90aGlzMzQuY3JvcEZpbGVzLmxlbmd0aD4xKXtfdGhpczM0LiRzdG9yZS5jb21taXQoJ0NIQU5HRV9ST1VURScsWydzdW1tYXJ5J10pO319KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7X3RoaXMzNC5zaG93Tm90aWZpY2F0aW9uKCdFcnJvciBmZXRjaGluZyBVUkwgbWV0YWRhdGEuJyk7c2V0VGltZW91dChmdW5jdGlvbigpe190aGlzMzQuJHN0b3JlLmRpc3BhdGNoKCdjYW5jZWxQaWNrJyk7X3RoaXMzNC4kcm9vdC4kZGVzdHJveSgpO30sMjAwMCk7fSk7fWlmKHdpbmRvdy5VUkxTZWFyY2hQYXJhbXMpe3ZhciBzZWFyY2hQYXJhbXM9bmV3IHdpbmRvdy5VUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7dmFyIHNvdXJjZU5hbWU9c2VhcmNoUGFyYW1zLmdldChDQUxMQkFDS19VUkxfS0VZKTtpZihzb3VyY2VOYW1lJiZzb3VyY2VOYW1lLmxlbmd0aD4wKXtyZXR1cm4gdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2dvVG9MYXN0UGF0aCcsc291cmNlTmFtZSk7fX1yZXR1cm4gdGhpcy4kc3RvcmUuY29tbWl0KCdJTklUSUFMX1JPVVRFJyk7fSxkZXN0cm95ZWQ6ZnVuY3Rpb24gZGVzdHJveWVkKCl7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJyx0aGlzLmRldGVjdEVzY1ByZXNzZWQpO319Oy8qIHNjcmlwdCAqL3ZhciBfX3Z1ZV9zY3JpcHRfXyR0PXNjcmlwdCR0Oy8qIHRlbXBsYXRlICovdmFyIF9fdnVlX3JlbmRlcl9fJHM9ZnVuY3Rpb24gX192dWVfcmVuZGVyX18kcygpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYyhcInRyYW5zaXRpb25cIix7YXR0cnM6e2FwcGVhcjpcIlwiLFwiYXBwZWFyLWNsYXNzXCI6XCJmc3AtcGlja2VyLWFwcGVhclwiLFwiYXBwZWFyLXRvLWNsYXNzXCI6XCJmc3AtcGlja2VyLWFwcGVhci10b1wiLFwiYXBwZWFyLWFjdGl2ZS1jbGFzc1wiOlwiZnNwLXBpY2tlci1hcHBlYXItYWN0aXZlXCJ9fSxbX2MoXCJlcnJvci1ib3VuZGFyeVwiLFtfYyhcImRpdlwiLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6X3ZtLnVpVmlzaWJsZSxleHByZXNzaW9uOlwidWlWaXNpYmxlXCJ9XSxcImNsYXNzXCI6X3ZtLmdldENsYXNzZXMsYXR0cnM6e2lkOl92bS5yb290SWR9fSxbX2MoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJmc3AtcGlja2VyLWhvbGRlclwifSxbX3ZtLmlzUm9vdFJvdXRlKFwic291cmNlXCIpP19jKFwicGljay1mcm9tLXNvdXJjZVwiKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF92bS5pc1Jvb3RSb3V0ZShcInN1bW1hcnlcIik/X2MoXCJ1cGxvYWQtc3VtbWFyeVwiKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF92bS5pc1Jvb3RSb3V0ZShcInRyYW5zZm9ybVwiKT9fYyhcInRyYW5zZm9ybVwiKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF9jKFwibm90aWZpY2F0aW9uc1wiKSxfdm0uX3YoXCIgXCIpLF92bS5sb2NhbFBpY2tpbmdBbGxvd2VkJiYhX3ZtLmlzUm9vdFJvdXRlKFwidHJhbnNmb3JtXCIpP19jKFwiZHJhZy1hbmQtZHJvcFwiKTpfdm0uX2UoKV0sMSldKV0pXSwxKTt9O3ZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyRzPVtdO19fdnVlX3JlbmRlcl9fJHMuX3dpdGhTdHJpcHBlZD10cnVlOy8qIHN0eWxlICovdmFyIF9fdnVlX2luamVjdF9zdHlsZXNfXyR0PXVuZGVmaW5lZDsvKiBzY29wZWQgKi92YXIgX192dWVfc2NvcGVfaWRfXyR0PXVuZGVmaW5lZDsvKiBtb2R1bGUgaWRlbnRpZmllciAqL3ZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJHQ9dW5kZWZpbmVkOy8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi92YXIgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJHQ9ZmFsc2U7Lyogc3R5bGUgaW5qZWN0ICovIC8qIHN0eWxlIGluamVjdCBTU1IgKi8gLyogc3R5bGUgaW5qZWN0IHNoYWRvdyBkb20gKi92YXIgQXBwPW5vcm1hbGl6ZUNvbXBvbmVudCh7cmVuZGVyOl9fdnVlX3JlbmRlcl9fJHMsc3RhdGljUmVuZGVyRm5zOl9fdnVlX3N0YXRpY1JlbmRlckZuc19fJHN9LF9fdnVlX2luamVjdF9zdHlsZXNfXyR0LF9fdnVlX3NjcmlwdF9fJHQsX192dWVfc2NvcGVfaWRfXyR0LF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyR0LF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kdCxmYWxzZSx1bmRlZmluZWQsdW5kZWZpbmVkLHVuZGVmaW5lZCk7dmFyIERJU1BMQVlfTU9ERV9PVkVSTEFZPSdvdmVybGF5Jzt2YXIgRElTUExBWV9NT0RFX0lOTElORT0naW5saW5lJzt2YXIgRElTUExBWV9NT0RFX0RST1BQQU5FPSdkcm9wUGFuZSc7dmFyIGlzTnVtYmVyJDE9ZnVuY3Rpb24gaXNOdW1iZXIkMSh0aGluZyl7cmV0dXJuIHR5cGVvZiB0aGluZz09PSdudW1iZXInO307dmFyIGlzT2JqZWN0JDQ9ZnVuY3Rpb24gaXNPYmplY3QkNCh0aGluZyl7cmV0dXJuIF90eXBlb2YyKHRoaW5nKT09PSdvYmplY3QnJiZ0aGluZyE9PW51bGwmJkFycmF5LmlzQXJyYXkodGhpbmcpPT09ZmFsc2U7fTt2YXIgaXNJbnRlZ2VyPWZ1bmN0aW9uIGlzSW50ZWdlcihuKXtyZXR1cm4gbiUxPT09MDt9O3ZhciBwYXJzZXJzPXtkcm9wUGFuZTpmdW5jdGlvbiBkcm9wUGFuZShfZHJvcFBhbmUpe3JldHVybiBfZHJvcFBhbmU7fSxkaXNwbGF5TW9kZTpmdW5jdGlvbiBkaXNwbGF5TW9kZShtb2RlKXtpZihbRElTUExBWV9NT0RFX09WRVJMQVksRElTUExBWV9NT0RFX0lOTElORV0uaW5kZXhPZihtb2RlKTwtMSl7dGhyb3cgbmV3IEVycm9yKCdXcm9uZyBkaXNwbGF5IG1vZGUnKTt9cmV0dXJuIG1vZGV8fERJU1BMQVlfTU9ERV9PVkVSTEFZO30sLyoqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi8nZHJvcFBhbmUuaWQnOmZ1bmN0aW9uIGRyb3BQYW5lSWQoaWQpe3JldHVybiBpZDt9LCdkcm9wUGFuZS5vdmVybGF5JzpmdW5jdGlvbiBkcm9wUGFuZU92ZXJsYXkob3ZlcmxheSl7cmV0dXJuIG92ZXJsYXk7fSwnZHJvcFBhbmUub25EcmFnRW50ZXInOmZ1bmN0aW9uIGRyb3BQYW5lT25EcmFnRW50ZXIob25EcmFnRW50ZXIpe2lmKHR5cGVvZiBvbkRyYWdFbnRlciE9PSdmdW5jdGlvbicpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJkcm9wUGFuZS5vbkRyYWdFbnRlclwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIG9uRHJhZ0VudGVyO30sJ2Ryb3BQYW5lLm9uRHJhZ0xlYXZlJzpmdW5jdGlvbiBkcm9wUGFuZU9uRHJhZ0xlYXZlKG9uRHJhZ0xlYXZlKXtpZih0eXBlb2Ygb25EcmFnTGVhdmUhPT0nZnVuY3Rpb24nKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwiZHJvcFBhbmUub25EcmFnTGVhdmVcIiBjb25maWcgb3B0aW9uJyk7fXJldHVybiBvbkRyYWdMZWF2ZTt9LCdkcm9wUGFuZS5vbkRyYWdPdmVyJzpmdW5jdGlvbiBkcm9wUGFuZU9uRHJhZ092ZXIob25EcmFnT3Zlcil7aWYodHlwZW9mIG9uRHJhZ092ZXIhPT0nZnVuY3Rpb24nKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwiZHJvcFBhbmUub25EcmFnT3ZlclwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIG9uRHJhZ092ZXI7fSwnZHJvcFBhbmUub25Ecm9wJzpmdW5jdGlvbiBkcm9wUGFuZU9uRHJvcChvbkRyb3Ape2lmKHR5cGVvZiBvbkRyb3AhPT0nZnVuY3Rpb24nKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwiZHJvcFBhbmUub25Ecm9wXCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gb25Ecm9wO30sJ2Ryb3BQYW5lLm9uU3VjY2Vzcyc6ZnVuY3Rpb24gZHJvcFBhbmVPblN1Y2Nlc3Mob25TdWNjZXNzKXtpZih0eXBlb2Ygb25TdWNjZXNzIT09J2Z1bmN0aW9uJyl7dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcImRyb3BQYW5lLm9uU3VjY2Vzc1wiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIG9uU3VjY2Vzczt9LCdkcm9wUGFuZS5vbkVycm9yJzpmdW5jdGlvbiBkcm9wUGFuZU9uRXJyb3Iob25FcnJvcil7aWYodHlwZW9mIG9uRXJyb3IhPT0nZnVuY3Rpb24nKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwiZHJvcFBhbmUub25FcnJvclwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIG9uRXJyb3I7fSwnZHJvcFBhbmUub25Qcm9ncmVzcyc6ZnVuY3Rpb24gZHJvcFBhbmVPblByb2dyZXNzKG9uUHJvZ3Jlc3Mpe2lmKHR5cGVvZiBvblByb2dyZXNzIT09J2Z1bmN0aW9uJyl7dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcImRyb3BQYW5lLm9uUHJvZ3Jlc3NcIiBjb25maWcgb3B0aW9uJyk7fXJldHVybiBvblByb2dyZXNzO30sJ2Ryb3BQYW5lLm9uQ2xpY2snOmZ1bmN0aW9uIGRyb3BQYW5lT25DbGljayhvbkNsaWNrKXtpZih0eXBlb2Ygb25DbGljayE9PSdmdW5jdGlvbicpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJkcm9wUGFuZS5vbkNsaWNrXCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gb25DbGljazt9LCdkcm9wUGFuZS5kaXNhYmxlQ2xpY2snOmZ1bmN0aW9uIGRyb3BQYW5lRGlzYWJsZUNsaWNrKGRpc2FibGVDbGljayl7aWYodHlwZW9mIGRpc2FibGVDbGljayE9PSdib29sZWFuJyl7dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcImRyb3BQYW5lLmRpc2FibGVDbGlja1wiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIGRpc2FibGVDbGljazt9LCdkcm9wUGFuZS5zaG93SWNvbic6ZnVuY3Rpb24gZHJvcFBhbmVTaG93SWNvbihzaG93SWNvbil7aWYodHlwZW9mIHNob3dJY29uIT09J2Jvb2xlYW4nKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwiZHJvcFBhbmUuc2hvd0ljb25cIiBjb25maWcgb3B0aW9uJyk7fXJldHVybiBzaG93SWNvbjt9LCdkcm9wUGFuZS5zaG93UHJvZ3Jlc3MnOmZ1bmN0aW9uIGRyb3BQYW5lU2hvd1Byb2dyZXNzKHNob3dQcm9ncmVzcyl7aWYodHlwZW9mIHNob3dQcm9ncmVzcyE9PSdib29sZWFuJyl7dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcImRyb3BQYW5lLnNob3dQcm9ncmVzc1wiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIHNob3dQcm9ncmVzczt9LCdkcm9wUGFuZS5jdXN0b21UZXh0JzpmdW5jdGlvbiBkcm9wUGFuZUN1c3RvbVRleHQoY3VzdG9tVGV4dCl7aWYodHlwZW9mIGN1c3RvbVRleHQhPT0nc3RyaW5nJyl7dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcImRyb3BQYW5lLmN1c3RvbVRleHRcIiBjb25maWcgb3B0aW9uJyk7fXJldHVybiBjdXN0b21UZXh0O30sJ2Ryb3BQYW5lLmNyb3BGaWxlcyc6ZnVuY3Rpb24gZHJvcFBhbmVDcm9wRmlsZXMoY3JvcEZpbGVzKXtpZih0eXBlb2YgY3JvcEZpbGVzIT09J2Jvb2xlYW4nKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwiZHJvcFBhbmUuY3JvcEZpbGVzXCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gY3JvcEZpbGVzO30scm9vdElkOmZ1bmN0aW9uIHJvb3RJZChfcm9vdElkKXtpZih0eXBlb2YgX3Jvb3RJZCE9PSdzdHJpbmcnKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwicm9vdElkXCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gX3Jvb3RJZDt9LGNsZWFudXBJbWFnZUV4aWY6ZnVuY3Rpb24gY2xlYW51cEltYWdlRXhpZihjbGVhbnVwKXtpZih0eXBlb2YgY2xlYW51cCE9PSdib29sZWFuJyYmIShjbGVhbnVwIGluc3RhbmNlb2YgT2JqZWN0JiYoY2xlYW51cC5rZWVwT3JpZW50YXRpb24hPT11bmRlZmluZWR8fGNsZWFudXAua2VlcElDQ2FuZEFQUCE9PXVuZGVmaW5lZCkpKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwiY2xlYW51cEltYWdlRXhpZlwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIGNsZWFudXA7fSxmcm9tU291cmNlczpmdW5jdGlvbiBmcm9tU291cmNlcyhzb3VyY2VzRGVmaW5lZEJ5VXNlcil7aWYodHlwZW9mIHNvdXJjZXNEZWZpbmVkQnlVc2VyPT09J3N0cmluZycpe3NvdXJjZXNEZWZpbmVkQnlVc2VyPVtzb3VyY2VzRGVmaW5lZEJ5VXNlcl07fXJldHVybiBzb3VyY2VzRGVmaW5lZEJ5VXNlci5tYXAoZ2V0QnlOYW1lKS5maWx0ZXIoZnVuY3Rpb24ocyl7cmV0dXJuIXMuZGVwcmVjYXRlZDt9KTt9LGN1c3RvbVNvdXJjZUNvbnRhaW5lcjpmdW5jdGlvbiBjdXN0b21Tb3VyY2VDb250YWluZXIoY29udGFpbmVyKXtpZih0eXBlb2YgY29udGFpbmVyIT09J3N0cmluZycpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJjdXN0b21Tb3VyY2VDb250YWluZXJcIiBjb25maWcgb3B0aW9uJyk7fXJldHVybiBjb250YWluZXI7fSxjdXN0b21Tb3VyY2VOYW1lOmZ1bmN0aW9uIGN1c3RvbVNvdXJjZU5hbWUobmFtZSl7aWYodHlwZW9mIG5hbWUhPT0nc3RyaW5nJyl7dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcImN1c3RvbVNvdXJjZU5hbWVcIiBjb25maWcgb3B0aW9uJyk7fXJldHVybiBuYW1lO30sY3VzdG9tU291cmNlUGF0aDpmdW5jdGlvbiBjdXN0b21Tb3VyY2VQYXRoKHBhdGgpe2lmKHR5cGVvZiBwYXRoIT09J3N0cmluZycpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJjdXN0b21Tb3VyY2VQYXRoXCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gcGF0aDt9LGFjY2VwdDpmdW5jdGlvbiBhY2NlcHQoYWNjZXB0RGVmaW5lZEJ5VXNlcil7aWYodHlwZW9mIGFjY2VwdERlZmluZWRCeVVzZXI9PT0nc3RyaW5nJyl7YWNjZXB0RGVmaW5lZEJ5VXNlcj1bYWNjZXB0RGVmaW5lZEJ5VXNlcl07fWFjY2VwdERlZmluZWRCeVVzZXIuZm9yRWFjaChmdW5jdGlvbihvbmVPZkFjY2VwdFZhbHVlcyl7aWYodHlwZW9mIG9uZU9mQWNjZXB0VmFsdWVzIT09J3N0cmluZycpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJhY2NlcHRcIiBjb25maWcgb3B0aW9uJyk7fX0pO3JldHVybiBhY2NlcHREZWZpbmVkQnlVc2VyO30sY29uY3VycmVuY3k6ZnVuY3Rpb24gY29uY3VycmVuY3koX2NvbmN1cnJlbmN5KXtpZih0eXBlb2YgX2NvbmN1cnJlbmN5IT09J251bWJlcid8fCFpc0ludGVnZXIoX2NvbmN1cnJlbmN5KXx8X2NvbmN1cnJlbmN5PDEpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJjb25jdXJyZW5jeVwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIF9jb25jdXJyZW5jeTt9LG1heFNpemU6ZnVuY3Rpb24gbWF4U2l6ZShtYXhTaXplRGVmaW5lZEJ5VXNlcil7aWYodHlwZW9mIG1heFNpemVEZWZpbmVkQnlVc2VyIT09J251bWJlcid8fCFpc0ludGVnZXIobWF4U2l6ZURlZmluZWRCeVVzZXIpfHxtYXhTaXplRGVmaW5lZEJ5VXNlcjwwKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwibWF4U2l6ZVwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIG1heFNpemVEZWZpbmVkQnlVc2VyO30sbWluRmlsZXM6ZnVuY3Rpb24gbWluRmlsZXMobWluRmlsZXNEZWZpbmVkQnlVc2VyKXtpZih0eXBlb2YgbWluRmlsZXNEZWZpbmVkQnlVc2VyIT09J251bWJlcid8fCFpc0ludGVnZXIobWluRmlsZXNEZWZpbmVkQnlVc2VyKXx8bWluRmlsZXNEZWZpbmVkQnlVc2VyPDApe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJtaW5GaWxlc1wiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIG1pbkZpbGVzRGVmaW5lZEJ5VXNlcjt9LG1heEZpbGVzOmZ1bmN0aW9uIG1heEZpbGVzKG1heEZpbGVzRGVmaW5lZEJ5VXNlcil7aWYodHlwZW9mIG1heEZpbGVzRGVmaW5lZEJ5VXNlciE9PSdudW1iZXInfHwhaXNJbnRlZ2VyKG1heEZpbGVzRGVmaW5lZEJ5VXNlcil8fG1heEZpbGVzRGVmaW5lZEJ5VXNlcjwwKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwibWF4RmlsZXNcIiBjb25maWcgb3B0aW9uJyk7fXJldHVybiBtYXhGaWxlc0RlZmluZWRCeVVzZXI7fSxzdGFydFVwbG9hZGluZ1doZW5NYXhGaWxlc1JlYWNoZWQ6ZnVuY3Rpb24gc3RhcnRVcGxvYWRpbmdXaGVuTWF4RmlsZXNSZWFjaGVkKHN0YXJ0VXBsb2FkaW5nV2hlbk1heEZpbGVzUmVhY2hlZERlZmluZWRCeVVzZXIpe2lmKHR5cGVvZiBzdGFydFVwbG9hZGluZ1doZW5NYXhGaWxlc1JlYWNoZWREZWZpbmVkQnlVc2VyIT09J2Jvb2xlYW4nKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwic3RhcnRVcGxvYWRpbmdXaGVuTWF4RmlsZXNSZWFjaGVkXCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gc3RhcnRVcGxvYWRpbmdXaGVuTWF4RmlsZXNSZWFjaGVkRGVmaW5lZEJ5VXNlcjt9LGxvYWRDc3M6ZnVuY3Rpb24gbG9hZENzcyhsb2FkQ3NzRGVmaW5lZEJ5VXNlcil7aWYodHlwZW9mIGxvYWRDc3NEZWZpbmVkQnlVc2VyPT09J2Jvb2xlYW4nJiZsb2FkQ3NzRGVmaW5lZEJ5VXNlcj09PWZhbHNlfHx0eXBlb2YgbG9hZENzc0RlZmluZWRCeVVzZXI9PT0nc3RyaW5nJyl7cmV0dXJuIGxvYWRDc3NEZWZpbmVkQnlVc2VyO310aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwibG9hZENzc1wiIGNvbmZpZyBvcHRpb24nKTt9LGxhbmc6ZnVuY3Rpb24gbGFuZyhsYW5nRGVmaW5lZEJ5VXNlcil7aWYodHlwZW9mIGxhbmdEZWZpbmVkQnlVc2VyPT09J2Jvb2xlYW4nJiZsYW5nRGVmaW5lZEJ5VXNlcj09PWZhbHNlfHx0eXBlb2YgbGFuZ0RlZmluZWRCeVVzZXI9PT0nc3RyaW5nJyl7cmV0dXJuIGxhbmdEZWZpbmVkQnlVc2VyO310aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwibGFuZ1wiIGNvbmZpZyBvcHRpb24nKTt9LHZpZXdUeXBlOmZ1bmN0aW9uIHZpZXdUeXBlKF92aWV3VHlwZSl7aWYoWydsaXN0JywnZ3JpZCddLmluZGV4T2YoX3ZpZXdUeXBlKT09PS0xKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmlldyB0eXBlLiBDYW4gYmUgXCJsaXN0XCIgb3IgXCJncmlkXCInKTt9cmV0dXJuIF92aWV3VHlwZTt9LGN1c3RvbVRleHQ6ZnVuY3Rpb24gY3VzdG9tVGV4dChfY3VzdG9tVGV4dCl7aWYoaXNPYmplY3QkNChfY3VzdG9tVGV4dCkpe3JldHVybiBfY3VzdG9tVGV4dDt9dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcImN1c3RvbVRleHRcIiBjb25maWcgb3B0aW9uJyk7fSxzdG9yZVRvOmZ1bmN0aW9uIHN0b3JlVG8oc3RvcmVUb0RlZmluZWRCeVVzZXIpe2lmKGlzT2JqZWN0JDQoc3RvcmVUb0RlZmluZWRCeVVzZXIpKXtyZXR1cm4gc3RvcmVUb0RlZmluZWRCeVVzZXI7fXRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJzdG9yZVRvXCIgY29uZmlnIG9wdGlvbicpO30sdXBsb2FkQ29uZmlnOmZ1bmN0aW9uIHVwbG9hZENvbmZpZyhfdXBsb2FkQ29uZmlnKXtpZihpc09iamVjdCQ0KF91cGxvYWRDb25maWcpKXtyZXR1cm4gX3VwbG9hZENvbmZpZzt9dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcInVwbG9hZENvbmZpZ1wiIGNvbmZpZyBvcHRpb24nKTt9LGhpZGVNb2RhbFdoZW5VcGxvYWRpbmc6ZnVuY3Rpb24gaGlkZU1vZGFsV2hlblVwbG9hZGluZyhoaWRlV2hlblVwbG9hZGluZ0RlZmluZWRCeVVzZXIpe2lmKHR5cGVvZiBoaWRlV2hlblVwbG9hZGluZ0RlZmluZWRCeVVzZXIhPT0nYm9vbGVhbicpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJoaWRlTW9kYWxXaGVuVXBsb2FkaW5nXCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gaGlkZVdoZW5VcGxvYWRpbmdEZWZpbmVkQnlVc2VyO30sdXBsb2FkSW5CYWNrZ3JvdW5kOmZ1bmN0aW9uIHVwbG9hZEluQmFja2dyb3VuZCh1cGxvYWRJbkJhY2tncm91bmREZWZpbmVkQnlVc2VyKXtpZih0eXBlb2YgdXBsb2FkSW5CYWNrZ3JvdW5kRGVmaW5lZEJ5VXNlciE9PSdib29sZWFuJyl7dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcInVwbG9hZEluQmFja2dyb3VuZFwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIHVwbG9hZEluQmFja2dyb3VuZERlZmluZWRCeVVzZXI7fSxhbGxvd01hbnVhbFJldHJ5OmZ1bmN0aW9uIGFsbG93TWFudWFsUmV0cnkoX2FsbG93TWFudWFsUmV0cnkpe2lmKHR5cGVvZiBfYWxsb3dNYW51YWxSZXRyeSE9PSdib29sZWFuJyl7dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcImFsbG93TWFudWFsUmV0cnlcIiBjb25maWcgb3B0aW9uJyk7fXJldHVybiBfYWxsb3dNYW51YWxSZXRyeTt9LGRpc2FibGVUcmFuc2Zvcm1lcjpmdW5jdGlvbiBkaXNhYmxlVHJhbnNmb3JtZXIoZW5hYmxlVHJhbnNmb3JtZXJEZWZpbmVkQnlVc2VyKXtpZih0eXBlb2YgZW5hYmxlVHJhbnNmb3JtZXJEZWZpbmVkQnlVc2VyIT09J2Jvb2xlYW4nKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwiZGlzYWJsZVRyYW5zZm9ybWVyXCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gZW5hYmxlVHJhbnNmb3JtZXJEZWZpbmVkQnlVc2VyO30sZGlzYWJsZVRodW1ibmFpbHM6ZnVuY3Rpb24gZGlzYWJsZVRodW1ibmFpbHMoX2Rpc2FibGVUaHVtYm5haWxzKXtpZih0eXBlb2YgX2Rpc2FibGVUaHVtYm5haWxzIT09J2Jvb2xlYW4nKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwiZGlzYWJsZVRodW1ibmFpbHNcIiBjb25maWcgb3B0aW9uJyk7fXJldHVybiBfZGlzYWJsZVRodW1ibmFpbHM7fSxkaXNhYmxlU3RvcmFnZUtleTpmdW5jdGlvbiBkaXNhYmxlU3RvcmFnZUtleShkaXNhYmxlS2V5KXtpZih0eXBlb2YgZGlzYWJsZUtleSE9PSdib29sZWFuJyl7dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcImRpc2FibGVTdG9yYWdlS2V5XCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gZGlzYWJsZUtleTt9LG9uVXBsb2FkU3RhcnRlZDpmdW5jdGlvbiBvblVwbG9hZFN0YXJ0ZWQob25VcGxvYWRTdGFydGVkRGVmaW5lZEJ5VXNlcil7aWYodHlwZW9mIG9uVXBsb2FkU3RhcnRlZERlZmluZWRCeVVzZXIhPT0nZnVuY3Rpb24nKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwib25VcGxvYWRTdGFydGVkXCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gb25VcGxvYWRTdGFydGVkRGVmaW5lZEJ5VXNlcjt9LG9uRmlsZVNlbGVjdGVkOmZ1bmN0aW9uIG9uRmlsZVNlbGVjdGVkKG9uRmlsZVNlbGVjdGVkRGVmaW5lZEJ5VXNlcil7aWYodHlwZW9mIG9uRmlsZVNlbGVjdGVkRGVmaW5lZEJ5VXNlciE9PSdmdW5jdGlvbicpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJvbkZpbGVTZWxlY3RlZFwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIG9uRmlsZVNlbGVjdGVkRGVmaW5lZEJ5VXNlcjt9LG9uRmlsZVVwbG9hZFN0YXJ0ZWQ6ZnVuY3Rpb24gb25GaWxlVXBsb2FkU3RhcnRlZChvbkZpbGVTZWxlY3RlZERlZmluZWRCeVVzZXIpe2lmKHR5cGVvZiBvbkZpbGVTZWxlY3RlZERlZmluZWRCeVVzZXIhPT0nZnVuY3Rpb24nKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwib25GaWxlVXBsb2FkU3RhcnRlZFwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIG9uRmlsZVNlbGVjdGVkRGVmaW5lZEJ5VXNlcjt9LG9uRmlsZVVwbG9hZFByb2dyZXNzOmZ1bmN0aW9uIG9uRmlsZVVwbG9hZFByb2dyZXNzKG9uRmlsZVNlbGVjdGVkRGVmaW5lZEJ5VXNlcil7aWYodHlwZW9mIG9uRmlsZVNlbGVjdGVkRGVmaW5lZEJ5VXNlciE9PSdmdW5jdGlvbicpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJvbkZpbGVVcGxvYWRQcm9ncmVzc1wiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIG9uRmlsZVNlbGVjdGVkRGVmaW5lZEJ5VXNlcjt9LG9uRmlsZVVwbG9hZEZpbmlzaGVkOmZ1bmN0aW9uIG9uRmlsZVVwbG9hZEZpbmlzaGVkKG9uRmlsZVNlbGVjdGVkRGVmaW5lZEJ5VXNlcil7aWYodHlwZW9mIG9uRmlsZVNlbGVjdGVkRGVmaW5lZEJ5VXNlciE9PSdmdW5jdGlvbicpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJvbkZpbGVVcGxvYWRGaW5pc2hlZFwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIG9uRmlsZVNlbGVjdGVkRGVmaW5lZEJ5VXNlcjt9LG9uRmlsZVVwbG9hZEZhaWxlZDpmdW5jdGlvbiBvbkZpbGVVcGxvYWRGYWlsZWQob25GaWxlU2VsZWN0ZWREZWZpbmVkQnlVc2VyKXtpZih0eXBlb2Ygb25GaWxlU2VsZWN0ZWREZWZpbmVkQnlVc2VyIT09J2Z1bmN0aW9uJyl7dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcIm9uRmlsZVVwbG9hZEZhaWxlZFwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIG9uRmlsZVNlbGVjdGVkRGVmaW5lZEJ5VXNlcjt9LG9uRmlsZUNyb3BwZWQ6ZnVuY3Rpb24gb25GaWxlQ3JvcHBlZChfb25GaWxlQ3JvcHBlZCl7aWYodHlwZW9mIF9vbkZpbGVDcm9wcGVkIT09J2Z1bmN0aW9uJyl7dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcIm9uRmlsZUNyb3BwZWRcIiBjb25maWcgb3B0aW9uJyk7fXJldHVybiBfb25GaWxlQ3JvcHBlZDt9LG9uT3BlbjpmdW5jdGlvbiBvbk9wZW4oX29uT3Blbil7aWYodHlwZW9mIF9vbk9wZW4hPT0nZnVuY3Rpb24nKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwib25PcGVuXCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gX29uT3Blbjt9LG9uQ2FuY2VsOmZ1bmN0aW9uIG9uQ2FuY2VsKF9vbkNhbmNlbCl7aWYodHlwZW9mIF9vbkNhbmNlbCE9PSdmdW5jdGlvbicpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJvbkNhbmNlbFwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIF9vbkNhbmNlbDt9LG9uQ2xvc2U6ZnVuY3Rpb24gb25DbG9zZShfb25DbG9zZSl7aWYodHlwZW9mIF9vbkNsb3NlIT09J2Z1bmN0aW9uJyl7dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcIm9uQ2xvc2VcIiBjb25maWcgb3B0aW9uJyk7fXJldHVybiBfb25DbG9zZTt9LG9uVXBsb2FkRG9uZTpmdW5jdGlvbiBvblVwbG9hZERvbmUoX29uVXBsb2FkRG9uZSl7aWYodHlwZW9mIF9vblVwbG9hZERvbmUhPT0nZnVuY3Rpb24nKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwib25VcGxvYWREb25lXCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gX29uVXBsb2FkRG9uZTt9LHZpZGVvUmVzb2x1dGlvbjpmdW5jdGlvbiB2aWRlb1Jlc29sdXRpb24ocmVzKXtpZih0eXBlb2YgcmVzIT09J3N0cmluZycpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJ2aWRlb1Jlc29sdXRpb25cIiBjb25maWcgb3B0aW9uJyk7fWlmKFsnMTI4MHg3MjAnLCc2NDB4NDgwJywnMzIweDI0MCddLmluZGV4T2YocmVzKT09PS0xKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwidmlkZW9SZXNvbHV0aW9uXCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gcmVzO30sZXJyb3JzVGltZW91dDpmdW5jdGlvbiBlcnJvcnNUaW1lb3V0KHRpbWVvdXQpe2lmKHR5cGVvZiB0aW1lb3V0IT09J251bWJlcid8fHRpbWVvdXQ8PTApe3Rocm93IG5ldyBFcnJvcignVGltZW91dCBtdXN0IGJlIGEgbnVtYmVyIFttc10gZ3JlYXRlciB0aGFuIDAnKTt9cmV0dXJuIHRpbWVvdXQ7fSwvKiAtLS0tLS0tLS0tLS0tLS0tLVxuICAgIFRyYW5zZm9ybWVyIG9wdGlvbnNcbiAgICAtLS0tLS0tLS0tLS0tLS0tLSAqL3RyYW5zZm9ybWF0aW9uczpmdW5jdGlvbiB0cmFuc2Zvcm1hdGlvbnModHJhbnNmb3JtYXRpb25zRGVmaW5lZEJ5VXNlcil7aWYoaXNPYmplY3QkNCh0cmFuc2Zvcm1hdGlvbnNEZWZpbmVkQnlVc2VyKSl7cmV0dXJuIHRyYW5zZm9ybWF0aW9uc0RlZmluZWRCeVVzZXI7fXRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJ0cmFuc2Zvcm1hdGlvbnNcIiBjb25maWcgb3B0aW9uJyk7fSwndHJhbnNmb3JtYXRpb25zLmNyb3AnOmZ1bmN0aW9uIHRyYW5zZm9ybWF0aW9uc0Nyb3AoY3JvcERlZmluZWRCeVVzZXIpe2lmKGlzT2JqZWN0JDQoY3JvcERlZmluZWRCeVVzZXIpKXtyZXR1cm4gY3JvcERlZmluZWRCeVVzZXI7fWlmKGNyb3BEZWZpbmVkQnlVc2VyPT09dHJ1ZSl7cmV0dXJue307fWlmKGNyb3BEZWZpbmVkQnlVc2VyPT09ZmFsc2Upe3JldHVybiBmYWxzZTt9dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcInRyYW5zZm9ybWF0aW9ucy5jcm9wXCIgY29uZmlnIG9wdGlvbicpO30sJ3RyYW5zZm9ybWF0aW9ucy5jcm9wLmFzcGVjdFJhdGlvJzpmdW5jdGlvbiB0cmFuc2Zvcm1hdGlvbnNDcm9wQXNwZWN0UmF0aW8oYXNwZWN0UmF0aW9EZWZpbmVkQnlVc2VyKXtpZihpc051bWJlciQxKGFzcGVjdFJhdGlvRGVmaW5lZEJ5VXNlcikpe3JldHVybiBhc3BlY3RSYXRpb0RlZmluZWRCeVVzZXI7fXRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJ0cmFuc2Zvcm1hdGlvbnMuY3JvcC5hc3BlY3RSYXRpb1wiIGNvbmZpZyBvcHRpb24nKTt9LCd0cmFuc2Zvcm1hdGlvbnMuY3JvcC5mb3JjZSc6ZnVuY3Rpb24gdHJhbnNmb3JtYXRpb25zQ3JvcEZvcmNlKGZvcmNlKXtpZih0eXBlb2YgZm9yY2UhPT0nYm9vbGVhbicpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJ0cmFuc2Zvcm1hdGlvbnMuY3JvcC5mb3JjZVwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIGZvcmNlO30sJ3RyYW5zZm9ybWF0aW9ucy5mb3JjZSc6ZnVuY3Rpb24gdHJhbnNmb3JtYXRpb25zRm9yY2UoZm9yY2Upe2lmKHR5cGVvZiBmb3JjZSE9PSdib29sZWFuJyl7dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcInRyYW5zZm9ybWF0aW9ucy5mb3JjZVwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIGZvcmNlO30sJ3RyYW5zZm9ybWF0aW9ucy5jaXJjbGUnOmZ1bmN0aW9uIHRyYW5zZm9ybWF0aW9uc0NpcmNsZShjaXJjbGUpe2lmKHR5cGVvZiBjaXJjbGUhPT0nYm9vbGVhbicpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJ0cmFuc2Zvcm1hdGlvbnMuY2lyY2xlXCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gY2lyY2xlO30sJ3RyYW5zZm9ybWF0aW9ucy5yb3RhdGUnOmZ1bmN0aW9uIHRyYW5zZm9ybWF0aW9uc1JvdGF0ZShyb3RhdGUpe2lmKHR5cGVvZiByb3RhdGUhPT0nYm9vbGVhbicpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJ0cmFuc2Zvcm1hdGlvbnMucm90YXRlXCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gcm90YXRlO30sJ3RyYW5zZm9ybWF0aW9ucy5tYXNrJzpmdW5jdGlvbiB0cmFuc2Zvcm1hdGlvbnNNYXNrKG1hc2spe2lmKGlzT2JqZWN0JDQobWFzaykpe2lmKCFtYXNrLnVybHx8IW1hc2sudHlwZSl7dGhyb3cgbmV3IEVycm9yKCdNYXNrIHRyYW5zZm9ybWF0aW9uIHJlcXVpcmVzIGEgVVJMIGFuZCBhIHR5cGUgb2YgXCJwbmdcIiBvciBcInN2Z1wiLicpO31yZXR1cm4gbWFzazt9dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcInRyYW5zZm9ybWF0aW9ucy5tYXNrXCIgY29uZmlnIG9wdGlvbicpO30sJ3RyYW5zZm9ybWF0aW9ucy5tYXNrLnVybCc6ZnVuY3Rpb24gdHJhbnNmb3JtYXRpb25zTWFza1VybChtYXNrVXJsKXtpZih0eXBlb2YgbWFza1VybCE9PSdzdHJpbmcnKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwidHJhbnNmb3JtYXRpb25zLm1hc2sudXJsXCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gbWFza1VybDt9LCd0cmFuc2Zvcm1hdGlvbnMubWFzay50eXBlJzpmdW5jdGlvbiB0cmFuc2Zvcm1hdGlvbnNNYXNrVHlwZShtYXNrVHlwZSl7dmFyIGFsbG93ZWQ9WydwbmcnLCdzdmcnXTtpZih0eXBlb2YgbWFza1R5cGUhPT0nc3RyaW5nJ3x8YWxsb3dlZC5pbmRleE9mKG1hc2tUeXBlKT09PS0xKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwidHJhbnNmb3JtYXRpb25zLm1hc2sudHlwZVwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIG1hc2tUeXBlO30sJ3RyYW5zZm9ybWF0aW9ucy5tYXNrLmNvbG9yJzpmdW5jdGlvbiB0cmFuc2Zvcm1hdGlvbnNNYXNrQ29sb3IobWFza0NvbG9yKXtpZih0eXBlb2YgbWFza0NvbG9yIT09J3N0cmluZycpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJ0cmFuc2Zvcm1hdGlvbnMubWFzay5jb2xvclwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIG1hc2tDb2xvcjt9LGltYWdlTWluOmZ1bmN0aW9uIGltYWdlTWluKG1pbkRpbWVuc2lvbnNEZWZpbmVkQnlVc2VyKXtpZihBcnJheS5pc0FycmF5KG1pbkRpbWVuc2lvbnNEZWZpbmVkQnlVc2VyKSl7aWYobWluRGltZW5zaW9uc0RlZmluZWRCeVVzZXIubGVuZ3RoPT09Mil7dmFyIG9uZU9mRWxlbWVudHNJc05vdE51bWJlcj1taW5EaW1lbnNpb25zRGVmaW5lZEJ5VXNlci5zb21lKGZ1bmN0aW9uKG51bSl7cmV0dXJuIHR5cGVvZiBudW0hPT0nbnVtYmVyJzt9KTtpZighb25lT2ZFbGVtZW50c0lzTm90TnVtYmVyKXtyZXR1cm4gbWluRGltZW5zaW9uc0RlZmluZWRCeVVzZXI7fXRocm93IG5ldyBFcnJvcignT3B0aW9uIFwiaW1hZ2VNaW5cIiByZXF1aXJlcyBhcnJheSBvZiBudW1iZXJzJyk7fXRocm93IG5ldyBFcnJvcignT3B0aW9uIFwiaW1hZ2VNaW5cIiByZXF1aXJlcyBhcnJheSB3aXRoIGV4YWN0bHkgdHdvIGVsZW1lbnRzOiBbd2lkdGgsIGhlaWdodF0nKTt9dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcImltYWdlTWluXCIgY29uZmlnIG9wdGlvbicpO30saW1hZ2VNYXg6ZnVuY3Rpb24gaW1hZ2VNYXgobWF4RGltZW5zaW9uc0RlZmluZWRCeVVzZXIpe2lmKEFycmF5LmlzQXJyYXkobWF4RGltZW5zaW9uc0RlZmluZWRCeVVzZXIpKXtpZihtYXhEaW1lbnNpb25zRGVmaW5lZEJ5VXNlci5sZW5ndGg9PT0yKXt2YXIgb25lT2ZFbGVtZW50c0lzTm90TnVtYmVyPW1heERpbWVuc2lvbnNEZWZpbmVkQnlVc2VyLnNvbWUoZnVuY3Rpb24obnVtKXtyZXR1cm4gdHlwZW9mIG51bSE9PSdudW1iZXInO30pO2lmKCFvbmVPZkVsZW1lbnRzSXNOb3ROdW1iZXIpe3JldHVybiBtYXhEaW1lbnNpb25zRGVmaW5lZEJ5VXNlcjt9dGhyb3cgbmV3IEVycm9yKCdPcHRpb24gXCJpbWFnZU1heFwiIHJlcXVpcmVzIGFycmF5IG9mIG51bWJlcnMnKTt9dGhyb3cgbmV3IEVycm9yKCdPcHRpb24gXCJpbWFnZU1heFwiIHJlcXVpcmVzIGFycmF5IHdpdGggZXhhY3RseSB0d28gZWxlbWVudHM6IFt3aWR0aCwgaGVpZ2h0XScpO310aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwiaW1hZ2VNYXhcIiBjb25maWcgb3B0aW9uJyk7fSxpbWFnZURpbTpmdW5jdGlvbiBpbWFnZURpbShtYXhEaW1lbnNpb25zRGVmaW5lZEJ5VXNlcil7aWYoQXJyYXkuaXNBcnJheShtYXhEaW1lbnNpb25zRGVmaW5lZEJ5VXNlcikpe2lmKG1heERpbWVuc2lvbnNEZWZpbmVkQnlVc2VyLmxlbmd0aD09PTIpe3JldHVybiBtYXhEaW1lbnNpb25zRGVmaW5lZEJ5VXNlcjt9dGhyb3cgbmV3IEVycm9yKCdPcHRpb24gXCJpbWFnZURpbVwiIHJlcXVpcmVzIGFycmF5IHdpdGggZXhhY3RseSB0d28gZWxlbWVudHM6IFt3aWR0aCwgaGVpZ2h0XScpO310aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwiaW1hZ2VEaW1cIiBjb25maWcgb3B0aW9uJyk7fSxpbWFnZU1pbk1heEJsb2NrOmZ1bmN0aW9uIGltYWdlTWluTWF4QmxvY2soYmxvY2spe2lmKHR5cGVvZiBibG9jayE9PSdib29sZWFuJyl7dGhyb3cgbmV3IEVycm9yKCdpbWFnZU1pbk1heEJsb2NrIHNob3VsZCBiZSBib29sZWFuJyk7fXJldHVybiBibG9jazt9LGNvbnRhaW5lcjpmdW5jdGlvbiBjb250YWluZXIoX2NvbnRhaW5lcil7cmV0dXJuIF9jb250YWluZXI7fSxnbG9iYWxEcm9wWm9uZTpmdW5jdGlvbiBnbG9iYWxEcm9wWm9uZShfZ2xvYmFsRHJvcFpvbmUpe2lmKHR5cGVvZiBfZ2xvYmFsRHJvcFpvbmUhPT0nYm9vbGVhbicpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJnbG9iYWxEcm9wWm9uZVwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIF9nbG9iYWxEcm9wWm9uZTt9LGV4cG9zZU9yaWdpbmFsRmlsZTpmdW5jdGlvbiBleHBvc2VPcmlnaW5hbEZpbGUoZXhwb3NlKXtpZih0eXBlb2YgZXhwb3NlIT09J2Jvb2xlYW4nKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwiZXhwb3NlT3JpZ2luYWxGaWxlXCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gZXhwb3NlO30sbW9kYWxTaXplOmZ1bmN0aW9uIG1vZGFsU2l6ZShfbW9kYWxTaXplKXtpZihBcnJheS5pc0FycmF5KF9tb2RhbFNpemUpKXtpZihfbW9kYWxTaXplLmxlbmd0aD09PTIpe3ZhciBvbmVPZkVsZW1lbnRzSXNOb3ROdW1iZXI9X21vZGFsU2l6ZS5zb21lKGZ1bmN0aW9uKG51bSl7cmV0dXJuIHR5cGVvZiBudW0hPT0nbnVtYmVyJzt9KTtpZighb25lT2ZFbGVtZW50c0lzTm90TnVtYmVyKXtyZXR1cm4gX21vZGFsU2l6ZTt9dGhyb3cgbmV3IEVycm9yKCdPcHRpb24gXCJtb2RhbFNpemVcIiByZXF1aXJlcyBhcnJheSBvZiBudW1iZXJzJyk7fXRocm93IG5ldyBFcnJvcignT3B0aW9uIFwibW9kYWxTaXplXCIgcmVxdWlyZXMgYXJyYXkgd2l0aCBleGFjdGx5IHR3byBlbGVtZW50czogW3dpZHRoLCBoZWlnaHRdJyk7fXRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJtb2RhbFNpemVcIiBjb25maWcgb3B0aW9uJyk7fSxjdXN0b21BdXRoVGV4dDpmdW5jdGlvbiBjdXN0b21BdXRoVGV4dChvYmope2lmKCFpc09iamVjdCQ0KG9iaikpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgXCJjdXN0b21BdXRoVGV4dFwiIGNvbmZpZyBvcHRpb24nKTt9cmV0dXJuIG9iajt9LHVzZVNlbnRyeUJyZWFkY3J1bWJzOmZ1bmN0aW9uIHVzZVNlbnRyeUJyZWFkY3J1bWJzKF91c2VTZW50cnlCcmVhZGNydW1icyl7aWYodHlwZW9mIF91c2VTZW50cnlCcmVhZGNydW1icyE9PSdib29sZWFuJyl7dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBcInVzZVNlbnRyeUJyZWFkY3J1bWJzXCIgY29uZmlnIG9wdGlvbicpO31yZXR1cm4gX3VzZVNlbnRyeUJyZWFkY3J1bWJzO319O3ZhciBhZGRDb25maWdEZWZhdWx0cz1mdW5jdGlvbiBhZGRDb25maWdEZWZhdWx0cyhjZmcsZW52KXt2YXIgY29uZmlnPV9vYmplY3RTcHJlYWQoe30sY2ZnKTtpZihjb25maWcuZnJvbVNvdXJjZXM9PT11bmRlZmluZWQpe2NvbmZpZy5mcm9tU291cmNlcz1bJ2xvY2FsX2ZpbGVfc3lzdGVtJywndXJsJywnaW1hZ2VzZWFyY2gnLCdmYWNlYm9vaycsJ2luc3RhZ3JhbScsJ2dvb2dsZWRyaXZlJywnZHJvcGJveCddO31pZihjb25maWcubWluRmlsZXM9PT11bmRlZmluZWQpe2NvbmZpZy5taW5GaWxlcz0xO31pZihjb25maWcubWF4RmlsZXM9PT11bmRlZmluZWQpe2NvbmZpZy5tYXhGaWxlcz0xO31pZihjb25maWcubG9hZENzcz09PXVuZGVmaW5lZCl7Y29uZmlnLmxvYWRDc3M9ZW52LmNzcy5tYWluO31pZihjb25maWcubGFuZz09PXVuZGVmaW5lZCl7Y29uZmlnLmxhbmc9J2VuJzt9aWYoY29uZmlnLnZpZXdUeXBlPT09dW5kZWZpbmVkKXtjb25maWcudmlld1R5cGU9J2xpc3QnO31pZihjb25maWcudXBsb2FkSW5CYWNrZ3JvdW5kPT09dW5kZWZpbmVkKXtjb25maWcudXBsb2FkSW5CYWNrZ3JvdW5kPXRydWU7fWlmKGNvbmZpZy5lcnJvcnNUaW1lb3V0PT09dW5kZWZpbmVkKXtjb25maWcuZXJyb3JzVGltZW91dD01MDAwO31pZihjb25maWcudHJhbnNmb3JtYXRpb25zPT09dW5kZWZpbmVkKXtjb25maWcudHJhbnNmb3JtYXRpb25zPXtjcm9wOnt9LGNpcmNsZTp0cnVlLHJvdGF0ZTp0cnVlfTt9aWYoY29uZmlnLnRyYW5zZm9ybWF0aW9ucyYmY29uZmlnLnRyYW5zZm9ybWF0aW9ucy5tYXNrJiZjb25maWcudHJhbnNmb3JtYXRpb25zLm1hc2suY29sb3I9PT11bmRlZmluZWQpe2NvbmZpZy50cmFuc2Zvcm1hdGlvbnMubWFzay5jb2xvcj0nIzAwMDAwMCc7fWlmKGNvbmZpZy50cmFuc2Zvcm1hdGlvbnMmJmNvbmZpZy50cmFuc2Zvcm1hdGlvbnMuY2lyY2xlPT09dW5kZWZpbmVkKXt2YXIgb2xkQ2lyY2xlPWNvbmZpZy50cmFuc2Zvcm1hdGlvbnMuY3JvcCYmY29uZmlnLnRyYW5zZm9ybWF0aW9ucy5jcm9wLmNpcmNsZTtpZihvbGRDaXJjbGUhPT11bmRlZmluZWQpe2NvbmZpZy50cmFuc2Zvcm1hdGlvbnMuY2lyY2xlPW9sZENpcmNsZTt9fWlmKGNvbmZpZy5pbWFnZU1heD09PXVuZGVmaW5lZCl7dmFyIG9sZEltYWdlTWF4PWNvbmZpZy50cmFuc2Zvcm1hdGlvbnMubWF4RGltZW5zaW9ucztpZihvbGRJbWFnZU1heCE9PXVuZGVmaW5lZCl7Y29uZmlnLmltYWdlTWF4PW9sZEltYWdlTWF4O319aWYoY29uZmlnLmltYWdlTWluPT09dW5kZWZpbmVkKXt2YXIgb2xkSW1hZ2VNaW49Y29uZmlnLnRyYW5zZm9ybWF0aW9ucy5taW5EaW1lbnNpb25zO2lmKG9sZEltYWdlTWluIT09dW5kZWZpbmVkKXtjb25maWcuaW1hZ2VNaW49b2xkSW1hZ2VNaW47fX1pZighY29uZmlnLmRyb3BQYW5lJiZjb25maWcuZGlzcGxheU1vZGU9PT1ESVNQTEFZX01PREVfRFJPUFBBTkUpe2NvbmZpZy5kcm9wUGFuZT17fTt9aWYoY29uZmlnLmRyb3BQYW5lKXtjb25maWcudXBsb2FkSW5CYWNrZ3JvdW5kPWZhbHNlO31pZihjb25maWcuZHJvcFBhbmUmJmNvbmZpZy5kcm9wUGFuZS5vdmVybGF5PT09dW5kZWZpbmVkKXtjb25maWcuZHJvcFBhbmUub3ZlcmxheT10cnVlO31pZihjb25maWcuZHJvcFBhbmUmJmNvbmZpZy5kcm9wUGFuZS5zaG93SWNvbj09PXVuZGVmaW5lZCl7Y29uZmlnLmRyb3BQYW5lLnNob3dJY29uPXRydWU7fWlmKGNvbmZpZy5kcm9wUGFuZSYmY29uZmlnLmRyb3BQYW5lLnNob3dQcm9ncmVzcz09PXVuZGVmaW5lZCl7Y29uZmlnLmRyb3BQYW5lLnNob3dQcm9ncmVzcz10cnVlO31pZihjb25maWcuY29uY3VycmVuY3k9PT11bmRlZmluZWQpe2NvbmZpZy5jb25jdXJyZW5jeT00O31pZihjb25maWcuZGlzcGxheU1vZGU9PT11bmRlZmluZWQpe2NvbmZpZy5kaXNwbGF5TW9kZT1ESVNQTEFZX01PREVfT1ZFUkxBWTt9aWYoY29uZmlnLnJvb3RJZD09PXVuZGVmaW5lZCl7Y29uZmlnLnJvb3RJZD0nX19maWxlc3RhY2stcGlja2VyJzt9aWYoY29uZmlnLnVzZVNlbnRyeUJyZWFkY3J1bWJzPT09dW5kZWZpbmVkKXtjb25maWcudXNlU2VudHJ5QnJlYWRjcnVtYnM9dHJ1ZTt9cmV0dXJuIGNvbmZpZzt9O3ZhciBwYXJzZUNvbmZpZz1mdW5jdGlvbiBwYXJzZUNvbmZpZyhjb25maWcscGFyZW50S2V5KXt2YXIgcGFyc2VkQ29uZmlnPXt9O09iamVjdC5rZXlzKGNvbmZpZykuZm9yRWFjaChmdW5jdGlvbihjb25maWdPcHRpb24pe3ZhciBrZXk9Y29uZmlnT3B0aW9uO2lmKHBhcmVudEtleSl7a2V5PVwiXCIuY29uY2F0KHBhcmVudEtleSxcIi5cIikuY29uY2F0KGNvbmZpZ09wdGlvbik7fXZhciBwYXJzZXI9cGFyc2Vyc1trZXldO2lmKHR5cGVvZiBjb25maWdbY29uZmlnT3B0aW9uXT09PSd1bmRlZmluZWQnKXtyZXR1cm47fWlmKHBhcnNlcil7dmFyIHBhcnNlZD1wYXJzZXIoY29uZmlnW2NvbmZpZ09wdGlvbl0pO2lmKGlzT2JqZWN0JDQocGFyc2VkKSYma2V5LmluZGV4T2YoJ3RyYW5zZm9ybWF0aW9ucycpIT09LTEpe3BhcnNlZENvbmZpZ1tjb25maWdPcHRpb25dPXBhcnNlQ29uZmlnKHBhcnNlZCxrZXkpO31lbHNle3BhcnNlZENvbmZpZ1tjb25maWdPcHRpb25dPXBhcnNlZDt9fWVsc2V7dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBjb25maWcgb3B0aW9uIFxcXCJcIi5jb25jYXQoa2V5LFwiXFxcIlwiKSk7fX0pO2lmKHBhcnNlZENvbmZpZy5taW5GaWxlcyE9PXVuZGVmaW5lZCYmcGFyc2VkQ29uZmlnLm1heEZpbGVzIT09dW5kZWZpbmVkJiZwYXJzZWRDb25maWcubWluRmlsZXM+cGFyc2VkQ29uZmlnLm1heEZpbGVzKXt0aHJvdyBuZXcgRXJyb3IoJ0NvbmZpZyBvcHRpb24gXCJtaW5GaWxlc1wiIG11c3QgYmUgc21hbGxlciBvciBlcXVhbCB0byBcIm1heEZpbGVzXCInKTt9cmV0dXJuIHBhcnNlZENvbmZpZzt9Oy8vXG52YXIgc2NyaXB0JHU9e2NvbXBvbmVudHM6e05vdGlmaWNhdGlvbnM6Tm90aWZpY2F0aW9uc30sZGF0YTpmdW5jdGlvbiBkYXRhKCl7cmV0dXJue2Nyb3BGaWxlc0RvbmU6MCxjcm9wRmlsZXNPdmVycmlkZTp7fSxpc0Ryb3BwaW5nOmZhbHNlfTt9LGNvbXB1dGVkOl9vYmplY3RTcHJlYWQoe30saW5kZXhfZXNtLm1hcEdldHRlcnMoWydhY2NlcHQnLCdhcGlDbGllbnQnLCdjYW5BZGRNb3JlRmlsZXMnLCdkcm9wUGFuZScsJ2ZpbGVDb3VudCcsJ2ZpbGVzRG9uZScsJ2ZpbGVzTGlzdCcsJ2ZpbGVzV2FpdGluZycsJ21heEZpbGVzJywnbWF4U2l6ZScsJ3N0b3JlVG8nLCd1cGxvYWRTdGFydGVkJ10pLHthY2NlcHRTdHI6ZnVuY3Rpb24gYWNjZXB0U3RyKCl7aWYodGhpcy5hY2NlcHQpe3JldHVybiB0aGlzLmFjY2VwdC5qb2luKCcsJyk7fXJldHVybiB1bmRlZmluZWQ7fSxjb250YWluZXJDbGFzc2VzOmZ1bmN0aW9uIGNvbnRhaW5lckNsYXNzZXMoKXtyZXR1cm57J2ZzcC1kcm9wLXBhbmVfX2NvbnRhaW5lcic6dHJ1ZSwnZnNwLWRyb3AtcGFuZV9fY29udGFpbmVyLS1hY3RpdmUnOnRoaXMuaXNEcm9wcGluZ307fSxmaWxlc0ZpbmlzaGVkOmZ1bmN0aW9uIGZpbGVzRmluaXNoZWQoKXtpZih0aGlzLmNyb3BGaWxlc0RvbmUpcmV0dXJuIHRoaXMuY3JvcEZpbGVzRG9uZTtpZih0aGlzLmZpbGVzRG9uZS5sZW5ndGgpcmV0dXJuIHRoaXMuZmlsZXNEb25lLmxlbmd0aDtyZXR1cm4gMDt9LGljb25DbGFzc2VzOmZ1bmN0aW9uIGljb25DbGFzc2VzKCl7cmV0dXJueydmc3AtZHJvcC1wYW5lX19pY29uJzp0cnVlLCdmc3AtZHJvcC1wYW5lX19pY29uLS1hY3RpdmUnOnRoaXMuaXNEcm9wcGluZ307fSxtdWx0aXBsZTpmdW5jdGlvbiBtdWx0aXBsZSgpe3JldHVybiB0aGlzLm1heEZpbGVzPjE7fSxwcm9ncmVzc1N0eWxlOmZ1bmN0aW9uIHByb2dyZXNzU3R5bGUoKXtyZXR1cm57d2lkdGg6XCJcIi5jb25jYXQodGhpcy50b3RhbFByb2dyZXNzLFwiJVwiKX07fSx0b3RhbFByb2dyZXNzOmZ1bmN0aW9uIHRvdGFsUHJvZ3Jlc3MoKXt2YXIgY3JvcEZpbGVzPWxvZGFzaF92YWx1ZXModGhpcy5jcm9wRmlsZXNPdmVycmlkZSk7dmFyIGxpc3Q9Y3JvcEZpbGVzLmxlbmd0aD9jcm9wRmlsZXM6dGhpcy5maWxlc0xpc3Q7dmFyIGFsbFBlcmNlbnRzPU1hdGgucm91bmQobGlzdC5tYXAoZnVuY3Rpb24oZil7cmV0dXJuIGYucHJvZ3Jlc3M7fSkuZmlsdGVyKGZ1bmN0aW9uKG4pe3JldHVybiBuO30pLnJlZHVjZShmdW5jdGlvbih4LHkpe3JldHVybiB4K3k7fSwwKS90aGlzLmZpbGVDb3VudCk7aWYodGhpcy5kcm9wUGFuZS5vblByb2dyZXNzKXt0aGlzLmRyb3BQYW5lLm9uUHJvZ3Jlc3MoYWxsUGVyY2VudHMpO31yZXR1cm4gYWxsUGVyY2VudHM7fX0pLG1ldGhvZHM6X29iamVjdFNwcmVhZCh7fSxpbmRleF9lc20ubWFwQWN0aW9ucyhbJ2FkZEZpbGUnLCdzaG93Tm90aWZpY2F0aW9uJ10pLHtjbGVhckV2ZW50OmZ1bmN0aW9uIGNsZWFyRXZlbnQoZXZlbnQpe2V2ZW50LnRhcmdldC52YWx1ZT1udWxsO30sZHJhZ2VudGVyOmZ1bmN0aW9uIGRyYWdlbnRlcihldmVudCl7ZXZlbnQucHJldmVudERlZmF1bHQoKTt0aGlzLmlzRHJvcHBpbmc9dHJ1ZTtpZih0aGlzLmRyb3BQYW5lLm9uRHJhZ0VudGVyKXRoaXMuZHJvcFBhbmUub25EcmFnRW50ZXIoZXZlbnQpO30sZHJhZ292ZXI6ZnVuY3Rpb24gZHJhZ292ZXIoZXZlbnQpe2V2ZW50LnByZXZlbnREZWZhdWx0KCk7aWYodGhpcy5kcm9wUGFuZS5vbkRyYWdPdmVyKXRoaXMuZHJvcFBhbmUub25EcmFnT3ZlcihldmVudCk7fSxkcmFnbGVhdmU6ZnVuY3Rpb24gZHJhZ2xlYXZlKCl7dGhpcy5pc0Ryb3BwaW5nPWZhbHNlO2lmKHRoaXMuZHJvcFBhbmUub25EcmFnTGVhdmUpdGhpcy5kcm9wUGFuZS5vbkRyYWdMZWF2ZSgpO30sZHJvcDpmdW5jdGlvbiBkcm9wKGV2ZW50KXt2YXIgX3RoaXMzNT10aGlzO2V2ZW50LnByZXZlbnREZWZhdWx0KCk7dGhpcy5pc0Ryb3BwaW5nPWZhbHNlO2V4dHJhY3RGaWxlc0Zyb21EYXRhVHJhbnNmZXIoZXZlbnQuZGF0YVRyYW5zZmVyKS50aGVuKGZ1bmN0aW9uKGZpbGVzKXtyZXR1cm4gX3RoaXMzNS5jYWxsQWRkRmlsZXMoZmlsZXMpO30pO2lmKHRoaXMuZHJvcFBhbmUub25Ecm9wKXRoaXMuZHJvcFBhbmUub25Ecm9wKGV2ZW50KTt9LGluY0Nyb3BGaWxlc0RvbmU6ZnVuY3Rpb24gaW5jQ3JvcEZpbGVzRG9uZSgpe3RoaXMuY3JvcEZpbGVzRG9uZSs9MTt9LG9uRmlsZXNTZWxlY3RlZDpmdW5jdGlvbiBvbkZpbGVzU2VsZWN0ZWQoZXZlbnQpe3RoaXMuY2FsbEFkZEZpbGVzKGV2ZW50LnRhcmdldC5maWxlcyk7fSxwYXN0ZTpmdW5jdGlvbiBwYXN0ZShldmVudCl7dmFyIF90aGlzMzY9dGhpcztleHRyYWN0RmlsZXNGcm9tRGF0YVRyYW5zZmVyKGV2ZW50LmNsaXBib2FyZERhdGEpLnRoZW4oZnVuY3Rpb24oZmlsZXMpe3JldHVybiBfdGhpczM2LmNhbGxBZGRGaWxlcyhmaWxlcyk7fSk7fSxvcGVuU2VsZWN0RmlsZTpmdW5jdGlvbiBvcGVuU2VsZWN0RmlsZSgpe2lmKHRoaXMuZHJvcFBhbmUub25DbGljayl7dGhpcy5kcm9wUGFuZS5vbkNsaWNrKCk7fWlmKHRoaXMuZHJvcFBhbmUuZGlzYWJsZUNsaWNrKXtyZXR1cm47fXRoaXMuJHJlZnMuZmlsZVVwbG9hZElucHV0LmNsaWNrKCk7fSxjYWxsQWRkRmlsZXM6ZnVuY3Rpb24gY2FsbEFkZEZpbGVzKGZpbGVzKXsvLyB2YWxpZGF0ZSBmaWxlcyBiZWZvcmUgYWRkaW5nIHRoZW0gdG8gcXVldWUgLSB3b3JrYXJvdW5kIChtYXhTaXplLCBtYXhGaWxlcylcbmlmKHRoaXMubWF4RmlsZXMmJnRoaXMubWF4RmlsZXM+MCYmdGhpcy5tYXhGaWxlczxmaWxlcy5sZW5ndGgpe3ZhciBmaWxlc1RleHQ9dGhpcy5tYXhGaWxlcz09PTE/J2ZpbGUnOidmaWxlcyc7dmFyIGVycm9yTXNnPWVycm9ycyh0aGlzLiRzdG9yZS5nZXR0ZXJzLmxhbmcsdGhpcy4kc3RvcmUuZ2V0dGVycy5jdXN0b21UZXh0KS5FUlJPUl9NQVhfRklMRVNfUkVBQ0hFRC5yZXBsYWNlKCd7bWF4RmlsZXN9Jyx0aGlzLiRzdG9yZS5nZXR0ZXJzLm1heEZpbGVzKS5yZXBsYWNlKCd7ZmlsZXNUZXh0fScsZmlsZXNUZXh0KTtyZXR1cm4gdGhpcy5zaG93Tm90aWZpY2F0aW9uKGVycm9yTXNnKTt9aWYodGhpcy5tYXhTaXplKXt2YXIgZXJyb3JlZD1bXTtmb3IodmFyIGk9MDtpPGZpbGVzLmxlbmd0aDtpKyspe2lmKGZpbGVzW2ldLnNpemUmJmZpbGVzW2ldLnNpemU+dGhpcy5tYXhTaXplKXtlcnJvcmVkLnB1c2goZmlsZXNbaV0ubmFtZSk7fX1pZihlcnJvcmVkLmxlbmd0aD4wKXt2YXIgX2Vycm9yTXNnPWVycm9ycyh0aGlzLiRzdG9yZS5nZXR0ZXJzLmxhbmcsdGhpcy4kc3RvcmUuZ2V0dGVycy5jdXN0b21UZXh0KS5FUlJPUl9GSUxFU19UT09fQklHLnJlcGxhY2UoJ3tkaXNwbGF5TmFtZX0nLGVycm9yZWQuam9pbignLCAnKSkucmVwbGFjZSgne21heFNpemV9JyxyZWFkYWJsZVNpemUodGhpcy5tYXhTaXplKSk7cmV0dXJuIHRoaXMuc2hvd05vdGlmaWNhdGlvbihfZXJyb3JNc2cpO319Zm9yKHZhciBpZHg9MDtpZHg8ZmlsZXMubGVuZ3RoO2lkeCsrKXt2YXIgZmlsZT1maWxlc1tpZHhdO2lmKCFmaWxlLm5hbWUpe2lmKGlkeD4wKXtmaWxlLm5hbWU9XCJ1bnRpdGxlZCAoXCIuY29uY2F0KGlkeCxcIilcIik7fWVsc2V7ZmlsZS5uYW1lPSd1bnRpdGxlZCc7fX10aGlzLmFkZEZpbGUoZmlsZSk7fXJldHVybiB0cnVlO319KSxtb3VudGVkOmZ1bmN0aW9uIG1vdW50ZWQoKXt2YXIgZHJvcFpvbmU9dGhpcy5kcm9wUGFuZS5vdmVybGF5P3RoaXMuJHJlZnMuZHJvcE92ZXJsYXk6dGhpcy4kcmVmcy5kcm9wWm9uZTt2YXIgZW50ZXJab25lPXRoaXMuZHJvcFBhbmUub3ZlcmxheT9kb2N1bWVudDp0aGlzLiRyZWZzLmRyb3Bab25lO2VudGVyWm9uZS5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW50ZXInLHRoaXMuZHJhZ2VudGVyLGZhbHNlKTtlbnRlclpvbmUuYWRkRXZlbnRMaXN0ZW5lcigncGFzdGUnLHRoaXMucGFzdGUsZmFsc2UpO2Ryb3Bab25lLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJyx0aGlzLmRyYWdvdmVyLGZhbHNlKTtkcm9wWm9uZS5hZGRFdmVudExpc3RlbmVyKCdkcmFnbGVhdmUnLHRoaXMuZHJhZ2xlYXZlLGZhbHNlKTtkcm9wWm9uZS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJyx0aGlzLmRyb3AsZmFsc2UpO30sYmVmb3JlRGVzdHJveTpmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCl7dmFyIGRyb3Bab25lPXRoaXMuZHJvcFBhbmUub3ZlcmxheT90aGlzLiRyZWZzLmRyb3BPdmVybGF5OnRoaXMuJHJlZnMuZHJvcFpvbmU7dmFyIGVudGVyWm9uZT10aGlzLmRyb3BQYW5lLm92ZXJsYXk/ZG9jdW1lbnQ6dGhpcy4kcmVmcy5kcm9wWm9uZTtlbnRlclpvbmUucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJyx0aGlzLmRyYWdlbnRlcik7ZW50ZXJab25lLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Bhc3RlJyx0aGlzLnBhc3RlKTtkcm9wWm9uZS5yZW1vdmVFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsdGhpcy5kcmFnb3Zlcik7ZHJvcFpvbmUucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJhZ2xlYXZlJyx0aGlzLmRyYWdsZWF2ZSk7ZHJvcFpvbmUucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJvcCcsdGhpcy5kcm9wKTt9LHdhdGNoOntmaWxlc1dhaXRpbmc6e2hhbmRsZXI6ZnVuY3Rpb24gaGFuZGxlcihmaWxlcyl7dmFyIF90aGlzMzc9dGhpcztpZighdGhpcy51cGxvYWRTdGFydGVkJiZmaWxlcy5sZW5ndGgmJiF0aGlzLmRyb3BQYW5lLmNyb3BGaWxlcyl7c2V0VGltZW91dChmdW5jdGlvbigpe3JldHVybiBfdGhpczM3LiRzdG9yZS5kaXNwYXRjaCgnc3RhcnRVcGxvYWRpbmcnKTt9KTtyZXR1cm47fWlmKCF0aGlzLnVwbG9hZFN0YXJ0ZWQmJmZpbGVzLmxlbmd0aCYmdGhpcy5kcm9wUGFuZS5jcm9wRmlsZXMpey8vIFNwYXduIGEgbmV3IHBpY2sgaW5zdGFuY2UgYW5kIHVzZSBjYWxsYmFja3MgdG8gb3ZlcnJpZGUgc3RhdGVcbnZhciBibG9icz1maWxlcy5maWx0ZXIoZnVuY3Rpb24oZil7cmV0dXJuIGYub3JpZ2luYWxGaWxlO30pLm1hcChmdW5jdGlvbihmKXtyZXR1cm4gZi5vcmlnaW5hbEZpbGU7fSk7dmFyIHVybHM9ZmlsZXMuZmlsdGVyKGZ1bmN0aW9uKGYpe3JldHVybiFmLm9yaWdpbmFsRmlsZSYmZi51cmw7fSkubWFwKGZ1bmN0aW9uKGYpe3JldHVybiBmLnVybDt9KTt2YXIgY2xlYXJTdGF0ZT1mdW5jdGlvbiBjbGVhclN0YXRlKCl7c2V0VGltZW91dChmdW5jdGlvbigpe190aGlzMzcuJHN0b3JlLmNvbW1pdCgnU0VUX1VQTE9BRF9TVEFSVEVEJyxmYWxzZSk7X3RoaXMzNy4kc3RvcmUuY29tbWl0KCdDTEVBUl9GSUxFUycpO30sMTAwMCk7fTsvLyBDb25maWcgdGhhdCB1c2VzIGNhbGxiYWNrcyB0byB1cGRhdGUgbG9jYWwgY29tcG9uZW50IHN0YXRlXG52YXIgX2NvbmZpZz17ZGlzcGxheU1vZGU6RElTUExBWV9NT0RFX09WRVJMQVksb25VcGxvYWREb25lOmNsZWFyU3RhdGUsb25DYW5jZWw6Y2xlYXJTdGF0ZSxkcm9wUGFuZTp0aGlzLmRyb3BQYW5lLHRyYW5zZm9ybWF0aW9uczp0aGlzLiRzdG9yZS5nZXR0ZXJzLnRyYW5zZm9ybWF0aW9ucyxvbkZpbGVVcGxvYWRQcm9ncmVzczpmdW5jdGlvbiBvbkZpbGVVcGxvYWRQcm9ncmVzcyhmaWxlLGV2dCl7X3RoaXMzNy4kc2V0KF90aGlzMzcuY3JvcEZpbGVzT3ZlcnJpZGUsZmlsZS51cGxvYWRJZCxmaWxlKTtfdGhpczM3LiRzZXQoX3RoaXMzNy5jcm9wRmlsZXNPdmVycmlkZVtmaWxlLnVwbG9hZElkXSwncHJvZ3Jlc3MnLGV2dC50b3RhbFBlcmNlbnQpO30sb25GaWxlVXBsb2FkRmluaXNoZWQ6ZnVuY3Rpb24gb25GaWxlVXBsb2FkRmluaXNoZWQoKXtyZXR1cm4gX3RoaXMzNy5pbmNDcm9wRmlsZXNEb25lKCk7fSxvblVwbG9hZFN0YXJ0ZWQ6ZnVuY3Rpb24gb25VcGxvYWRTdGFydGVkKCl7cmV0dXJuIF90aGlzMzcuJHN0b3JlLmNvbW1pdCgnU0VUX1VQTE9BRF9TVEFSVEVEJyx0cnVlKTt9fTtpZih0aGlzLnN0b3JlVG8mJk9iamVjdC5rZXlzKHRoaXMuc3RvcmVUbykpe19jb25maWcuc3RvcmVUbz10aGlzLnN0b3JlVG87fS8vIE5ldyBwaWNrIGluc3RhbmNlIHRvIGhhbmRsZSBjcm9wRmlsZXNcbnZhciBwaWNrZXI9bmV3IFBpY2tlcih0aGlzLmFwaUNsaWVudCxfY29uZmlnKTtwaWNrZXIuY3JvcChibG9icy5jb25jYXQodXJscykpO319fX19Oy8qIHNjcmlwdCAqL3ZhciBfX3Z1ZV9zY3JpcHRfXyR1PXNjcmlwdCR1Oy8qIHRlbXBsYXRlICovdmFyIF9fdnVlX3JlbmRlcl9fJHQ9ZnVuY3Rpb24gX192dWVfcmVuZGVyX18kdCgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYyhcImRpdlwiLHtcImNsYXNzXCI6X3ZtLmNvbnRhaW5lckNsYXNzZXN9LFtfYyhcIm5vdGlmaWNhdGlvbnNcIiksX3ZtLl92KFwiIFwiKSxfYyhcImlucHV0XCIse3JlZjpcImZpbGVVcGxvYWRJbnB1dFwiLHN0YXRpY0NsYXNzOlwiZnNwLWRyb3AtcGFuZV9faW5wdXRcIixhdHRyczp7dHlwZTpcImZpbGVcIixhY2NlcHQ6X3ZtLmFjY2VwdFN0cixtdWx0aXBsZTpfdm0ubXVsdGlwbGUsZGlzYWJsZWQ6IV92bS5jYW5BZGRNb3JlRmlsZXN9LG9uOntjaGFuZ2U6ZnVuY3Rpb24gY2hhbmdlKCRldmVudCl7cmV0dXJuIF92bS5vbkZpbGVzU2VsZWN0ZWQoJGV2ZW50KTt9LGNsaWNrOmZ1bmN0aW9uIGNsaWNrKCRldmVudCl7cmV0dXJuIF92bS5jbGVhckV2ZW50KCRldmVudCk7fX19KSxfdm0uX3YoXCIgXCIpLF9jKFwiZGl2XCIse3JlZjpcImRyb3Bab25lXCIsc3RhdGljQ2xhc3M6XCJmc3AtZHJvcC1wYW5lX19kcm9wLXpvbmVcIixvbjp7Y2xpY2s6X3ZtLm9wZW5TZWxlY3RGaWxlfX0pLF92bS5fdihcIiBcIiksX3ZtLmRyb3BQYW5lLnNob3dJY29uP19jKFwiZGl2XCIse1wiY2xhc3NcIjpfdm0uaWNvbkNsYXNzZXN9KTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF92bS5kcm9wUGFuZS5zaG93UHJvZ3Jlc3MmJiFfdm0udXBsb2FkU3RhcnRlZD9fYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1kcm9wLXBhbmVfX3RleHRcIn0sW192bS5fdihcIlxcbiAgICBcIitfdm0uX3MoX3ZtLmRyb3BQYW5lLmN1c3RvbVRleHR8fF92bS50KFwiRHJhZyBhbmQgRHJvcCwgQ29weSBhbmQgUGFzdGUgRmlsZXNcIikpK1wiXFxuICBcIildKTpfdm0uZHJvcFBhbmUuc2hvd1Byb2dyZXNzJiZfdm0udXBsb2FkU3RhcnRlZD9fYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1kcm9wLXBhbmVfX3RleHRcIn0sW192bS5fdihcIlxcbiAgICBcIitfdm0uX3MoX3ZtLnQoXCJVcGxvYWRlZFwiKStcIiBcIitfdm0uZmlsZXNGaW5pc2hlZCtcIiBcIitfdm0udChcIm9mXCIpK1wiIFwiK192bS5maWxlQ291bnQpK1wiXFxuICAgIFwiKSxfYyhcImRpdlwiLHtzdGF0aWNDbGFzczpcImZzcC1kcm9wLXBhbmVfX3VwbG9hZC1wcm9ncmVzc1wiLHN0eWxlOl92bS5wcm9ncmVzc1N0eWxlfSldKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF9jKFwidHJhbnNpdGlvblwiLHthdHRyczp7bmFtZTpcIl9fZnMtZmFkZVwifX0sW19jKFwiZGl2XCIse2RpcmVjdGl2ZXM6W3tuYW1lOlwic2hvd1wiLHJhd05hbWU6XCJ2LXNob3dcIix2YWx1ZTpfdm0uZHJvcFBhbmUub3ZlcmxheSYmX3ZtLmlzRHJvcHBpbmcsZXhwcmVzc2lvbjpcImRyb3BQYW5lLm92ZXJsYXkgJiYgaXNEcm9wcGluZ1wifV0scmVmOlwiZHJvcE92ZXJsYXlcIixzdGF0aWNDbGFzczpcImZzcC1kcm9wLXBhbmVfX292ZXJsYXlcIn0sW19jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLWRyb3AtcGFuZV9fb3ZlcmxheS1ib3hcIn0sW19jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLWRyb3AtcGFuZV9fb3ZlcmxheS1pY29uXCJ9KSxfdm0uX3YoXCIgXCIpLF9jKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwiZnNwLWRyb3AtcGFuZV9fb3ZlcmxheS1oZWFkZXJcIn0sW192bS5fdihcIlxcbiAgICAgICAgICBcIitfdm0uX3MoX3ZtLnQoXCJEcm9wIHlvdXIgZmlsZXMgYW55d2hlcmVcIikpK1wiXFxuICAgICAgICBcIildKV0pXSldKV0sMSk7fTt2YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kdD1bXTtfX3Z1ZV9yZW5kZXJfXyR0Ll93aXRoU3RyaXBwZWQ9dHJ1ZTsvKiBzdHlsZSAqL3ZhciBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kdT11bmRlZmluZWQ7Lyogc2NvcGVkICovdmFyIF9fdnVlX3Njb3BlX2lkX18kdT11bmRlZmluZWQ7LyogbW9kdWxlIGlkZW50aWZpZXIgKi92YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyR1PXVuZGVmaW5lZDsvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovdmFyIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyR1PWZhbHNlOy8qIHN0eWxlIGluamVjdCAqLyAvKiBzdHlsZSBpbmplY3QgU1NSICovIC8qIHN0eWxlIGluamVjdCBzaGFkb3cgZG9tICovdmFyIERyb3BQYW5lPW5vcm1hbGl6ZUNvbXBvbmVudCh7cmVuZGVyOl9fdnVlX3JlbmRlcl9fJHQsc3RhdGljUmVuZGVyRm5zOl9fdnVlX3N0YXRpY1JlbmRlckZuc19fJHR9LF9fdnVlX2luamVjdF9zdHlsZXNfXyR1LF9fdnVlX3NjcmlwdF9fJHUsX192dWVfc2NvcGVfaWRfXyR1LF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyR1LF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kdSxmYWxzZSx1bmRlZmluZWQsdW5kZWZpbmVkLHVuZGVmaW5lZCk7dmFyIGFycmF5RmluZEluZGV4PWZ1bmN0aW9uIGFycmF5RmluZEluZGV4KGFycixwcmVkaWNhdGUsY3R4KXtpZih0eXBlb2YgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleD09PSdmdW5jdGlvbicpe3JldHVybiBhcnIuZmluZEluZGV4KHByZWRpY2F0ZSxjdHgpO31pZih0eXBlb2YgcHJlZGljYXRlIT09J2Z1bmN0aW9uJyl7dGhyb3cgbmV3IFR5cGVFcnJvcigncHJlZGljYXRlIG11c3QgYmUgYSBmdW5jdGlvbicpO312YXIgbGlzdD1PYmplY3QoYXJyKTt2YXIgbGVuPWxpc3QubGVuZ3RoO2lmKGxlbj09PTApe3JldHVybi0xO31mb3IodmFyIGk9MDtpPGxlbjtpKyspe2lmKHByZWRpY2F0ZS5jYWxsKGN0eCxsaXN0W2ldLGksbGlzdCkpe3JldHVybiBpO319cmV0dXJuLTE7fTsvLyBVcGRhdGUgY2xpZW50IHJlcHJlc2VudGF0aW9uIHRvIGluY2x1ZGUgc291cmNlIGluZm9ybWF0aW9uXG52YXIgY29udmVydFRvRmlsZU9iaiQxPWZ1bmN0aW9uIGNvbnZlcnRUb0ZpbGVPYmokMShmaWxlUmV0dXJuZWRCeUFwaSl7dmFyIGZpbGU9X29iamVjdFNwcmVhZCh7c291cmNlOidpbWFnZXNlYXJjaCcsc291cmNlS2luZDonY2xvdWQnfSxmaWxlUmV0dXJuZWRCeUFwaSk7cmV0dXJuIGZpbGU7fTt2YXIgaW5pdGlhbFN0YXRlJDE9e2lucHV0OicnLGlzU2VhcmNoaW5nOmZhbHNlLHJlc3VsdDpudWxsLGVycm9yOm51bGx9O3ZhciBtdXRhdGlvbnMkMT17VVBEQVRFX0lOUFVUOmZ1bmN0aW9uIFVQREFURV9JTlBVVChzdGF0ZSx2YWx1ZSl7c3RhdGUuaW5wdXQ9dmFsdWU7fSxGRVRDSF9JTUFHRVNfQkVHSU46ZnVuY3Rpb24gRkVUQ0hfSU1BR0VTX0JFR0lOKHN0YXRlKXtzdGF0ZS5pc1NlYXJjaGluZz10cnVlO30sRkVUQ0hfSU1BR0VTX1NVQ0NFU1M6ZnVuY3Rpb24gRkVUQ0hfSU1BR0VTX1NVQ0NFU1Moc3RhdGUscmVzdWx0KXtzdGF0ZS5yZXN1bHQ9cmVzdWx0O3N0YXRlLmlzU2VhcmNoaW5nPWZhbHNlO30sRkVUQ0hfSU1BR0VTX0VSUk9SOmZ1bmN0aW9uIEZFVENIX0lNQUdFU19FUlJPUihzdGF0ZSxlcnJvcil7c3RhdGUuZXJyb3I9ZXJyb3I7c3RhdGUuaXNTZWFyY2hpbmc9ZmFsc2U7fSxDTEVBUl9JTUFHRVNfU1RPUkU6ZnVuY3Rpb24gQ0xFQVJfSU1BR0VTX1NUT1JFKHN0YXRlKXtzdGF0ZS5pc1NlYXJjaGluZz1mYWxzZTtzdGF0ZS5yZXN1bHQ9bnVsbDtzdGF0ZS5lcnJvcj1udWxsO3N0YXRlLmlucHV0PScnO319O3ZhciBhY3Rpb25zJDE9e3VwZGF0ZVNlYXJjaElucHV0OmZ1bmN0aW9uIHVwZGF0ZVNlYXJjaElucHV0KGNvbnRleHQsdmFsdWUpe2NvbnRleHQuY29tbWl0KCdVUERBVEVfSU5QVVQnLHZhbHVlKTt9LGZldGNoSW1hZ2VzOmZ1bmN0aW9uIGZldGNoSW1hZ2VzKGNvbnRleHQpey8vIERvbid0IHByb2NlZWQgaWYgd2UncmUgYWxyZWFkeSBzZWFyY2hpbmdcbmlmKGNvbnRleHQuZ2V0dGVycy5pc1NlYXJjaGluZyl7cmV0dXJuO312YXIgaW5wdXQ9Y29udGV4dC5nZXR0ZXJzLmltYWdlU2VhcmNoSW5wdXQ7aWYoIWlucHV0KXtyZXR1cm47fWNvbnRleHQuY29tbWl0KCdGRVRDSF9JTUFHRVNfQkVHSU4nKTtjb250ZXh0LmdldHRlcnMuY2xvdWRDbGllbnQubGlzdCh7aW1hZ2VzZWFyY2g6e3BhdGg6XCIvXCIuY29uY2F0KGlucHV0KX19KS50aGVuKGZ1bmN0aW9uKHJlcyl7dmFyIGNsb3VkT2JqPXJlcy5pbWFnZXNlYXJjaDtpZighY2xvdWRPYmope2NvbnRleHQuY29tbWl0KCdGRVRDSF9JTUFHRVNfRVJST1InLCdObyByZXNwb25zZS4nKTtjb250ZXh0LmRpc3BhdGNoKCdzaG93Tm90aWZpY2F0aW9uJywnQW4gZXJyb3Igb2NjdXJyZWQuIFBsZWFzZSB0cnkgYWdhaW4uJyk7fWlmKGNsb3VkT2JqJiZjbG91ZE9iai5jb250ZW50cyl7Ly8gQWRkIHNvdXJjZSBhbmQgc291cmNlS2luZCBmb3IgaW1hZ2VzZWFyY2ggKGNsb3VkIEFQSSlcbmNsb3VkT2JqLmNvbnRlbnRzPWNsb3VkT2JqLmNvbnRlbnRzLm1hcChjb252ZXJ0VG9GaWxlT2JqJDEpOy8vIENvbW1pdCB0aGUgd2hvbGUgcmVzcG9uc2UgaW50byBzdGF0ZVxuY29udGV4dC5jb21taXQoJ0ZFVENIX0lNQUdFU19TVUNDRVNTJyxjbG91ZE9iaik7fS8vIE5vIHNlYXJjaCByZXN1bHRzIGZvciBzcGVjaWZpZWQgaW5wdXRcbmlmKGNsb3VkT2JqJiZjbG91ZE9iai5jb250ZW50cyYmY2xvdWRPYmouY29udGVudHMubGVuZ3RoPT09MCl7Y29udGV4dC5kaXNwYXRjaCgnc2hvd05vdGlmaWNhdGlvbicsWydObyBzZWFyY2ggcmVzdWx0cyBmb3VuZCBmb3IgXCJ7c2VhcmNofVwiJyx7c2VhcmNoOmlucHV0fV0pO31pZihjbG91ZE9iaiYmY2xvdWRPYmouZXJyb3Ipe2NvbnRleHQuY29tbWl0KCdGRVRDSF9JTUFHRVNfRVJST1InLGNsb3VkT2JqLmVycm9yKTtjb250ZXh0LmRpc3BhdGNoKCdzaG93Tm90aWZpY2F0aW9uJywnQW4gZXJyb3Igb2NjdXJyZWQuIFBsZWFzZSB0cnkgYWdhaW4uJyk7fX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oZXJyKXtjb250ZXh0LmNvbW1pdCgnRkVUQ0hfSU1BR0VTX0VSUk9SJyxlcnIpO2NvbnRleHQuZGlzcGF0Y2goJ3Nob3dOb3RpZmljYXRpb24nLGVyci5tZXNzYWdlKTt9KTt9fTt2YXIgZ2V0dGVycyQxPXtpc1NlYXJjaGluZzpmdW5jdGlvbiBpc1NlYXJjaGluZyhzdCl7cmV0dXJuIHN0LmlzU2VhcmNoaW5nO30sbm9SZXN1bHRzRm91bmQ6ZnVuY3Rpb24gbm9SZXN1bHRzRm91bmQoc3Qpe3JldHVybiBzdC5yZXN1bHQmJnN0LnJlc3VsdC5jb250ZW50cy5sZW5ndGg9PT0wO30scmVzdWx0c0ZvdW5kOmZ1bmN0aW9uIHJlc3VsdHNGb3VuZChzdCl7cmV0dXJuIHN0LnJlc3VsdCYmc3QucmVzdWx0LmNvbnRlbnRzLmxlbmd0aD4wO30saW1hZ2VTZWFyY2hJbnB1dDpmdW5jdGlvbiBpbWFnZVNlYXJjaElucHV0KHN0KXtyZXR1cm4gc3QuaW5wdXQ7fSxpbWFnZVNlYXJjaFJlc3VsdHM6ZnVuY3Rpb24gaW1hZ2VTZWFyY2hSZXN1bHRzKHN0KXtyZXR1cm4gc3QucmVzdWx0JiZzdC5yZXN1bHQuY29udGVudHM7fX07dmFyIGltYWdlU2VhcmNoPXtzdGF0ZTppbml0aWFsU3RhdGUkMSxtdXRhdGlvbnM6bXV0YXRpb25zJDEsYWN0aW9uczphY3Rpb25zJDEsZ2V0dGVyczpnZXR0ZXJzJDF9O3ZhciBBVFRFTVBUX0xJTUlUPTI7dmFyIElNR19VUkxTPVsnaHR0cDovL2Nkbi5maWxlc3RhY2tjb250ZW50LmNvbS9KUmdtR3lMdFFqQ0ZFTnNpTDBTTicsJ2h0dHA6Ly9jZG4uZmlsZXN0YWNrY29udGVudC5jb20vRjl3U29sUjhxdGtSbHVXNW5Hb1EnLCdodHRwOi8vY2RuLmZpbGVzdGFja2NvbnRlbnQuY29tL3FMVE54T1NwUkgyeldodWlybzNFJ107dmFyIGluaXRpYWxTdGF0ZSQyPXtjb25uZWN0ZWQ6e3ZhbHVlOnRydWV9LGF0dGVtcHRzOjAsbGlzdGVuZXJzOnt9fTt2YXIgbXV0YXRpb25zJDI9e1NFVF9DT05ORUNUSU9OX1NUQVRVUzpmdW5jdGlvbiBTRVRfQ09OTkVDVElPTl9TVEFUVVMoc3RhdGUsdmFsdWUpe3N0YXRlLmNvbm5lY3RlZD17dmFsdWU6dmFsdWV9O30sSU5DX0FUVEVNUFRTOmZ1bmN0aW9uIElOQ19BVFRFTVBUUyhzdGF0ZSl7c3RhdGUuYXR0ZW1wdHMrPTE7fSxSRVNFVF9BVFRFTVBUUzpmdW5jdGlvbiBSRVNFVF9BVFRFTVBUUyhzdGF0ZSl7c3RhdGUuYXR0ZW1wdHM9MDt9LFNFVF9ORVRXT1JLX0xJU1RFTkVSUzpmdW5jdGlvbiBTRVRfTkVUV09SS19MSVNURU5FUlMoc3RhdGUsbGlzdGVuZXJzKXtzdGF0ZS5saXN0ZW5lcnM9bGlzdGVuZXJzO319O3ZhciBhY3Rpb25zJDI9e29uTmV0d29ya0Vycm9yOmZ1bmN0aW9uIG9uTmV0d29ya0Vycm9yKF9yZWY0NixvdmVycmlkZSl7dmFyIGF0dGVtcHRzPV9yZWY0Ni5zdGF0ZS5hdHRlbXB0cyxjb21taXQ9X3JlZjQ2LmNvbW1pdCxkaXNwYXRjaD1fcmVmNDYuZGlzcGF0Y2g7Y29tbWl0KCdJTkNfQVRURU1QVFMnKTtpZihvdmVycmlkZXx8YXR0ZW1wdHM+PUFUVEVNUFRfTElNSVQpe2NvbW1pdCgnUkVTRVRfQVRURU1QVFMnKTtjb21taXQoJ1NFVF9DT05ORUNUSU9OX1NUQVRVUycsZmFsc2UpO2Rpc3BhdGNoKCdwYXVzZUFsbFVwbG9hZHMnKTt9fSxvbk5ldHdvcmtTdWNjZXNzOmZ1bmN0aW9uIG9uTmV0d29ya1N1Y2Nlc3MoX3JlZjQ3KXt2YXIgY29tbWl0PV9yZWY0Ny5jb21taXQsZGlzcGF0Y2g9X3JlZjQ3LmRpc3BhdGNoO2NvbW1pdCgnU0VUX0NPTk5FQ1RJT05fU1RBVFVTJyx0cnVlKTtjb21taXQoJ1JFU0VUX0FUVEVNUFRTJyk7ZGlzcGF0Y2goJ3JldHJ5QWxsRmFpbGVkRmlsZXMnKTt9LGNoZWNrTmV0d29ya05hdmlnYXRvcjpmdW5jdGlvbiBjaGVja05ldHdvcmtOYXZpZ2F0b3IoX3JlZjQ4KXt2YXIgY29tbWl0PV9yZWY0OC5jb21taXQsZGlzcGF0Y2g9X3JlZjQ4LmRpc3BhdGNoLGdldHRlcnM9X3JlZjQ4LmdldHRlcnM7aWYoZ2V0dGVycy5hbGxvd01hbnVhbFJldHJ5KXt2YXIgb25saW5lPWZ1bmN0aW9uIG9ubGluZSgpe3JldHVybiBkaXNwYXRjaCgnb25OZXR3b3JrU3VjY2VzcycpO307dmFyIG9mZmxpbmU9ZnVuY3Rpb24gb2ZmbGluZSgpe3JldHVybiBkaXNwYXRjaCgnb25OZXR3b3JrRXJyb3InLHRydWUpO307d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29ubGluZScsb25saW5lKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsb2ZmbGluZSk7Y29tbWl0KCdTRVRfTkVUV09SS19MSVNURU5FUlMnLHtvbmxpbmU6b25saW5lLG9mZmxpbmU6b2ZmbGluZX0pO319LHJlbW92ZU5ldHdvcmtMaXN0ZW5lcnM6ZnVuY3Rpb24gcmVtb3ZlTmV0d29ya0xpc3RlbmVycyhfcmVmNDkpe3ZhciBnZXR0ZXJzPV9yZWY0OS5nZXR0ZXJzLF9yZWY0OSRzdGF0ZSRsaXN0ZW5lcj1fcmVmNDkuc3RhdGUubGlzdGVuZXJzLG9ubGluZT1fcmVmNDkkc3RhdGUkbGlzdGVuZXIub25saW5lLG9mZmxpbmU9X3JlZjQ5JHN0YXRlJGxpc3RlbmVyLm9mZmxpbmU7aWYoZ2V0dGVycy5hbGxvd01hbnVhbFJldHJ5KXt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb25saW5lJyxvbmxpbmUpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvZmZsaW5lJyxvZmZsaW5lKTt9fSxjaGVja05ldHdvcmtYSFI6ZnVuY3Rpb24gY2hlY2tOZXR3b3JrWEhSKF9yZWY1MCl7dmFyIGRpc3BhdGNoPV9yZWY1MC5kaXNwYXRjaCxnZXR0ZXJzPV9yZWY1MC5nZXR0ZXJzO2lmKGdldHRlcnMuYWxsb3dNYW51YWxSZXRyeSl7dmFyIGh0dHA9bmV3IFhNTEh0dHBSZXF1ZXN0KCk7dmFyIGJhc2VVcmw9SU1HX1VSTFNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKklNR19VUkxTLmxlbmd0aCldO3ZhciB1cmw9XCJcIi5jb25jYXQoYmFzZVVybCxcIj9fPVwiKS5jb25jYXQobmV3IERhdGUoKS5nZXRUaW1lKCkpO2h0dHAub3BlbignSEVBRCcsdXJsKTtodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2lmKGh0dHAucmVhZHlTdGF0ZT09PTQpe2lmKGh0dHAuc3RhdHVzKXtkaXNwYXRjaCgnb25OZXR3b3JrU3VjY2VzcycpO31lbHNle2Rpc3BhdGNoKCdvbk5ldHdvcmtFcnJvcicpO319fTtodHRwLnNlbmQoKTt9fX07dmFyIGdldHRlcnMkMj17aXNDb25uZWN0ZWQ6ZnVuY3Rpb24gaXNDb25uZWN0ZWQoc3Qpe3JldHVybiBzdC5jb25uZWN0ZWQudmFsdWU7fSxpc0Nvbm5lY3RlZE9iajpmdW5jdGlvbiBpc0Nvbm5lY3RlZE9iaihzdCl7cmV0dXJuIHN0LmNvbm5lY3RlZDt9fTt2YXIgbmV0d29yaz17c3RhdGU6aW5pdGlhbFN0YXRlJDIsbXV0YXRpb25zOm11dGF0aW9ucyQyLGFjdGlvbnM6YWN0aW9ucyQyLGdldHRlcnM6Z2V0dGVycyQyfTt2YXIgbm90aWZpY2F0aW9uVGltZT01MDAwO3ZhciBtdXRhdGlvbnMkMz17QUREX05PVElGSUNBVElPTjpmdW5jdGlvbiBBRERfTk9USUZJQ0FUSU9OKHN0YXRlLG5vdGlmaWNhdGlvbil7c3RhdGUubm90aWZpY2F0aW9ucy5wdXNoKG5vdGlmaWNhdGlvbik7fSxSRU1PVkVfTk9USUZJQ0FUSU9OOmZ1bmN0aW9uIFJFTU9WRV9OT1RJRklDQVRJT04oc3RhdGUsbm90aWZpY2F0aW9uVG9CZVJlbW92ZWQpe3N0YXRlLm5vdGlmaWNhdGlvbnM9c3RhdGUubm90aWZpY2F0aW9ucy5maWx0ZXIoZnVuY3Rpb24obm90aWZpY2F0aW9uKXtyZXR1cm4gbm90aWZpY2F0aW9uIT09bm90aWZpY2F0aW9uVG9CZVJlbW92ZWQ7fSk7fSxSRU1PVkVfQUxMX05PVElGSUNBVElPTlM6ZnVuY3Rpb24gUkVNT1ZFX0FMTF9OT1RJRklDQVRJT05TKHN0YXRlKXtzdGF0ZS5ub3RpZmljYXRpb25zLnNwbGljZSgwLHN0YXRlLm5vdGlmaWNhdGlvbnMubGVuZ3RoKTt9fTt2YXIgYWN0aW9ucyQzPXtzaG93Tm90aWZpY2F0aW9uOmZ1bmN0aW9uIHNob3dOb3RpZmljYXRpb24oY29udGV4dCxtZXNzYWdlLG9wdGlvbnMpe3ZhciBub3RpZmljYXRpb249e307aWYoQXJyYXkuaXNBcnJheShtZXNzYWdlKSYmbWVzc2FnZS5sZW5ndGg9PT0yKXtub3RpZmljYXRpb249X29iamVjdFNwcmVhZCh7bWVzc2FnZTptZXNzYWdlWzBdLHBhcmFtczptZXNzYWdlWzFdfSxvcHRpb25zKTt9ZWxzZSBpZihfdHlwZW9mMihtZXNzYWdlKT09PSdvYmplY3QnKXtub3RpZmljYXRpb249X29iamVjdFNwcmVhZCh7fSxtZXNzYWdlLHt9LG9wdGlvbnMpO31lbHNle25vdGlmaWNhdGlvbj1fb2JqZWN0U3ByZWFkKHttZXNzYWdlOm1lc3NhZ2V9LG9wdGlvbnMpO30vLyBQcmV2ZW50IGR1cGxpY2F0ZSBub3RpZmljYXRpb25zXG52YXIgbWVzc2FnZXM9Y29udGV4dC5nZXR0ZXJzLm5vdGlmaWNhdGlvbnMubWFwKGZ1bmN0aW9uKG4pe3JldHVybiBuLm1lc3NhZ2U7fSk7aWYobWVzc2FnZXMuaW5kZXhPZihtZXNzYWdlKTwwKXtjb250ZXh0LmNvbW1pdCgnQUREX05PVElGSUNBVElPTicsbm90aWZpY2F0aW9uKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Y29udGV4dC5jb21taXQoJ1JFTU9WRV9OT1RJRklDQVRJT04nLG5vdGlmaWNhdGlvbik7fSxjb250ZXh0LnJvb3RHZXR0ZXJzLmVycm9yc1RpbWVvdXR8fG5vdGlmaWNhdGlvbi50aW1lb3V0fHxub3RpZmljYXRpb25UaW1lKTt9fSxyZW1vdmVBbGxOb3RpZmljYXRpb25zOmZ1bmN0aW9uIHJlbW92ZUFsbE5vdGlmaWNhdGlvbnMoY29udGV4dCl7Y29udGV4dC5jb21taXQoJ1JFTU9WRV9BTExfTk9USUZJQ0FUSU9OUycpO319O3ZhciBnZXR0ZXJzJDM9e25vdGlmaWNhdGlvbnM6ZnVuY3Rpb24gbm90aWZpY2F0aW9ucyhzdCl7cmV0dXJuIHN0Lm5vdGlmaWNhdGlvbnM7fX07dmFyIG5vdGlmaWNhdGlvbnM9e3N0YXRlOntub3RpZmljYXRpb25zOltdfSxtdXRhdGlvbnM6bXV0YXRpb25zJDMsYWN0aW9uczphY3Rpb25zJDMsZ2V0dGVyczpnZXR0ZXJzJDN9O3ZhciBtdXRhdGlvbnMkND17RkVUQ0hfVVJMX1NUQVJUOmZ1bmN0aW9uIEZFVENIX1VSTF9TVEFSVChzdGF0ZSl7c3RhdGUuaXNGZXRjaGluZz10cnVlO30sRkVUQ0hfVVJMX0RPTkU6ZnVuY3Rpb24gRkVUQ0hfVVJMX0RPTkUoc3RhdGUpe3N0YXRlLmlzRmV0Y2hpbmc9ZmFsc2U7fX07dmFyIGFjdGlvbnMkND17ZmV0Y2hVcmw6ZnVuY3Rpb24gZmV0Y2hVcmwoY29udGV4dCx1cmwpe2NvbnRleHQuY29tbWl0KCdGRVRDSF9VUkxfU1RBUlQnKTtyZXR1cm4gY29udGV4dC5nZXR0ZXJzLmNsb3VkQ2xpZW50Lm1ldGFkYXRhKHVybCkudGhlbihmdW5jdGlvbihyZXMpe2lmKHJlcy5lcnJvcil7Y29udGV4dC5jb21taXQoJ0ZFVENIX1VSTF9ET05FJyk7cmV0dXJuIGNvbnRleHQuZGlzcGF0Y2goJ3Nob3dOb3RpZmljYXRpb24nLHJlcy5lcnJvcik7fWNvbnRleHQuY29tbWl0KCdGRVRDSF9VUkxfRE9ORScpO3JldHVybiBjb250ZXh0LmRpc3BhdGNoKCdhZGRGaWxlJyxyZXMpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gdHJ1ZTt9KTt9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7Y29udGV4dC5jb21taXQoJ0ZFVENIX1VSTF9ET05FJyk7Y29udGV4dC5kaXNwYXRjaCgnc2hvd05vdGlmaWNhdGlvbicsJ0Vycm9yIGZldGNoaW5nIFVSTCBtZXRhZGF0YS4nKTt9KTt9fTt2YXIgZ2V0dGVycyQ0PXtpc1VybEZldGNoaW5nOmZ1bmN0aW9uIGlzVXJsRmV0Y2hpbmcoc3Qpe3JldHVybiBzdC5pc0ZldGNoaW5nO319O3ZhciB1cmxTb3VyY2U9e3N0YXRlOntpc0ZldGNoaW5nOmZhbHNlfSxtdXRhdGlvbnM6bXV0YXRpb25zJDQsYWN0aW9uczphY3Rpb25zJDQsZ2V0dGVyczpnZXR0ZXJzJDR9O3ZhciBsb2ckMj1sb2dnZXIuY29udGV4dCgncGlja2VyJyk7VnVlLnVzZShpbmRleF9lc20pO3ZhciBoYXNGYWxzZXlWYWx1ZXM9ZnVuY3Rpb24gaGFzRmFsc2V5VmFsdWVzKG9iail7dmFyIHJlc3VsdD10cnVlO09iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbihrZXkpe2lmKG9ialtrZXldKXtyZXN1bHQ9ZmFsc2U7fX0pO3JldHVybiByZXN1bHQ7fTt2YXIgY3JlYXRlU3RvcmU9ZnVuY3Rpb24gY3JlYXRlU3RvcmUoYXBpQ2xpZW50LGNvbmZpZyxvblBpY2tlckRvbmUsb25QaWNrZXJDYW5jZWwsaW5pdGlhbFN0YXRlKXt2YXIgY2xvdWRDbGllbnQ9YXBpQ2xpZW50LmNsb3VkO2luaXRpYWxTdGF0ZT1fb2JqZWN0U3ByZWFkKHthcGlDbGllbnQ6YXBpQ2xpZW50LG1vZHVsZXM6eydmcy1jcm9wcGVyJzpFTlYudmVuZG9yLmNyb3BwZXIsJ2ZzLWZhYnJpYyc6RU5WLnZlbmRvci5mYWJyaWMsJ2ZzLW9wZW50b2snOkVOVi52ZW5kb3Iub3BlbnRva30sY2xvdWRDbGllbnQ6Y2xvdWRDbGllbnQsY29uZmlnOmNvbmZpZyx2aWV3VHlwZTpudWxsLHJvdXRlOltdLHJvdXRlc0hpc3Rvcnk6W10sd2hpdGVsYWJlbDpmYWxzZSxibG9iVVJMczp7fSxwcmVmZXRjaGVkOmZhbHNlLG1vYmlsZU5hdkFjdGl2ZTpmYWxzZSxoaWRlU2lkZWJhcjpmYWxzZSxzZWxlY3RMYWJlbElzQWN0aXZlOmZhbHNlfSxpbml0aWFsU3RhdGUpO3JldHVybiBuZXcgaW5kZXhfZXNtLlN0b3JlKHtzdGF0ZTppbml0aWFsU3RhdGUsbW9kdWxlczp7dXBsb2FkUXVldWU6dXBsb2FkUXVldWUoYXBpQ2xpZW50LGluaXRpYWxTdGF0ZS51cGxvYWRRdWV1ZSksY2xvdWRTdG9yZTpjbG91ZFN0b3JlLGltYWdlU2VhcmNoOmltYWdlU2VhcmNoLHVybFNvdXJjZTp1cmxTb3VyY2Usbm90aWZpY2F0aW9uczpub3RpZmljYXRpb25zLG5ldHdvcms6bmV0d29ya30sbXV0YXRpb25zOntJTklUSUFMX1JPVVRFOmZ1bmN0aW9uIElOSVRJQUxfUk9VVEUoc3RhdGUpe3ZhciBzb3VyY2VzPXN0YXRlLmNvbmZpZy5mcm9tU291cmNlczt2YXIgc291cmNlPXNvdXJjZXNbMF07dmFyIG5ld1JvdXRlPXNvdXJjZT9bJ3NvdXJjZScsc291cmNlLm5hbWVdOltdO3N0YXRlLnJvdXRlPW5ld1JvdXRlO3N0YXRlLnJvdXRlc0hpc3RvcnkucHVzaChzdGF0ZS5yb3V0ZSk7aWYoc291cmNlcy5sZW5ndGg9PT0xKXtzdGF0ZS5oaWRlU2lkZWJhcj10cnVlO31lbHNle3N0YXRlLmhpZGVTaWRlYmFyPWZhbHNlO319LFNFVF9QUkVGRVRDSDpmdW5jdGlvbiBTRVRfUFJFRkVUQ0goc3RhdGUsZGF0YSl7c3RhdGUud2hpdGVsYWJlbD1kYXRhLndoaXRlbGFiZWw7fSxDSEFOR0VfUk9VVEU6ZnVuY3Rpb24gQ0hBTkdFX1JPVVRFKHN0YXRlLG5ld1JvdXRlKXtsb2ckMihcIkNoYW5nZSByb3V0ZSBmcm9tIFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlLnJvdXRlKSxcIiB0byBcIikuY29uY2F0KEpTT04uc3RyaW5naWZ5KG5ld1JvdXRlKSkpO3N0YXRlLnJvdXRlc0hpc3RvcnkucHVzaChzdGF0ZS5yb3V0ZSk7c3RhdGUucm91dGU9bmV3Um91dGU7c3RhdGUubW9iaWxlTmF2QWN0aXZlPWZhbHNlO30sR09fQkFDS19XSVRIX1JPVVRFOmZ1bmN0aW9uIEdPX0JBQ0tfV0lUSF9ST1VURShzdGF0ZSl7dmFyIGxhc3RSb3V0ZT1zdGF0ZS5yb3V0ZXNIaXN0b3J5LnBvcCgpO2lmKGxhc3RSb3V0ZSl7c3RhdGUucm91dGU9bGFzdFJvdXRlO319LEdPX0JBQ0tfV0lUSF9ST1VURV9DVVJSRU5UX1RZUEU6ZnVuY3Rpb24gR09fQkFDS19XSVRIX1JPVVRFX0NVUlJFTlRfVFlQRShzdGF0ZSl7dmFyIGhpc3Rvcnk9c3RhdGUucm91dGVzSGlzdG9yeS5yZXZlcnNlKCk7dmFyIHRvVGVzdD10aGlzLnN0YXRlLnJvdXRlLmpvaW4oJy8nKTt2YXIgZm91bmRJZHg9YXJyYXlGaW5kSW5kZXgoaGlzdG9yeSxmdW5jdGlvbihlbCl7aWYoZWwuam9pbignLycpIT09dG9UZXN0KXtyZXR1cm4gdG9UZXN0LmluZGV4T2YoZWwuam9pbignLycpKT09PTA7fXJldHVybiBmYWxzZTt9KTtpZihmb3VuZElkeD4tMSl7aGlzdG9yeS5zcGxpY2UoMCxmb3VuZElkeCk7fWhpc3Rvcnk9aGlzdG9yeS5yZXZlcnNlKCk7dmFyIGxhc3RSb3V0ZT1oaXN0b3J5LnBvcCgpO2lmKGxhc3RSb3V0ZSl7c3RhdGUucm91dGU9bGFzdFJvdXRlO319LFBSRUZFVENIX0RPTkU6ZnVuY3Rpb24gUFJFRkVUQ0hfRE9ORShzdGF0ZSl7c3RhdGUucHJlZmV0Y2hlZD10cnVlO30sUkVNT1ZFX1NPVVJDRV9GUk9NX1JPVVRFUzpmdW5jdGlvbiBSRU1PVkVfU09VUkNFX0ZST01fUk9VVEVTKHN0YXRlLG5hbWUpe3N0YXRlLnJvdXRlc0hpc3Rvcnk9c3RhdGUucm91dGVzSGlzdG9yeS5maWx0ZXIoZnVuY3Rpb24ocm91dGUpe3JldHVybiByb3V0ZVsxXSYmcm91dGVbMV0hPT1uYW1lO30pO30sU0VUX0JMT0JfVVJMOmZ1bmN0aW9uIFNFVF9CTE9CX1VSTChzdGF0ZSxfcmVmNTEpe3ZhciB1dWlkPV9yZWY1MS51dWlkLHVybD1fcmVmNTEudXJsO3N0YXRlLmJsb2JVUkxzW3V1aWRdPXVybDt9LFJFTU9WRV9CTE9CX1VSTDpmdW5jdGlvbiBSRU1PVkVfQkxPQl9VUkwoc3RhdGUsdXVpZCl7VnVlW1wiZGVsZXRlXCJdKHN0YXRlLmJsb2JVUkxzLHV1aWQpO30sVVBEQVRFX01PQklMRV9OQVZfQUNUSVZFOmZ1bmN0aW9uIFVQREFURV9NT0JJTEVfTkFWX0FDVElWRShzdGF0ZSxpc0FjdGl2ZSl7c3RhdGUubW9iaWxlTmF2QWN0aXZlPWlzQWN0aXZlO2lmKHN0YXRlLmNvbmZpZy5mcm9tU291cmNlcy5sZW5ndGg9PT0xKXtzdGF0ZS5oaWRlU2lkZWJhcj0haXNBY3RpdmU7fX0sVVBEQVRFX1NFTEVDVF9MQUJFTF9BQ1RJVkU6ZnVuY3Rpb24gVVBEQVRFX1NFTEVDVF9MQUJFTF9BQ1RJVkUoc3RhdGUsaXNBY3RpdmUpe3N0YXRlLnNlbGVjdExhYmVsSXNBY3RpdmU9aXNBY3RpdmU7fSxTRVRfVklFV19UWVBFOmZ1bmN0aW9uIFNFVF9WSUVXX1RZUEUoc3RhdGUsdHlwZSl7aWYoWydsaXN0JywnZ3JpZCddLmluZGV4T2YodHlwZSk9PT0tMSl7dGhyb3cgbmV3IEVycm9yKFwiVmlldyB0eXBlIFwiLmNvbmNhdCh0eXBlLFwiIGlzIG5vdCBzdXBwb3J0ZWQuIFN1cHBvcnRlZCB0eXBlczogZ3JpZCwgbGlzdFwiKSk7fXN0YXRlLnZpZXdUeXBlPXR5cGU7fX0sYWN0aW9uczp7c2V0Vmlld1R5cGU6ZnVuY3Rpb24gc2V0Vmlld1R5cGUoX3JlZjUyLHR5cGUpe3ZhciBjb21taXQ9X3JlZjUyLmNvbW1pdDtjb21taXQoJ1NFVF9WSUVXX1RZUEUnLHR5cGUpO30sYWxsVXBsb2Fkc0RvbmU6ZnVuY3Rpb24gYWxsVXBsb2Fkc0RvbmUoY29udGV4dCl7dmFyIGZpbGVzVXBsb2FkZWQ9Y29udmVydEZpbGVMaXN0Rm9yT3V0c2lkZVdvcmxkKGNvbnRleHQuZ2V0dGVycy5maWxlc0RvbmUsY29udGV4dC5nZXR0ZXJzKTt2YXIgZmlsZXNGYWlsZWQ9Y29udmVydEZpbGVMaXN0Rm9yT3V0c2lkZVdvcmxkKGNvbnRleHQuZ2V0dGVycy5maWxlc0ZhaWxlZCxjb250ZXh0LmdldHRlcnMpO3ZhciBoYXNEcm9wUGFuZT1jb250ZXh0LmdldHRlcnMuZHJvcFBhbmU7dmFyIGlzSW5saW5lRGlzcGxheT1jb250ZXh0LmdldHRlcnMuaXNJbmxpbmVEaXNwbGF5O2lmKGhhc0Ryb3BQYW5lJiZjb250ZXh0LmdldHRlcnMuZHJvcFBhbmUub25TdWNjZXNzKXtjb250ZXh0LmdldHRlcnMuZHJvcFBhbmUub25TdWNjZXNzKGZpbGVzVXBsb2FkZWQpO31pZihoYXNEcm9wUGFuZSYmY29udGV4dC5nZXR0ZXJzLmRyb3BQYW5lLm9uRXJyb3Ipe2NvbnRleHQuZ2V0dGVycy5kcm9wUGFuZS5vbkVycm9yKGZpbGVzRmFpbGVkKTt9Y29udGV4dC5kaXNwYXRjaCgncmVtb3ZlTmV0d29ya0xpc3RlbmVycycpO2lmKGhhc0Ryb3BQYW5lfHxpc0lubGluZURpc3BsYXkpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtjb250ZXh0LmNvbW1pdCgnU0VUX1VQTE9BRF9TVEFSVEVEJyxmYWxzZSk7Y29udGV4dC5jb21taXQoJ0NMRUFSX0ZJTEVTJyk7fSwxMDAwKTt9b25QaWNrZXJEb25lKHtmaWxlc1VwbG9hZGVkOmZpbGVzVXBsb2FkZWQsZmlsZXNGYWlsZWQ6ZmlsZXNGYWlsZWR9KTt9LGNhbmNlbFBpY2s6ZnVuY3Rpb24gY2FuY2VsUGljayhfcmVmNTMpe3ZhciBkaXNwYXRjaD1fcmVmNTMuZGlzcGF0Y2gsX3JlZjUzJGdldHRlcnM9X3JlZjUzLmdldHRlcnMsZmlsZXNMaXN0PV9yZWY1MyRnZXR0ZXJzLmZpbGVzTGlzdCxleHBvc2VPcmlnaW5hbEZpbGU9X3JlZjUzJGdldHRlcnMuZXhwb3NlT3JpZ2luYWxGaWxlO2Rpc3BhdGNoKCdjYW5jZWxBbGxVcGxvYWRzJyk7ZGlzcGF0Y2goJ3JlbW92ZU5ldHdvcmtMaXN0ZW5lcnMnKTtpZihvblBpY2tlckNhbmNlbCl7b25QaWNrZXJDYW5jZWwoY29udmVydEZpbGVMaXN0Rm9yT3V0c2lkZVdvcmxkKGZpbGVzTGlzdCx7ZXhwb3NlT3JpZ2luYWxGaWxlOmV4cG9zZU9yaWdpbmFsRmlsZX0pKTt9fSx1cGRhdGVNb2JpbGVOYXZBY3RpdmU6ZnVuY3Rpb24gdXBkYXRlTW9iaWxlTmF2QWN0aXZlKGNvbnRleHQsaXNBY3RpdmUpe2NvbnRleHQuY29tbWl0KCdVUERBVEVfTU9CSUxFX05BVl9BQ1RJVkUnLGlzQWN0aXZlKTt9LHVwZGF0ZVNlbGVjdExhYmVsQWN0aXZlOmZ1bmN0aW9uIHVwZGF0ZVNlbGVjdExhYmVsQWN0aXZlKGNvbnRleHQsaXNBY3RpdmUpe2NvbnRleHQuY29tbWl0KCdVUERBVEVfU0VMRUNUX0xBQkVMX0FDVElWRScsaXNBY3RpdmUpO319LGdldHRlcnM6ey8vIFVzZXJzIGNhbiB0b2dnbGUgbW9kYWwgdmlzaWJpbGl0eSBkdXJpbmcgdXBsb2FkXG51aVZpc2libGU6ZnVuY3Rpb24gdWlWaXNpYmxlKHN0LGdldHRlcnMpe2lmKHN0LmNvbmZpZy5kaXNwbGF5TW9kZT09PURJU1BMQVlfTU9ERV9PVkVSTEFZJiZnZXR0ZXJzLnVwbG9hZFN0YXJ0ZWQmJnN0LmNvbmZpZy5oaWRlTW9kYWxXaGVuVXBsb2FkaW5nKXtyZXR1cm4gZmFsc2U7fXJldHVybiB0cnVlO30sLy8gQ2xpZW50cyBhbmQgYmFzZSBjb25maWdcbmFwaUNsaWVudDpmdW5jdGlvbiBhcGlDbGllbnQoc3Qpe3JldHVybiBzdC5hcGlDbGllbnQ7fSxjbG91ZENsaWVudDpmdW5jdGlvbiBjbG91ZENsaWVudChzdCl7cmV0dXJuIHN0LmNsb3VkQ2xpZW50O30sY29uZmlnOmZ1bmN0aW9uIGNvbmZpZyhzdCl7cmV0dXJuIHN0LmNvbmZpZzt9LC8vIERlcml2ZWQgc3RhdGVcbmJsb2JVUkxzOmZ1bmN0aW9uIGJsb2JVUkxzKHN0KXtyZXR1cm4gc3QuYmxvYlVSTHM7fSxpc0lubGluZURpc3BsYXk6ZnVuY3Rpb24gaXNJbmxpbmVEaXNwbGF5KHN0KXtyZXR1cm4gc3QuY29uZmlnLmRpc3BsYXlNb2RlPT09RElTUExBWV9NT0RFX0lOTElORTt9LGlzU2lkZWJhckhpZGRlbjpmdW5jdGlvbiBpc1NpZGViYXJIaWRkZW4oc3Qpe3JldHVybiBzdC5oaWRlU2lkZWJhcjt9LG1vYmlsZU5hdkFjdGl2ZTpmdW5jdGlvbiBtb2JpbGVOYXZBY3RpdmUoc3Qpe3JldHVybiBzdC5tb2JpbGVOYXZBY3RpdmU7fSxwcmVmZXRjaGVkOmZ1bmN0aW9uIHByZWZldGNoZWQoc3Qpe3JldHVybiBzdC5wcmVmZXRjaGVkO30scm91dGU6ZnVuY3Rpb24gcm91dGUoc3Qpe3JldHVybiBzdC5yb3V0ZTt9LHdoaXRlbGFiZWw6ZnVuY3Rpb24gd2hpdGVsYWJlbChzdCl7cmV0dXJuIHN0LndoaXRlbGFiZWw7fSxyb3V0ZXNIaXN0b3J5OmZ1bmN0aW9uIHJvdXRlc0hpc3Rvcnkoc3Qpe3JldHVybiBzdC5yb3V0ZXNIaXN0b3J5O30sc2VsZWN0TGFiZWxJc0FjdGl2ZTpmdW5jdGlvbiBzZWxlY3RMYWJlbElzQWN0aXZlKHN0KXtyZXR1cm4gc3Quc2VsZWN0TGFiZWxJc0FjdGl2ZTt9LC8vIE9wdGlvbnNcbmFjY2VwdDpmdW5jdGlvbiBhY2NlcHQoc3Qpe3JldHVybiBzdC5jb25maWcuYWNjZXB0O30sdmlld1R5cGU6ZnVuY3Rpb24gdmlld1R5cGUoc3Qpe2lmKHN0LnZpZXdUeXBlKXtyZXR1cm4gc3Qudmlld1R5cGU7fXZhciB2dD1zdC5jb25maWcudmlld1R5cGU7c3Qudmlld1R5cGU9dnQ7cmV0dXJuIHZ0O30sYWxsb3dNYW51YWxSZXRyeTpmdW5jdGlvbiBhbGxvd01hbnVhbFJldHJ5KHN0KXtyZXR1cm4gc3QuY29uZmlnLmFsbG93TWFudWFsUmV0cnk7fSxjb25jdXJyZW5jeTpmdW5jdGlvbiBjb25jdXJyZW5jeShzdCl7cmV0dXJuIHN0LmNvbmZpZy5jb25jdXJyZW5jeTt9LGNvbnRhaW5lcjpmdW5jdGlvbiBjb250YWluZXIoc3Qpe3JldHVybiBzdC5jb25maWcuY29udGFpbmVyO30sY3JvcEFzcGVjdFJhdGlvOmZ1bmN0aW9uIGNyb3BBc3BlY3RSYXRpbyhzdCl7cmV0dXJuIHN0LmNvbmZpZy50cmFuc2Zvcm1hdGlvbnMuY3JvcCYmc3QuY29uZmlnLnRyYW5zZm9ybWF0aW9ucy5jcm9wLmFzcGVjdFJhdGlvfHxOYU47fSxjcm9wRmlsZXM6ZnVuY3Rpb24gY3JvcEZpbGVzKHN0KXtyZXR1cm4gc3QuY29uZmlnLmNyb3BGaWxlczt9LGNyb3BGb3JjZTpmdW5jdGlvbiBjcm9wRm9yY2Uoc3Qpe3JldHVybiBzdC5jb25maWcudHJhbnNmb3JtYXRpb25zLmNyb3AmJnN0LmNvbmZpZy50cmFuc2Zvcm1hdGlvbnMuY3JvcC5mb3JjZXx8c3QuY29uZmlnLnRyYW5zZm9ybWF0aW9ucyYmc3QuY29uZmlnLnRyYW5zZm9ybWF0aW9ucy5mb3JjZTt9LGN1c3RvbVNvdXJjZUNvbnRhaW5lcjpmdW5jdGlvbiBjdXN0b21Tb3VyY2VDb250YWluZXIoc3Qpe3JldHVybiBzdC5jb25maWcuY3VzdG9tU291cmNlQ29udGFpbmVyO30sY3VzdG9tU291cmNlUGF0aDpmdW5jdGlvbiBjdXN0b21Tb3VyY2VQYXRoKHN0KXtyZXR1cm4gc3QuY29uZmlnLmN1c3RvbVNvdXJjZVBhdGg7fSxjdXN0b21Tb3VyY2VOYW1lOmZ1bmN0aW9uIGN1c3RvbVNvdXJjZU5hbWUoc3Qpe3JldHVybiBzdC5jb25maWcuY3VzdG9tU291cmNlTmFtZTt9LGN1c3RvbVRleHQ6ZnVuY3Rpb24gY3VzdG9tVGV4dChzdCl7cmV0dXJuIHN0LmNvbmZpZy5jdXN0b21UZXh0O30sZGlzYWJsZVN0b3JhZ2VLZXk6ZnVuY3Rpb24gZGlzYWJsZVN0b3JhZ2VLZXkoc3Qpe3JldHVybiBzdC5jb25maWcuZGlzYWJsZVN0b3JhZ2VLZXk7fSxkaXNhYmxlVGh1bWJuYWlsczpmdW5jdGlvbiBkaXNhYmxlVGh1bWJuYWlscyhzdCl7cmV0dXJuIHN0LmNvbmZpZy5kaXNhYmxlVGh1bWJuYWlsczt9LGVycm9yc1RpbWVvdXQ6ZnVuY3Rpb24gZXJyb3JzVGltZW91dChzdCl7cmV0dXJuIHN0LmNvbmZpZy5lcnJvcnNUaW1lb3V0O30sZGlzYWJsZVRyYW5zZm9ybWVyOmZ1bmN0aW9uIGRpc2FibGVUcmFuc2Zvcm1lcihzdCl7cmV0dXJuIHN0LmNvbmZpZy5kaXNhYmxlVHJhbnNmb3JtZXJ8fGhhc0ZhbHNleVZhbHVlcyhzdC5jb25maWcudHJhbnNmb3JtYXRpb25zKTt9LGRyb3BQYW5lOmZ1bmN0aW9uIGRyb3BQYW5lKHN0KXtyZXR1cm4gc3QuY29uZmlnLmRyb3BQYW5lO30sZXhwb3NlT3JpZ2luYWxGaWxlOmZ1bmN0aW9uIGV4cG9zZU9yaWdpbmFsRmlsZShzdCl7cmV0dXJuIHN0LmNvbmZpZy5leHBvc2VPcmlnaW5hbEZpbGU7fSxmcm9tU291cmNlczpmdW5jdGlvbiBmcm9tU291cmNlcyhzdCl7cmV0dXJuIHN0LmNvbmZpZy5mcm9tU291cmNlczt9LGdsb2JhbERyb3Bab25lOmZ1bmN0aW9uIGdsb2JhbERyb3Bab25lKHN0KXtyZXR1cm4gc3QuY29uZmlnLmdsb2JhbERyb3Bab25lO30saW1hZ2VNaW46ZnVuY3Rpb24gaW1hZ2VNaW4oc3Qpe3JldHVybiBzdC5jb25maWcuaW1hZ2VNaW47fSxpbWFnZU1heDpmdW5jdGlvbiBpbWFnZU1heChzdCl7cmV0dXJuIHN0LmNvbmZpZy5pbWFnZU1heDt9LGltYWdlRGltOmZ1bmN0aW9uIGltYWdlRGltKHN0KXtyZXR1cm4gc3QuY29uZmlnLmltYWdlRGltO30saW1hZ2VNaW5NYXhCbG9jazpmdW5jdGlvbiBpbWFnZU1pbk1heEJsb2NrKHN0KXtyZXR1cm4gc3QuY29uZmlnLmltYWdlTWluTWF4QmxvY2s7fSxsYW5nOmZ1bmN0aW9uIGxhbmcoc3Qpe3JldHVybiBzdC5jb25maWcubGFuZzt9LG1heEZpbGVzOmZ1bmN0aW9uIG1heEZpbGVzKHN0KXtyZXR1cm4gc3QuY29uZmlnLm1heEZpbGVzO30sbWF4U2l6ZTpmdW5jdGlvbiBtYXhTaXplKHN0KXtyZXR1cm4gc3QuY29uZmlnLm1heFNpemU7fSxtaW5GaWxlczpmdW5jdGlvbiBtaW5GaWxlcyhzdCl7cmV0dXJuIHN0LmNvbmZpZy5taW5GaWxlczt9LG1vZGFsU2l6ZTpmdW5jdGlvbiBtb2RhbFNpemUoc3Qpe3JldHVybiBzdC5jb25maWcubW9kYWxTaXplO30sb25DbG9zZTpmdW5jdGlvbiBvbkNsb3NlKHN0KXtyZXR1cm4gc3QuY29uZmlnLm9uQ2xvc2U7fSxvbkZpbGVTZWxlY3RlZDpmdW5jdGlvbiBvbkZpbGVTZWxlY3RlZChzdCl7cmV0dXJuIHN0LmNvbmZpZy5vbkZpbGVTZWxlY3RlZDt9LG9uRmlsZVVwbG9hZFN0YXJ0ZWQ6ZnVuY3Rpb24gb25GaWxlVXBsb2FkU3RhcnRlZChzdCl7cmV0dXJuIHN0LmNvbmZpZy5vbkZpbGVVcGxvYWRTdGFydGVkO30sb25GaWxlQ3JvcHBlZDpmdW5jdGlvbiBvbkZpbGVDcm9wcGVkKHN0KXtyZXR1cm4gc3QuY29uZmlnLm9uRmlsZUNyb3BwZWQ7fSxvbkZpbGVVcGxvYWRQcm9ncmVzczpmdW5jdGlvbiBvbkZpbGVVcGxvYWRQcm9ncmVzcyhzdCl7cmV0dXJuIHN0LmNvbmZpZy5vbkZpbGVVcGxvYWRQcm9ncmVzczt9LG9uRmlsZVVwbG9hZEZpbmlzaGVkOmZ1bmN0aW9uIG9uRmlsZVVwbG9hZEZpbmlzaGVkKHN0KXtyZXR1cm4gc3QuY29uZmlnLm9uRmlsZVVwbG9hZEZpbmlzaGVkO30sb25GaWxlVXBsb2FkRmFpbGVkOmZ1bmN0aW9uIG9uRmlsZVVwbG9hZEZhaWxlZChzdCl7cmV0dXJuIHN0LmNvbmZpZy5vbkZpbGVVcGxvYWRGYWlsZWQ7fSxvbk9wZW46ZnVuY3Rpb24gb25PcGVuKHN0KXtyZXR1cm4gc3QuY29uZmlnLm9uT3Blbjt9LG9uVXBsb2FkU3RhcnRlZDpmdW5jdGlvbiBvblVwbG9hZFN0YXJ0ZWQoc3Qpe3JldHVybiBzdC5jb25maWcub25VcGxvYWRTdGFydGVkO30scm9vdElkOmZ1bmN0aW9uIHJvb3RJZChzdCl7cmV0dXJuIHN0LmNvbmZpZy5yb290SWQ7fSxzdGFydFVwbG9hZGluZ1doZW5NYXhGaWxlc1JlYWNoZWQ6ZnVuY3Rpb24gc3RhcnRVcGxvYWRpbmdXaGVuTWF4RmlsZXNSZWFjaGVkKHN0KXtyZXR1cm4gc3QuY29uZmlnLnN0YXJ0VXBsb2FkaW5nV2hlbk1heEZpbGVzUmVhY2hlZDt9LHN0b3JlVG86ZnVuY3Rpb24gc3RvcmVUbyhzdCl7cmV0dXJuIHN0LmNvbmZpZy5zdG9yZVRvO30sdHJhbnNmb3JtYXRpb25zOmZ1bmN0aW9uIHRyYW5zZm9ybWF0aW9ucyhzdCl7cmV0dXJuIHN0LmNvbmZpZy50cmFuc2Zvcm1hdGlvbnM7fSx1cGxvYWRDb25maWc6ZnVuY3Rpb24gdXBsb2FkQ29uZmlnKHN0KXtyZXR1cm4gc3QuY29uZmlnLnVwbG9hZENvbmZpZzt9LHVwbG9hZEluQmFja2dyb3VuZDpmdW5jdGlvbiB1cGxvYWRJbkJhY2tncm91bmQoc3Qpe2lmKCFzdC5jb25maWcudXBsb2FkSW5CYWNrZ3JvdW5kKXtyZXR1cm4gZmFsc2U7fWlmKHN0LmNvbmZpZy5kaXNhYmxlVHJhbnNmb3JtZXJ8fHN0LmNvbmZpZy50cmFuc2Zvcm1hdGlvbnMmJiFzdC5jb25maWcudHJhbnNmb3JtYXRpb25zLmNyb3AmJiFzdC5jb25maWcudHJhbnNmb3JtYXRpb25zLmNpcmNsZSYmIXN0LmNvbmZpZy50cmFuc2Zvcm1hdGlvbnMucm90YXRlKXtyZXR1cm4gc3QuY29uZmlnLnVwbG9hZEluQmFja2dyb3VuZDt9Y29uc29sZS53YXJuKCdVcGxvYWQgaW4gYmFja2dyb3VuZCBjYW4gYmUgZW5hYmxlZCBvbmx5IHdoZW4gY3JvcHBlciBpcyBkaXNhYmxlZCcpO3JldHVybiBmYWxzZTt9LHZpZGVvUmVzb2x1dGlvbjpmdW5jdGlvbiB2aWRlb1Jlc29sdXRpb24oc3Qpe3JldHVybiBzdC5jb25maWcudmlkZW9SZXNvbHV0aW9uO30scmVtb3ZlRXhpZjpmdW5jdGlvbiByZW1vdmVFeGlmKHN0KXtyZXR1cm4gc3QuY29uZmlnLmNsZWFudXBJbWFnZUV4aWY7fSxnZXRNb2R1bGVVcmw6ZnVuY3Rpb24gZ2V0TW9kdWxlVXJsKHN0KXtyZXR1cm4gZnVuY3Rpb24obW9kdWxlTmFtZSl7dmFyIHBhdGg9c3QubW9kdWxlc1ttb2R1bGVOYW1lXTt2YXIgY25hbWU9c3QuYXBpQ2xpZW50LnNlc3Npb24uY25hbWU7aWYoY25hbWUpe3BhdGg9cGF0aC5yZXBsYWNlKCdmaWxlc3RhY2thcGkuY29tJyxjbmFtZSk7fXJldHVybiBwYXRoO307fX19KTt9O3ZhciBsb2ckMz1sb2dnZXIuY29udGV4dCgncGlja2VyJyk7LyoqXG4gICAqIEBtb2R1bGUgcGlja1xuICAgKi8gLyoqXG4gICAqIFRoZSBtZXRhZGF0YSBhdmFpbGFibGUgb24gdXBsb2FkZWQgZmlsZXMgcmV0dXJuZWQgZnJvbSBwaWNrLlxuICAgKiBAdHlwZWRlZiB7b2JqZWN0fSBGaWxlTWV0YWRhdGFcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IGZpbGVuYW1lIC0gTmFtZSBvZiB0aGUgZmlsZS5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IGhhbmRsZSAtIEZpbGVzdGFjayBoYW5kbGUgZm9yIHRoZSB1cGxvYWRlZCBmaWxlLlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gbWltZXR5cGUgLSBUaGUgTUlNRSB0eXBlIG9mIHRoZSBmaWxlLlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gb3JpZ2luYWxQYXRoIC0gVGhlIG9yaWdpbiBvZiB0aGUgZmlsZSwgZS5nLiAvRm9sZGVyL2ZpbGUuanBnLlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gc2l6ZSAtIFNpemUgaW4gYnl0ZXMgb2YgdGhlIHVwbG9hZGVkIGZpbGUuXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzb3VyY2UgLSBUaGUgc291cmNlIGZyb20gd2hlcmUgdGhlIGZpbGUgd2FzIHBpY2tlZC5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IHVybCAtIFRoZSBGaWxlc3RhY2sgQ0ROIFVSTCBmb3IgdGhlIHVwbG9hZGVkIGZpbGUuXG4gICAqIEBwcm9wZXJ0eSB7b2JqZWN0fHVuZGVmaW5lZH0gb3JpZ2luYWxGaWxlIC0gUHJvcGVydGllcyBvZiB0aGUgbG9jYWwgYmluYXJ5IGZpbGUuXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfHVuZGVmaW5lZH0gc3RhdHVzIC0gSW5kaWNhdGVzIEZpbGVzdGFjayB0cmFuc2l0IHN0YXR1cy5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd8dW5kZWZpbmVkfSBrZXkgLSBUaGUgaGFzaC1wcmVmaXhlZCBwYXRoIGZvciBmaWxlcyBzdG9yZWQgaW4gUzMuXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfHVuZGVmaW5lZH0gY29udGFpbmVyIC0gVGhlIFMzIGNvbnRhaW5lciBmb3IgdGhlIHVwbG9hZGVkIGZpbGUuXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB1cGxvYWRJZCAtIEEgdXVpZCBmb3IgdHJhY2tpbmcgdGhpcyBmaWxlIGluIGNhbGxiYWNrcy5cbiAgICogQHByb3BlcnR5IHtvYmplY3R9IGNyb3BwZWQgLSBBbiBvYmplY3QgY29udGFpbmluZyBjcm9wIHBvc2l0aW9uLCBzaXplLCBhbmQgdGhlIG9yaWdpbmFsIGltYWdlIHNpemVcbiAgICogQHByb3BlcnR5IHtvYmplY3R9IHJvdGF0ZWQgLSBBbiBvYmplY3QgY29udGFpbmluZyByb3RhdGlvbiBkaXJlY3Rpb24gYW5kIHZhbHVlXG4gICAqLyAvKipcbiAgICogQGNhbGxiYWNrIG9uRmlsZVNlbGVjdGVkXG4gICAqIEBwYXJhbSBmaWxlIHtvYmplY3R9IC0gRmlsZSBtZXRhZGF0YS5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogLy8gVXNpbmcgdG8gdmV0byBmaWxlIHNlbGVjdGlvblxuICAgKiAvLyBJZiB5b3UgdGhyb3cgYW55IGVycm9yIGluIHRoaXMgZnVuY3Rpb24gaXQgd2lsbCByZWplY3QgdGhlIGZpbGUgc2VsZWN0aW9uLlxuICAgKiAvLyBUaGUgZXJyb3IgbWVzc2FnZSB3aWxsIGJlIGRpc3BsYXllZCB0byB0aGUgdXNlciBhcyBhbiBhbGVydC5cbiAgICogb25GaWxlU2VsZWN0ZWQoZmlsZSkge1xuICAgKiAgIGlmIChmaWxlLnNpemUgPiAxMDAwICogMTAwMCkge1xuICAgKiAgICAgdGhyb3cgbmV3IEVycm9yKCdGaWxlIHRvbyBiaWcsIHNlbGVjdCBzb21ldGhpbmcgc21hbGxlciB0aGFuIDFNQicpO1xuICAgKiAgIH1cbiAgICogfVxuICAgKlxuICAgKiAvLyBVc2luZyB0byBjaGFuZ2Ugc2VsZWN0ZWQgZmlsZSBuYW1lXG4gICAqIC8vIChOT1RFOiBjdXJyZW50bHkgb25seSB3b3JrcyBmb3IgbG9jYWwgYW5kIHRyYW5zZm9ybWVkIGZpbGVzLCBubyBjbG91ZCBzdXBwb3J0IHlldClcbiAgICogb25GaWxlU2VsZWN0ZWQoZmlsZSkge1xuICAgKiAgIGZpbGUubmFtZSA9ICdmb28nO1xuICAgKiAgIC8vIEl0J3MgaW1wb3J0YW50IHRvIHJldHVybiBhbHRlcmVkIGZpbGUgYnkgdGhlIGVuZCBvZiB0aGlzIGZ1bmN0aW9uLlxuICAgKiAgIHJldHVybiBmaWxlO1xuICAgKiB9XG4gICAqLyAvKipcbiAgICogQGNhbGxiYWNrIG9uVXBsb2FkU3RhcnRlZFxuICAgKiBAcGFyYW0gZmlsZXMge2FycmF5fSAtIEFsbCBjdXJyZW50bHkgc2VsZWN0ZWQgZmlsZXMuXG4gICAqLyAvKipcbiAgICogQGNhbGxiYWNrIG9uRmlsZVVwbG9hZFN0YXJ0ZWRcbiAgICogQHBhcmFtIGZpbGUge29iamVjdH0gLSBGaWxlIG1ldGFkYXRhLlxuICAgKi8gLyoqXG4gICAqIEBjYWxsYmFjayBvbkZpbGVVcGxvYWRGaW5pc2hlZFxuICAgKiBAcGFyYW0gZmlsZSB7b2JqZWN0fSAtIEZpbGUgbWV0YWRhdGEuXG4gICAqLyAvKipcbiAgICogQGNhbGxiYWNrIG9uRmlsZVVwbG9hZEZhaWxlZFxuICAgKiBAcGFyYW0gZmlsZSB7b2JqZWN0fSAtIEZpbGUgbWV0YWRhdGEuXG4gICAqIEBwYXJhbSBlcnJvciB7ZXJyb3J9IC0gRXJyb3IgaW5zdGFuY2UgZm9yIHRoaXMgdXBsb2FkLlxuICAgKi8gLyoqXG4gICAqIEBjYWxsYmFjayBvbkZpbGVVcGxvYWRQcm9ncmVzc1xuICAgKiBAcGFyYW0gZmlsZSB7b2JqZWN0fSAtIEZpbGUgbWV0YWRhdGEuXG4gICAqIEBwYXJhbSBldmVudCB7b2JqZWN0fSAtIFByb2dyZXNzIGV2ZW50LlxuICAgKiBAcGFyYW0gZXZlbnQudG90YWxQZXJjZW50IHtudW1iZXJ9IC0gUGVyY2VudCBvZiBmaWxlIHVwbG9hZGVkLlxuICAgKiBAcGFyYW0gZXZlbnQudG90YWxCeXRlcyB7bnVtYmVyfSAtIFRvdGFsIG51bWJlciBvZiBieXRlcyB1cGxvYWRlZCBmb3IgdGhpcyBmaWxlLlxuICAgKi8gLyoqXG4gICAqIE9wZW5zIHRoZSBwaWNrZXIgVUkuXG4gICAqIEBhbGlhcyBtb2R1bGU6cGlja1xuICAgKiBAcGFyYW0gW29wdGlvbnNdIHtvYmplY3R9XG4gICAqIEBwYXJhbSBvcHRpb25zLnJvb3RJZD1fX2ZpbGVzdGFjay1waWNrZXIge3N0cmluZ30gLSBTZXQgaWQgZm9yIFZ1ZSBhcHBsaWNhdGlvbiBtb3VudCBwb2ludFxuICAgKiBAcGFyYW0gb3B0aW9ucy5kaXNwbGF5TW9kZT1vdmVybGF5IHsnaW5saW5lJyB8ICdvdmVybGF5JyB8ICdkcm9wUGFuZSd9LSBzZXQgZGlzcGxheSBtb2RlIGZvciBwaWNrZXJcbiAgICogQHBhcmFtIG9wdGlvbnMuY29udGFpbmVyPWRvY3VtZW50LmJvZHkge3N0cmluZyB8IHF1ZXJ5U2VsZWN0b3IgfCBOb2RlfSAtIFBpY2tlciBtb3VudCBwb2ludC4gRGVmYXVsdCB2YWx1ZSBpcyBzZXQgb25seSBpbiAnb3ZlcmxheScgbW9kZVxuICAgKiBAcGFyYW0gb3B0aW9ucy5mcm9tU291cmNlcyB7c3RyaW5nW119IC0gVmFsaWQgc291cmNlcyBhcmU6XG4gICAgICAgIC0gYGxvY2FsX2ZpbGVfc3lzdGVtYCAtIF9fRGVmYXVsdF9fXG4gICAgICAgIC0gYHVybGAgLSBfX0RlZmF1bHRfX1xuICAgICAgICAtIGBpbWFnZXNlYXJjaGAgLSBfX0RlZmF1bHRfX1xuICAgICAgICAtIGBmYWNlYm9va2AgLSBfX0RlZmF1bHRfX1xuICAgICAgICAtIGBpbnN0YWdyYW1gIC0gX19EZWZhdWx0X19cbiAgICAgICAgLSBgZ29vZ2xlZHJpdmVgIC0gX19EZWZhdWx0X19cbiAgICAgICAgLSBgZHJvcGJveGAgLSBfX0RlZmF1bHRfX1xuICAgICAgICAtIGB2aWRlb2AgLSBEZXNrdG9wIG9ubHkuIE5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGluIFNhZmFyaSBhbmQgSUUuXG4gICAgICAgIC0gYGF1ZGlvYCAtIERlc2t0b3Agb25seS4gTm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgaW4gU2FmYXJpIGFuZCBJRS5cbiAgICAgICAgLSBgd2ViY2FtYCAtIERlc2t0b3Agb25seS4gTm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgaW4gU2FmYXJpIGFuZCBJRS5cbiAgICAgICAgLSBgZXZlcm5vdGVgXG4gICAgICAgIC0gYGZsaWNrcmBcbiAgICAgICAgLSBgYm94YFxuICAgICAgICAtIGBnaXRodWJgXG4gICAgICAgIC0gYGdtYWlsYFxuICAgICAgICAtIGBwaWNhc2FgXG4gICAgICAgIC0gYG9uZWRyaXZlYFxuICAgICAgICAtIGBvbmVkcml2ZWZvcmJ1c2luZXNzYFxuICAgICAgICAtIGBjbG91ZGRyaXZlYFxuICAgICAgICAtIGBjdXN0b21zb3VyY2VgIC0gQ29uZmlndXJlIHRoaXMgaW4geW91ciBhcHBsaWNhdGlvbiBzZXR0aW5ncy5cbiAgICogQHBhcmFtIG9wdGlvbnMuYWNjZXB0IHtzdHJpbmd8c3RyaW5nW119IC0gUmVzdHJpY3QgZmlsZSB0eXBlcyB0aGF0IGFyZSBhbGxvd2VkIHRvIGJlIHBpY2tlZC4gRm9ybWF0cyBhY2NlcHRlZDpcbiAgICAgICAgLSBgLnBkZmAgPC0gYW55IGZpbGUgZXh0ZW5zaW9uXG4gICAgICAgIC0gJycgPC0gbm8gZXh0ZW5zaW9uIChub3Qgc3VwcG9ydGVkIGluIGxvY2FsIGZpbGUgc291cmNlKVxuICAgICAgICAtIGBpbWFnZS9qcGVnYCA8LSBhbnkgbWltZSB0eXBlIGNvbW1vbmx5IGtub3duIGJ5IGJyb3dzZXJzXG4gICAgICAgIC0gYGltYWdlLypgIDwtIGFjY2VwdCBhbGwgdHlwZXMgb2YgaW1hZ2VzXG4gICAgICAgIC0gYHZpZGVvLypgIDwtIGFjY2VwdCBhbGwgdHlwZXMgb2YgdmlkZW8gZmlsZXNcbiAgICAgICAgLSBgYXVkaW8vKmAgPC0gYWNjZXB0IGFsbCB0eXBlcyBvZiBhdWRpbyBmaWxlc1xuICAgICAgICAtIGBhcHBsaWNhdGlvbi8qYCA8LSBhY2NlcHQgYWxsIHR5cGVzIG9mIGFwcGxpY2F0aW9uIGZpbGVzXG4gICAgICAgIC0gYHRleHQvKmAgPC0gYWNjZXB0IGFsbCB0eXBlcyBvZiB0ZXh0IGZpbGVzXG4gICAqIEBwYXJhbSBvcHRpb25zLmN1c3RvbVNvdXJjZUNvbnRhaW5lciB7c3RyaW5nfSAtIFNldCB0aGUgZGVmYXVsdCBjb250YWluZXIgZm9yIHlvdXIgY3VzdG9tIHNvdXJjZS5cbiAgICogQHBhcmFtIG9wdGlvbnMuY3VzdG9tU291cmNlUGF0aCB7c3RyaW5nfSAtIFNldCB0aGUgZGVmYXVsdCBwYXRoIGZvciB5b3VyIGN1c3RvbSBzb3VyY2UgY29udGFpbmVyLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5jb25jdXJyZW5jeT00IHtudW1iZXJ9IC0gTWF4IG51bWJlciBvZiBmaWxlcyB0byB1cGxvYWQgY29uY3VycmVudGx5LlxuICAgKiBAcGFyYW0gb3B0aW9ucy5sYW5nPWVuIHtzdHJpbmd9IC0gU2V0cyBsb2NhbGUuIEFjY2VwdHM6IGBjYWAsIGBkYWAsIGBkZWAsIGBlbmAsIGBlc2AsIGBmcmAsIGBoZWAsIGBpdGAsIGBqYWAsIGBrb2AsIGBubGAsIGBub2AsIGBwbGAsIGBwdGAsIGBzdmAsIGBydWAsIGB2aWAsIGB6aGAuXG4gICAqIEBwYXJhbSBvcHRpb25zLm1pbkZpbGVzPTEge251bWJlcn0gLSBNaW5pbXVtIG51bWJlciBvZiBmaWxlcyByZXF1aXJlZCB0byBzdGFydCB1cGxvYWRpbmcuXG4gICAqIEBwYXJhbSBvcHRpb25zLm1heEZpbGVzPTEge251bWJlcn0gLSBNYXhpbXVtIG51bWJlciBvZiBmaWxlcyBhbGxvd2VkIHRvIHVwbG9hZC5cbiAgICogQHBhcmFtIG9wdGlvbnMubWF4U2l6ZSB7bnVtYmVyfSAtIFJlc3RyaWN0IHNlbGVjdGVkIGZpbGVzIHRvIGEgbWF4aW11bSBudW1iZXIgb2YgYnl0ZXMuIChlLmcuIGAxMCAqIDEwMjQgKiAxMDI0YCBmb3IgMTBNQiBsaW1pdCkuXG4gICAqIEBwYXJhbSBvcHRpb25zLnN0YXJ0VXBsb2FkaW5nV2hlbk1heEZpbGVzUmVhY2hlZD1mYWxzZSB7Ym9vbGVhbn0gLSBXaGV0aGVyIHRvIHN0YXJ0IHVwbG9hZGluZyBhdXRvbWF0aWNhbGx5IHdoZW4gbWF4RmlsZXMgaXMgaGl0LlxuICAgKiBAcGFyYW0gb3B0aW9ucy5oaWRlV2hlblVwbG9hZGluZz1mYWxzZSB7Ym9vbGVhbn0gLSBIaWRlIHRoZSBwaWNrZXIgVUkgb25jZSB1cGxvYWRpbmcgYmVnaW5zLlxuICAgKiBAcGFyYW0gb3B0aW9ucy51cGxvYWRJbkJhY2tncm91bmQ9dHJ1ZSB7Ym9vbGVhbn0gLSBTdGFydCB1cGxvYWRpbmcgaW1tZWRpYXRlbHkgb24gZmlsZSBzZWxlY3Rpb24uXG4gICAqIEBwYXJhbSBvcHRpb25zLmRpc2FibGVTdG9yYWdlS2V5PWZhbHNlIHtib29sZWFufSAtIFdoZW4gdHJ1ZSByZW1vdmVzIHRoZSBoYXNoIHByZWZpeCBvbiBzdG9yZWQgZmlsZXMuXG4gICAqIEBwYXJhbSBvcHRpb25zLmRpc2FibGVUcmFuc2Zvcm1lcj1mYWxzZSB7Ym9vbGVhbn0gLSBXaGVuIHRydWUgcmVtb3ZlcyBhYmlsaXR5IHRvIGVkaXQgaW1hZ2VzLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5kaXNhYmxlVGh1bWJuYWlscz1mYWxzZSB7Ym9vbGVhbn0gLSBEaXNhYmxlcyBsb2NhbCBpbWFnZSB0aHVtYm5haWwgcHJldmlld3MgaW4gdGhlIHN1bW1hcnkgc2NyZWVuLlxuICAgKiBAcGFyYW0gb3B0aW9ucy52aWRlb1Jlc29sdXRpb249NjQweDQ4MCB7c3RyaW5nfSAtIFNldHMgdGhlIHJlc29sdXRpb24gb2YgcmVjb3JkZWQgdmlkZW8uIE9uZSBvZiBcIjMyMHgyNDBcIiwgXCI2NDB4NDgwXCIgb3IgXCIxMjgweDcyMFwiLlxuICAgKiBAcGFyYW0gb3B0aW9ucy50cmFuc2Zvcm1hdGlvbnMge29iamVjdH0gLSBTcGVjaWZ5IG9wdGlvbnMgZm9yIGltYWdlcyBwYXNzZWQgdG8gdGhlIGNyb3AgVUkuXG4gICAqIEBwYXJhbSBvcHRpb25zLnRyYW5zZm9ybWF0aW9ucy5jcm9wPXRydWUge2Jvb2xlYW58b2JqZWN0fSAtIEVuYWJsZSBjcm9wLlxuICAgKiBAcGFyYW0gb3B0aW9ucy50cmFuc2Zvcm1hdGlvbnMuY3JvcC5hc3BlY3RSYXRpbyB7bnVtYmVyfSAtIE1haW50YWluIGFzcGVjdCByYXRpbyBmb3IgY3JvcCBzZWxlY3Rpb24uIChlLmcuIDE2Lzkgb3IgNC8zKVxuICAgKiBAcGFyYW0gb3B0aW9ucy50cmFuc2Zvcm1hdGlvbnMuY3JvcC5mb3JjZSB7Ym9vbGVhbn0gLSBGb3JjZSBhbGwgaW1hZ2VzIHRvIGJlIGNyb3BwZWQgYmVmb3JlIHVwbG9hZGluZy5cbiAgICogQHBhcmFtIG9wdGlvbnMudHJhbnNmb3JtYXRpb25zLmNpcmNsZT10cnVlIHtib29sZWFufSAtIEVuYWJsZSBjaXJjbGUgY3JvcC4gX19EaXNhYmxlZCBpZiBgY3JvcC5hc3BlY3RSYXRpb2AgaXMgZGVmaW5lZCBhbmQgbm90IDEuIENvbnZlcnRzIHRvIFBORy5fX1xuICAgKiBAcGFyYW0gb3B0aW9ucy50cmFuc2Zvcm1hdGlvbnMucm90YXRlPXRydWUge2Jvb2xlYW59IC0gRW5hYmxlIGltYWdlIHJvdGF0aW9uLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5pbWFnZURpbSB7bnVtYmVyW119IC0gU3BlY2lmeSBpbWFnZSBkaW1lbnNpb25zLiBlLmcuIGBbODAwLCA2MDBdYC4gT25seSBmb3IgSlBFRywgUE5HLCBhbmQgQk1QIGZpbGVzLlxuICAgIExvY2FsIGFuZCBjcm9wcGVkIGltYWdlcyB3aWxsIGJlIHJlc2l6ZWQgKHVwc2NhbGVkIG9yIGRvd25zY2FsZWQpIHRvIHRoZSBzcGVjaWZpZWQgZGltZW5zaW9ucyBiZWZvcmUgdXBsb2FkaW5nLlxuICAgIFRoZSBvcmlnaW5hbCBoZWlnaHQgdG8gd2lkdGggcmF0aW8gaXMgbWFpbnRhaW5lZC4gVG8gcmVzaXplIGFsbCBpbWFnZXMgYmFzZWQgb24gdGhlIHdpZHRoLCBzZXQgW3dpZHRoLCBudWxsXSwgZS5nLiBbODAwLCBudWxsXS5cbiAgICBGb3IgdGhlIGhlaWdodCBzZXQgW251bGwsIGhlaWdodF0sIGUuZy4gW251bGwsIDYwMF0uXG4gICAqIEBwYXJhbSBvcHRpb25zLmltYWdlTWF4IHtudW1iZXJbXX0gLSBTcGVjaWZ5IG1heGltdW0gaW1hZ2UgZGltZW5zaW9ucy4gZS5nLiBgWzgwMCwgNjAwXWAuIE9ubHkgZm9yIEpQRUcsIFBORywgYW5kIEJNUCBmaWxlcy5cbiAgICBJbWFnZXMgYmlnZ2VyIHRoYW4gdGhlIHNwZWNpZmllZCBkaW1lbnNpb25zIHdpbGwgYmUgcmVzaXplZCB0byB0aGUgbWF4aW11bSBzaXplIHdoaWxlIG1haW50YWluaW5nIHRoZSBvcmlnaW5hbCBhc3BlY3QgcmF0aW8uXG4gICAgVGhlIG91dHB1dCB3aWxsIG5vdCBiZSBleGFjdGx5IDgwMHg2MDAgdW5sZXNzIHRoZSBpbWFnZU1heCBtYXRjaGVzIHRoZSBhc3BlY3QgcmF0aW8gb2YgdGhlIG9yaWdpbmFsIGltYWdlLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5pbWFnZU1pbiB7bnVtYmVyW119IC0gU3BlY2lmeSBtaW5pbXVtIGltYWdlIGRpbWVuc2lvbnMuIGUuZy4gYFs4MDAsIDYwMF1gLiBPbmx5IGZvciBKUEVHLCBQTkcsIGFuZCBCTVAgZmlsZXMuXG4gICAgSW1hZ2VzIHNtYWxsZXIgdGhhbiB0aGUgc3BlY2lmaWVkIGRpbWVuc2lvbnMgd2lsbCBiZSB1cHNjYWxlZCB0byB0aGUgbWluaW11bSBzaXplIHdoaWxlIG1haW50YWluaW5nIHRoZSBvcmlnaW5hbCBhc3BlY3QgcmF0aW8uXG4gICAgVGhlIG91dHB1dCB3aWxsIG5vdCBiZSBleGFjdGx5IDgwMHg2MDAgdW5sZXNzIHRoZSBpbWFnZU1pbiBtYXRjaGVzIHRoZSBhc3BlY3QgcmF0aW8gb2YgdGhlIG9yaWdpbmFsIGltYWdlLlxuICAgKiBAcGFyYW0gb3B0aW9ucy51cGxvYWRDb25maWcge29iamVjdH0gLSBPcHRpb25zIGZvciBsb2NhbCBmaWxlIHVwbG9hZHMuXG4gICAqIEBwYXJhbSBvcHRpb25zLnVwbG9hZENvbmZpZy5wYXJ0U2l6ZT02MjkxNDU2IHtudW1iZXJ9IC0gU2l6ZSBvZiBlYWNoIHVwbG9hZGVkIHBhcnQgKGRlZmF1bHRzIHRvIDZNQikuIFRoaXMgaXMgb3ZlcnJpZGRlbiB3aGVuIGludGVsbGlnZW50IGluZ2VzdGlvbiBpcyBlbmFibGVkLlxuICAgKiBAcGFyYW0gb3B0aW9ucy51cGxvYWRDb25maWcuY29uY3VycmVuY3k9MyB7bnVtYmVyfSAtIE1heCBudW1iZXIgb2YgY29uY3VycmVudCBwYXJ0cyB1cGxvYWRpbmcgKGNodW5rcyBvZiBmaWxlcywgbm90IHdob2xlIGZpbGVzKS5cbiAgICogQHBhcmFtIG9wdGlvbnMudXBsb2FkQ29uZmlnLmludGVsbGlnZW50IHtib29sZWFufHN0cmluZ30gLSBFbmFibGUvZGlzYWJsZSBpbnRlbGxpZ2VudCBpbmdlc3Rpb24uIElmIHRydXRoeSB0aGVuIGludGVsbGlnZW50IGluZ2VzdGlvbiBtdXN0IGJlIGVuYWJsZWQgaW4geW91ciBGaWxlc3RhY2sgYXBwbGljYXRpb24uIFBhc3NpbmcgdHJ1ZS9mYWxzZSB0b2dnbGVzIHRoZSBnbG9iYWwgaW50ZWxsaWdlbnQgZmxvdyAoYWxsIHBhcnRzIGFyZSBjaHVua2VkIGFuZCBjb21taXR0ZWQpLiBQYXNzaW5nIGAnZmFsbGJhY2snYCB3aWxsIG9ubHkgdXNlIEZJSSB3aGVuIG5ldHdvcmsgY29uZGl0aW9ucyBtYXkgcmVxdWlyZSBpdCAob25seSBmYWlsaW5nIHBhcnRzIHdpbGwgYmUgY2h1bmtlZCkuXG4gICAqIEBwYXJhbSBvcHRpb25zLnVwbG9hZENvbmZpZy5pbnRlbGxpZ2VudENodW5rU2l6ZSB7bnVtYmVyfSAtIFNldCB0aGUgZGVmYXVsdCBjaHVuayBzaXplIGZvciBpbnRlbGxpZ2VudCBwYXJ0IHVwbG9hZHMuIERlZmF1bHRzIHRvIDhNQiBvbiBkZXNrdG9wLCAxTUIgb24gbW9iaWxlLlxuICAgKiBAcGFyYW0gb3B0aW9ucy51cGxvYWRDb25maWcucmV0cnk9MTAge251bWJlcn0gLSBOdW1iZXIgb2YgdGltZXMgdG8gcmV0cnkgYSBmYWlsZWQgcGFydCBvZiB0aGUgZmxvdy5cbiAgICogQHBhcmFtIG9wdGlvbnMudXBsb2FkQ29uZmlnLnJldHJ5RmFjdG9yPTIge251bWJlcn0gLSBCYXNlIGZhY3RvciBmb3IgZXhwb25lbnRpYWwgYmFja29mZi5cbiAgICogQHBhcmFtIG9wdGlvbnMudXBsb2FkQ29uZmlnLnRpbWVvdXQ9MTIwMDAwIHtudW1iZXJ9IC0gVGltZSBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgY2FuY2VsbGluZyByZXF1ZXN0cy5cbiAgICogQHBhcmFtIG9wdGlvbnMudXBsb2FkQ29uZmlnLm9uUmV0cnkge21vZHVsZTpmaWxlc3RhY2t+cmV0cnlDYWxsYmFja30gLSBDYWxsZWQgd2hlbiBhIHJldHJ5IGlzIGluaXRpYXRlZC5cbiAgICogQHBhcmFtIG9wdGlvbnMuc3RvcmVUbyB7b2JqZWN0fSAtIE9wdGlvbnMgZm9yIGZpbGUgc3RvcmFnZS5cbiAgICogQHBhcmFtIG9wdGlvbnMuc3RvcmVUby5sb2NhdGlvbiB7c3RyaW5nfSAtIE9uZSBvZiBgczNgLCBgZ2NzYCwgYHJhY2tzcGFjZWAsIGBhenVyZWAsIGBkcm9wYm94YC5cbiAgICogQHBhcmFtIG9wdGlvbnMuc3RvcmVUby5yZWdpb24ge3N0cmluZ30gLSBWYWxpZCBTMyByZWdpb24gZm9yIHRoZSBzZWxlY3RlZCBTMyBidWNrZXQuIF9fUzMgb25seV9fLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5zdG9yZVRvLmNvbnRhaW5lciB7c3RyaW5nfVxuICAgKiBAcGFyYW0gb3B0aW9ucy5zdG9yZVRvLnBhdGgge3N0cmluZ31cbiAgICogQHBhcmFtIG9wdGlvbnMuc3RvcmVUby5hY2Nlc3Mge3N0cmluZ30gLSBPbmUgb2YgYHB1YmxpY2Agb3IgYHByaXZhdGVgLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5vbkZpbGVTZWxlY3RlZCB7bW9kdWxlOnBpY2t+b25GaWxlU2VsZWN0ZWR9IC0gQ2FsbGVkIHdoZW5ldmVyIHVzZXIgc2VsZWN0cyBhIGZpbGUuXG4gICAqIEBwYXJhbSBvcHRpb25zLm9uRmlsZVVwbG9hZFN0YXJ0ZWQge21vZHVsZTpwaWNrfm9uRmlsZVVwbG9hZFN0YXJ0ZWR9IC0gQ2FsbGVkIHdoZW4gYSBmaWxlIGJlZ2lucyB1cGxvYWRpbmcuXG4gICAqIEBwYXJhbSBvcHRpb25zLm9uRmlsZVVwbG9hZFByb2dyZXNzIHttb2R1bGU6cGlja35vbkZpbGVVcGxvYWRQcm9ncmVzc30gLSBDYWxsZWQgZHVyaW5nIG11bHRpLXBhcnQgdXBsb2FkIHByb2dyZXNzIGV2ZW50cy4gX19Mb2NhbCBmaWxlcyBvbmx5X18uXG4gICAqIEBwYXJhbSBvcHRpb25zLm9uRmlsZVVwbG9hZEZpbmlzaGVkIHttb2R1bGU6cGlja35vbkZpbGVVcGxvYWRGaW5pc2hlZH0gLSBDYWxsZWQgd2hlbiBhIGZpbGUgaXMgZG9uZSB1cGxvYWRpbmcuXG4gICAqIEBwYXJhbSBvcHRpb25zLm9uRmlsZVVwbG9hZEZhaWxlZCB7bW9kdWxlOnBpY2t+b25GaWxlVXBsb2FkRmFpbGVkfSAtIENhbGxlZCB3aGVuIHVwbG9hZGluZyBhIGZpbGUgZmFpbHMuXG4gICAqIEBwYXJhbSBvcHRpb25zLm9uVXBsb2FkU3RhcnRlZCB7bW9kdWxlOnBpY2t+b25VcGxvYWRTdGFydGVkfSAtIENhbGxlZCB3aGVuIHVwbG9hZGluZyBzdGFydHMgKHVzZXIgaW5pdGlhdGVzIHVwbG9hZGluZykuXG4gICAqIEBwYXJhbSBvcHRpb25zLm9uT3BlbiB7ZnVuY3Rpb259IC0gQ2FsbGVkIHdoZW4gdGhlIFVJIGlzIG1vdW50ZWQuIEFzIGEgZmlyc3QgYXJndW1lbnQgYXBwbGljYXRpb24gY29tcG9uZW50IGlzIHBhc3NlZFxuICAgKiBAcGFyYW0gb3B0aW9ucy5vbkNhbmNlbCB7ZnVuY3Rpb259IC0gQ2FsbGVkIHdoZW4gdXBsb2FkcyBhcmUgY2FuY2VsZWQgYnkgdXNlci4gQXMgYSBmaXJzdCBhcmd1bWVudCBhbGwgc2VsZWN0ZWQgZmlsZXMgYXJlIHBhc3NlZFxuICAgKiBAcGFyYW0gb3B0aW9ucy5vbkNsb3NlIHtmdW5jdGlvbn0gLSBDYWxsZWQgYWZ0ZXIgdGhlIHBpY2tlciBpbnN0YW5jZSBpcyBkZXN0cm95ZWRcbiAgICogQHBhcmFtIG9wdGlvbnMub25VcGxvYWREb25lIHtmdW5jdGlvbn0gLSBDYWxsZWQgd2hlbiBhbGwgdXBsb2FkcyBhcmUgZmluaXNoZWRcbiAgICogQHBhcmFtIG9wdGlvbnMuYWxsb3dNYW51YWxSZXRyeT1mYWxzZSB7Ym9vbGVhbn0gLSBQcmV2ZW50IG1vZGFsIGNsb3NlIG9uIHVwbG9hZCBmYWlsdXJlIGFuZCBhbGxvdyB1c2VycyB0byByZXRyeS5cbiAgICogQHBhcmFtIG9wdGlvbnMuZ2xvYmFsRHJvcFpvbmUge2Jvb2xlYW59IC0gVG9nZ2xlIHRoZSBkcm9wIHpvbmUgdG8gYmUgYWN0aXZlIG9uIGFsbCB2aWV3cy4gRGVmYXVsdCBpcyBhY3RpdmUgb25seSBvbiBsb2NhbCBmaWxlIHNvdXJjZS5cbiAgICogQHBhcmFtIG9wdGlvbnMuZXhwb3NlT3JpZ2luYWxGaWxlIHtib29sZWFufSAtIFdoZW4gdHJ1ZSB0aGUgb3JpZ2luYWxGaWxlIG1ldGFkYXRhIHdpbGwgYmUgdGhlIGFjdHVhbCBGaWxlIG9iamVjdCBpbnN0ZWFkIG9mIGEgUE9KTy5cbiAgICogQHBhcmFtIG9wdGlvbnMubW9kYWxTaXplIHtudW1iZXJbXX0gLSBTcGVjaWZ5IFt3aWR0aCwgaGVpZ2h0XSBpbiBwaXhlbHMgb2YgdGhlIGRlc2t0b3AgbW9kYWwuXG4gICAqIEBwYXJhbSBvcHRpb25zLmRyb3BQYW5lIHtvYmplY3R9IC0gQ29uZmlndXJlIHRoZSBwaWNrZXIgZm9yIGRyb3AgcGFuZSBtb2RlLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5kcm9wUGFuZS5pZCB7c3RyaW5nIHwgcXVlcnlTZWxlY3Rvcn0gLSBAZGVwcmVjYXRlZCAodXNlIHtjb250YWluZXI6ICdJRCcsIGRpc3BsYXlNb2RlOiAnZHJvcFBhbmUnfSkgIF9fUmVxdWlyZWRfXzogSWQgZm9yIHRoZSBET00gbm9kZSB0aGF0IHdpbGwgbW91bnQgdGhlIGRyb3AgcGFuZS5cbiAgICogQHBhcmFtIG9wdGlvbnMuZHJvcFBhbmUub3ZlcmxheT10cnVlIHtib29sZWFufSAtIFRvZ2dsZSB0aGUgZnVsbC1wYWdlIGRyb3Agem9uZSBvdmVybGF5LlxuICAgKiBAcGFyYW0gb3B0aW9ucy5kcm9wUGFuZS5vbkRyYWdFbnRlciB7ZnVuY3Rpb259IC0gQ2FsbGJhY2sgZm9yIGRyYWdlbnRlciBldmVudHMuXG4gICAqIEBwYXJhbSBvcHRpb25zLmRyb3BQYW5lLm9uRHJhZ0xlYXZlIHtmdW5jdGlvbn0gLSBDYWxsYmFjayBmb3IgZHJhZ2xlYXZlIGV2ZW50cy5cbiAgICogQHBhcmFtIG9wdGlvbnMuZHJvcFBhbmUub25EcmFnT3ZlciB7ZnVuY3Rpb259IC0gQ2FsbGJhY2sgZm9yIGRyYWdvdmVyIGV2ZW50cy5cbiAgICogQHBhcmFtIG9wdGlvbnMuZHJvcFBhbmUub25Ecm9wIHtmdW5jdGlvbn0gLSBDYWxsYmFjayBmb3IgZHJvcCBldmVudHMuXG4gICAqIEBwYXJhbSBvcHRpb25zLmRyb3BQYW5lLm9uU3VjY2VzcyB7ZnVuY3Rpb259IC0gQ2FsbGJhY2sgdGhhdCBpcyBwYXNzZWQgYSBsaXN0IG9mIHVwbG9hZGVkIGZpbGUgbWV0YWRhdGEuXG4gICAqIEBwYXJhbSBvcHRpb25zLmRyb3BQYW5lLm9uRXJyb3Ige2Z1bmN0aW9ufSAtIENhbGxiYWNrIHRoYXQgaXMgcGFzc2VkIGEgbGlzdCBvZiBmYWlsZWQgZmlsZSBtZXRhZGF0YS5cbiAgICogQHBhcmFtIG9wdGlvbnMuZHJvcFBhbmUub25Qcm9ncmVzcyB7ZnVuY3Rpb259IC0gQ2FsbGJhY2sgdGhhdCBpcyBwYXNzZWQgYSBudW1iZXIgcmVwcmVzZW50aW5nIHRvdGFsIHByb2dyZXNzIHBlcmNlbnQgZm9yIGFsbCBkcm9wcGVkIGZpbGVzLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5kcm9wUGFuZS5vbkNsaWNrIHtmdW5jdGlvbn0gLSBDYWxsYmFjayBmb3IgZHJvcCBwYW5lIGNsaWNrIGV2ZW50LlxuICAgKiBAcGFyYW0gb3B0aW9ucy5kcm9wUGFuZS5kaXNhYmxlQ2xpY2sge2Jvb2xlYW59IC0gRGlzYWJsZSBjbGljayBldmVudHMgb24gZHJvcCBwYW5lLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5kcm9wUGFuZS5zaG93SWNvbj10cnVlIHtib29sZWFufSAtIFRvZ2dsZSBpY29uIGVsZW1lbnQgaW4gZHJvcCBwYW5lLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5kcm9wUGFuZS5zaG93UHJvZ3Jlc3M9dHJ1ZSB7Ym9vbGVhbn0gLSBUb2dnbGUgdXBsb2FkIHByb2dyZXNzIGRpc3BsYXkuXG4gICAqIEBwYXJhbSBvcHRpb25zLmRyb3BQYW5lLmN1c3RvbVRleHQge3N0cmluZ30gLSBDdXN0b21pemUgdGhlIHRleHQgY29udGVudCBpbiB0aGUgZHJvcCBwYW5lLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5kcm9wUGFuZS5jcm9wRmlsZXMge2Jvb2xlYW59IC0gVG9nZ2xlIHRoZSBjcm9wIFVJIGZvciBkcm9wcGVkIGZpbGVzLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5jdXN0b21BdXRoVGV4dCB7b2JqZWN0fSAtIEN1c3RvbWl6ZSB0ZXh0IG9uIHRoZSBjbG91ZCBhdXRoZW50aWNhdGlvbiBzY3JlZW4uIFVzZSBjbG91ZCBwcm92aWRlciBuYW1lIG9yICdkZWZhdWx0JyB0byBjdXN0b21pemUgdGV4dCBmb3IgdGhlIGFsbCBjbG91ZCBwcm92aWRlcnMuXG4gICAqIEBwYXJhbSBvcHRpb25zLnVzZVNlbnRyeUJyZWFkY3J1bWJzPXRydWUge2Jvb2xlYW59IC0gVXNlIHNlbnRyeSBicmVhZGNydW1icyBhbmQgc2VuZCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHBpY2tlciBlcnJvcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQaWNrZXJ9XG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGNvbmZpZyA9IHtcbiAgICogICBvblVwbG9hZERvbmU6IHJlcyA9PiBjb25zb2xlLmxvZyhyZXMpLFxuICAgKiAgIG1heEZpbGVzOiAyMCxcbiAgICogfTtcbiAgICogY29uc3QgcGlja2VyID0gbmV3IFBpY2tlcihhcGlDbGllbnQsIGNvbmZpZyk7XG4gICAqIHBpY2tlci5vcGVuKCk7XG4gICAqXG4gICAqL3ZhciBQaWNrZXI9LyojX19QVVJFX18qL2Z1bmN0aW9uKCl7ZnVuY3Rpb24gUGlja2VyKGFwaUNsaWVudCxwaWNrZXJDb25maWcpe19jbGFzc0NhbGxDaGVjayh0aGlzLFBpY2tlcik7bG9nJDMoJ1N0YXJ0aW5nIHBpY2tlciB2MS4xMi4wIHdpdGggY29uZmlnOicscGlja2VyQ29uZmlnKTt0aGlzLmFwcD1udWxsO3RoaXMuX211dGF0aW9uT2JzZXJ2ZXI9bnVsbDt0aGlzLmFwaUNsaWVudD1hcGlDbGllbnQ7dGhpcy5jb25maWc9cGFyc2VDb25maWcoYWRkQ29uZmlnRGVmYXVsdHMocGlja2VyQ29uZmlnLEVOVikpO3RoaXMubG9hZENzcz10aGlzLl9sb2FkQ3NzTWF5YmUoKTsvKipcbiAgICAgICAqIEBQcml2YXRlXG4gICAgICAgKi90aGlzLl9vblVwbG9hZERvbmU9dGhpcy5jb25maWcub25VcGxvYWREb25lOy8qKlxuICAgICAgICogQFByaXZhdGVcbiAgICAgICAqL3RoaXMuX29uT3Blbj10aGlzLmNvbmZpZy5vbk9wZW47LyoqXG4gICAgICAgKiBAUHJpdmF0ZVxuICAgICAgICovdGhpcy5fb25DYW5jZWw9dGhpcy5jb25maWcub25DYW5jZWw7LyoqXG4gICAgICAgKiBAUHJpdmF0ZVxuICAgICAgICovdGhpcy5fb25DbG9zZT10aGlzLmNvbmZpZy5vbkNsb3NlOy8vIGluaXRpYWxpemUgdnVlIGFwcCBhbmQgc2V0dXAgY29udGFpbmVyXG50aGlzLl9pbml0VnVlKCk7dGhpcy5faW5pdENvbnRhaW5lcigpO3RoaXMuX2luaXRNdXRhdGlvbk9ic2VydmVyKCk7fS8qKlxuICAgICAqIE9wZW5zIHRoZSBwaWNrZXIgVUlcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGluaXRpYWxTdGF0ZU92ZXJyaWRlc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IG9yIG1heWJlIFJ4SlMgc3ViamVjdFxuICAgICAqL19jcmVhdGVDbGFzcyhQaWNrZXIsW3trZXk6XCJvcGVuXCIsdmFsdWU6ZnVuY3Rpb24gb3Blbigpe3ZhciBfdGhpczM4PXRoaXM7dmFyIGluaXRpYWxTdGF0ZU92ZXJyaWRlcz1hcmd1bWVudHMubGVuZ3RoPjAmJmFyZ3VtZW50c1swXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMF06e307aWYodGhpcy5hcHApe2NvbnNvbGUud2FybignUGlja2VyT3BlbjogUGlja2VyIGlzIGFscmVhZHkgb3BlbicpO3JldHVybiBQcm9taXNlLnJlc29sdmUoKTt9cmV0dXJuIHRoaXMubG9hZENzcy50aGVuKGZ1bmN0aW9uKCl7dmFyIG9uRG9uZT1mdW5jdGlvbiBvbkRvbmUocmVzKXtpZihfdGhpczM4LmFwcCl7aWYoX3RoaXMzOC5jb25maWcuZGlzcGxheU1vZGU9PT1ESVNQTEFZX01PREVfSU5MSU5FKXtfdGhpczM4LmFwcC4kc3RvcmUuY29tbWl0KCdHT19CQUNLX1dJVEhfUk9VVEUnKTt9aWYoX3RoaXMzOC5jb25maWcuZGlzcGxheU1vZGU9PT1ESVNQTEFZX01PREVfT1ZFUkxBWSl7X3RoaXMzOC5jbG9zZSgpO319aWYoX3RoaXMzOC5fb25VcGxvYWREb25lKXtfdGhpczM4Ll9vblVwbG9hZERvbmUocmVzKTt9fTt2YXIgb25DYW5jZWw9X3RoaXMzOC5fb25DYW5jZWw7X3RoaXMzOC5fY3JlYXRlUGlja2VyKGluaXRpYWxTdGF0ZU92ZXJyaWRlcyxvbkRvbmUsb25DYW5jZWwpO30pO30vKipcbiAgICAgKiBPcGVucyB0aGUgcGlja2VyIFVJIGZvciBjcm9wcGluZyBmaWxlc1xuICAgICAqIEBwYXJhbSAge2ZpbGVzfSBBcnJheSBvZiBCbG9icyBvciBVUkxzXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi99LHtrZXk6XCJjcm9wXCIsdmFsdWU6ZnVuY3Rpb24gY3JvcChmaWxlcyl7aWYoW0RJU1BMQVlfTU9ERV9PVkVSTEFZLERJU1BMQVlfTU9ERV9JTkxJTkVdLmluZGV4T2YodGhpcy5jb25maWcuZGlzcGxheU1vZGUpPDApe3Rocm93IG5ldyBFcnJvcignUGlja2VyQ3JvcDogeW91IGNhbiBvbmx5IHVzZSBjcm9wIGluIG92ZXJsYXkgYW5kIGlubGluZSBkaXNwbGF5IG1vZGVzJyk7fXZhciBmcztpZih0eXBlb2YgZmlsZXM9PT0nc3RyaW5nJyl7ZnM9W2ZpbGVzXTt9ZWxzZSBpZihmaWxlcyYmZmlsZXMubGVuZ3RoKXtmcz1maWxlczt9ZWxzZXt0aHJvdyBuZXcgRXJyb3IoJ1BpY2tlckNyb3A6IG5vIGZpbGVzIGZvdW5kJyk7fXZhciBzdGF0ZT17Y29uZmlnOl9vYmplY3RTcHJlYWQoe30sdGhpcy5jb25maWcse2Nyb3BGaWxlczpmcyxoaWRlTW9kYWxXaGVuVXBsb2FkaW5nOnRydWUsZnJvbVNvdXJjZXM6W10sdXBsb2FkSW5CYWNrZ3JvdW5kOmZhbHNlLG1heEZpbGVzOmZzLmxlbmd0aCxzdGFydFVwbG9hZGluZ1doZW5NYXhGaWxlc1JlYWNoZWQ6ZmFsc2UsZGlzYWJsZVRyYW5zZm9ybWVyOmZhbHNlLHRyYW5zZm9ybWF0aW9uczpfb2JqZWN0U3ByZWFkKHt9LHRoaXMuY29uZmlnLnRyYW5zZm9ybWF0aW9ucyx7Y3JvcDpfb2JqZWN0U3ByZWFkKHt9LHRoaXMuY29uZmlnLnRyYW5zZm9ybWF0aW9ucy5jcm9wLHtmb3JjZTp0cnVlfSl9KX0pfTtpZih0aGlzLmNvbmZpZy50cmFuc2Zvcm1hdGlvbnMmJnR5cGVvZiB0aGlzLmNvbmZpZy50cmFuc2Zvcm1hdGlvbnMuY3JvcD09PSdib29sZWFuJyYmIXRoaXMuY29uZmlnLnRyYW5zZm9ybWF0aW9ucy5jcm9wKXtkZWxldGUgc3RhdGUuY29uZmlnLnRyYW5zZm9ybWF0aW9ucy5jcm9wO31yZXR1cm4gdGhpcy5vcGVuKHN0YXRlKTt9LyoqXG4gICAgICogRGVzdHJveSBwaWNrZXIgaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL30se2tleTpcImNsb3NlXCIsdmFsdWU6ZnVuY3Rpb24gY2xvc2UoKXtpZighdGhpcy5hcHApe2NvbnNvbGUud2FybignUGlja2VyQ2xvc2U6IFBpY2tlciBpcyBhbHJlYWR5IGNsb3NlZCcpO3JldHVybjt9dGhpcy5hcHAuJHJvb3QuJGRlc3Ryb3koKTt0aGlzLmFwcD1udWxsO30vKipcbiAgICAgKiBDYW5jZWxzIGFsbCB1cGxvYWRzIG9uIHBpY2tlclxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovfSx7a2V5OlwiY2FuY2VsXCIsdmFsdWU6ZnVuY3Rpb24gY2FuY2VsKCl7aWYoIXRoaXMuYXBwKXtjb25zb2xlLndhcm4oJ1BpY2tlckNhbmNlbDogUGlja2VyIGlzIGFscmVhZHkgY2xvc2VkJyk7cmV0dXJuO310aGlzLmFwcC4kc3RvcmUuZGlzcGF0Y2goJ2NhbmNlbFBpY2snKTt9LyoqXG4gICAgICogU2V0dXAgVnVlIGFwcGxpY2F0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL30se2tleTpcIl9pbml0VnVlXCIsdmFsdWU6ZnVuY3Rpb24gX2luaXRWdWUoKXsvLyBWdWUgcGx1Z2luc1xuLy8gRXh0ZW5kIGNvbmZpZ3VyZWQgbGFuZ3VhZ2Ugb2JqZWN0IHdpdGggY3VzdG9tVGV4dCBvYmplY3RcbnZhciBfdGhpcyRjb25maWc9dGhpcy5jb25maWcsY3VzdG9tVGV4dD1fdGhpcyRjb25maWcuY3VzdG9tVGV4dCxsYW5nPV90aGlzJGNvbmZpZy5sYW5nO3ZhciBsYW5nT2JqPWxhbmd1YWdlc1tsYW5nXTt2YXIgZXh0ZW5kZWRMYW5ndWFnZXM9X29iamVjdFNwcmVhZCh7fSxsYW5ndWFnZXMsX2RlZmluZVByb3BlcnR5KHt9LGxhbmcsX29iamVjdFNwcmVhZCh7fSxsYW5nT2JqLHt9LGN1c3RvbVRleHQpKSk7VnVlLnVzZShWdWVUcmFuc2xhdGUpO1Z1ZS5sb2NhbGVzKGV4dGVuZGVkTGFuZ3VhZ2VzKTtWdWUudXNlKFZ1ZVNlc3Npb25TdG9yYWdlKTt9LyoqXG4gICAgICogU2V0dXAgcGlja2VyIGNvbnRhaW5lclxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi99LHtrZXk6XCJfaW5pdENvbnRhaW5lclwiLHZhbHVlOmZ1bmN0aW9uIF9pbml0Q29udGFpbmVyKCl7dGhpcy5fY29tcG9uZW50PXRoaXMuY29uZmlnLmRpc3BsYXlNb2RlPT09RElTUExBWV9NT0RFX0RST1BQQU5FP0Ryb3BQYW5lOkFwcDt0aGlzLl9jb250YWluZXI9dGhpcy5fZ2V0RWxlbWVudCh0aGlzLmNvbmZpZy5jb250YWluZXIsdGhpcy5jb25maWcuZGlzcGxheU1vZGU9PT1ESVNQTEFZX01PREVfT1ZFUkxBWSl8fGRvY3VtZW50LmJvZHk7fS8qKlxuICAgICAqIElmIHVzZXIgcmVtb3ZlcyBub2RlIHdpdGggYXBwIHdlIG5lZWQgdG8gZGVzdHJveSBhbGwgZXZlbnRzIGNvbm5lY3RlZCB3aXRoIGl0XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHZvaWRcbiAgICAgKi99LHtrZXk6XCJfaW5pdE11dGF0aW9uT2JzZXJ2ZXJcIix2YWx1ZTpmdW5jdGlvbiBfaW5pdE11dGF0aW9uT2JzZXJ2ZXIoKXt2YXIgX3RoaXMzOT10aGlzO3ZhciBNdXRhdGlvbk9ic2VydmVyPXdpbmRvdy5NdXRhdGlvbk9ic2VydmVyfHx3aW5kb3cuV2ViS2l0TXV0YXRpb25PYnNlcnZlcnx8d2luZG93Lk1vek11dGF0aW9uT2JzZXJ2ZTtpZighTXV0YXRpb25PYnNlcnZlcil7cmV0dXJuO310aGlzLl9tdXRhdGlvbk9ic2VydmVyPW5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKGV2KXt2YXIgbXV0YXRpb249ZXZbMF07aWYoIW11dGF0aW9uKXtyZXR1cm47fWlmKF90aGlzMzkuYXBwJiZtdXRhdGlvbi5yZW1vdmVkTm9kZXMubGVuZ3RoPjAmJihbXS5pbmRleE9mLmNhbGwobXV0YXRpb24ucmVtb3ZlZE5vZGVzLF90aGlzMzkuYXBwLiRlbCk+LTF8fFtdLmluZGV4T2YuY2FsbChtdXRhdGlvbi5yZW1vdmVkTm9kZXMsX3RoaXMzOS5fY29udGFpbmVyKT4tMSkpe190aGlzMzkuYXBwLiRyb290LiRkZXN0cm95KCk7X3RoaXMzOS5hcHA9bnVsbDt9fSk7fS8qKlxuICAgICAqIENyZWF0ZSBwaWNrZXIgYXBwbGljYXRpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSAge29iamVjdH0gaW5pdGlhbFN0YXRlT3ZlcnJpZGVzXG4gICAgICogQHBhcmFtICB7ZnVuY3Rpb259IG9uRG9uZVxuICAgICAqIEBwYXJhbSAge2Z1bmN0aW9ufSBvbkNhbmNlbFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovfSx7a2V5OlwiX2NyZWF0ZVBpY2tlclwiLHZhbHVlOmZ1bmN0aW9uIF9jcmVhdGVQaWNrZXIoaW5pdGlhbFN0YXRlT3ZlcnJpZGVzLG9uRG9uZSxvbkNhbmNlbCl7dmFyIF90aGlzNDA9dGhpczt2YXIgdD10aGlzO3ZhciBjb25maWc9dGhpcy5jb25maWc7dmFyIG5vU2Nyb2xsPWNvbmZpZy5kaXNwbGF5TW9kZT09PURJU1BMQVlfTU9ERV9PVkVSTEFZO3ZhciByb290PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO2lmKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbmZpZy5yb290SWQpKXtjb25zb2xlLndhcm4oJ1BpY2tlciBDcmVhdGU6IEFwcGxpY2F0aW9uIG1vdW50IHBvaW50IGFscmVhZHkgZXhpc3RzJyk7cmV0dXJuIHQuYXBwO310aGlzLl9jb250YWluZXIuYXBwZW5kQ2hpbGQocm9vdCk7cmV0dXJuIG5ldyBWdWUoe2VsOnJvb3Qsc3RvcmU6Y3JlYXRlU3RvcmUodGhpcy5hcGlDbGllbnQsY29uZmlnLG9uRG9uZSxvbkNhbmNlbCxpbml0aWFsU3RhdGVPdmVycmlkZXMpLHJlbmRlcjpmdW5jdGlvbiByZW5kZXIoaCl7cmV0dXJuIGgoX3RoaXM0MC5fY29tcG9uZW50KTt9LGNyZWF0ZWQ6ZnVuY3Rpb24gY3JlYXRlZCgpe3QuYXBwPXRoaXM7aWYobm9TY3JvbGwpe2RvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnZnNwLXBpY2tlci0tbm8tc2Nyb2xsJyk7fXRoaXMuJHRyYW5zbGF0ZS5zZXRMYW5nKGNvbmZpZy5sYW5nKTtpZih0Ll9tdXRhdGlvbk9ic2VydmVyKXt0Ll9tdXRhdGlvbk9ic2VydmVyLm9ic2VydmUodC5fY29udGFpbmVyLnBhcmVudE5vZGUse2NoaWxkTGlzdDp0cnVlfSk7fWlmKHQuX29uT3Blbil7dC5fb25PcGVuKHQpO319LGRlc3Ryb3llZDpmdW5jdGlvbiBkZXN0cm95ZWQoKXtpZih0Ll9tdXRhdGlvbk9ic2VydmVyKXt0Ll9tdXRhdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKTt9ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdmc3AtcGlja2VyLS1uby1zY3JvbGwnKTt2YXIgZWw9dGhpcy4kZWw7aWYoZWwmJmVsLnBhcmVudE5vZGUpe2VsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO31pZih0Ll9vbkNsb3NlKXt0Ll9vbkNsb3NlKCk7fS8vIENsZWFuIHVwIHZ1ZXhcbnRoaXMuJHN0b3JlLmNvbW1pdCgnUkVTRVRfQ0xPVUQnKTt0aGlzLiRzdG9yZS5jb21taXQoJ0NMRUFSX0ZJTEVTJyk7dC5hcHA9bnVsbDt9fSk7fS8qKlxuICAgICAqIHJldHVybnMgSHRtbE5vZGUgd2l0aCBnaXZlbiBzZWxlY3RvciBvciB1bmRlZmluZWQgaWYgbm90IGZvdW5kIHdoZW4gZG9Ob3RUaHJvdyBpcyBlbmFibGVkXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IE5vZGV9IGVsXG4gICAgICogQHBhcmFtIHtib29sZWFufSBkb05vdFRocm93XG4gICAgICogQHByaXZhdGVcbiAgICAgKi99LHtrZXk6XCJfZ2V0RWxlbWVudFwiLHZhbHVlOmZ1bmN0aW9uIF9nZXRFbGVtZW50KGVsLGRvTm90VGhyb3cpe3ZhciB0b1JldHVybjtpZighZWwmJiFkb05vdFRocm93KXt0aHJvdyBuZXcgRXJyb3IoJ0ZpbGVzdGFjayBQaWNrZXIgSW5pdGlhbGl6ZTogQ29udGFpbmVyIGlzIG5vdCBkZWZpbmVkJyk7fWlmKHR5cGVvZiBlbD09PSdzdHJpbmcnKXtpZihlbC5pbmRleE9mKCcuJykhPT0wJiZlbC5pbmRleE9mKCcjJykhPT0wKXtlbD1cIiNcIi5jb25jYXQoZWwpO310b1JldHVybj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKTt9ZWxzZXt0b1JldHVybj1kb2N1bWVudC5ib2R5LmNvbnRhaW5zKGVsKT9lbDpmYWxzZTt9aWYoIXRvUmV0dXJuJiYhZG9Ob3RUaHJvdyl7dGhyb3cgbmV3IEVycm9yKFwiRmlsZXN0YWNrIFBpY2tlciBJbml0aWFsaXplOiBDb250YWluZXIgd2l0aCAtIFwiLmNvbmNhdChlbCxcIiBub3QgZm91bmQgaW4gZG9jdW1lbnRcIikpO31yZXR1cm4gdG9SZXR1cm47fS8qKlxuICAgICAqIExvYWQgYWRkaXRpb25hbCBjc3MgZmlsZSBhbmQgYWRkIGl0IHRvIHBpY2tlclxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL30se2tleTpcIl9sb2FkQ3NzTWF5YmVcIix2YWx1ZTpmdW5jdGlvbiBfbG9hZENzc01heWJlKCl7aWYodGhpcy5jb25maWcubG9hZENzcz09PWZhbHNlKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7fS8vIEFwcGx5IG1vZGFsIHNpemUgc3R5bGVcbmlmKHRoaXMuY29uZmlnLm1vZGFsU2l6ZSl7dmFyIF9zdHlsZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO19zdHlsZS5pbm5lckhUTUw9XCJcXG4gICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDk4MHB4KSB7XFxuICAgICAgICAgIC5mc3AtcGlja2VyIC5mc3AtbW9kYWwge1xcbiAgICAgICAgICAgIHdpZHRoOiBcIi5jb25jYXQodGhpcy5jb25maWcubW9kYWxTaXplWzBdLFwicHggIWltcG9ydGFudDtcXG4gICAgICAgICAgICBoZWlnaHQ6IFwiKS5jb25jYXQodGhpcy5jb25maWcubW9kYWxTaXplWzFdLFwicHggIWltcG9ydGFudDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIFwiKS50cmltKCk7ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChfc3R5bGUpO312YXIgdXJsPXRoaXMuY29uZmlnLmxvYWRDc3M7dmFyIGNuYW1lPXRoaXMuYXBpQ2xpZW50LnNlc3Npb24uY25hbWU7Ly8gaWYgdGhlcmUgaXMgYW55IGNuYW1lIGNvbmZpZ3VyZWQgLSByZXBsYWNlIGZpbGVzdGFjayBkb21haW4gd2l0aCBjbmFtZSBhbmQgbG9hZCBzdGF0aWMgZnJvbSB0aGF0IGNuYW1lXG5pZihjbmFtZSYmY25hbWUubGVuZ3RoKXt1cmw9dXJsLnJlcGxhY2UoJ2ZpbGVzdGFja2FwaS5jb20nLGNuYW1lKTt9cmV0dXJuIGxvYWRDc3ModXJsKTt9fV0pO3JldHVybiBQaWNrZXI7fSgpO3ZhciBNT0RVTEVfSUQ9a25vd25Nb2R1bGVJZHMucGlja2VyO3JlZ2lzdGVyUmVhZHlNb2R1bGUoUGlja2VyLE1PRFVMRV9JRCk7cmV0dXJuIFBpY2tlcjt9KCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waWNrZXIuanMubWFwXG4iXX0=
